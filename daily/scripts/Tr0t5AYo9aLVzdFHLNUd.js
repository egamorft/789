(function() {
    'use strict';
    angular.module('app.traditional.statement', ['datatables']).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.traditional.statement', {
            abstract: true,
            url: '/statement'
        }).state('app.traditional.statement.win-lose', {
            url: '/win-lose',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/statement/winLose/winLose.html',
                },
                'portView@app.traditional.statement.win-lose': {
                    controller: 'traditionalWinLoseCtrl as vm'
                }
            }
        }).state('app.traditional.statement.win-lose.general', {
            url: '/general?from&to&uid&level&name&game&bet&set',
            views: {
                'portView@app.traditional.statement.win-lose': {
                    templateUrl: 'app/main/traditional/statement/winLose/general/general.html',
                    controller: 'traditionalGeneralCtrl as vm'
                },
                'navigation@app.traditional.statement.win-lose': {
                    templateUrl: 'app/main/traditional/statement/winLose/navigation/navigation.html',
                    controller: 'traditionalNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.win-lose.classification', {
            url: '/classification?from&to&game',
            views: {
                'portView@app.traditional.statement.win-lose': {
                    templateUrl: 'app/main/traditional/statement/winLose/classification/classification.html',
                    controller: 'traditionalClassificationCtrl as vm'
                },
                'navigation@app.traditional.statement.win-lose': {
                    templateUrl: 'app/main/traditional/statement/winLose/navigation/navigation.html',
                    controller: 'traditionalNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.win-lose.member', {
            url: '/member?from&to&uid&name&game&bet',
            views: {
                'portView@app.traditional.statement.win-lose': {
                    templateUrl: 'app/main/traditional/statement/winLose/member/member.html',
                    controller: 'traditionalMemberCtrl as vm'
                }
            }
        }).state('app.traditional.statement.outstanding', {
            url: '/outstanding',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/statement/outstanding/outstanding.html'
                },
                'portView@app.traditional.statement.outstanding': {
                    controller: 'traditionalOutstandingCtrl as vm'
                }
            }
        }).state('app.traditional.statement.outstanding.general', {
            url: '/general?game&bet&uid&name&level&matchId',
            views: {
                'portView@app.traditional.statement.outstanding': {
                    templateUrl: 'app/main/traditional/statement/outstanding/general/general.html',
                    controller: 'traditionalOutstandingGeneralCtrl as vm'
                },
                'navigation@app.traditional.statement.outstanding': {
                    templateUrl: 'app/main/traditional/statement/outstanding/navigation/navigation.html',
                    controller: 'traditionalOutstandingNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.outstanding.member', {
            url: '/member?game&bet&uid&name',
            views: {
                'portView@app.traditional.statement.outstanding': {
                    templateUrl: 'app/main/traditional/statement/outstanding/member/member.html',
                    controller: 'traditionalMemberOutstandingCtrl as vm'
                }
            }
        }).state('app.traditional.statement.outstanding.classification', {
            url: '/classification?game&uid&name&level&match&matchId',
            views: {
                'portView@app.traditional.statement.outstanding': {
                    templateUrl: 'app/main/traditional/statement/outstanding/classification/classification.html',
                    controller: 'traditionalOutstandingClassificationCtrl as vm'
                },
                'navigation@app.traditional.statement.outstanding': {
                    templateUrl: 'app/main/traditional/statement/outstanding/navigation/navigation.html',
                    controller: 'traditionalOutstandingNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.member', {
            url: '/member',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/statement/member/member.html',
                },
                'portView@app.traditional.statement.member': {
                    controller: 'traditionalMemberController as vm'
                }
            }
        }).state('app.traditional.statement.member.executive', {
            url: '/?from&to&game',
            views: {
                'portView@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/executive/executive.html',
                    controller: 'traditionalMemberExecutiveCtrl as vm'
                },
                'navigation@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/navigation/navigation.html',
                    controller: 'traditionalMemberNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.member.byMember', {
            url: '/byMember?from&to&uid&name&game',
            views: {
                'portView@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/byMember/byMember.html',
                    controller: 'traditionalMemberByMemberCtrl as vm'
                },
                'navigation@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/navigation/navigation.html',
                    controller: 'traditionalMemberNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.member.details', {
            url: '/details?from&to&game&bet&uid&name',
            views: {
                'portView@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/details/details.html',
                    controller: 'traditionalMemberDetailsCtrl as vm'
                }
            }
        }).state('app.traditional.statement.member.general', {
            url: '/general?from&to&uid&name&level&game',
            views: {
                'portView@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/general/general.html',
                    controller: 'traditionalMemberGeneralCtrl as vm'
                },
                'navigation@app.traditional.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/navigation/navigation.html',
                    controller: 'traditionalMemberNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.canceled', {
            url: '/canceled',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/statement/canceled/canceled.html'
                },
                'portView@app.traditional.statement.canceled': {
                    controller: 'traditionalCanceledCtrl as vm'
                }
            }
        }).state('app.traditional.statement.canceled.general', {
            url: '/general?from&to&game&uid&name&level',
            views: {
                'portView@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/general/general.html',
                    controller: 'traditionalCanceledGeneralCtrl as vm'
                },
                'navigation@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/navigation/navigation.html',
                    controller: 'traditionalCanceledNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.canceled.member', {
            url: '/member?from&to&game&bet&uid&name',
            views: {
                'portView@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/member/member.html',
                    controller: 'traditionalCanceledMemberCtrl as vm'
                }
            }
        }).state('app.traditional.statement.canceled.classification', {
            url: '/classification?from&to&game',
            views: {
                'portView@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/classification/classification.html',
                    controller: 'traditionalCanceledClassificationCtrl as vm'
                },
                'navigation@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/navigation/navigation.html',
                    controller: 'traditionalCanceledNavigationCtrl as vm'
                }
            }
        }).state('app.traditional.statement.canceled.classify', {
            url: '/classify?from&to&game&bet',
            views: {
                'portView@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/classify/classify.html',
                    controller: 'traditionalCanceledClassifyCtrl as vm'
                },
                'navigation@app.traditional.statement.canceled': {
                    templateUrl: 'app/main/traditional/statement/canceled/navigation/navigation.html',
                    controller: 'traditionalCanceledNavigationCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberCtrl', traditionalMemberCtrl);

    function traditionalMemberCtrl($rootScope, $scope, $state, $location, $timeout, $mdDialog, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, ]
        };
        vm.loadMemberReport = loadMemberReport;
        vm.viewIp = viewIp;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.BetType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        if (isNaN(vm.data.BetType)) {
            delete vm.data.BetType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.Traditional.Statement.getTicketItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalNavigationCtrl', traditionalNavigationCtrl);

    function traditionalNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, msUtils) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.jumpTo = jumpTo;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1', '2', '3', '4', '5'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.traditional.statement.win-lose.general' : 'app.traditional.statement.win-lose.classification';
            $state.go(appUrl, {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                game: vm.selected.toString(),
                set: ''
            }, {
                inherit: true,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });

        function jumpTo(item) {
            $state.go("app.traditional.statement.win-lose.general", {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                uid: item.uid,
                level: item.level,
                name: item.name
            })
        }
        vm.breadcrumbs = sessionStorage.getItem('breadcrumb') === null ? [] : JSON.parse(sessionStorage.getItem('breadcrumb'));
        $scope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
            if (Object.keys(fromParams).length) {
                if (parseInt(fromParams.set) === 0 || $location.search().level === undefined) {
                    vm.breadcrumbs = [];
                    sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                } else {
                    if (fromParams.level === undefined && fromParams.set === undefined) {
                        vm.breadcrumbs = [{
                            uid: '',
                            level: '',
                            name: $rootScope.User.Username
                        }];
                        sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                    }
                    if (fromParams.level !== undefined) {
                        if (vm.breadcrumbs.filter(function(bc) {
                                return bc.level === fromParams.level
                            }).length || fromParams.level > $location.search().level) {
                            vm.breadcrumbs = vm.breadcrumbs.filter(function(bc) {
                                return (parseInt(bc.level) < parseInt($location.search().level)) || bc.level === ''
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        } else {
                            vm.breadcrumbs.push({
                                uid: fromParams.uid,
                                level: fromParams.level,
                                name: fromParams.name
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        }
                    }
                }
            } else {
                vm.breadcrumbs = [];
                sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
            }
        })
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalGeneralCtrl', traditionalGeneralCtrl);

    function traditionalGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? [0, 1, 2, 3, 4, 5] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.traditional.statement.win-lose.general", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.traditional.statement.win-lose.member", {
                from: vm.report.from,
                to: vm.report.to,
                game: item.GameType,
                bet: item.BetType,
                uid: vm.report.uid,
                name: vm.report.name
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            network.Reporting.Traditional.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.Traditional.Statement.getPlayerReportGroupByBetType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        Company: {
                            Income: item.Company.Income,
                            WinLose: item.Company.WinLose,
                            Percent: {
                                Income: (item.Company.Income / item.Player.Amount),
                                WinLose: (-item.Company.WinLose / item.Player.WinLose)
                            }
                        }
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.Company.Income += item.Company.Income;
                output.Sum.Player.Company.WinLose += item.Company.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalClassificationCtrl', traditionalClassificationCtrl);

    function traditionalClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.startDate,
            To: vm.report.endDate,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Traditional.Statement.getUserReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose,
                                Company: {
                                    Income: bet.Company.Income,
                                    WinLose: bet.Company.WinLose,
                                    Percent: {
                                        Income: (bet.Company.Income / bet.Player.Amount),
                                        WinLose: (-bet.Company.WinLose / bet.Player.WinLose)
                                    }
                                }
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            Company: (bet.Commission + bet.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        My: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            My: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.My.WinLose += bet.WinLose;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.My.WinLose += bet.WinLose;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            }
        }

        function classify(GameType, BetType) {
            $state.go('app.traditional.statement.win-lose.general', {
                from: vm.report.startDate,
                to: vm.report.endDate,
                game: GameType,
                bet: BetType
            })
        }
    }
})();
Array.prototype.groupBy = function(hash) {
    var _hash = hash ? hash : function(o) {
        return o;
    };
    var _map = {};
    var put = function(map, key, value) {
        if (!map[_hash(key)]) {
            map[_hash(key)] = {};
            map[_hash(key)].group = [];
            map[_hash(key)].key = key;
        }
        map[_hash(key)].group.push(value);
    };
    this.map(function(obj) {
        put(_map, obj, obj);
    });
    return Object.keys(_map).map(function(key) {
        return {
            group: _map[key].group
        };
    });
};
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberNavigationCtrl', traditionalMemberNavigationCtrl);

    function traditionalMemberNavigationCtrl($rootScope, $state, $scope, $location, network, $q, msUtils) {
        var vm = this;
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.report = {
            category: 0,
            selected: []
        };

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1', '2', '3', '4', '5'] : $location.search().game.split(',');
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.username = $location.search().name;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name,
                Level: 9
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
                $scope.$digest();
            })
        }
        vm.searchText = '';

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 9
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.username = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.username = '';
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            if (!vm.username) {
                $state.go('app.traditional.statement.member.executive', {
                    from: moment(vm.report.from).format('YYYY-MM-DD'),
                    to: moment(vm.report.to).format('YYYY-MM-DD'),
                    game: vm.selected.toString()
                }, {
                    reload: true
                })
            } else {
                if (parseInt(vm.report.category) === 0) {
                    $state.go('app.traditional.statement.member.general', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        name: vm.username,
                        uid: vm.matchId,
                        level: vm.matchLevel,
                        game: vm.selected.toString()
                    }, {
                        reload: true
                    })
                } else {
                    $state.go('app.traditional.statement.member.byMember', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        uid: vm.matchId,
                        name: vm.username
                    }, {
                        reload: true
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberGeneralCtrl', traditionalMemberGeneralCtrl);

    function traditionalMemberGeneralCtrl($rootScope, $scope, $state, $location, network) {
        var vm = this;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.report.level = $location.search().level;
        vm.send = {};
        vm.send.From = vm.report.from;
        vm.send.To = vm.report.to;
        vm.send.UserIds = [vm.report.uid];
        vm.send.GameTypes = vm.report.game.split(',');
        network.Reporting.Traditional.PlayerWinLose.getPlayerReportGroupByUserTerm(vm.send).then(function(response) {
            vm.response = response;
            $scope.$digest();
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberDetailsCtrl', traditionalMemberDetailsCtrl);

    function traditionalMemberDetailsCtrl($rootScope, $scope, $location, network) {
        var vm = this;
        vm.loadMemberDetails = loadMemberDetails;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game;
        vm.report.bet = parseInt($location.search().bet);
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.loadMemberDetails();
        vm.memberDetails = [];

        function loadMemberDetails(ltId) {
            vm.submitting = true;
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                GameType: vm.report.game,
                BetType: vm.report.bet,
                Limit: 100
            };
            data.LastId = ltId === undefined ? '' : ltId;
            network.Reporting.Traditional.Statement.getTicketItems(data).then(function(response) {
                vm.hasRecord = response.length === 100;
                vm.submitting = false;
                vm.memberDetails = vm.memberDetails.concat(response);
                $scope.$digest();
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberExecutiveCtrl', traditionalMemberExecutiveCtrl);

    function traditionalMemberExecutiveCtrl($rootScope, $scope, $location, $state, network) {
        var vm = this;
        vm.loadMemberWinLose = loadMemberWinLose;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.memberWinLoses = [];
        vm.Excludes = [];
        vm.submitting = true;

        function loadMemberWinLose(page) {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            network.Reporting.Traditional.PlayerWinLose.getMyPlayersReportGroupByUser(data).then(function(response) {
                vm.memberWinLoses = vm.memberWinLoses.concat(response);
                vm.hasRecord = response.length === data.Size;
                vm.nextPage = data.Page + 1;
                vm.submitting = false;
                $scope.$digest();
            })
        }
        vm.loadMemberWinLose();

        function viewReport(item) {
            $state.go('app.traditional.statement.member.byMember', {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                name: item.Username,
                game: vm.report.game
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('memberClassificationController', memberClassificationController);

    function memberClassificationController($rootScope, $state, $location, network) {
        var vm = this;
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.name = $location.search().name;
        vm.send = {};
        vm.send.StartDate = vm.report.startDate;
        vm.send.EndDate = vm.report.endDate;
        vm.send.GameTypes = vm.report.game.split(',');
        vm.send.FindUsers = [vm.report.name];
        vm.send.ListType = 1;
        network.POSTdata('api/report/history/me/memberwinlose/find', vm.send).then(function(response) {
            vm.response = response;
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalOutstandingNavigationCtrl', traditionalOutstandingNavigationCtrl);

    function traditionalOutstandingNavigationCtrl($rootScope, $state, $timeout, $mdDialog, $scope, $location, network, $q, AuthService, msUtils) {
        let vm = this;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.outAlarmSetting = outAlarmSetting;
        vm.checkConfig = checkConfig;
        vm.isCompany = AuthService.isCompany();
        vm.report = {
            category: 0,
            selected: []
        };
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1', '2', '3', '4', '5'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
            })
        }

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.matchName = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.matchName = '';
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            var appUrl = parseInt(vm.report.category) === 0 ? 'app.traditional.statement.outstanding.general' : 'app.traditional.statement.outstanding.classification';
            $state.go(appUrl, {
                game: vm.selected.toString(),
                name: vm.matchName,
                matchId: vm.matchId,
                level: vm.matchLevel
            }, {
                reload: true
            })
        }

        function outAlarmSetting($event) {
            $mdDialog.show({
                controller: alarmSettingCtrl,
                templateUrl: 'app/main/traditional/statement/outstanding/navigation/alarm-setting-dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {}
            }).then(function(answer) {
                vm.checkConfig();
            }, function() {});

            function alarmSettingCtrl($scope, $mdDialog) {
                $scope.close = function() {
                    $mdDialog.cancel();
                };
                let key = $state.current.name;
                $scope.initSetting = function() {
                    $scope.alarm = {
                        Amount: 0,
                        Excludes: ''
                    }
                }
                let lastSetting = JSON.parse(localStorage.getItem(key));
                if (typeof lastSetting === 'object' && lastSetting !== null) {
                    $scope.alarm = lastSetting
                } else {
                    $scope.initSetting();
                }
                $scope.updateRefresh = function() {
                    if ($scope.alarm.Refresh !== 0 && $scope.alarm.Refresh < 10) {
                        $scope.alarm.Refresh = 10
                    }
                }
                $scope.update = function() {
                    if ($scope.alarm.Refresh !== 0 && $scope.alarm.Refresh < 10) {
                        $scope.alarm.Refresh = 10
                    }
                    $scope.alarm.Excludes = $scope.alarm.Excludes.toLowerCase().replace(/ /g, '');
                    localStorage.setItem(key, JSON.stringify($scope.alarm))
                    $mdDialog.hide();
                }
                $scope.cancel = function() {
                    $scope.initSetting();
                    $scope.update();
                    $mdDialog.hide();
                }
                console.log(lastSetting)
            }
        }
        vm.checkConfig();

        function checkConfig() {
            if ($rootScope.User.Level !== 1) {
                $rootScope.alsc = false;
                return
            }
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if (typeof lastSetting === 'object' && lastSetting !== null) {
                $rootScope.alsc = (lastSetting.Refresh !== 0 && lastSetting.Amount !== 0)
            } else {
                $rootScope.alsc = false;
            }
            if ($rootScope.alsc) {
                vm.refresh = $timeout(function() {
                    vm.loadReport();
                }, lastSetting.Refresh * 1000)
            }
            console.log($rootScope.alsc)
        }
        $scope.$on('$destroy', function() {
            $timeout.cancel(vm.refresh);
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberByMemberCtrl', traditionalMemberByMemberCtrl);

    function traditionalMemberByMemberCtrl($rootScope, $scope, $location, $state, network) {
        var vm = this;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            UserId: vm.report.uid,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Traditional.Statement.getPlayerReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            vm.responseByMember = response;
            $scope.$digest();
        });

        function viewReport(item) {
            $state.go('app.traditional.statement.member.details', {
                from: vm.report.from,
                to: vm.report.to,
                uid: vm.report.uid,
                game: item.GameType,
                bet: item.BetType,
                name: vm.report.name
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalOutstandingClassificationCtrl', traditionalOutstandingClassificationCtrl);

    function traditionalOutstandingClassificationCtrl($rootScope, $location, $state, $timeout, network, msUtils) {
        var vm = this;
        $rootScope.$broadcast('submitting', true);
        vm.classify = classify;
        vm.report = {};
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? '' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.matchId = $location.search().matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        network.Reporting.Traditional.Outstanding.getUserReportGroupByBetType({
            UserId: vm.report.uid,
            GameTypes: vm.report.game.split(',')
        }).then(function(response) {
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            vm.classifications = [];
            if (vm.report.level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Point: 0,
                        Amount: 0
                    },
                    Agent: {
                        Commission: 0,
                        Income: 0
                    },
                    Company: {
                        Commission: 0,
                        Income: 0
                    }
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Point: bet.Player.Point,
                                Amount: bet.Player.Amount
                            },
                            Agent: {
                                Commission: bet.Descendant.Commission,
                                Income: bet.Descendant.Income
                            },
                            Company: {
                                Commission: bet.Commission,
                                Income: bet.Amount
                            }
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Point += bet.Player.Point;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Income += bet.Descendant.Income;
                        oGame.SumByGame.Company.Commission += bet.Commission;
                        oGame.SumByGame.Company.Income += bet.Amount;
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Point += bet.Player.Point;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Income += bet.Descendant.Income;
                        vm.SumTotal.Company.Commission += bet.Commission;
                        vm.SumTotal.Company.Income += bet.Amount;
                    });
                    vm.classifications.push(oGame)
                });
            } else if (vm.report.level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Point: 0,
                        Amount: 0
                    },
                    Agent: {
                        Commission: 0,
                        Income: 0
                    },
                    Company: {
                        Commission: 0,
                        Income: 0
                    }
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Point: bet.Player.Point,
                                Amount: bet.Player.Amount
                            },
                            Agent: {
                                Commission: bet.Commission,
                                Income: bet.Amount
                            },
                            Company: {
                                Commission: bet.Ancestor.Commission,
                                Income: bet.Ancestor.Income
                            }
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Point += bet.Player.Point;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Income += bet.Amount;
                        oGame.SumByGame.Company.Commission += bet.Ancestor.Commission;
                        oGame.SumByGame.Company.Income += bet.Ancestor.Income;
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Income += bet.Amount;
                        vm.SumTotal.Company.Commission += bet.Ancestor.Commission;
                        vm.SumTotal.Company.Income += bet.Ancestor.Income;
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Point: 0,
                        Amount: 0
                    },
                    Agent: {
                        Commission: 0,
                        Income: 0,
                    },
                    My: {
                        Commission: 0,
                        Income: 0
                    },
                    Company: {
                        Commission: 0,
                        Income: 0
                    }
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        My: {
                            Commission: 0,
                            Income: 0,
                        },
                        Company: {
                            Commission: 0,
                            Income: 0,
                        }
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Point: bet.Player.Point,
                                Amount: bet.Player.Amount
                            },
                            Agent: {
                                Commission: bet.Descendant.Commission,
                                Income: bet.Descendant.Income
                            },
                            My: {
                                Commission: bet.Commission,
                                Income: bet.Amount
                            },
                            Company: {
                                Commission: bet.Ancestor.Commission,
                                Income: bet.Ancestor.Income
                            }
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Point += bet.Player.Point;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Income += bet.Descendant.Income;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Income += bet.Amount;
                        oGame.SumByGame.Company.Commission += bet.Ancestor.Commission;
                        oGame.SumByGame.Company.Income += bet.Ancestor.Income;
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Point += bet.Player.Point;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Income += bet.Descendant.Income;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Income += bet.Amount;
                        vm.SumTotal.Company.Commission += bet.Ancestor.Commission;
                        vm.SumTotal.Company.Income += bet.Ancestor.Income;
                    });
                    vm.classifications.push(oGame)
                })
            }
        });

        function classify(item) {
            $state.go('app.traditional.statement.outstanding.general', {
                uid: vm.report.uid,
                name: vm.report.name,
                level: vm.report.level,
                game: item.GameType,
                bet: item.BetType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberOutstandingCtrl', traditionalMemberOutstandingCtrl);

    function traditionalMemberOutstandingCtrl($rootScope, $scope, $state, $location, $mdDialog, network) {
        let vm = this;
        vm.loadMemberReport = loadMemberReport;
        vm.viewIp = viewIp;
        vm.report = {};
        vm.report.game = $location.search().game;
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.members = [];
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            retrieve: true,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, {
                targets: 4,
                orderable: false
            }]
        };
        vm.data = {
            UserId: vm.report.uid,
            GameType: vm.report.game,
            BetType: vm.report.bet,
            Limit: 100
        };
        vm.loadMemberReport();

        function loadMemberReport(ltId) {
            vm.data.LastId = ltId === undefined ? '' : ltId;
            vm.submitting = true;
            network.Reporting.Traditional.Outstanding.getTicketItems(vm.data).then(function(response) {
                vm.hasRecord = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                vm.submitting = false;
                $scope.$digest();
            })
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalOutstandingGeneralCtrl', traditionalOutstandingGeneralCtrl);

    function traditionalOutstandingGeneralCtrl($rootScope, $state, $scope, $timeout, $location, network, msUtils) {
        let vm = this;
        vm.viewReport = viewReport;
        vm.memberReport = memberReport;
        vm.getAgencyReport = getAgencyReport;
        vm.getMemberReport = getMemberReport;
        vm.checkAlarmAgent = checkAlarmAgent;
        vm.alarm = alarm;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.bet = $location.search().game === undefined ? '' : $location.search().bet;
        vm.report.uid = $location.search().uid === undefined ? '' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.matchId = $location.search().matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 1,
                orderable: false
            }]
        };
        vm.outstandingReports = [];

        function getAgencyReport(page) {
            let data = {
                ParentUserId: vm.report.uid,
                GameTypes: vm.report.game.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            if (vm.report.bet) {
                data.BetTypes = [vm.report.bet]
            }
            network.Reporting.Traditional.Outstanding.getChildrenReportGroupByUser(data).then(function(response) {
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
                vm.hasRecord = response.length === 50;
                vm.page = data.Page + 1;
                vm.outstandingReports = vm.outstandingReports.concat(response);
                if (vm.report.level === 1) {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(vm.outstandingReports, function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Point += item.Player.Point;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent.Commission += (item.Descendant.Commission + item.Commission);
                        vm.Total.Agent.Income += (item.Descendant.Income + item.Amount);
                        vm.Total.Company.Commission += item.Ancestor.Commission;
                        vm.Total.Company.Income += item.Ancestor.Income;
                        vm.checkAlarmAgent(item)
                    });
                } else {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        My: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(vm.outstandingReports, function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Point += item.Player.Point;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent.Commission += (item.Descendant.Commission + item.Commission);
                        vm.Total.Agent.Income += (item.Descendant.Income + item.Amount);
                        vm.Total.My.Commission += item.Parent.Commission;
                        vm.Total.My.Income += item.Parent.Income;
                        vm.Total.Company.Income += ((item.Ancestor.Income - item.Parent.Income) + (item.Ancestor.Commission - item.Parent.Commission));
                        vm.checkAlarmAgent(item)
                    });
                }
                vm.alarm(vm.outstandingReports);
                $scope.$digest();
            });
        }

        function getMemberReport() {
            let data = {
                UserId: vm.report.uid,
                GameTypes: vm.report.game.split(',')
            };
            if (vm.report.bet) {
                data.BetTypes = [vm.report.bet]
            }
            network.Reporting.Traditional.Outstanding.getPlayerReportGroupByBetType(data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.outstandingReports = response;
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            });
        }
        if (vm.report.level !== 9) {
            vm.getAgencyReport()
        } else {
            vm.getMemberReport()
        }

        function viewReport(item) {
            $state.go('app.traditional.statement.outstanding.general', {
                game: vm.report.game,
                uid: item.UserId,
                level: item.Level,
                name: item.Username,
                matchId: '',
                match: '',
            })
        }

        function memberReport(item, name) {
            $state.go('app.traditional.statement.outstanding.member', {
                game: item.GameType,
                bet: item.BetType,
                uid: vm.report.uid,
                name: name
            });
        }

        function checkAlarmAgent(record) {
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if ($rootScope.alsc && !msUtils.exists(record.Username.toLowerCase(), lastSetting.Excludes.split(",")) && ((record.Player.Amount > lastSetting.Amount && lastSetting.Amount !== 0))) {
                record.over = true
            }
        }

        function alarm(Records) {
            let buzz = 0
            Records.map(function(item) {
                if (item.over) {
                    buzz++
                }
            })
            if (buzz !== 0) {
                let audio = new Audio('/assets/seatbelt-sound.mp3');
                audio.play();
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalCanceledGeneralCtrl', traditionalCanceledGeneralCtrl);

    function traditionalCanceledGeneralCtrl($rootScope, $scope, $timeout, $location, $state, network) {
        var vm = this;
        vm.getChildrenReport = getChildrenReport;
        vm.getPlayerReport = getPlayerReport;
        vm.viewReport = viewReport;
        vm.memberReport = memberReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game.split(',');
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            vm.getChildrenReport()
        } else {
            vm.getPlayerReport()
        }

        function getChildrenReport() {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100
            };
            if (vm.report.uid !== undefined) {
                data.ParentUserId = vm.report.uid
            }
            $rootScope.$broadcast('submitting', true);
            network.Reporting.Traditional.Cancelation.getChildrenReportGroupByUser(data).then(function(response) {
                vm.response = response;
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            });
        }

        function getPlayerReport() {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid
            };
            $rootScope.$broadcast('submitting', true);
            network.Reporting.Traditional.Cancelation.getPlayerReportGroupByBetType(data).then(function(response) {
                vm.response = response;
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function viewReport(item) {
            $state.go('app.traditional.statement.canceled.general', {
                uid: item.UserId,
                name: item.Username,
                level: item.Level
            })
        }

        function memberReport(item, name) {
            $state.go('app.traditional.statement.canceled.member', {
                uid: $location.search().uid,
                name: name,
                game: item.GameType,
                bet: item.BetType,
                from: vm.report.from,
                to: vm.report.to
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalCanceledNavigationCtrl', traditionalCanceledNavigationCtrl);

    function traditionalCanceledNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, msUtils) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.jumpTo = jumpTo;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.report.selected = $location.search().game === undefined ? ['0', '1', '2', '3', '4', '5'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.traditional.statement.canceled.general' : 'app.traditional.statement.canceled.classification';
            $state.go(appUrl, {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                game: vm.selected.toString()
            }, {
                inherit: false,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });

        function jumpTo(item) {
            $state.go("app.traditional.statement.canceled.general", {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                uid: item.uid,
                level: item.level,
                name: item.name
            })
        }
        vm.breadcrumbs = sessionStorage.getItem('breadcrumb') === null ? [] : JSON.parse(sessionStorage.getItem('breadcrumb'));
        $scope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
            if (Object.keys(fromParams).length) {
                if (parseInt(fromParams.set) === 0 || $location.search().level === undefined) {
                    vm.breadcrumbs = [];
                    sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                } else {
                    if (fromParams.level === undefined && fromParams.set === undefined) {
                        vm.breadcrumbs = [{
                            uid: '',
                            level: '',
                            name: $rootScope.User.Username
                        }];
                        sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                    }
                    if (fromParams.level !== undefined) {
                        if (vm.breadcrumbs.filter(function(bc) {
                                return bc.level === fromParams.level
                            }).length || fromParams.level > $location.search().level) {
                            vm.breadcrumbs = vm.breadcrumbs.filter(function(bc) {
                                return (parseInt(bc.level) < parseInt($location.search().level)) || bc.level === ''
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        } else {
                            vm.breadcrumbs.push({
                                uid: fromParams.uid,
                                level: fromParams.level,
                                name: fromParams.name
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        }
                    }
                }
            } else {
                vm.breadcrumbs = [];
                sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalCanceledMemberCtrl', traditionalCanceledMemberCtrl);

    function traditionalCanceledMemberCtrl($rootScope, $scope, $state, $location, network) {
        var vm = this;
        vm.loadMemberReport = loadMemberReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game;
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            vm.submitting = true;
            ltID = ltID === undefined ? '' : ltID;
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                GameType: vm.report.game,
                BetType: vm.report.bet,
                Limit: 50,
                LastId: ltID
            };
            network.Reporting.Traditional.Cancelation.getTicketItems(data).then(function(response) {
                vm.loadMore = response.length === data.Limit;
                vm.members.push.apply(vm.members, response);
                vm.submitting = false;
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalCanceledClassifyCtrl', traditionalCanceledClassifyCtrl);

    function traditionalCanceledClassifyCtrl($rootScope, $scope, $timeout, $state, $location, network) {
        var vm = this;
        vm.memberReport = memberReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game;
        vm.report.bet = $location.search().bet;
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            GameType: vm.report.game,
            BetType: vm.report.bet
        };
        $rootScope.$broadcast('submitting', true);
        network.Reporting.Traditional.Cancelation.getChildrenReportGroupByUser(data).then(function(response) {
            vm.classify = response;
            $scope.$digest();
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
        });

        function memberReport(item) {
            $state.go('app.traditional.statement.canceled.general', {
                uid: item.UserId,
                name: item.Username,
                level: item.Level,
                game: vm.report.game,
                bet: vm.report.bet,
                from: vm.report.from,
                to: vm.report.to
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management', []).config(config);

    function config($stateProvider, msApiProvider) {
        $stateProvider.state('app.traditional_risk_management', {
            url: '/traditional/risk-management',
            abstract: true,
        }).state('app.traditional_risk_management.members', {
            url: '/members',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/members/risk-members.html',
                    controller: 'riskManagementMemberCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.agency', {
            url: '/agency',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/agency/risk-agency.html',
                    controller: 'riskManagementAgencyCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.duplicate_ip', {
            url: '/duplicate-ip',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/duplicate-ip/duplicate-ip.html',
                    controller: 'duplicateIpCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.lookup_ip', {
            url: '/lookup-ip',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/lookup-ip/lookup-ip.html',
                    controller: 'lookupIpCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.max_betting', {
            url: '/traditional/risk-management/max-betting',
            abstract: true,
        }).state('app.traditional_risk_management.max_betting.parameter', {
            url: '/parameter',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/max-betting/parameter/parameter.html',
                    controller: 'maxBetParamCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.max_betting.member', {
            url: '/member',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/max-betting/member/member.html',
                    controller: 'maxBetMemberCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.temporary', {
            url: '/temporary',
            abstract: true,
        }).state('app.traditional_risk_management.temporary.statement', {
            url: '/statement',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/risk-management/temporary-statement/winLose.html',
                },
                'portView@app.traditional_risk_management.temporary.statement': {
                    controller: 'traditionalTemporaryWinLoseCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.temporary.statement.general', {
            url: '/general?term&uid&level&name&game&bet&set',
            views: {
                'portView@app.traditional_risk_management.temporary.statement': {
                    templateUrl: 'app/main/traditional/risk-management/temporary-statement/general/general.html',
                    controller: 'traditionalTemporaryGeneralCtrl as vm'
                },
                'navigation@app.traditional_risk_management.temporary.statement': {
                    templateUrl: 'app/main/traditional/risk-management/temporary-statement/navigation/navigation.html',
                    controller: 'traditionalTemporaryNavigationCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.temporary.statement.classification', {
            url: '/classification?term&game',
            views: {
                'portView@app.traditional_risk_management.temporary.statement': {
                    templateUrl: 'app/main/traditional/risk-management/temporary-statement/classification/classification.html',
                    controller: 'traditionalTemporaryClassificationCtrl as vm'
                },
                'navigation@app.traditional_risk_management.temporary.statement': {
                    templateUrl: 'app/main/traditional/risk-management/temporary-statement/navigation/navigation.html',
                    controller: 'traditionalTemporaryNavigationCtrl as vm'
                }
            }
        }).state('app.traditional_risk_management.temporary.statement.member', {
            url: '/member?term&uid&name&game&bet',
            views: {
                'portView@app.traditional_risk_management.temporary.statement': {
                    templateUrl: 'app/main/traditional/risk-management/temporary-statement/member/member.html',
                    controller: 'traditionalTemporaryMemberCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('traditionalTemporaryNavigationCtrl', traditionalTemporaryNavigationCtrl);

    function traditionalTemporaryNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, msUtils) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let y = -3; y < 3; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.loadReport = loadReport;
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1', '2', '3', '4', '5'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.report.term = $location.search().term === undefined ? moment().format('YYYY-MM-DD') : $location.search().term;
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.traditional_risk_management.temporary.statement.general' : 'app.traditional_risk_management.temporary.statement.classification';
            $state.go(appUrl, {
                term: vm.Term,
                game: vm.selected.toString(),
                set: ''
            }, {
                inherit: true,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalCanceledClassificationCtrl', traditionalCanceledClassificationCtrl);

    function traditionalCanceledClassificationCtrl($rootScope, $scope, $state, $location, $timeout, network) {
        var vm = this;
        vm.classify = classify;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        $rootScope.$broadcast('submitting', true);
        network.Reporting.Traditional.Cancelation.getReportGroupByBetType({
            From: vm.report.from,
            To: vm.report.to
        }).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            vm.classifications = [];
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0
                }
            };
            angular.forEach(response, function(game) {
                let oGame = {};
                oGame.GameType = game.group[0].GameType;
                oGame.Values = [];
                oGame.SumByGame = {
                    Player: {
                        Quantity: 0,
                        Amount: 0
                    }
                };
                angular.forEach(game.group, function(bet) {
                    let oBet = {
                        BetType: bet.BetType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount
                        }
                    };
                    oGame.Values.push(oBet);
                    oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                    oGame.SumByGame.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                });
                vm.classifications.push(oGame)
            });
            $scope.$digest();
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
        });

        function classify(gid, bid) {
            $state.go('app.traditional.statement.canceled.classify', {
                from: vm.report.from,
                to: vm.report.to,
                game: gid,
                bet: bid
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('traditionalTemporaryMemberCtrl', traditionalTemporaryMemberCtrl);

    function traditionalTemporaryMemberCtrl($rootScope, $scope, $state, $location, $timeout, $mdDialog, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, ]
        };
        vm.loadMemberReport = loadMemberReport;
        vm.viewIp = viewIp;
        vm.data = {};
        vm.data.Term = $location.search().term === undefined ? moment().format('YYYY-MM-DD') : $location.search().term;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.BetType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        if (isNaN(vm.data.BetType)) {
            delete vm.data.BetType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            Lotus.Lottery.Report.TemporaryStatement.getTicketItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('traditionalTemporaryClassificationCtrl', traditionalTemporaryClassificationCtrl);

    function traditionalTemporaryClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.term = $location.search().term === undefined ? moment().format('YYYY-MM-DD') : $location.search().term;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            Term: vm.report.term,
            GameTypes: vm.report.game.split(',')
        };
        Lotus.Lottery.Report.TemporaryStatement.getUserReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose,
                                Company: {
                                    Income: bet.Company.Income,
                                    WinLose: bet.Company.WinLose,
                                    Percent: {
                                        Income: (bet.Company.Income / bet.Player.Amount),
                                        WinLose: (-bet.Company.WinLose / bet.Player.WinLose)
                                    }
                                }
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            Company: (bet.Commission + bet.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        My: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            My: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.My.WinLose += bet.WinLose;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.My.WinLose += bet.WinLose;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            }
        }

        function classify(GameType, BetType) {
            $state.go('app.traditional_risk_management.temporary.statement.general', {
                term: vm.report.term,
                game: GameType,
                bet: BetType
            })
        }
    }
})();
Array.prototype.groupBy = function(hash) {
    var _hash = hash ? hash : function(o) {
        return o;
    };
    var _map = {};
    var put = function(map, key, value) {
        if (!map[_hash(key)]) {
            map[_hash(key)] = {};
            map[_hash(key)].group = [];
            map[_hash(key)].key = key;
        }
        map[_hash(key)].group.push(value);
    };
    this.map(function(obj) {
        put(_map, obj, obj);
    });
    return Object.keys(_map).map(function(key) {
        return {
            group: _map[key].group
        };
    });
};
(function(delta) {
    'use strict';
    angular.module('app.traditional.risk_management').controller('traditionalTemporaryGeneralCtrl', traditionalTemporaryGeneralCtrl);

    function traditionalTemporaryGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.term = $location.search().term === undefined ? moment().format('YYYY-MM-DD') : $location.search().term;
        vm.report.game = $location.search().game === undefined ? [0, 1, 2, 3, 4, 5] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.traditional_risk_management.temporary.statement.general", {
                term: vm.report.term,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.traditional_risk_management.temporary.statement.member", {
                term: vm.report.term,
                game: item.GameType,
                bet: item.BetType,
                uid: vm.report.uid,
                name: vm.report.name
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                Term: vm.report.term,
                Size: 100,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            Lotus.Lottery.Report.TemporaryStatement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                Term: vm.report.term,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            Lotus.Lottery.Report.TemporaryStatement.getPlayerReportGroupByBetType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        Company: {
                            Income: item.Company.Income,
                            WinLose: item.Company.WinLose,
                            Percent: {
                                Income: (item.Company.Income / item.Player.Amount),
                                WinLose: (-item.Company.WinLose / item.Player.WinLose)
                            }
                        }
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.Company.Income += item.Company.Income;
                output.Sum.Player.Company.WinLose += item.Company.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.settings', []).config(config);

    function config($stateProvider, $translatePartialLoaderProvider, msApiProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.traditional_settings_parameter', {
            url: '/traditional/settings/parameter',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/settings/parameter/parameter.html',
                    controller: 'parameterCtrl as vm'
                }
            }
        }).state('app.traditional_settings_parameter.base', {
            url: '/base?id',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/settings/parameter/base/base.html',
                    controller: 'baseCtrl as vm'
                }
            }
        }).state('app.traditional_settings_parameter.risk', {
            url: '/risk?id',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/settings/parameter/risk/risk.html',
                    controller: 'riskCtrl as vm'
                }
            }
        }).state('app.traditional_settings_livePrice', {
            url: '/traditional/settings/livePrice',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/settings/livePrice/livePrice.html',
                    controller: 'livePriceCtrl as vm'
                }
            }
        }).state('app.traditional_settings_public-odds', {
            url: '/traditional/settings/public-odds',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/settings/public-odds/public-odds.html',
                    controller: 'publicOddsCtrl as vm'
                }
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.settings').controller('riskCtrl', riskCtrl);

    function riskCtrl($scope, $state, $mdDialog, $location, network, msUtils, message, AuthService, $timeout) {
        let vm = this;
        console.log(AuthService.isCompany(), AuthService.hasPermission(64))
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.init = init;
        vm.available = available;
        vm.changeByPointConf = changeByPointConf;
        vm.changeByRiskConf = changeByRiskConf;
        vm.changePointAvgConf = changePointAvgConf;
        vm.editParam = editParam;
        vm.cancel = cancel;
        vm.save = save;
        vm.changePointType = [{
            id: 1,
            name: 'Point'
        }, {
            id: 2,
            name: 'Risk'
        }, {
            id: 3,
            name: 'Point avg'
        }, {
            id: 0,
            name: 'Không tăng giá'
        }];
        vm.gameID = parseInt($location.search().id);
        vm.init();

        function init() {
            vm.processing = true;
            network.Games.Lottery.PriceAutoManagement.getSettingsByGameType({
                GameType: vm.gameID
            }).then(function(response) {
                vm.backup = angular.copy(response);
                vm.parameters = response;
                $scope.$digest();
                $timeout(function() {
                    vm.processing = false;
                }, 1000)
            }).catch(function(error) {});
        }

        function editParam(param) {
            param.editMode = true;
        }

        function cancel() {
            vm.parameters = angular.copy(vm.backup);
        }

        function save(item) {
            vm.send = {
                GameType: item.GameType,
                BetType: item.BetType,
                Type: item.Type
            };
            network.Games.Lottery.PriceAutoManagement.updateAutoChangePriceType(vm.send).then(function(response) {
                message.info('Cập nhật tham số thành công');
                item.editMode = false;
            }).catch(function(error) {
                message.info(error.message);
            })
        }

        function available(bet) {
            let list = [0, 1, 7, 8, 9, 15, 21, 22, 23, 24, 25, 29, 30];
            return msUtils.exists(bet, list)
        }

        function changeByPointConf(param, ev) {
            $mdDialog.show({
                controller: changeByPointConfCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/risk/dialog/change.by.point.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: param,
                    writePermission: vm.hasWritePermission
                }
            });

            function changeByPointConfCtrl($scope, $mdDialog, $timeout, data, writePermission, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.writePermission = writePermission;
                $scope.param = data;
                $scope.submitting = false;
                $scope.pricePoints = angular.copy(data.Points);
                if ($scope.writePermission) {}
                $scope.add = function(index) {
                    if ($scope.pricePoints.length <= index + 1) {
                        $scope.pricePoints.splice(index + 1, 0, {
                            Start: '',
                            End: '',
                            Step: '',
                            Point: ''
                        });
                    }
                };
                $scope.delete = function($event, item) {
                    var index = $scope.pricePoints.indexOf(item);
                    if ($event.which === 1)
                        $scope.pricePoints.splice(index, 1);
                };
                $scope.changePricePoint = function() {
                    $scope.submitting = true;
                    $scope.send = {
                        GameType: data.GameType,
                        BetType: data.BetType,
                        Points: [],
                        TotalCompanyPointAvg: param.TotalCompanyPointAvg === null ? 0 : param.TotalCompanyPointAvg,
                        CloseAtPointAboveAvg: param.CloseAtPointAboveAvg === null ? 0 : param.CloseAtPointAboveAvg,
                        CloseAtPointForAll: param.CloseAtPointForAll === null ? false : param.CloseAtPointForAll,
                        CloseAtPoint: param.CloseAtPoint === null ? 0 : param.CloseAtPoint,
                    };
                    angular.forEach($scope.pricePoints, function(value) {
                        var obj = {};
                        obj.Start = value.Start;
                        obj.End = value.End;
                        obj.Step = value.Step;
                        obj.Point = value.Point;
                        $scope.send.Points.push(obj)
                    });
                    network.Games.Lottery.PriceAutoManagement.updatePoints($scope.send).then(function(response) {
                        if (response) {
                            $timeout(function() {
                                message.info('Cập nhật cấu hình thành công');
                                $scope.submitting = false;
                                vm.init();
                            }, 1000)
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function changeByRiskConf(param, ev) {
            $mdDialog.show({
                controller: changeByRiskConfCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/risk/dialog/change.by.risk.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: param,
                    writePermission: vm.hasWritePermission
                }
            });

            function changeByRiskConfCtrl($scope, $mdDialog, $timeout, data, writePermission, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.writePermission = writePermission;
                $scope.param = data;
                $scope.submitting = false;
                $scope.priceRisks = angular.copy(data.Risks);
                if (writePermission) {}
                $scope.add = function(index) {
                    if ($scope.priceRisks.length <= index + 1) {
                        $scope.priceRisks.splice(index + 1, 0, {
                            Start: '',
                            End: '',
                            Step: '',
                            Point: ''
                        });
                    }
                };
                $scope.delete = function($event, item) {
                    var index = $scope.priceRisks.indexOf(item);
                    if ($event.which === 1)
                        $scope.priceRisks.splice(index, 1);
                };
                $scope.changePriceRisk = function() {
                    $scope.submitting = true;
                    $scope.send = {
                        GameType: data.GameType,
                        BetType: data.BetType,
                        Risks: [],
                        CloseAtRisk: param.CloseAtRisk
                    };
                    angular.forEach($scope.priceRisks, function(value) {
                        var obj = {};
                        obj.Start = value.Start;
                        obj.End = value.End;
                        obj.Step = value.Step;
                        obj.Point = value.Point;
                        $scope.send.Risks.push(obj)
                    });
                    network.Games.Lottery.PriceAutoManagement.updateRisks($scope.send).then(function(response) {
                        if (response) {
                            $timeout(function() {
                                message.info('Cập nhật cấu hình thành công');
                                $scope.submitting = false;
                                vm.init();
                            }, 1000)
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function changePointAvgConf(param, ev) {
            $mdDialog.show({
                controller: changePointAvgConfCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/risk/dialog/change.by.point.avg.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: param,
                    writePermission: vm.hasWritePermission
                }
            });

            function changePointAvgConfCtrl($scope, $mdDialog, $timeout, data, writePermission, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.writePermission = writePermission;
                $scope.param = data;
                $scope.submitting = false;
                $scope.pointAvg = angular.copy(data.PointAvg);
                $scope.changePricePointAvg = function() {
                    $scope.submitting = true;
                    $scope.send = {
                        GameType: data.GameType,
                        BetType: data.BetType,
                        PointAvg: {
                            Start: $scope.pointAvg.Start,
                            Step: $scope.pointAvg.Step,
                            Point: $scope.pointAvg.Point
                        }
                    };
                    network.Games.Lottery.PriceAutoManagement.updatePointAvg($scope.send).then(function(response) {
                        if (response) {
                            $timeout(function() {
                                message.info('Cập nhật cấu hình thành công');
                                $scope.submitting = false;
                                vm.init();
                            }, 1000)
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('maxBetParamCtrl', maxBetParamCtrl);

    function maxBetParamCtrl($timeout, $mdDialog, $scope, message) {
        let vm = this;
        vm.getParameter = getParameter;
        vm.copy = copy;
        vm.edit = edit;
        vm.cancel = cancel;
        vm.save = save;
        vm.updateAll = updateAll;
        vm.updateArr = updateArr;
        vm.getParameter();
        vm.items = [];

        function getParameter() {
            vm.submitting = true;
            Lotus.Lottery.UserGameSetting.GameLimit.getSettings({
                GameLimitCode: "default"
            }).then(function(response) {
                response.map(function(item) {
                    vm.items.push(item.Id)
                })
                vm.parameters = response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.submitting = false;
                vm.backup = angular.copy(vm.parameters)
            })
        }

        function edit(item) {
            item.editMode = true;
            vm.selected.push(item.Id)
        }

        function cancel(itemId) {
            vm.parameters.map(function(item) {
                if (item.Id === itemId) {
                    let backupItem = vm.backup.filter(function(itemBackup) {
                        return itemBackup.Id === itemId
                    })[0]
                    item.MaxPointPerNumber = backupItem.MaxPointPerNumber
                    item.TotalPointPerNumber = backupItem.TotalPointPerNumber
                    item.MaxPointForNoShare = backupItem.MaxPointForNoShare
                    item.MaxPointForMaxShare = backupItem.MaxPointForMaxShare
                    item.editMode = false;
                }
            })
            const index = vm.selected.indexOf(itemId);
            if (index > -1) {
                vm.selected.splice(index, 1);
            }
        }

        function save(item, last) {
            item.updating = true;
            let send = {
                Id: item.Id,
                MaxPointPerNumber: item.MaxPointPerNumber,
                TotalPointPerNumber: item.TotalPointPerNumber,
                MaxPointForNoShare: item.MaxPointForNoShare,
                MaxPointForMaxShare: item.MaxPointForMaxShare,
            }
            if (send.MaxPointPerNumber <= 0 || send.TotalPointPerNumber <= 0 || send.MaxPointForNoShare <= 0 || send.MaxPointForMaxShare <= 0) {
                message.show('Dữ liệu phải là số dương')
            }
            Lotus.Lottery.UserGameSetting.GameLimit.updateSettings([send]).then(function(response) {
                item.editMode = false;
                item.updating = false;
                vm.backup = angular.copy(vm.parameters)
                const index = vm.selected.indexOf(item.Id);
                if (index > -1) {
                    vm.selected.splice(index, 1);
                }
                if (last === 1) {
                    message.show('Cập nhật tham số thành công');
                } else {
                    $timeout(function() {
                        vm.updateAll()
                    }, 200)
                }
            }).catch(function(error) {
                message.show(error.message)
            })
        }
        vm.selected = [];
        vm.toggle = function(item, list) {
            let idx = list.indexOf(item);
            if (idx > -1) {
                list.splice(idx, 1);
            } else {
                list.push(item);
            }
            vm.updateArr(item);
        };
        vm.exists = function(item, list) {
            return list.indexOf(item) > -1;
        };
        vm.isIndeterminate = function() {
            return (vm.selected.length !== 0 && vm.selected.length !== vm.items.length);
        };
        vm.isChecked = function() {
            return vm.selected.length === vm.items.length;
        };
        vm.toggleAll = function() {
            if (vm.selected.length === vm.items.length) {
                vm.selected = [];
            } else if (vm.selected.length === 0 || vm.selected.length > 0) {
                vm.selected = vm.items.slice(0);
            }
            vm.updateArr()
        };

        function updateArr(itemId) {
            vm.parameters.map(function(item) {
                item.editMode = vm.exists(item.Id, vm.selected)
            })
            if (itemId !== undefined && !vm.exists(itemId, vm.selected)) {
                vm.parameters.map(function(item) {
                    if (item.Id === itemId) {
                        let backupItem = vm.backup.filter(function(itemBackup) {
                            return itemBackup.Id === itemId
                        })[0]
                        item.MaxPointPerNumber = backupItem.MaxPointPerNumber
                        item.TotalPointPerNumber = backupItem.TotalPointPerNumber
                        item.MaxPointForNoShare = backupItem.MaxPointForNoShare
                        item.MaxPointForMaxShare = backupItem.MaxPointForMaxShare
                    }
                })
            } else {
                if (vm.selected.length === 0) {
                    vm.parameters.map(function(item) {
                        let backupItem = vm.backup.filter(function(itemBackup) {
                            return itemBackup.Id === item.Id
                        })[0]
                        item.MaxPointPerNumber = backupItem.MaxPointPerNumber
                        item.TotalPointPerNumber = backupItem.TotalPointPerNumber
                        item.MaxPointForNoShare = backupItem.MaxPointForNoShare
                        item.MaxPointForMaxShare = backupItem.MaxPointForMaxShare
                    })
                }
            }
        }

        function copy(itemCopy) {
            vm.parameters.map(function(item) {
                if (item.editMode) {
                    item.MaxPointPerNumber = itemCopy.MaxPointPerNumber
                    item.TotalPointPerNumber = itemCopy.TotalPointPerNumber
                    item.MaxPointForNoShare = itemCopy.MaxPointForNoShare
                    item.MaxPointForMaxShare = itemCopy.MaxPointForMaxShare
                }
            })
        }

        function updateAll() {
            let editModeArr = vm.parameters.filter(function(item) {
                return item.editMode
            })
            if (editModeArr.length) {
                editModeArr[0].updating = true;
                vm.save(editModeArr[0], editModeArr.length)
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.settings').controller('baseCtrl', baseCtrl);

    function baseCtrl($scope, $state, $location, network, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.editParam = editParam;
        vm.cancel = cancel;
        vm.save = save;
        vm.gameID = parseInt($location.search().id);
        network.Games.Lottery.Parameter.getParametersByGameType({
            GameType: vm.gameID
        }).then(function(response) {
            response.sort(function(a, b) {
                return a.BetType - b.BetType
            });
            vm.backup = angular.copy(response);
            vm.parameters = response;
            $scope.$digest();
        }).catch(function(error) {});

        function editParam(param) {
            param.editMode = true;
        }

        function cancel() {
            vm.parameters = angular.copy(vm.backup);
        }

        function save(param) {
            vm.send = {
                GameType: vm.gameID,
                BetType: param.BetType,
                MinItemPerTicket: param.MinItemPerTicket,
                MaxItemPerTicket: param.MaxItemPerTicket,
                BetTimes: param.BetTimes,
                MaxExtraPrice: param.MaxExtraPrice,
                MaxExtraPricePerLevel: param.MaxExtraPricePerLevel,
                ManualIncPoint: param.ManualIncPoint,
                MaxManualIncPointPerLevel: param.MaxManualIncPointPerLevel,
                MaxPointForNoShare: param.MaxPointForNoShare,
                MaxPointForMaxShare: param.MaxPointForMaxShare,
                MaxPointForNumberGroup: param.MaxPointForNumberGroup,
                CancelLimit: param.CancelLimit,
                AutoCloseAt: param.AutoCloseAt
            };
            if (param.BetType === 20) {
                vm.send.RemoveExtraPrice = {
                    Manual: param.RemoveExtraPrice.Manual,
                    Automatic: param.RemoveExtraPrice.Automatic,
                    Relationship: param.RemoveExtraPrice.Relationship,
                }
            }
            network.Games.Lottery.Parameter.updateParameter(vm.send).then(function(response) {
                message.info('Cập nhật tham số thành công');
                param.editMode = false;
            }).catch(function(error) {
                message.show(error.message)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('maxBetMemberCtrl', maxBetMemberCtrl);

    function maxBetMemberCtrl($timeout, $mdDialog, $scope, message) {
        let vm = this;
        vm.loadMembers = loadMembers;
        vm.deleteMembers = deleteMembers;
        vm.addMembers = addMembers;
        vm.loadMembers();
        vm.items = [];

        function loadMembers(page) {
            vm.submitting = true;
            let data = {
                GameLimitCode: "default",
                Size: 25
            }
            if (page === undefined) {
                vm.members = [];
                vm.items = [];
            }
            data.Page = page === undefined ? 1 : page;
            vm.currentPage = data.Page;
            Lotus.Lottery.UserGameSetting.GameLimit.getUsersLimited(data).then(function(response) {
                vm.hasMoreRecord = response.length === data.Size
                response.map(function(item) {
                    vm.items.push(item.Username)
                })
                vm.members = vm.members.concat(response);
                $timeout(function() {
                    vm.submitting = false;
                }, 200)
            })
        }
        vm.selected = [];
        vm.toggle = function(item, list) {
            let idx = list.indexOf(item);
            if (idx > -1) {
                list.splice(idx, 1);
            } else {
                list.push(item);
            }
        };
        vm.exists = function(item, list) {
            return list.indexOf(item) > -1;
        };
        vm.isIndeterminate = function() {
            return (vm.selected.length !== 0 && vm.selected.length !== vm.items.length);
        };
        vm.isChecked = function() {
            return vm.selected.length === vm.items.length;
        };
        vm.toggleAll = function() {
            if (vm.selected.length === vm.items.length) {
                vm.selected = [];
            } else if (vm.selected.length === 0 || vm.selected.length > 0) {
                vm.selected = vm.items.slice(0);
            }
        };

        function deleteMembers(ev) {
            if (vm.selected.length > 100) {
                message.show('Quá nhiều tài khoản')
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận xóa tài khoản').textContent('Đang thực hiện xóa ' + vm.selected.length + ' tài khoản khỏi danh sách hạn chế.').targetEvent(ev).clickOutsideToClose(true).parent(angular.element(document.body)).ok('Chơi luôn!').cancel('Hủy');
            $mdDialog.show(confirm).then(function() {
                Lotus.Lottery.UserGameSetting.GameLimit.removeUsersFromLimitation({
                    Usernames: vm.selected
                }).then(function(response) {
                    vm.members = vm.members.filter(function(el) {
                        return !vm.selected.includes(el.Username);
                    });
                    $timeout(function() {
                        $scope.$digest();
                        vm.selected = []
                    }, 200)
                })
            }, function() {});
        }

        function addMembers(ev) {
            $mdDialog.show({
                controller: getPlayersByIPCtrl,
                templateUrl: 'app/main/traditional/risk-management/max-betting/member/add-members.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true
            });

            function getPlayersByIPCtrl($scope, $mdDialog, $timeout) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.listMembers = '';
                $scope.submitting = false;
                $scope.check = function() {
                    if ($scope.listMembers.length === 0) return
                    $scope.memberLength = $scope.listMembers.replace(/\s+/g, '').split(',').length;
                }
                $scope.update = function() {
                    $scope.submitting = true;
                    if ($scope.listMembers.length === 0) return
                    let membersArr = $scope.listMembers.replace(/\s+/g, '').split(',')
                    if (membersArr.length > 100) {
                        message.infoMultiple('Quá nhiều tài khoản')
                    }
                    Lotus.Lottery.UserGameSetting.GameLimit.addUsersToLimitation({
                        GameLimitCode: "default",
                        Usernames: membersArr,
                    }).then(function(response) {
                        console.log(response);
                        message.show('Cập nhật thành công.')
                        vm.loadMembers();
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.cancellation', []).config(config);

    function config($stateProvider, msApiProvider) {
        $stateProvider.state('app.traditional_cancellation', {
            abstract: true,
            url: '/traditional/cancellation',
        }).state('app.traditional_cancellation.tickets', {
            url: '/tickets',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/cancellation/tickets/tickets.html',
                    controller: 'cancelTicketCtrl as vm'
                }
            }
        }).state('app.traditional_cancellation.tickets.new-task', {
            url: '/new-task',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/cancellation/tickets/new-task/new-task.html',
                    controller: 'newTaskCtrl as vm'
                }
            }
        }).state('app.traditional_cancellation.numbers', {
            url: '/numbers',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/cancellation/numbers/numbers.html',
                    controller: 'cancelNumbersCtrl as vm'
                }
            },
            resolve: {
                numberGroups: function(msApi) {
                    return msApi.resolve('numberGroups@get');
                }
            }
        })
        msApiProvider.register('numberGroups', ['app/data/quick.json']);
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.cancellation').controller('newTaskCtrl', newTaskCtrl);

    function newTaskCtrl($scope, $mdDialog, $timeout, $location, $state, $q, network, message) {
        var vm = this;
        vm.search = search;
        vm.getItemsByTicket = getItemsByTicket;
        vm.cancelTicket = cancelTicket;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.termHistories = [];
        for (let i = 0; i < 3; i++) {
            vm.termHistories.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }
        vm.searchText = '';

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 9
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.UserId = item !== undefined ? item.Id : '';
            vm.Username = item !== undefined ? item.Username : '';
        }

        function searchTextChange(item) {
            vm.UserId = undefined;
            vm.Username = undefined;
        }

        function search() {
            vm.submitting = true;
            let data = {
                UserId: vm.UserId,
                Term: vm.Term,
                Numbers: vm.Tickets.split(',')
            };
            network.Games.Lottery.ReportTicket.getTicketsByNumbers(data).then(function(response) {
                console.log(response)
                vm.memberTickets = response;
                $scope.$digest();
                $timeout(function() {
                    vm.submitting = false
                }, 500);
                if (response.length === 0) {
                    message.info('Không có dữ liệu phù hợp')
                }
            })
        }

        function getItemsByTicket(item) {
            let data = {
                UserId: vm.UserId,
                Term: vm.Term,
                TicketNumber: item.TicketNumber
            };
            network.Games.Lottery.ReportTicket.getItemsByTicket(data).then(function(response) {
                $scope.$digest();
            })
        }

        function cancelTicket(item, $event) {
            $mdDialog.show({
                controller: mustEnableTfaCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function mustEnableTfaCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Yêu cầu xác nhận';
                $scope.textContent = 'Xác nhận chính xác phiếu sẽ được huỷ!';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.Games.Lottery.ReportTicket.createTask({
                        TicketId: item.Id,
                        Username: vm.Username
                    }).then(function(resp) {
                        message.info('Huỷ phiếu thành công');
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba', []).config(config);

    function config($stateProvider, msApiProvider) {
        $stateProvider.state('app.saba', {
            abstract: true,
            url: '/saba',
        }).state('app.saba.maintenance', {
            url: '/maintenance',
            views: {
                'content@app': {
                    templateUrl: 'app/main/wm-casino/maintenance/maintenance.html',
                    controller: 'sabaMainCtrl as vm'
                }
            }
        }).state('app.saba.statement', {
            url: '/statement',
            abstract: true,
        }).state('app.saba.statement.outstanding', {
            url: '/outstanding',
            views: {
                'content@app': {
                    templateUrl: 'app/main/saba/statement/outstanding/outstanding.html'
                },
                'portView@app.saba.statement.outstanding': {
                    controller: 'sabaOutCtrl as vm'
                }
            }
        }).state('app.saba.statement.outstanding.general', {
            url: '/general?sport&uid&name&level&matchId&match',
            views: {
                'portView@app.saba.statement.outstanding': {
                    templateUrl: 'app/main/saba/statement/outstanding/general/general.html',
                    controller: 'sabaOutGenCtrl as vm'
                },
                'navigation@app.saba.statement.outstanding': {
                    templateUrl: 'app/main/saba/statement/outstanding/navigation/navigation.html',
                    controller: 'sabaOutNavCtrl as vm'
                }
            }
        }).state('app.saba.statement.outstanding.member', {
            url: '/member?sport&uid&name',
            views: {
                'portView@app.saba.statement.outstanding': {
                    templateUrl: 'app/main/saba/statement/outstanding/member/member.html',
                    controller: 'sabaMemOutCtrl as vm'
                }
            },
            resolve: {
                sabaBetTypes: function(msApi) {
                    return msApi.resolve('saba@get');
                },
                sabaBetTypesVN: function(msApi) {
                    return msApi.resolve('saba-vn@get');
                }
            }
        }).state('app.saba.statement.outstanding.classification', {
            url: '/classification?sport&uid&name&level&match&matchId',
            views: {
                'portView@app.saba.statement.outstanding': {
                    templateUrl: 'app/main/saba/statement/outstanding/classification/classification.html',
                    controller: 'sabaOutClassCtrl as vm'
                },
                'navigation@app.saba.statement.outstanding': {
                    templateUrl: 'app/main/saba/statement/outstanding/navigation/navigation.html',
                    controller: 'sabaOutNavCtrl as vm'
                }
            }
        }).state('app.saba.statement.risk-control', {
            url: '/risk-control',
            resolve: {
                sabaBetTypes: function(msApi) {
                    return msApi.resolve('saba@get');
                },
                sabaBetTypesVN: function(msApi) {
                    return msApi.resolve('saba-vn@get');
                }
            }
        }).state('app.saba.statement.risk-control.handicap-over-under', {
            url: '/handicap-over-under',
            views: {
                'content@app': {
                    templateUrl: 'app/main/saba/statement/risk-control/handicap-over-under/handicap-over-under.html',
                    controller: 'sabaHandicapCtrl as vm'
                }
            }
        }).state('app.saba.statement.risk-control.1x2', {
            url: '/1x2',
            views: {
                'content@app': {
                    templateUrl: 'app/main/saba/statement/risk-control/1x2/1x2.html',
                    controller: 'saba1x2Ctrl as vm'
                }
            }
        }).state('app.saba.statement.win-lose', {
            url: '/win-lose',
            views: {
                'content@app': {
                    templateUrl: 'app/main/saba/statement/winlose/winLose.html',
                },
                'portView@app.saba.statement.win-lose': {
                    controller: 'sabaWinCtrl as vm'
                }
            }
        }).state('app.saba.statement.win-lose.general', {
            url: '/general?from&to&uid&level&name&sport&set',
            views: {
                'portView@app.saba.statement.win-lose': {
                    templateUrl: 'app/main/accounting/saba/general/general.html',
                    controller: 'SabaGeneralCtrl as vm'
                },
                'navigation@app.saba.statement.win-lose': {
                    templateUrl: 'app/main/saba/statement/winlose/navigation/navigation.html',
                    controller: 'sabaNavCtrl as vm'
                }
            },
            resolve: {
                statement: function() {
                    return '';
                }
            }
        }).state('app.saba.statement.win-lose.general.member', {
            url: '/member',
            views: {
                'portView@app.saba.statement.win-lose': {
                    templateUrl: 'app/main/accounting/saba/member/member.html',
                    controller: 'sabaMemberCtrl as vm'
                },
                'navigation@app.saba.statement.win-lose': {}
            },
            resolve: {
                sabaBetTypes: function(msApi) {
                    return msApi.resolve('saba@get');
                },
                sabaBetTypesVN: function(msApi) {
                    return msApi.resolve('saba-vn@get');
                }
            }
        }).state('app.saba.statement.win-lose.classification', {
            url: '/classification?from&to&sport',
            views: {
                'portView@app.saba.statement.win-lose': {
                    templateUrl: 'app/main/accounting/saba/classification/classification.html',
                    controller: 'combineSabaClassificationCtrl as vm'
                },
                'navigation@app.saba.statement.win-lose': {
                    templateUrl: 'app/main/saba/statement/winlose/navigation/navigation.html',
                    controller: 'sabaNavCtrl as vm'
                }
            },
            resolve: {
                statement: function() {
                    return '';
                }
            }
        }).state('app.saba.statement.member', {
            url: '/member',
            views: {
                'content@app': {
                    templateUrl: 'app/main/saba/statement/member/member.html',
                },
                'portView@app.saba.statement.member': {
                    controller: 'sabaMemCtrl as vm'
                }
            }
        }).state('app.saba.statement.member.executive', {
            url: '/?from&to&sport',
            views: {
                'portView@app.saba.statement.member': {
                    templateUrl: 'app/main/saba/statement/member/executive/executive.html',
                    controller: 'sabaMemExeCtrl as vm'
                },
                'navigation@app.saba.statement.member': {
                    templateUrl: 'app/main/saba/statement/member/navigation/navigation.html',
                    controller: 'sabaMemNavCtrl as vm'
                }
            }
        }).state('app.saba.statement.member.byMember', {
            url: '/byMember?from&to&uid&name&sport',
            views: {
                'portView@app.saba.statement.member': {
                    templateUrl: 'app/main/saba/statement/member/byMember/byMember.html',
                    controller: 'sabaMemByMemCtrl as vm'
                },
                'navigation@app.saba.statement.member': {
                    templateUrl: 'app/main/saba/statement/member/navigation/navigation.html',
                    controller: 'sabaMemNavCtrl as vm'
                }
            }
        }).state('app.saba.statement.member.details', {
            url: '/details?from&to&sport&uid&name',
            views: {
                'portView@app.saba.statement.member': {
                    templateUrl: 'app/main/accounting/saba/member/member.html',
                    controller: 'sabaMemberCtrl as vm'
                }
            },
            resolve: {
                sabaBetTypes: function(msApi) {
                    return msApi.resolve('saba@get');
                },
                sabaBetTypesVN: function(msApi) {
                    return msApi.resolve('saba-vn@get');
                }
            }
        })
        msApiProvider.register('saba', ['app/data/json/saba.bet-type.json']);
        msApiProvider.register('saba-vn', ['app/data/json/saba.bet-type-vn.json']);
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaNavCtrl', sabaNavCtrl);

    function sabaNavCtrl($rootScope, $scope, $state, $stateParams, $location, $mdMedia, msUtils) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.jumpTo = jumpTo;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            en: 'SportsBook',
            name: 'Thể Thao'
        }, {
            id: 1,
            en: 'NumberGame',
            name: 'Trò chơi Số'
        }, {
            id: 2,
            en: 'VirtualSports',
            name: 'Thể Thao Ảo'
        }, {
            id: 3,
            en: 'Arcadia Gaming',
            name: 'Arcadia Gaming'
        }, {
            id: 4,
            en: 'Saba.Club',
            name: 'Saba.Club'
        }, {
            id: 5,
            en: 'Keno',
            name: 'Keno'
        }, {
            id: 6,
            en: 'Lottery',
            name: 'Lottery'
        }, {
            id: 7,
            en: 'RNG Casino',
            name: 'RNG Casino'
        }, {
            id: 8,
            en: 'VGaming',
            name: 'VGaming'
        }, {
            id: 99,
            en: 'Others',
            name: 'Trò chơi khác'
        }];
        vm.report.selected = $stateParams.sport === undefined ? ['0', '1', '2', '3', '4', '5', '6', '7', '8', '99'] : $stateParams.sport.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.report.from = $stateParams.from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($stateParams.from);
        vm.report.to = $stateParams.to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($stateParams.to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($stateParams.from !== undefined && $stateParams.to !== undefined) {
            if ($stateParams.from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($stateParams.from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($stateParams.from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $stateParams.to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($stateParams.from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($stateParams.from === moment().startOf('month').format('YYYY-MM-DD') && $stateParams.to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($stateParams.from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            console.log(item)
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả nhóm'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn nhóm'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' nhóm'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.saba.statement.win-lose.general' : 'app.saba.statement.win-lose.classification';
            $state.go(appUrl, {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                sport: vm.selected.toString(),
                set: ''
            }, {
                inherit: true,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });

        function jumpTo(item) {
            $state.go("app.saba.statement.win-lose.general", {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                uid: item.uid,
                level: item.level,
                name: item.name
            })
        }
        vm.breadcrumbs = sessionStorage.getItem('breadcrumb') === null ? [] : JSON.parse(sessionStorage.getItem('breadcrumb'));
        $scope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
            if (Object.keys(fromParams).length) {
                if (parseInt(fromParams.set) === 0 || $stateParams.level === undefined) {
                    vm.breadcrumbs = [];
                    sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                } else {
                    if (fromParams.level === undefined && fromParams.set === undefined) {
                        vm.breadcrumbs = [{
                            uid: '',
                            level: '',
                            name: $rootScope.User.Username
                        }];
                        sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                    }
                    if (fromParams.level !== undefined) {
                        if (vm.breadcrumbs.filter(function(bc) {
                                return bc.level === fromParams.level
                            }).length || fromParams.level > $stateParams.level) {
                            vm.breadcrumbs = vm.breadcrumbs.filter(function(bc) {
                                return (parseInt(bc.level) < parseInt($stateParams.level)) || bc.level === ''
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        } else {
                            vm.breadcrumbs.push({
                                uid: fromParams.uid,
                                level: fromParams.level,
                                name: fromParams.name
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        }
                    }
                }
            } else {
                vm.breadcrumbs = [];
                sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.presidential', {
            abstract: true,
            url: '/presidential',
        }).state('app.presidential.event', {
            url: '/event',
            views: {
                'content@app': {
                    templateUrl: 'app/main/presidential/event/event.html',
                    controller: 'presidentialEventCtrl as vm'
                }
            }
        }).state('app.presidential.parameter', {
            url: '/parameter',
            views: {
                'content@app': {
                    templateUrl: 'app/main/presidential/parameter/parameter.html',
                    controller: 'presidentialParameterCtrl as vm'
                }
            }
        }).state('app.presidential.statement', {
            url: '/statement',
            abstract: true,
        }).state('app.presidential.statement.outstanding', {
            url: '/outstanding',
            views: {
                'content@app': {
                    templateUrl: 'app/main/presidential/statement/outstanding/outstanding.html'
                },
                'portView@app.presidential.statement.outstanding': {
                    controller: 'presidentialOutstandingCtrl as vm'
                }
            }
        }).state('app.presidential.statement.outstanding.general', {
            url: '/general?bet&uid&name&level&matchId',
            views: {
                'portView@app.presidential.statement.outstanding': {
                    templateUrl: 'app/main/presidential/statement/outstanding/general/general.html',
                    controller: 'presidentialOutstandingGeneralCtrl as vm'
                },
                'navigation@app.presidential.statement.outstanding': {
                    templateUrl: 'app/main/presidential/statement/outstanding/navigation/navigation.html',
                    controller: 'presidentialOutstandingNavigationCtrl as vm'
                }
            }
        }).state('app.presidential.statement.outstanding.member', {
            url: '/member?uid&name',
            views: {
                'portView@app.presidential.statement.outstanding': {
                    templateUrl: 'app/main/presidential/statement/outstanding/member/member.html',
                    controller: 'presidentialMemberOutstandingCtrl as vm'
                }
            }
        }).state('app.presidential.statement.outstanding.classification', {
            url: '/classification?uid&name&level&match&matchId',
            views: {
                'portView@app.presidential.statement.outstanding': {
                    templateUrl: 'app/main/presidential/statement/outstanding/classification/classification.html',
                    controller: 'presidentialOutstandingClassificationCtrl as vm'
                },
                'navigation@app.presidential.statement.outstanding': {
                    templateUrl: 'app/main/presidential/statement/outstanding/navigation/navigation.html',
                    controller: 'presidentialOutstandingNavigationCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialOutstandingNavigationCtrl', presidentialOutstandingNavigationCtrl);

    function presidentialOutstandingNavigationCtrl($rootScope, $state, $scope, $location, network, $q, AuthService, msUtils) {
        var vm = this;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.isCompany = AuthService.isCompany();
        vm.report = {
            category: 0,
            selected: []
        };
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
            })
        }

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.matchName = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.matchName = '';
        }

        function loadReport() {
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.presidential.statement.outstanding.general' : 'app.presidential.statement.outstanding.classification';
            $state.go(appUrl, {
                name: vm.matchName,
                matchId: vm.matchId,
                level: vm.matchLevel
            }, {
                reload: true
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialMemberOutstandingCtrl', presidentialMemberOutstandingCtrl);

    function presidentialMemberOutstandingCtrl($rootScope, $scope, $state, $location, $timeout, network) {
        let vm = this;
        vm.loadMemberDetails = loadMemberDetails;
        vm.report = {};
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.loadMemberDetails();
        vm.memberDetails = [];

        function loadMemberDetails(ltID) {
            let data = {
                UserId: vm.report.uid,
                Limit: 100
            };
            ltID = ltID === undefined ? '' : ltID;
            data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            Lotus.SenCasino.Games.Politics.Report.Outstanding.getBetItems(data).then(function(response) {
                vm.loadMore = response.length === data.Limit;
                vm.memberDetails = vm.memberDetails.concat(response);
                console.log(response)
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false;
                    $scope.$digest();
                }, 500);
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialOutstandingGeneralCtrl', presidentialOutstandingGeneralCtrl);

    function presidentialOutstandingGeneralCtrl($rootScope, $state, $scope, $timeout, $location, network) {
        var vm = this;
        vm.viewReport = viewReport;
        vm.getAgencyReport = getAgencyReport;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.uid = $location.search().uid === undefined ? '' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.matchId = $location.search().matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 1,
                orderable: false
            }]
        };
        vm.outstandingReports = [];

        function getAgencyReport(page) {
            let data = {
                ParentUserId: vm.report.uid,
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            if (vm.report.bet) {
                data.BetTypes = [vm.report.bet]
            }
            Lotus.SenCasino.Games.Politics.Report.Outstanding.getChildrenReportGroupByUser(data).then(function(response) {
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
                vm.hasRecord = response.length === 50;
                vm.page = data.Page + 1;
                vm.outstandingReports = vm.outstandingReports.concat(response);
                if (vm.report.level === 1) {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Commission: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(vm.outstandingReports, function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Commission += item.Player.Commission;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent.Commission += (item.Descendant.Commission + item.Commission);
                        vm.Total.Agent.Income += (item.Descendant.Income + item.Amount);
                        vm.Total.Company.Commission += item.Ancestor.Commission;
                        vm.Total.Company.Income += item.Ancestor.Income;
                    });
                } else {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Commission: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        My: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(vm.outstandingReports, function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Commission += item.Player.Commission;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent.Commission += (item.Descendant.Commission + item.Commission);
                        vm.Total.Agent.Income += (item.Descendant.Income + item.Amount);
                        vm.Total.My.Commission += item.Parent.Commission;
                        vm.Total.My.Income += item.Parent.Income;
                        vm.Total.Company.Income += ((item.Ancestor.Income - item.Parent.Income) + (item.Ancestor.Commission - item.Parent.Commission));
                    });
                }
                $scope.$digest();
            });
        }
        if (vm.report.level !== 9) {
            vm.getAgencyReport()
        } else {
            $state.go('app.presidential.statement.outstanding.member', {
                uid: vm.report.uid,
                name: vm.report.name
            });
        }

        function viewReport(item) {
            $state.go('app.presidential.statement.outstanding.general', {
                uid: item.UserId,
                level: item.Level,
                name: item.Username,
                matchId: '',
                match: '',
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialOutstandingClassificationCtrl', presidentialOutstandingClassificationCtrl);

    function presidentialOutstandingClassificationCtrl($rootScope, $location, $state, $timeout, network, msUtils) {
        var vm = this;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.uid = $location.search().uid === undefined ? '' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.matchId = $location.search().matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        Lotus.SenCasino.Games.Politics.Report.Outstanding.getUserReportGroupByBetType({
            UserId: vm.report.uid
        }).then(function(response) {
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            response.sort(function(a, b) {
                return a.BetType - b.BetType
            });
            vm.classifications = response;
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaHandicapCtrl', sabaHandicapCtrl);

    function sabaHandicapCtrl($rootScope, $state, $stateParams, $scope, $interval, $mdToast, $mdDialog, msUtils, sabaBetTypes, sabaBetTypesVN) {
        let vm = this;
        vm.BetItemsByMatch = BetItemsByMatch;
        vm.MatchBetTypeReport = MatchBetTypeReport;
        vm.getMatchBetTypeLeagues = getMatchBetTypeLeagues;
        vm.initLeague = initLeague;
        vm.leagueLabel = leagueLabel;
        vm.selectLeague = selectLeague;
        vm.selectAllLeague = selectAllLeague;
        vm.refreshEvent = refreshEvent;
        vm.immediatePrice = immediatePrice;
        vm.refreshEvent(60);
        vm.leagueSelected = [];
        vm.lULeague = moment().unix();
        vm.lUMatch = moment().unix();
        vm.interval = $interval(function() {
            let currentTime = moment().unix();
            let checkLeague = currentTime - vm.lULeague;
            let checkMatch = currentTime - vm.lUMatch;
            if (checkLeague > 300) {
                vm.lULeague = moment().unix();
                vm.getMatchBetTypeLeagues();
                $mdToast.show($mdToast.simple().textContent('Cập nhật danh sách giải đấu').position('right bottom').hideDelay(3000))
            }
            if (!vm.StopCheckMatch) {
                vm.timer--;
                if (checkMatch > vm.maxTimer) {
                    vm.lUMatch = moment().unix();
                    vm.timer = vm.maxTimer;
                    vm.MatchBetTypeReport();
                }
            }
        }, 1000)
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.interval);
        });
        vm.MatchBetTypeReport();
        vm.getMatchBetTypeLeagues();

        function getMatchBetTypeLeagues() {
            Lotus.Saba.Report.Outstanding.getMatchBetTypeLeagues({
                Group: 0
            }).then(function(response) {
                response = response.sort(function(a, b) {
                    return /[A-Za-z]/.test(a.LeagueNameEn) - /[A-Za-z]/.test(b.LeagueNameEn) || (a.LeagueNameEn.toUpperCase() < b.LeagueNameEn.toUpperCase() ? -1 : a.LeagueNameEn.toUpperCase() > b.LeagueNameEn.toUpperCase() ? 1 : 0)
                });
                vm.leagueArr = response;
                vm.initLeague();
            })
        }

        function initLeague() {
            if (vm.leagueSelected.length === 0) {
                vm.selectAllLeague();
            } else {
                vm.leagueArr.map(function(item) {
                    item.active = msUtils.exists(item.LeagueId, vm.leagueSelected)
                })
            }
            vm.leagueLabel();
        }

        function leagueLabel() {
            let length = vm.leagueArr.filter(function(p) {
                return p.active
            });
            if (length.length === vm.leagueArr.length) {
                vm.textLeagueLabel = 'Tất cả giải'
            } else {
                vm.textLeagueLabel = length[0].LeagueNameEn
            }
        }

        function selectLeague(item) {
            vm.leagueArr.map(function(league) {
                league.active = item.LeagueId === league.LeagueId
            })
            vm.leagueLabel();
        }

        function selectAllLeague() {
            vm.leagueArr.map(function(league) {
                league.active = true;
            })
            vm.leagueLabel();
        }

        function refreshEvent(event) {
            vm.lUMatch = moment().unix();
            vm.maxTimer = event;
            if (event === 0) {
                vm.StopCheckMatch = true;
                vm.timer = 'OFF'
            } else {
                vm.timer = event;
            }
        }

        function immediatePrice() {
            vm.MatchBetTypeReport();
            vm.refreshEvent(vm.maxTimer);
        }
        $scope.$on("$mdMenuClose", function(e) {
            vm.leagueSelected = []
            vm.leagueArr.map(function(item) {
                if (item.active) {
                    vm.leagueSelected.push(item.LeagueId)
                }
            });
            if (vm.backup === undefined) {
                vm.backup = [];
            }
            let is_same = vm.backup.length === vm.leagueSelected.length && vm.backup.every(function(element, index) {
                return element === vm.leagueSelected[index];
            });
            if (!is_same) {
                vm.backup = angular.copy(vm.leagueSelected)
                vm.MatchBetTypeReport();
            }
        });

        function MatchBetTypeReport() {
            vm.submitting = true;
            let data = {
                Group: 0
            }
            if (vm.leagueSelected.length === 1) {
                data.LeagueId = vm.leagueSelected[0]
            }
            Lotus.Saba.Report.Outstanding.getMatchBetTypeReport(data).then(function(response) {
                let fineData = [];
                response.map(function(item) {
                    let colType = [];
                    item.Outstanding.map(function(out) {
                        out.Raw = out.Type.split('|')[0];
                        colType.push(out.Type.split('|')[0]);
                    })
                    colType = colType.filter(function(item, index, inputArray) {
                        return inputArray.indexOf(item) === index;
                    });
                    if (colType.length > 1) {
                        colType.map(function(col) {
                            let newItem = angular.copy(item)
                            newItem.Outstanding = [];
                            item.Outstanding.map(function(oit) {
                                if (oit.Raw === col) {
                                    newItem.Outstanding.push(oit)
                                }
                            })
                            fineData.push(newItem)
                        })
                    } else {
                        fineData.push(item)
                    }
                })
                fineData = fineData.sort(function(a, b) {
                    return a.MatchAt - b.MatchAt
                });
                fineData = fineData.groupBy(function(o) {
                    return JSON.stringify({
                        a: o.LeagueId
                    })
                });
                let index = 0;
                fineData.map(function(item) {
                    item.group.map(function(group) {
                        index++;
                        group.index = index;
                        group.Today = moment(group.MatchAt).date() === moment().date();
                        group.Live = group.Outstanding[0].Type.split('|')[0] !== 'db';
                        group.ScoreIndex = group.Outstanding[0].Type.split('|')[0].split(':')[1];
                        group.ScoreIndex = group.ScoreIndex !== undefined ? group.ScoreIndex.replace('-', '') : group.ScoreIndex;
                        group.Outstanding.map(function(out) {
                            out.Name = out.Type.split('|')[1];
                            if (out.Type.split('|')[0] !== 'db') {
                                out.Score = out.Type.split('|')[0].split(':')[1]
                            }
                            let d = {
                                Income: out.Income,
                                Stake: out.Stake
                            };
                            if (out.Name === 'hdp') {
                                group.hdp = d
                            } else if (out.Name === 'ou') {
                                group.ou = d
                            } else if (out.Name === '1h_hdp') {
                                group.h_hdp = d
                            } else if (out.Name === '1h_ou') {
                                group.h_ou = d
                            }
                        })
                    })
                    item.group = item.group.sort(function(a, b) {
                        return a.MatchAt - b.MatchAt || b.ScoreIndex - a.ScoreIndex
                    })
                });
                vm.outStandings = fineData;
                vm.submitting = false;
                $scope.$digest()
            })
        }

        function BetItemsByMatch(item, betType, $event) {
            $mdDialog.show({
                controller: sabaItemsOutCtrl,
                templateUrl: 'app/main/saba/statement/risk-control/bet-items/bet-items-dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                hasBackdrop: false,
                fullscreen: true,
                locals: {
                    matchId: item.MatchId,
                    betType: betType,
                    sabaBetTypes: sabaBetTypes,
                    sabaBetTypesVN: sabaBetTypesVN
                }
            });
        }
    }
})();

function sabaItemsOutCtrl($rootScope, $scope, $state, $stateParams, $location, $timeout, msUtils, network, $mdDialog, AuthService, sabaBetTypes, sabaBetTypesVN, matchId, betType) {
    let vm = $scope;
    vm.cancel = function() {
        $mdDialog.hide();
    };
    vm.localParlayData = sessionStorage.getItem('Parlay') === null ? {} : JSON.parse(sessionStorage.getItem('Parlay'));
    if (vm.localParlayData.Teams === undefined) {
        vm.localParlayData.Teams = []
    }
    if (vm.localParlayData.Leagues === undefined) {
        vm.localParlayData.Leagues = []
    }
    if (vm.localParlayData.Matchs === undefined) {
        vm.localParlayData.Matchs = []
    }
    vm.sabaBetTypes = sabaBetTypes.data;
    vm.sabaBetTypesVN = sabaBetTypesVN.data;
    vm.BetItemsByMatch = BetItemsByMatch;
    vm.getLeagueName = getLeagueName;
    vm.ParlayDetails = ParlayDetails;
    vm.showParlayData = showParlayData;
    vm.updateParlayData = updateParlayData;
    vm.getMatch = getMatch;
    vm.updateLeagueInfo = updateLeagueInfo;
    vm.getRNGBetItems = getRNGBetItems;
    vm.ticketResult = ticketResult;
    vm.ticketResultSingleParlay = ticketResultSingleParlay;
    vm.ticketResultIsLive = ticketResultIsLive;
    vm.ticketResultSystemParlay = ticketResultSystemParlay;
    vm.showScore = showScore;
    let MatchIds = [];
    vm.members = [];
    vm.data = {
        MatchId: matchId,
        SportGroup: 0,
        BetType: betType
    };
    vm.BetItemsByMatch();

    function BetItemsByMatch(LastTx) {
        vm.data.LastTx = LastTx === undefined ? '' : LastTx;
        $rootScope.$broadcast('submitting', true);
        vm.submitting = true;
        Lotus.Saba.Report.Outstanding.getBetItemsByMatch(vm.data).then(function(response) {
            vm.loadMore = response.length === vm.data.Limit;
            response.map(function(item) {
                if (vm.data.SportGroup === 2 || vm.data.SportGroup === 1) {
                    MatchIds.push(item.MatchId)
                }
                matchingData(item);
                if (item.ParlayType === 'MixParlay' && item.ParlayData.length) {
                    item.nOdds = 1;
                    item.ParlayData.map(function(par) {
                        item.nOdds = item.nOdds * par.Odds
                    })
                }
            })
            MatchIds = MatchIds.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            if (MatchIds.length) {
                vm.getMatch(MatchIds).then(function(MatchInfo) {
                    response.map(function(item) {
                        let findMatch = MatchInfo.filter(function(match) {
                            return match.MatchId === item.MatchId;
                        })
                        if (findMatch.length) {
                            item.MatchDetails = findMatch[0]
                        }
                    })
                    vm.members = vm.members.concat(response);
                    $timeout(function() {
                        $scope.$digest();
                    }, 10)
                })
            } else {
                vm.members = vm.members.concat(response);
            }
            $timeout(function() {
                $scope.$digest();
                $rootScope.$broadcast('submitting', false);
                vm.submitting = false
            }, 500);
        })
    }

    function showParlayData(item) {
        if (item.showParlay) {
            item.showParlay = !item.showParlay;
        } else {
            item.parlayUpdating = true;
            vm.updateParlayData(item).then(function(response) {
                item.parlayUpdating = false;
                item.showParlay = !item.showParlay;
                $timeout(function() {
                    $scope.$digest();
                }, 10)
            })
        }
    }

    function updateParlayData(item) {
        let PromiseTeamIds = []
        let PromiseLeagueIds = []
        item.ParlayData.map(function(parlay) {
            PromiseTeamIds.push(parlay.HomeId)
            PromiseTeamIds.push(parlay.AwayId);
            PromiseLeagueIds.push(parlay.LeagueId)
        })
        PromiseTeamIds = PromiseTeamIds.filter(function(item, index, inputArray) {
            return inputArray.indexOf(item) === index;
        });
        PromiseLeagueIds = PromiseLeagueIds.filter(function(item, index, inputArray) {
            return inputArray.indexOf(item) === index;
        });
        let promiseTeams = PromiseTeamIds.map(function(id) {
            return getTeamName(id)
        })
        return Promise.all(promiseTeams).then(function() {
            item.ParlayData.map(function(parlay) {
                let findHome = vm.localParlayData.Teams.filter(function(team) {
                    return team.Id === parlay.HomeId
                })[0];
                let findAway = vm.localParlayData.Teams.filter(function(team) {
                    return team.Id === parlay.AwayId
                })[0];
                parlay.HomeTeamNameEn = findHome.Name
                parlay.AwayTeamNameEn = findAway.Name
                matchingData(parlay);
            })
            let promiseLeagues = PromiseLeagueIds.map(function(id) {
                return getLeagueName(id)
            })
            return Promise.all(promiseLeagues).then(function() {
                item.ParlayData.map(function(parlay) {
                    let findLeague = vm.localParlayData.Leagues.filter(function(League) {
                        return League.Id === parlay.LeagueId
                    })[0];
                    parlay.LeagueNameEn = findLeague.Name
                })
                return true
            })
        }).catch(function(e) {
            console.log(e);
        });
    }

    function getTeamName(id) {
        let find = vm.localParlayData.Teams.filter(function(team) {
            return team.Id === id
        })
        if (find.length !== 0) {
            return find[0]
        } else {
            return Lotus.Saba.Team.getTeamName({
                TeamId: id
            }).then(function(response) {
                response.Id = id
                vm.localParlayData.Teams.push(response);
                sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                return response
            })
        }
    }

    function getLeagueName(id) {
        let find = vm.localParlayData.Leagues.filter(function(team) {
            return team.Id === id
        })
        if (find.length !== 0) {
            return $timeout(function() {
                return find[0]
            })
        } else {
            return Lotus.Saba.League.getLeagueName({
                LeagueId: id
            }).then(function(response) {
                response.Id = id
                vm.localParlayData.Leagues.push(response);
                sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                return response
            })
        }
    }

    function ParlayDetails(item, $event) {
        $mdDialog.show({
            controller: ParlayDetailsCtrl,
            templateUrl: 'app/main/accounting/saba/member/template/dialog.parlay.html',
            parent: angular.element(document.body),
            targetEvent: $event,
            clickOutsideToClose: true,
            locals: {
                item: item
            },
            multiple: true,
            fullscreen: true
        });

        function ParlayDetailsCtrl($scope, item) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.MixParlay = item.ParlayType === 'MixParlay';
            if (item.ParlayType === 'MixParlay') {
                vm.updateParlayData(item).then(function() {
                    $scope.ticket = item;
                    $timeout(function() {
                        $scope.$digest();
                    }, 10)
                })
            } else {
                let TeamIds = [];
                Lotus.Saba.Report.Statement.getSystemParlayDetails({
                    RefNo: item.ParlayRefNo
                }).then(function(response) {
                    response.map(function(item) {
                        if (item.SystemParlayDetail.length) {
                            item.nOdds = 1;
                            item.SystemParlayDetail.map(function(par) {
                                item.nOdds = item.nOdds * par.Odds;
                                TeamIds.push(par.HomeId)
                                TeamIds.push(par.AwayId);
                            })
                        }
                    })
                    TeamIds = TeamIds.filter(function(item, index, inputArray) {
                        return inputArray.indexOf(item) === index;
                    });
                    let promises = TeamIds.map(function(id) {
                        return getTeamName(id)
                    })
                    Promise.all(promises).then(function(teams) {
                        response.map(function(item) {
                            if (item.SystemParlayDetail.length) {
                                item.SystemParlayDetail.map(function(par) {
                                    par.HomeTeamNameEn = teams.filter(function(tea) {
                                        return tea.Id === par.HomeId
                                    })[0].Name;
                                    par.AwayTeamNameEn = teams.filter(function(tea) {
                                        return tea.Id === par.AwayId
                                    })[0].Name;
                                })
                            }
                        })
                        $scope.SystemParlay = response;
                        $timeout(function() {
                            $scope.$digest()
                        }, 10)
                    })
                }).catch(function(error) {
                    console.log(error)
                })
            }
        }
    }

    function matchingData(item) {
        let data = vm.sabaBetTypes.filter(function(bet) {
            return bet.i === item.BetType
        });
        let vn = vm.sabaBetTypesVN.filter(function(bet) {
            return bet.i === item.BetType
        })
        item.BetTypeTrans = vn.length !== 0 ? vn[0].n : item.BetType;
        if (data.length !== 0) {
            if (data[0].t !== undefined) {
                let trans = data[0].t[item.BetTeam];
                item.BetTeamTrans = trans;
                if (msUtils.exists(vm.data.SportGroup, [0, 2]) && trans !== undefined) {
                    if (trans.includes('home')) {
                        if (item.HomeTeamNameEn !== undefined) {
                            item.BetTeamTrans = trans.replace(/home/g, item.HomeTeamNameEn);
                        }
                    }
                    if (trans.includes('away')) {
                        if (item.HomeTeamNameEn !== undefined) {
                            item.BetTeamTrans = trans.replace(/away/g, item.AwayTeamNameEn);
                        }
                    }
                }
            } else {
                item.BetTeamTrans = item.BetTeam;
            }
            if (item.BetType === 5) {
                item.BetTeamTrans = 'FT.' + item.BetTeam;
                item.HomeHdp = '';
                item.AwayHdp = ''
            }
            if (item.BetType === 15) {
                item.BetTeamTrans = 'HT.' + item.BetTeam;
                item.HomeHdp = '';
                item.AwayHdp = ''
            }
        } else {
            item.BetTeamTrans = item.BetTeam;
        }
        if (item.BetType === 10) {
            item.BetTeamTrans = getTeamName(item.BetTeam).Name;
        }
    }

    function getMatch(arItem) {
        let Existed = [],
            ExistedId = [];
        vm.localParlayData.Matchs.map(function(item) {
            if (msUtils.exists(item.MatchId, arItem)) {
                Existed.push(item);
                ExistedId.push(item.MatchId);
            }
        })
        let dnExist = arItem.filter(function(item) {
            return ExistedId.indexOf(item) === -1;
        });
        if (dnExist.length === 0) {
            return $timeout(function() {
                return Existed
            })
        } else {
            return Lotus.Saba.Match.getMatchDetails({
                MatchIds: dnExist
            }).then(function(response) {
                vm.localParlayData.Matchs = Existed.concat(response);
                sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                return vm.localParlayData.Matchs
            })
        }
    }

    function updateLeagueInfo(item) {
        vm.getLeagueName(item.MatchDetails.LeagueId).then(function(response) {
            item.LeagueName = response.Name;
            $timeout(function() {
                $scope.$digest();
            })
        })
    }

    function ticketResult(item, $event) {
        if (vm.data.SportGroup === 0 && item.SingleParlayData !== undefined) {
            vm.ticketResultSingleParlay(item, $event);
        } else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType !== 'System Parlay' && item.ParlayType !== 'MixParlay') {
            vm.ticketResultIsLive(item, $event);
        } else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && (item.ParlayType === 'System Parlay' || item.ParlayType === 'MixParlay')) {
            vm.ticketResultSystemParlay(item, $event);
        } else if (vm.data.SportGroup === 2) {
            vm.ticketResultIsLive(item, $event);
        }
    }

    function ticketResultSingleParlay(item, $event) {
        $mdDialog.show({
            controller: resultSingleParlayCtrl,
            templateUrl: 'app/main/accounting/saba/member/template/result/single-parlay.html',
            parent: angular.element(document.body),
            targetEvent: $event,
            clickOutsideToClose: true,
            locals: {
                item: item
            },
            multiple: true,
            fullscreen: true
        });

        function resultSingleParlayCtrl($scope, item) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            vm.getMatch([item.MatchId]).then(function(response) {
                item.MatchDetails = response[0];
                $scope.item = item;
                $timeout(function() {
                    $scope.$digest();
                })
            })
        }
    }

    function ticketResultIsLive(item, $event) {
        $mdDialog.show({
            controller: resultSportLiveCtrl,
            templateUrl: 'app/main/accounting/saba/member/template/result/sport-live.html',
            parent: angular.element(document.body),
            targetEvent: $event,
            clickOutsideToClose: true,
            locals: {
                item: item
            },
            multiple: true,
            fullscreen: true
        });

        function resultSportLiveCtrl($scope, item) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            $scope.item = item;
            vm.getMatch([item.MatchId]).then(function(response) {
                $scope.item.MatchDetails = response[0];
                $timeout(function() {
                    $scope.$digest();
                })
            })
        }
    }

    function ticketResultSystemParlay(item, $event) {
        $mdDialog.show({
            controller: resultSystemParlayCtrl,
            templateUrl: 'app/main/accounting/saba/member/template/result/system-parlay.html',
            parent: angular.element(document.body),
            targetEvent: $event,
            clickOutsideToClose: true,
            locals: {
                item: item
            },
            multiple: true,
            fullscreen: true
        });

        function resultSystemParlayCtrl($scope, item) {
            $scope.cancel = function() {
                $mdDialog.cancel();
            };
            let MatchIds = [];
            item.ParlayData.map(function(parlay) {
                MatchIds.push(parlay.MatchId)
            })
            vm.getMatch(MatchIds).then(function(response) {
                item.ParlayData.map(function(parlay, index) {
                    let find = response.filter(function(res) {
                        return res.MatchId === parlay.MatchId;
                    })
                    if (find.length) {
                        parlay.GameStatus = find[0].GameStatus;
                        parlay.HomeScore = find[0].HomeScore;
                        parlay.AwayScore = find[0].AwayScore;
                        parlay.HtAwayScore = find[0].HtAwayScore;
                        parlay.HtHomeScore = find[0].HtHomeScore;
                        item.ParlayData[index] = Object.assign(find[0], parlay);
                    }
                })
                vm.updateParlayData(item).then(function(response) {
                    $timeout(function() {
                        $scope.item = item;
                        $scope.$digest();
                    }, 10)
                })
            })
        }
    }

    function getRNGBetItems(item) {
        if (item.showBetItem === true) {
            item.showBetItem = false;
            return;
        }
        item.betItemUpdating = true;
        Lotus.Saba.Report.Statement.getRNGBetItems({
            RefNo: item.Tx
        }).then(function(response) {
            response.map(function(res) {
                matchingData(res);
            })
            item.RNGBetItems = response;
            item.showBetItem = true;
            item.betItemUpdating = false;
            $timeout(function() {
                $scope.$digest();
            }, 10)
        })
    }

    function showScore(item) {
        return msUtils.exists(item.SportType, [8, 1, 3, 4, 28, 26])
    }
}
(function() {
    'use strict';
    angular.module('app.saba').controller('saba1x2Ctrl', saba1x2Ctrl);

    function saba1x2Ctrl($rootScope, $state, $stateParams, $mdToast, $scope, $timeout, $interval, $mdDialog, msUtils, sabaBetTypes, sabaBetTypesVN) {
        let vm = this;
        vm.getMatchBetTypeLeagues = getMatchBetTypeLeagues;
        vm.BetItemsByMatch = BetItemsByMatch;
        vm.MatchBetTypeReport = MatchBetTypeReport;
        vm.initLeague = initLeague;
        vm.leagueLabel = leagueLabel;
        vm.selectLeague = selectLeague;
        vm.selectAllLeague = selectAllLeague;
        vm.refreshEvent = refreshEvent;
        vm.immediatePrice = immediatePrice;
        vm.refreshEvent(60);
        vm.leagueSelected = [];
        vm.MatchBetTypeReport();
        vm.getMatchBetTypeLeagues();
        vm.lULeague = moment().unix();
        vm.lUMatch = moment().unix();
        vm.interval = $interval(function() {
            let currentTime = moment().unix();
            let checkLeague = currentTime - vm.lULeague;
            let checkMatch = currentTime - vm.lUMatch;
            if (checkLeague > 300) {
                vm.lULeague = moment().unix();
                vm.getMatchBetTypeLeagues();
                $mdToast.show($mdToast.simple().textContent('Cập nhật danh sách giải đấu').position('right bottom').hideDelay(3000))
            }
            if (!vm.StopCheckMatch) {
                vm.timer--;
                if (checkMatch > vm.maxTimer) {
                    vm.lUMatch = moment().unix();
                    vm.timer = vm.maxTimer;
                    vm.MatchBetTypeReport();
                }
            }
        }, 1000)
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.interval);
        });

        function getMatchBetTypeLeagues() {
            Lotus.Saba.Report.Outstanding.getMatchBetTypeLeagues({
                Group: 1
            }).then(function(response) {
                response = response.sort(function(a, b) {
                    return /[A-Za-z]/.test(a.LeagueNameEn) - /[A-Za-z]/.test(b.LeagueNameEn) || (a.LeagueNameEn.toUpperCase() < b.LeagueNameEn.toUpperCase() ? -1 : a.LeagueNameEn.toUpperCase() > b.LeagueNameEn.toUpperCase() ? 1 : 0)
                });
                vm.leagueArr = response;
                vm.initLeague();
            })
        }

        function refreshEvent(event) {
            vm.lUMatch = moment().unix();
            vm.maxTimer = event;
            if (event === 0) {
                vm.StopCheckMatch = true;
                vm.timer = 'OFF'
            } else {
                vm.timer = event;
            }
        }

        function immediatePrice() {
            vm.MatchBetTypeReport();
            vm.refreshEvent(vm.maxTimer);
        }

        function MatchBetTypeReport() {
            vm.submitting = true;
            let data = {
                Group: 1
            }
            if (vm.leagueSelected.length === 1) {
                data.LeagueId = vm.leagueSelected[0]
            }
            Lotus.Saba.Report.Outstanding.getMatchBetTypeReport(data).then(function(response) {
                response = response.sort(function(a, b) {
                    return a.MatchAt - b.MatchAt
                });
                response = response.groupBy(function(o) {
                    return JSON.stringify({
                        a: o.LeagueId
                    })
                });
                response.map(function(item) {
                    item.group.map(function(group) {
                        group.Today = moment(group.MatchAt).date() === moment().date();
                        group.fineOutstanding = [];
                        group.Outstanding.map(function(out) {
                            let TypeSP = out.Type.split('|');
                            out.Live = TypeSP[0] !== 'db'
                            out.Name = TypeSP[1];
                            if (TypeSP[0] !== 'db') {
                                out.Score = TypeSP[0].split(':')[1];
                            }
                            out.GroupKey = TypeSP[0];
                            out.where = TypeSP[2];
                        })
                        group.Outstanding = group.Outstanding.sort(function(a, b) {
                            return b.Type.length - a.Type.length;
                        });
                        group.Outstanding = group.Outstanding.groupBy(function(o) {
                            return JSON.stringify({
                                a: o.GroupKey
                            })
                        });
                        group.Outstanding.map(function(out) {
                            let fineObj = {};
                            out.group.map(function(val) {
                                fineObj.Live = val.Live;
                                fineObj.Name = val.Name;
                                if (fineObj.Live) {
                                    fineObj.Score = val.Score;
                                }
                                if (val.Name === 'f' && val.where === '1') {
                                    fineObj.FHome = val;
                                } else if (val.Name === 'f' && val.where === 'x') {
                                    fineObj.FEven = val
                                } else if (val.Name === 'f' && val.where === '2') {
                                    fineObj.FAway = val
                                } else if (val.Name === 'h' && val.where === '1') {
                                    fineObj.HHome = val;
                                } else if (val.Name === 'h' && val.where === 'x') {
                                    fineObj.HEven = val
                                } else if (val.Name === 'h' && val.where === '2') {
                                    fineObj.HAway = val
                                }
                            })
                            group.fineOutstanding.push(fineObj)
                        })
                    })
                    item.group = item.group.sort(function(m) {
                        return m.MatchAt - m.MatchAt
                    })
                });
                vm.outStandings = response;
                vm.submitting = false;
                $scope.$digest()
            })
        }

        function initLeague() {
            if (vm.leagueSelected.length === 0) {
                vm.selectAllLeague();
            } else {
                vm.leagueArr.map(function(item) {
                    item.active = msUtils.exists(item.LeagueId, vm.leagueSelected)
                })
            }
            vm.leagueLabel();
        }

        function leagueLabel() {
            let length = vm.leagueArr.filter(function(p) {
                return p.active
            });
            if (length.length === vm.leagueArr.length) {
                vm.textLeagueLabel = 'Tất cả giải'
            } else {
                vm.textLeagueLabel = length[0].LeagueNameEn
            }
        }

        function selectLeague(item) {
            vm.leagueArr.map(function(league) {
                league.active = item.LeagueId === league.LeagueId
            })
            vm.leagueLabel();
        }

        function selectAllLeague() {
            vm.leagueArr.map(function(league) {
                league.active = true;
            })
            vm.leagueLabel();
        }
        $scope.$on("$mdMenuClose", function(e) {
            vm.leagueSelected = []
            vm.leagueArr.map(function(item) {
                if (item.active) {
                    vm.leagueSelected.push(item.LeagueId)
                }
            });
            if (vm.backup === undefined) {
                vm.backup = [];
            }
            let is_same = vm.backup.length === vm.leagueSelected.length && vm.backup.every(function(element, index) {
                return element === vm.leagueSelected[index];
            });
            if (!is_same) {
                vm.backup = angular.copy(vm.leagueSelected)
                vm.MatchBetTypeReport();
            }
        });

        function BetItemsByMatch(item, betType, $event) {
            $mdDialog.show({
                controller: sabaItemsOutCtrl,
                templateUrl: 'app/main/saba/statement/risk-control/bet-items/bet-items-dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                hasBackdrop: false,
                fullscreen: true,
                locals: {
                    matchId: item.MatchId,
                    betType: betType,
                    sabaBetTypes: sabaBetTypes,
                    sabaBetTypesVN: sabaBetTypesVN
                }
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaOutClassCtrl', sabaOutClassCtrl);

    function sabaOutClassCtrl($rootScope, $location, $state, $stateParams, $timeout, network, msUtils) {
        let vm = this;
        $rootScope.$broadcast('submitting', true);
        vm.classify = classify;
        vm.sumByCompany = sumByCompany;
        vm.sumByAgent = sumByAgent;
        vm.sumBySuper = sumBySuper;
        vm.report = {};
        vm.report.sport = $stateParams.sport === undefined ? '0,1,2,3,4,5,6,7,8,99' : $stateParams.sport;
        vm.report.uid = $stateParams.uid === undefined ? '' : $stateParams.uid;
        vm.report.name = $stateParams.name === undefined ? $rootScope.User.Username : $stateParams.name;
        vm.report.level = $stateParams.level === undefined ? $rootScope.User.Level : parseInt($stateParams.level);
        vm.report.matchId = $stateParams.matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        let data = {
            UserId: vm.report.uid,
            SportGroups: vm.report.sport.split(',')
        }
        if (vm.report.uid === '') {
            delete data.UserId
        }
        Lotus.Saba.Report.Outstanding.getUserReportGroupBySportGroup(data).then(function(response) {
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            response.sort(function(a, b) {
                return a.SportGroup - b.SportGroup
            });
            vm.classifications = [];
            if (vm.report.level === 1) {
                vm.sumByCompany(response)
            } else if (vm.report.level === 5) {
                vm.sumByAgent(response)
            } else {
                vm.sumBySuper(response)
            }
        });

        function sumByCompany(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                },
                Agent: 0,
                Company: 0
            };
            angular.forEach(response, function(sport) {
                let oSport = {
                    SportGroup: sport.SportGroup,
                    Player: {
                        Quantity: sport.Player.Quantity,
                        Amount: sport.Player.Amount,
                    },
                    Agent: sport.Descendant.Income,
                    Company: sport.Income
                };
                vm.classifications.push(oSport)
                vm.SumTotal.Player.Quantity += sport.Player.Quantity;
                vm.SumTotal.Player.Amount += sport.Player.Amount;
                vm.SumTotal.Agent += sport.Descendant.Income;
                vm.SumTotal.Company += sport.Income;
            })
        }

        function sumByAgent(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                },
                Agent: 0,
                Company: 0
            };
            angular.forEach(response, function(sport) {
                let oSport = {
                    SportGroup: sport.SportGroup,
                    Player: {
                        Quantity: sport.Player.Quantity,
                        Amount: sport.Player.Amount,
                    },
                    Agent: sport.Income,
                    Company: sport.Ancestor.Income
                };
                vm.classifications.push(oSport)
                vm.SumTotal.Player.Quantity += sport.Player.Quantity;
                vm.SumTotal.Player.Amount += sport.Player.Amount;
                vm.SumTotal.Agent += sport.Income;
                vm.SumTotal.Company += sport.Ancestor.Income;
            })
        }

        function sumBySuper(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                },
                Agent: 0,
                My: 0,
                Company: 0
            };
            angular.forEach(response, function(sport) {
                let oSport = {
                    SportGroup: sport.SportGroup,
                    Player: {
                        Quantity: sport.Player.Quantity,
                        Amount: sport.Player.Amount,
                    },
                    Agent: sport.Descendant.Income,
                    My: sport.Income,
                    Company: sport.Ancestor.Income
                };
                vm.classifications.push(oSport)
                vm.SumTotal.Player.Quantity += sport.Player.Quantity;
                vm.SumTotal.Player.Amount += sport.Player.Amount;
                vm.SumTotal.Agent += sport.Descendant.Income;
                vm.SumTotal.My += sport.Income;
                vm.SumTotal.Company += sport.Ancestor.Income;
            });
        }

        function classify(item) {
            $state.go('app.saba.statement.outstanding.general', {
                uid: vm.report.uid,
                name: vm.report.name,
                level: vm.report.level,
                group: item.SportGroup
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('sabaOutNavCtrl', sabaOutNavCtrl);

    function sabaOutNavCtrl($rootScope, $state, $stateParams, $scope, $location, network, $q, AuthService, msUtils) {
        let vm = this;
        vm.sportLabel = sportLabel;
        vm.selectSport = selectSport;
        vm.selectAllSport = selectAllSport;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.isCompany = AuthService.isCompany();
        vm.report = {
            category: 0,
            selected: []
        };
        vm.sportGroups = [{
            id: 0,
            en: 'SportsBook',
            name: 'Thể Thao'
        }, {
            id: 1,
            en: 'NumberGame',
            name: 'Trò chơi Số'
        }, {
            id: 2,
            en: 'VirtualSports',
            name: 'Thể Thao Ảo'
        }, {
            id: 3,
            en: 'Arcadia Gaming',
            name: 'Arcadia Gaming'
        }, {
            id: 4,
            en: 'Saba.Club',
            name: 'Saba.Club'
        }, {
            id: 5,
            en: 'Keno',
            name: 'Keno'
        }, {
            id: 6,
            en: 'Lottery',
            name: 'Lottery'
        }, {
            id: 7,
            en: 'RNG Casino',
            name: 'RNG Casino'
        }, {
            id: 8,
            en: 'VGaming',
            vn: 'VGaming'
        }, {
            id: 99,
            en: 'Others',
            name: 'Trò chơi khác'
        }]
        vm.report.selected = $stateParams.sport === undefined ? ['0', '1', '2', '3', '4', '5', '6', '7', '8', '99'] : $stateParams.sport.split(',');
        vm.sportGroups.map(function(sport) {
            sport.active = msUtils.exists(sport.id.toString(), vm.report.selected)
        })
        vm.sportLabel();
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
            })
        }

        function querySearch() {
            let result = network.User.searchLite({
                MatchName: vm.searchText
            }).then(function(response) {
                return response
            });
            let deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.matchName = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.matchName = '';
        }

        function selectAllSport() {
            let checkLength = vm.sportGroups.filter(function(p) {
                return p.active
            }).length === vm.sportGroups.length;
            vm.sportGroups.map(function(sport) {
                sport.active = !checkLength;
            })
            vm.sportLabel();
        }

        function selectSport(item) {
            vm.sportGroups.map(function(sport) {
                if (sport.id === item.id) {
                    sport.active = !sport.active;
                }
            })
            vm.sportLabel();
        }

        function sportLabel() {
            let checkLength = vm.sportGroups.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.sportGroups.length) {
                vm.textSportLabel = 'Tất cả nhóm thể thao'
            } else if (checkLength.length === 0) {
                vm.textSportLabel = 'Chọn nhóm thể thao'
            } else if (checkLength.length === 1) {
                vm.textSportLabel = checkLength[0].name
            } else {
                vm.textSportLabel = checkLength.length + ' nhóm'
            }
        }

        function loadReport() {
            let checkLength = vm.sportGroups.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllSport();
            }
            vm.selected = [];
            vm.sportGroups.map(function(sport) {
                if (sport.active) {
                    vm.selected.push(sport.id)
                }
            })
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.saba.statement.outstanding.general' : 'app.saba.statement.outstanding.classification';
            $state.go(appUrl, {
                sport: vm.selected.toString(),
                name: vm.matchName,
                matchId: vm.matchId,
                level: vm.matchLevel
            }, {
                reload: true
            })
        }
        Lotus.Saba.Report.Outstanding.getIncompletedFiscalDate().then(function(response) {
            vm.inCompleted = response
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaMemOutCtrl', sabaMemOutCtrl);

    function sabaMemOutCtrl($rootScope, $scope, $state, $stateParams, $location, $timeout, msUtils, network, $mdDialog, AuthService, sabaBetTypes, sabaBetTypesVN) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.localParlayData = sessionStorage.getItem('Parlay') === null ? {} : JSON.parse(sessionStorage.getItem('Parlay'));
        if (vm.localParlayData.Teams === undefined) {
            vm.localParlayData.Teams = []
        }
        if (vm.localParlayData.Leagues === undefined) {
            vm.localParlayData.Leagues = []
        }
        if (vm.localParlayData.Matchs === undefined) {
            vm.localParlayData.Matchs = []
        }
        vm.sabaBetTypes = sabaBetTypes.data;
        vm.sabaBetTypesVN = sabaBetTypesVN.data;
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.UserId = $stateParams.uid;
        vm.data.SportGroup = parseInt($stateParams.sport);
        vm.data.Limit = 100;
        vm.data.name = $stateParams.name;
        vm.loadMemberReport();
        vm.getLeagueName = getLeagueName;
        vm.ParlayDetails = ParlayDetails;
        vm.showParlayData = showParlayData;
        vm.updateParlayData = updateParlayData;
        vm.getMatch = getMatch;
        vm.updateLeagueInfo = updateLeagueInfo;
        vm.getRNGBetItems = getRNGBetItems;
        vm.ticketResult = ticketResult;
        vm.ticketResultSingleParlay = ticketResultSingleParlay;
        vm.ticketResultIsLive = ticketResultIsLive;
        vm.ticketResultSystemParlay = ticketResultSystemParlay;
        vm.showScore = showScore;
        vm.viewIp = viewIp;
        vm.members = [];
        let MatchIds = [];

        function loadMemberReport(LastTx) {
            LastTx = LastTx === undefined ? '' : LastTx;
            vm.data.LastTx = LastTx;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            Lotus.Saba.Report.Outstanding.getBetItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                response.map(function(item) {
                    if (vm.data.SportGroup === 2 || vm.data.SportGroup === 1) {
                        MatchIds.push(item.MatchId)
                    }
                    matchingData(item);
                    updateHdp(item);
                    if (item.ParlayType === 'MixParlay' && item.ParlayData.length) {
                        item.nOdds = 1;
                        item.ParlayData.map(function(par) {
                            item.nOdds = item.nOdds * par.Odds
                        })
                    }
                })
                MatchIds = MatchIds.filter(function(item, index, inputArray) {
                    return inputArray.indexOf(item) === index;
                });
                if (MatchIds.length) {
                    vm.getMatch(MatchIds).then(function(MatchInfo) {
                        response.map(function(item) {
                            let findMatch = MatchInfo.filter(function(match) {
                                return match.MatchId === item.MatchId;
                            })
                            if (findMatch.length) {
                                item.MatchDetails = findMatch[0]
                            }
                        })
                        vm.members = vm.members.concat(response);
                        $timeout(function() {
                            $scope.$digest();
                        }, 10)
                    })
                } else {
                    vm.members = vm.members.concat(response);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function updateHdp(item) {}

        function showParlayData(item) {
            if (item.showParlay) {
                item.showParlay = !item.showParlay;
            } else {
                item.parlayUpdating = true;
                vm.updateParlayData(item).then(function(response) {
                    item.parlayUpdating = false;
                    item.showParlay = !item.showParlay;
                    $timeout(function() {
                        $scope.$digest();
                    }, 10)
                })
            }
        }

        function updateParlayData(item) {
            let PromiseTeamIds = []
            let PromiseLeagueIds = []
            item.ParlayData.map(function(parlay) {
                PromiseTeamIds.push(parlay.HomeId)
                PromiseTeamIds.push(parlay.AwayId);
                PromiseLeagueIds.push(parlay.LeagueId)
            })
            PromiseTeamIds = PromiseTeamIds.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            PromiseLeagueIds = PromiseLeagueIds.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            let promiseTeams = PromiseTeamIds.map(function(id) {
                return getTeamName(id)
            })
            return Promise.all(promiseTeams).then(function() {
                item.ParlayData.map(function(parlay) {
                    let findHome = vm.localParlayData.Teams.filter(function(team) {
                        return team.Id === parlay.HomeId
                    })[0];
                    let findAway = vm.localParlayData.Teams.filter(function(team) {
                        return team.Id === parlay.AwayId
                    })[0];
                    parlay.HomeTeamNameEn = findHome.Name
                    parlay.AwayTeamNameEn = findAway.Name
                    matchingData(parlay);
                })
                let promiseLeagues = PromiseLeagueIds.map(function(id) {
                    return getLeagueName(id)
                })
                return Promise.all(promiseLeagues).then(function() {
                    item.ParlayData.map(function(parlay) {
                        let findLeague = vm.localParlayData.Leagues.filter(function(League) {
                            return League.Id === parlay.LeagueId
                        })[0];
                        parlay.LeagueNameEn = findLeague.Name
                    })
                    return true
                })
            }).catch(function(e) {
                console.log(e);
            });
        }

        function getTeamName(id) {
            let find = vm.localParlayData.Teams.filter(function(team) {
                return team.Id === id
            })
            if (find.length !== 0) {
                return find[0]
            } else {
                return Lotus.Saba.Team.getTeamName({
                    TeamId: id
                }).then(function(response) {
                    response.Id = id
                    vm.localParlayData.Teams.push(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return response
                })
            }
        }

        function getLeagueName(id) {
            let find = vm.localParlayData.Leagues.filter(function(team) {
                return team.Id === id
            })
            if (find.length !== 0) {
                return $timeout(function() {
                    return find[0]
                })
            } else {
                return Lotus.Saba.League.getLeagueName({
                    LeagueId: id
                }).then(function(response) {
                    response.Id = id
                    vm.localParlayData.Leagues.push(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return response
                })
            }
        }

        function ParlayDetails(item, $event) {
            $mdDialog.show({
                controller: ParlayDetailsCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/dialog.parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function ParlayDetailsCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.MixParlay = item.ParlayType === 'MixParlay';
                if (item.ParlayType === 'MixParlay') {
                    vm.updateParlayData(item).then(function() {
                        $scope.ticket = item;
                        $timeout(function() {
                            $scope.$digest();
                        }, 10)
                    })
                } else {
                    let TeamIds = [];
                    Lotus.Saba.Report.Statement.getSystemParlayDetails({
                        RefNo: item.ParlayRefNo
                    }).then(function(response) {
                        response.map(function(item) {
                            if (item.SystemParlayDetail.length) {
                                item.nOdds = 1;
                                item.SystemParlayDetail.map(function(par) {
                                    item.nOdds = item.nOdds * par.Odds;
                                    TeamIds.push(par.HomeId)
                                    TeamIds.push(par.AwayId);
                                })
                            }
                        })
                        TeamIds = TeamIds.filter(function(item, index, inputArray) {
                            return inputArray.indexOf(item) === index;
                        });
                        let promises = TeamIds.map(function(id) {
                            return getTeamName(id)
                        })
                        Promise.all(promises).then(function(teams) {
                            response.map(function(item) {
                                if (item.SystemParlayDetail.length) {
                                    item.SystemParlayDetail.map(function(par) {
                                        par.HomeTeamNameEn = teams.filter(function(tea) {
                                            return tea.Id === par.HomeId
                                        })[0].Name;
                                        par.AwayTeamNameEn = teams.filter(function(tea) {
                                            return tea.Id === par.AwayId
                                        })[0].Name;
                                    })
                                }
                            })
                            $scope.SystemParlay = response;
                            $timeout(function() {
                                $scope.$digest()
                            }, 10)
                        })
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }

        function matchingData(item) {
            let data = vm.sabaBetTypes.filter(function(bet) {
                return bet.i === item.BetType
            });
            let vn = vm.sabaBetTypesVN.filter(function(bet) {
                return bet.i === item.BetType
            })
            item.BetTypeTrans = vn.length !== 0 ? vn[0].n : item.BetType;
            if (data.length !== 0) {
                if (data[0].t !== undefined) {
                    let trans = data[0].t[item.BetTeam];
                    item.BetTeamTrans = trans;
                    if (msUtils.exists(vm.data.SportGroup, [0, 2]) && trans !== undefined) {
                        if (trans.includes('home')) {
                            if (item.HomeTeamNameEn !== undefined) {
                                item.BetTeamTrans = trans.replace(/home/g, item.HomeTeamNameEn);
                            }
                        }
                        if (trans.includes('away')) {
                            if (item.HomeTeamNameEn !== undefined) {
                                item.BetTeamTrans = trans.replace(/away/g, item.AwayTeamNameEn);
                            }
                        }
                    }
                } else {
                    item.BetTeamTrans = item.BetTeam;
                }
                if (item.BetType === 5) {
                    item.BetTeamTrans = 'FT.' + item.BetTeam;
                    item.HomeHdp = '';
                    item.AwayHdp = ''
                }
                if (item.BetType === 15) {
                    item.BetTeamTrans = 'HT.' + item.BetTeam;
                    item.HomeHdp = '';
                    item.AwayHdp = ''
                }
            } else {
                item.BetTeamTrans = item.BetTeam;
            }
            if (item.BetType === 10) {
                item.BetTeamTrans = getTeamName(item.BetTeam).Name;
            }
        }

        function getMatch(arItem) {
            let Existed = [],
                ExistedId = [];
            vm.localParlayData.Matchs.map(function(item) {
                if (msUtils.exists(item.MatchId, arItem)) {
                    Existed.push(item);
                    ExistedId.push(item.MatchId);
                }
            })
            let dnExist = arItem.filter(function(item) {
                return ExistedId.indexOf(item) === -1;
            });
            if (dnExist.length === 0) {
                return $timeout(function() {
                    return Existed
                })
            } else {
                return Lotus.Saba.Match.getMatchDetails({
                    MatchIds: dnExist
                }).then(function(response) {
                    vm.localParlayData.Matchs = Existed.concat(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return vm.localParlayData.Matchs
                })
            }
        }

        function updateLeagueInfo(item) {
            vm.getLeagueName(item.MatchDetails.LeagueId).then(function(response) {
                item.LeagueName = response.Name;
                $timeout(function() {
                    $scope.$digest();
                })
            })
        }

        function ticketResult(item, $event) {
            if (vm.data.SportGroup === 0 && item.SingleParlayData !== undefined) {
                vm.ticketResultSingleParlay(item, $event);
            } else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType !== 'System Parlay' && item.ParlayType !== 'MixParlay') {
                vm.ticketResultIsLive(item, $event);
            } else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && (item.ParlayType === 'System Parlay' || item.ParlayType === 'MixParlay')) {
                vm.ticketResultSystemParlay(item, $event);
            } else if (vm.data.SportGroup === 2) {
                vm.ticketResultIsLive(item, $event);
            }
        }

        function ticketResultSingleParlay(item, $event) {
            $mdDialog.show({
                controller: resultSingleParlayCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/result/single-parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function resultSingleParlayCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                vm.getMatch([item.MatchId]).then(function(response) {
                    item.MatchDetails = response[0];
                    $scope.item = item;
                    $timeout(function() {
                        $scope.$digest();
                    })
                })
            }
        }

        function ticketResultIsLive(item, $event) {
            $mdDialog.show({
                controller: resultSportLiveCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/result/sport-live.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function resultSportLiveCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                vm.getMatch([item.MatchId]).then(function(response) {
                    item.MatchDetails = response[0];
                    $scope.item = item;
                    $timeout(function() {
                        $scope.$digest();
                    })
                })
            }
        }

        function ticketResultSystemParlay(item, $event) {
            $mdDialog.show({
                controller: resultSystemParlayCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/result/system-parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function resultSystemParlayCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                let MatchIds = [];
                item.ParlayData.map(function(parlay) {
                    MatchIds.push(parlay.MatchId)
                })
                vm.getMatch(MatchIds).then(function(response) {
                    item.ParlayData.map(function(parlay, index) {
                        let find = response.filter(function(res) {
                            return res.MatchId === parlay.MatchId;
                        })
                        if (find.length) {
                            parlay.GameStatus = find[0].GameStatus;
                            parlay.HomeScore = find[0].HomeScore;
                            parlay.AwayScore = find[0].AwayScore;
                            parlay.HtAwayScore = find[0].HtAwayScore;
                            parlay.HtHomeScore = find[0].HtHomeScore;
                            item.ParlayData[index] = Object.assign(find[0], parlay);
                        }
                    })
                    vm.updateParlayData(item).then(function(response) {
                        $timeout(function() {
                            $scope.item = item;
                            $scope.$digest();
                        }, 10)
                    })
                })
            }
        }

        function getRNGBetItems(item) {
            if (item.showBetItem === true) {
                item.showBetItem = false;
                return;
            }
            item.betItemUpdating = true;
            Lotus.Saba.Report.Statement.getRNGBetItems({
                RefNo: item.Tx
            }).then(function(response) {
                response.map(function(res) {
                    matchingData(res);
                })
                item.RNGBetItems = response;
                item.showBetItem = true;
                item.betItemUpdating = false;
                $timeout(function() {
                    $scope.$digest();
                }, 10)
            })
        }

        function showScore(item) {
            return msUtils.exists(item.SportType, [8, 1, 3, 4, 28, 26])
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaOutGenCtrl', sabaOutGenCtrl);

    function sabaOutGenCtrl($rootScope, $state, $stateParams, $scope, $timeout, $location, network) {
        let vm = this;
        vm.viewReport = viewReport;
        vm.memberReport = memberReport;
        vm.getAgencyReport = getAgencyReport;
        vm.getMemberReport = getMemberReport;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.sport = $stateParams.sport === undefined ? '0,1,2,3,4,5,6,7,8,99' : $stateParams.sport;
        vm.report.uid = $stateParams.uid === undefined ? '' : $stateParams.uid;
        vm.report.name = $stateParams.name === undefined ? $rootScope.User.Username : $stateParams.name;
        vm.report.level = $stateParams.level === undefined ? $rootScope.User.Level : parseInt($stateParams.level);
        vm.report.matchId = $stateParams.matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 1,
                orderable: false
            }]
        };
        vm.outstandingReports = [];

        function getAgencyReport(page) {
            let data = {
                ParentUserId: vm.report.uid,
                SportGroups: vm.report.sport.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            Lotus.Saba.Report.Outstanding.getChildrenReportGroupByUser(data).then(function(response) {
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
                vm.hasRecord = response.length === 50;
                vm.page = data.Page + 1;
                vm.outstandingReports = vm.outstandingReports.concat(response);
                if (vm.report.level === 1) {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Amount: 0
                        },
                        Agent: 0,
                        Company: 0
                    };
                    vm.outstandingReports.map(function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent += (item.Descendant.Income + item.Income);
                        vm.Total.Company += item.Ancestor.Income;
                    })
                } else {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Amount: 0
                        },
                        Agent: 0,
                        My: 0,
                        Company: 0
                    };
                    vm.outstandingReports.map(function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent += (item.Descendant.Income + item.Income);
                        vm.Total.My += item.Parent.Income;
                        vm.Total.Company += (item.Ancestor.Income - item.Parent.Income);
                    });
                }
                $scope.$digest();
            });
        }

        function getMemberReport() {
            let data = {
                UserId: vm.report.uid,
                SportGroups: vm.report.sport.split(',')
            };
            Lotus.Saba.Report.Outstanding.getPlayerReportGroupBySportGroup(data).then(function(response) {
                response.sort(function(a, b) {
                    return a.SportGroup - b.SportGroup
                });
                vm.outstandingReports = response;
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            });
        }
        if (vm.report.level !== 9) {
            vm.getAgencyReport()
        } else {
            vm.getMemberReport()
        }

        function viewReport(item) {
            $state.go('app.saba.statement.outstanding.general', {
                uid: item.UserId,
                level: item.Level,
                name: item.Username,
                matchId: '',
                match: '',
            })
        }

        function memberReport(item, name) {
            $state.go('app.saba.statement.outstanding.member', {
                sport: item.SportGroup,
                uid: vm.report.uid,
                name: name
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaMemNavCtrl', sabaMemNavCtrl);

    function sabaMemNavCtrl($rootScope, $state, $stateParams, $scope, $location, network, $q, msUtils) {
        var vm = this;
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.report = {
            category: 0,
            selected: []
        };

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.productions = [{
            id: 0,
            en: 'SportsBook',
            name: 'Thể Thao'
        }, {
            id: 1,
            en: 'NumberGame',
            name: 'Trò chơi Số'
        }, {
            id: 2,
            en: 'VirtualSports',
            name: 'Thể Thao Ảo'
        }, {
            id: 3,
            en: 'Arcadia Gaming',
            name: 'Arcadia Gaming'
        }, {
            id: 4,
            en: 'Saba.Club',
            name: 'Saba.Club'
        }, {
            id: 5,
            en: 'Keno',
            name: 'Keno'
        }, {
            id: 6,
            en: 'Lottery',
            name: 'Lottery'
        }, {
            id: 7,
            en: 'RNG Casino',
            name: 'RNG Casino'
        }, {
            id: 8,
            en: 'VGaming',
            name: 'VGaming'
        }, {
            id: 99,
            en: 'Others',
            name: 'Trò chơi khác'
        }];
        vm.report.selected = $stateParams.sport === undefined ? ['0', '1', '2', '3', '4', '5', '6', '7', '8', '99'] : $stateParams.sport.split(',');
        vm.report.from = $stateParams.from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($stateParams.from);
        vm.report.to = $stateParams.to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($stateParams.to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.username = $stateParams.name;
        if ($stateParams.from !== undefined && $stateParams.to !== undefined) {
            if ($stateParams.from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($stateParams.from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($stateParams.from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $stateParams.to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($stateParams.from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($stateParams.from === moment().startOf('month').format('YYYY-MM-DD') && $stateParams.to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($stateParams.from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $stateParams.to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả nhóm'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn nhóm'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' nhóm'
            }
        }
        if ($stateParams.name !== undefined) {
            network.User.searchLite({
                MatchName: $stateParams.name,
                Level: 9
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $stateParams.name
                })[0];
                $scope.$digest();
            })
        }
        vm.searchText = '';

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 9
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.username = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.username = '';
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            if (!vm.username) {
                $state.go('app.saba.statement.member.executive', {
                    from: moment(vm.report.from).format('YYYY-MM-DD'),
                    to: moment(vm.report.to).format('YYYY-MM-DD'),
                    sport: vm.selected.toString()
                }, {
                    reload: true
                })
            } else {
                if (parseInt(vm.report.category) === 0) {
                    $state.go('app.saba.statement.member.general', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        name: vm.username,
                        uid: vm.matchId,
                        level: vm.matchLevel,
                        sport: vm.selected.toString()
                    }, {
                        reload: true
                    })
                } else {
                    $state.go('app.saba.statement.member.byMember', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        uid: vm.matchId,
                        name: vm.username
                    }, {
                        reload: true
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaMemExeCtrl', sabaMemExeCtrl);

    function sabaMemExeCtrl($rootScope, $scope, $location, $state, $stateParams, network) {
        var vm = this;
        vm.loadMemberWinLose = loadMemberWinLose;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $stateParams.from === undefined ? moment().format('YYYY-MM-DD') : $stateParams.from;
        vm.report.to = $stateParams.to === undefined ? moment().format('YYYY-MM-DD') : $stateParams.to;
        vm.report.sport = $stateParams.sport === undefined ? '0,1,2,3,4,5,6,7,8,99' : $stateParams.sport;
        vm.memberWinLoses = [];
        vm.Excludes = [];
        vm.submitting = true;

        function loadMemberWinLose(page) {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                SportGroups: vm.report.sport.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            Lotus.Saba.Report.PlayerWinLose.getMyPlayersReportGroupByUser(data).then(function(response) {
                vm.memberWinLoses = vm.memberWinLoses.concat(response);
                vm.hasRecord = response.length === data.Size;
                vm.nextPage = data.Page + 1;
                vm.submitting = false;
                $scope.$digest();
            })
        }
        vm.loadMemberWinLose();

        function viewReport(item) {
            $state.go('app.saba.statement.member.byMember', {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                name: item.Username,
                sport: vm.report.sport
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('memberClassificationController', memberClassificationController);

    function memberClassificationController($rootScope, $state, $location, network) {
        var vm = this;
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.name = $location.search().name;
        vm.send = {};
        vm.send.StartDate = vm.report.startDate;
        vm.send.EndDate = vm.report.endDate;
        vm.send.GameTypes = vm.report.game.split(',');
        vm.send.FindUsers = [vm.report.name];
        vm.send.ListType = 1;
        network.POSTdata('api/report/history/me/memberwinlose/find', vm.send).then(function(response) {
            vm.response = response;
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaMemByMemCtrl', sabaMemByMemCtrl);

    function sabaMemByMemCtrl($rootScope, $scope, $location, $state, $stateParams, network) {
        var vm = this;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $stateParams.from === undefined ? moment().format('YYYY-MM-DD') : $stateParams.from;
        vm.report.to = $stateParams.to === undefined ? moment().format('YYYY-MM-DD') : $stateParams.to;
        vm.report.sport = $stateParams.game === undefined ? '0,1,2,3,4,5,6,7,8,99' : $stateParams.sport;
        vm.report.uid = $stateParams.uid;
        vm.report.name = $stateParams.name;
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            UserId: vm.report.uid,
            SportGroups: vm.report.sport.split(',')
        };
        Lotus.Saba.Report.PlayerWinLose.getPlayerReportGroupBySportGroup(data).then(function(response) {
            response.sort(function(a, b) {
                return a.SportGroup - b.SportGroup
            });
            vm.responseByMember = response;
            $scope.$digest();
        });

        function viewReport(item) {
            $state.go('app.saba.statement.member.details', {
                from: vm.report.from,
                to: vm.report.to,
                uid: vm.report.uid,
                sport: item.SportGroup,
                name: vm.report.name
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary', []).config(config);

    function config($stateProvider, msApiProvider) {
        $stateProvider.state('app.legendary', {
            abstract: true,
            url: '/legendary',
        }).state('app.legendary.term', {
            url: '/term',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/term/term.legend.html',
                    controller: 'legendTermCtrl as vm'
                }
            }
        }).state('app.legendary.term.open', {
            url: '/open',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/term/open/legend.term.open.html',
                    controller: 'legendTermOpenCtrl as vm'
                }
            }
        }).state('app.legendary.priceBoard', {
            url: '/price',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/priceBoard/priceBoard.html',
                    controller: 'legendPriceBoardCtrl as vm'
                }
            },
            resolve: {
                collection: function(msApi) {
                    return msApi.resolve('number.collection@get');
                }
            }
        }).state('app.legendary.loLive', {
            abstract: true,
            url: '/loLive',
        }).state('app.legendary.loLive.northern', {
            url: '/northern',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/loLive/northern/loLive.northern.legend.html',
                    controller: 'liveNorthernLegendCtrl as vm'
                }
            },
            resolve: {
                GameType: function() {
                    return 0
                }
            }
        }).state('app.legendary.loLive.southern', {
            url: '/southern',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/loLive/southern/loLive.southern.legend.html',
                    controller: 'liveSouthernLegendCtrl as vm'
                }
            },
            resolve: {
                GameType: function() {
                    return 1
                }
            }
        }).state('app.legendary.tickets', {
            abstract: true,
            url: '/tickets',
        }).state('app.legendary.tickets.cancellation', {
            url: '/cancellation',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/tickets/cancellation/cancellation.html',
                    controller: 'cancelTicketLegendCtrl as vm'
                }
            }
        }).state('app.legendary.tickets.cancellation.new-task', {
            url: '/new-task',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/tickets/cancellation/new-task/new-task.html',
                    controller: 'newTaskLegendCtrl as vm'
                }
            }
        }).state('app.legendary.settings', {
            abstract: true,
            url: '/settings',
        }).state('app.legendary.settings.parameter', {
            url: '/parameter',
            abstract: true,
        }).state('app.legendary.settings.parameter.base', {
            url: '/base?id',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/parameter/base/base.html',
                    controller: 'baseLegendCtrl as vm'
                }
            }
        }).state('app.legendary.settings.parameter.risk', {
            url: '/risk?id',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/parameter/risk/risk.html',
                    controller: 'riskLegendCtrl as vm'
                }
            }
        }).state('app.legendary.settings.live', {
            abstract: true,
            url: '/live',
        }).state('app.legendary.settings.live.2d', {
            url: '/2d',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/livePrice/live.legendary.html',
                    controller: 'livePriceLegendCtrl as vm'
                }
            },
            resolve: {
                BetType: function() {
                    return 20
                }
            }
        }).state('app.legendary.settings.live.3d', {
            url: '/3d',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/livePrice/live.legendary.html',
                    controller: 'livePriceLegendCtrl as vm'
                }
            },
            resolve: {
                BetType: function() {
                    return 26
                }
            }
        }).state('app.legendary.settings.public', {
            url: '/public',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/public/public.html',
                    controller: 'publicOddsLegendCtrl as vm'
                }
            }
        }).state('app.legendary.settings.template', {
            url: '/template',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/template/template.html',
                    controller: 'memLegendTemplateCtrl as vm'
                }
            }
        }).state('app.legendary.settings.template.modify', {
            url: '/modify?id&action',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/settings/template/modify/modify.legend.template.html',
                    controller: 'modifyTemplateLegendCtrl as vm'
                }
            }
        }).state('app.legendary.statement', {
            abstract: true,
            url: '/statement'
        }).state('app.legendary.statement.win-lose', {
            url: '/win-lose',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/statement/winLose/winLose.html',
                },
                'portView@app.legendary.statement.win-lose': {
                    controller: 'legendWinLoseCtrl as vm'
                }
            }
        }).state('app.legendary.statement.win-lose.general', {
            url: '/general?from&to&uid&level&name&game&bet&set',
            views: {
                'portView@app.legendary.statement.win-lose': {
                    templateUrl: 'app/main/legendary/statement/winLose/general/general.html',
                    controller: 'legendGeneralCtrl as vm'
                },
                'navigation@app.legendary.statement.win-lose': {
                    templateUrl: 'app/main/legendary/statement/winLose/navigation/navigation.html',
                    controller: 'legendNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.win-lose.classification', {
            url: '/classification?from&to&game',
            views: {
                'portView@app.legendary.statement.win-lose': {
                    templateUrl: 'app/main/legendary/statement/winLose/classification/classification.html',
                    controller: 'legendClassificationCtrl as vm'
                },
                'navigation@app.legendary.statement.win-lose': {
                    templateUrl: 'app/main/legendary/statement/winLose/navigation/navigation.html',
                    controller: 'legendNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.win-lose.member', {
            url: '/member?from&to&uid&name&game&bet',
            views: {
                'portView@app.legendary.statement.win-lose': {
                    templateUrl: 'app/main/legendary/statement/winLose/member/member.html',
                    controller: 'legendMemberCtrl as vm'
                }
            }
        }).state('app.legendary.statement.outstanding', {
            url: '/outstanding',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/statement/outstanding/outstanding.html'
                },
                'portView@app.legendary.statement.outstanding': {
                    controller: 'legendOutstandingCtrl as vm'
                }
            }
        }).state('app.legendary.statement.outstanding.general', {
            url: '/general?game&bet&uid&name&level&matchId',
            views: {
                'portView@app.legendary.statement.outstanding': {
                    templateUrl: 'app/main/legendary/statement/outstanding/general/general.html',
                    controller: 'legendOutstandingGeneralCtrl as vm'
                },
                'navigation@app.legendary.statement.outstanding': {
                    templateUrl: 'app/main/legendary/statement/outstanding/navigation/navigation.html',
                    controller: 'legendOutstandingNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.outstanding.member', {
            url: '/member?game&bet&uid&name',
            views: {
                'portView@app.legendary.statement.outstanding': {
                    templateUrl: 'app/main/legendary/statement/outstanding/member/member.html',
                    controller: 'legendMemberOutstandingCtrl as vm'
                }
            }
        }).state('app.legendary.statement.outstanding.classification', {
            url: '/classification?game&uid&name&level&match&matchId',
            views: {
                'portView@app.legendary.statement.outstanding': {
                    templateUrl: 'app/main/legendary/statement/outstanding/classification/classification.html',
                    controller: 'legendOutstandingClassificationCtrl as vm'
                },
                'navigation@app.legendary.statement.outstanding': {
                    templateUrl: 'app/main/legendary/statement/outstanding/navigation/navigation.html',
                    controller: 'legendOutstandingNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.member', {
            url: '/member',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/statement/member/member.html',
                },
                'portView@app.legendary.statement.member': {
                    controller: 'legendMemberController as vm'
                }
            }
        }).state('app.legendary.statement.member.executive', {
            url: '/?from&to&game',
            views: {
                'portView@app.legendary.statement.member': {
                    templateUrl: 'app/main/legendary/statement/member/executive/executive.html',
                    controller: 'legendMemberExecutiveCtrl as vm'
                },
                'navigation@app.legendary.statement.member': {
                    templateUrl: 'app/main/legendary/statement/member/navigation/navigation.html',
                    controller: 'legendMemberNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.member.byMember', {
            url: '/byMember?from&to&uid&name&game',
            views: {
                'portView@app.legendary.statement.member': {
                    templateUrl: 'app/main/legendary/statement/member/byMember/byMember.html',
                    controller: 'legendMemberByMemberCtrl as vm'
                },
                'navigation@app.legendary.statement.member': {
                    templateUrl: 'app/main/legendary/statement/member/navigation/navigation.html',
                    controller: 'legendMemberNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.member.details', {
            url: '/details?from&to&game&bet&uid&name',
            views: {
                'portView@app.legendary.statement.member': {
                    templateUrl: 'app/main/legendary/statement/member/details/details.html',
                    controller: 'legendMemberDetailsCtrl as vm'
                }
            }
        }).state('app.legendary.statement.member.general', {
            url: '/general?from&to&uid&name&level&game',
            views: {
                'portView@app.legendary.statement.member': {
                    templateUrl: 'app/main/legendary/statement/member/general/general.html',
                    controller: 'legendMemberGeneralCtrl as vm'
                },
                'navigation@app.legendary.statement.member': {
                    templateUrl: 'app/main/traditional/statement/member/navigation/navigation.html',
                    controller: 'legendMemberNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.term', {
            url: '/term',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legendary/statement/term/statement.term.html'
                },
                'portView@app.legendary.statement.term': {
                    controller: 'legendStatementTermCtrl as vm'
                }
            }
        }).state('app.legendary.statement.term.date', {
            url: '/date?date&game&name&uid&set&category',
            views: {
                'portView@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/date/date.html',
                    controller: 'legendStatementTermDateCtrl as vm'
                },
                'navigation@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/navigation/navigation.html',
                    controller: 'legendStatementTermNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.term.general', {
            url: '/general?term&uid&level&name&game&bet&set&category',
            views: {
                'portView@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/general/general.html',
                    controller: 'legendStatementTermGeneralCtrl as vm'
                },
                'navigation@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/navigation/navigation.html',
                    controller: 'legendStatementTermNavigationCtrl as vm'
                }
            }
        }).state('app.legendary.statement.term.member', {
            url: '/member?term&uid&name&game&bet',
            views: {
                'portView@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/member/member.html',
                    controller: 'legendTermMemberCtrl as vm'
                }
            }
        }).state('app.legendary.statement.term.classification', {
            url: '/classification?term&game&category',
            views: {
                'portView@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/classification/classification.html',
                    controller: 'legendStatementTermClassificationCtrl as vm'
                },
                'navigation@app.legendary.statement.term': {
                    templateUrl: 'app/main/legendary/statement/term/navigation/navigation.html',
                    controller: 'legendStatementTermNavigationCtrl as vm'
                }
            }
        })
        msApiProvider.register('number.collection', ['app/data/json/collection.json']);
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('newTaskLegendCtrl', newTaskLegendCtrl);

    function newTaskLegendCtrl() {}
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberCtrl', legendMemberCtrl);

    function legendMemberCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, ]
        };
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.BetType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        if (isNaN(vm.data.BetType)) {
            delete vm.data.BetType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.Legend.Statement.getTicketItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendNavigationCtrl', legendNavigationCtrl);

    function legendNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, msUtils) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.jumpTo = jumpTo;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.productions = [{
            id: 0,
            name: "Miền Bắc"
        }, {
            id: 1,
            name: "Miền Nam"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.legendary.statement.win-lose.general' : 'app.legendary.statement.win-lose.classification';
            $state.go(appUrl, {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                game: vm.selected.toString(),
                set: ''
            }, {
                inherit: true,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });

        function jumpTo(item) {
            $state.go("app.legendary.statement.win-lose.general", {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                uid: item.uid,
                level: item.level,
                name: item.name
            })
        }
        vm.breadcrumbs = sessionStorage.getItem('breadcrumb') === null ? [] : JSON.parse(sessionStorage.getItem('breadcrumb'));
        $scope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
            if (Object.keys(fromParams).length) {
                if (parseInt(fromParams.set) === 0 || $location.search().level === undefined) {
                    vm.breadcrumbs = [];
                    sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                } else {
                    if (fromParams.level === undefined && fromParams.set === undefined) {
                        vm.breadcrumbs = [{
                            uid: '',
                            level: '',
                            name: $rootScope.User.Username
                        }];
                        sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                    }
                    if (fromParams.level !== undefined) {
                        if (vm.breadcrumbs.filter(function(bc) {
                                return bc.level === fromParams.level
                            }).length || fromParams.level > $location.search().level) {
                            vm.breadcrumbs = vm.breadcrumbs.filter(function(bc) {
                                return (parseInt(bc.level) < parseInt($location.search().level)) || bc.level === ''
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        } else {
                            vm.breadcrumbs.push({
                                uid: fromParams.uid,
                                level: fromParams.level,
                                name: fromParams.name
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        }
                    }
                }
            } else {
                vm.breadcrumbs = [];
                sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
            }
        })
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.legendary').controller('legendGeneralCtrl', legendGeneralCtrl);

    function legendGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? [0, 1] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.legendary.statement.win-lose.general", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.legendary.statement.win-lose.member", {
                from: vm.report.from,
                to: vm.report.to,
                game: item.GameType,
                bet: item.BetType,
                uid: vm.report.uid,
                name: vm.report.name
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            network.Reporting.Legend.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.Legend.Statement.getPlayerReportGroupByBetType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        Company: {
                            Income: item.Company.Income,
                            WinLose: item.Company.WinLose,
                            Percent: {
                                Income: (item.Company.Income / item.Player.Amount),
                                WinLose: (-item.Company.WinLose / item.Player.WinLose)
                            }
                        }
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.Company.Income += item.Company.Income;
                output.Sum.Player.Company.WinLose += item.Company.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendClassificationCtrl', legendClassificationCtrl);

    function legendClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.startDate,
            To: vm.report.endDate,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Legend.Statement.getUserReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0,
                            Company: {
                                Income: 0,
                                WinLose: 0
                            }
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose,
                                Company: {
                                    Income: bet.Company.Income,
                                    WinLose: bet.Company.WinLose,
                                    Percent: {
                                        Income: (bet.Company.Income / bet.Player.Amount),
                                        WinLose: (-bet.Company.WinLose / bet.Player.WinLose)
                                    }
                                }
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            Company: (bet.Commission + bet.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Player.Company.Income += bet.Company.Income
                        oGame.SumByGame.Player.Company.WinLose += bet.Company.WinLose
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Player.Company.Income += bet.Company.Income;
                        vm.SumTotal.Player.Company.WinLose += bet.Company.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        My: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            My: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.My.WinLose += bet.WinLose;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.My.WinLose += bet.WinLose;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            }
        }

        function classify(GameType, BetType) {
            $state.go('app.legendary.statement.win-lose.general', {
                from: vm.report.startDate,
                to: vm.report.endDate,
                game: GameType,
                bet: BetType
            })
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.legendary').controller('legendStatementTermGeneralCtrl', legendStatementTermGeneralCtrl);

    function legendStatementTermGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.term = $location.search().term;
        vm.report.game = $location.search().game === undefined ? [0, 1] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.legendary.statement.term.general", {
                term: vm.report.term,
                game: vm.report.game,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.legendary.statement.term.member", {
                term: vm.report.term,
                game: item.GameType,
                bet: item.BetType,
                uid: vm.report.uid,
                name: vm.report.name
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                Term: vm.report.term,
                Size: 25,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.Legend.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                Term: vm.report.term,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.Legend.Statement.getPlayerReportGroupByBetType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        Company: {
                            Income: item.Company.Income,
                            WinLose: item.Company.WinLose,
                            Percent: {
                                Income: (item.Company.Income / item.Player.Amount),
                                WinLose: (-item.Company.WinLose / item.Player.WinLose)
                            }
                        }
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendTermMemberCtrl', legendTermMemberCtrl);

    function legendTermMemberCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.Term = $location.search().term;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.BetType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.Legend.Statement.getTicketItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendStatementTermNavigationCtrl', legendStatementTermNavigationCtrl);

    function legendStatementTermNavigationCtrl($rootScope, $state, $scope, $location, network, $q, AuthService, msUtils) {
        var vm = this;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.isCompany = AuthService.isCompany();
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.report = {
            category: 0,
            selected: []
        };
        vm.productions = [{
            id: 0,
            name: "Miền Bắc"
        }, {
            id: 1,
            name: "Miền Nam"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1'] : $location.search().game.split(',');
        vm.report.date = $location.search().date === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : $location.search().date;
        vm.term = $location.search().term;
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
        vm.report.category = $location.search().category === undefined ? 0 : $location.search().category;
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
            })
        }

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.matchName = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.matchName = '';
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            $state.go('app.legendary.statement.term.date', {
                game: vm.selected.toString(),
                name: vm.matchName,
                uid: vm.matchId,
                date: moment(vm.report.date).format('YYYY-MM-DD'),
                category: vm.report.category,
                set: ''
            }, {
                reload: true
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendStatementTermClassificationCtrl', legendStatementTermClassificationCtrl);

    function legendStatementTermClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.term = $location.search().term;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            Term: vm.report.term,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Legend.Statement.getUserReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose,
                                Company: {
                                    Income: bet.Company.Income,
                                    WinLose: bet.Company.WinLose,
                                    Percent: {
                                        Income: (bet.Company.Income / bet.Player.Amount),
                                        WinLose: (-bet.Company.WinLose / bet.Player.WinLose)
                                    }
                                }
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            Company: (bet.Commission + bet.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        My: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            My: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.My.WinLose += bet.WinLose;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.My.WinLose += bet.WinLose;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            }
        }

        function classify(GameType, BetType) {
            $state.go('app.legendary.statement.term.general', {
                term: vm.report.term,
                game: GameType,
                bet: BetType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendStatementTermDateCtrl', legendStatementTermDateCtrl);

    function legendStatementTermDateCtrl($rootScope, $state, $scope, $timeout, $location, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.arrangeSuper = arrangeSuper;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.viewReport = viewReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.date = $location.search().date === undefined ? moment().format('YYYY-MM-DD') : $location.search().date;
        vm.report.game = $location.search().game === undefined ? [0, 1] : $location.search().game.split(',');
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.level = $rootScope.User.Level;
        vm.report.category = $location.search().category === undefined ? 0 : parseInt($location.search().category);
        vm.report.set = parseInt($location.search().set);
        if (vm.report.set === 0) {
            $rootScope.$broadcast('submitting', false);
            return
        }
        vm.getChildrenUserReports()

        function viewReport(Term, GameType) {
            let data = {
                term: Term,
                game: GameType,
                category: vm.report.category
            }
            if (vm.report.category === 0) {
                $state.go('app.legendary.statement.term.general', data)
            } else {
                $state.go('app.legendary.statement.term.classification', data)
            }
        }

        function getChildrenUserReports() {
            vm.data = {
                Date: vm.report.date,
                UserId: vm.report.uid,
                GameTypes: vm.report.game
            };
            network.Reporting.Legend.Statement.getUserReportGroupByTerm(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || parseInt(a.Term.split('.')[1]) - parseInt(b.Term.split('.')[1])
                });
                response = response.groupBy(function(o) {
                    return JSON.stringify({
                        a: o.GameType
                    })
                });
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
                vm.classifications = [];
                if (vm.report.level === 1) {
                    vm.arrangeCompany(response)
                } else if (vm.report.level === 5) {
                    vm.arrangeAgent(response)
                } else {
                    vm.arrangeSuper(response)
                }
            })
        }

        function arrangeCompany(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                    WinLose: 0
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(game) {
                let oGame = {};
                oGame.GameType = game.group[0].GameType;
                oGame.Values = [];
                oGame.SumByGame = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(game.group, function(bet) {
                    let oBet = {
                        Term: bet.Term,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            WinLose: bet.Player.WinLose,
                            Company: {
                                Income: bet.Company.Income,
                                WinLose: bet.Company.WinLose,
                                Percent: {
                                    Income: (bet.Company.Income / bet.Player.Amount),
                                    WinLose: (-bet.Company.WinLose / bet.Player.WinLose)
                                }
                            }
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        Company: (bet.Commission + bet.WinLose)
                    };
                    oGame.Values.push(oBet);
                    oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                    oGame.SumByGame.Player.Amount += bet.Player.Amount;
                    oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                    oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                    oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                    oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                });
                vm.classifications.push(oGame)
            })
        }

        function arrangeAgent(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                    WinLose: 0
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(game) {
                let oGame = {};
                oGame.GameType = game.group[0].GameType;
                oGame.Values = [];
                oGame.SumByGame = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(game.group, function(bet) {
                    let oBet = {
                        Term: bet.Term,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                    };
                    oGame.Values.push(oBet);
                    oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                    oGame.SumByGame.Player.Amount += bet.Player.Amount;
                    oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                    oGame.SumByGame.Agent.WinLose += bet.WinLose;
                    oGame.SumByGame.Agent.Commission += bet.Commission;
                    oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                    oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Commission;
                    vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                });
                vm.classifications.push(oGame)
            })
        }

        function arrangeSuper(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                    WinLose: 0
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                My: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(game) {
                let oGame = {};
                oGame.GameType = game.group[0].GameType;
                oGame.Values = [];
                oGame.SumByGame = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(game.group, function(bet) {
                    let oBet = {
                        Term: bet.Term,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        My: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                    };
                    oGame.Values.push(oBet);
                    oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                    oGame.SumByGame.Player.Amount += bet.Player.Amount;
                    oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                    oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                    oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                    oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    oGame.SumByGame.My.WinLose += bet.WinLose;
                    oGame.SumByGame.My.Commission += bet.Commission;
                    oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                    oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.My.WinLose += bet.WinLose;
                    vm.SumTotal.My.Commission += bet.Commission;
                    vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                });
                vm.classifications.push(oGame)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendOutstandingNavigationCtrl', legendOutstandingNavigationCtrl);

    function legendOutstandingNavigationCtrl($rootScope, $state, $scope, $location, network, $q, AuthService, msUtils) {
        var vm = this;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.isCompany = AuthService.isCompany();
        vm.report = {
            category: 0,
            selected: []
        };
        vm.productions = [{
            id: 0,
            name: "Miền Bắc"
        }, {
            id: 1,
            name: "Miền Nam"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
            })
        }

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.matchName = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.matchName = '';
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            var appUrl = parseInt(vm.report.category) === 0 ? 'app.legendary.statement.outstanding.general' : 'app.legendary.statement.outstanding.classification';
            $state.go(appUrl, {
                game: vm.selected.toString(),
                name: vm.matchName,
                matchId: vm.matchId,
                level: vm.matchLevel
            }, {
                reload: true
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberOutstandingCtrl', legendMemberOutstandingCtrl);

    function legendMemberOutstandingCtrl($rootScope, $scope, $state, $location, network) {
        var vm = this;
        vm.loadMemberReport = loadMemberReport;
        vm.report = {};
        vm.report.game = $location.search().game;
        vm.report.bet = parseInt($location.search().bet);
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.members = [];
        vm.data = {
            UserId: vm.report.uid,
            GameType: vm.report.game,
            BetType: vm.report.bet,
            Limit: 100
        };
        vm.loadMemberReport();

        function loadMemberReport(ltId) {
            vm.data.LastId = ltId === undefined ? '' : ltId;
            vm.submitting = true;
            network.Reporting.Legend.Outstanding.getTicketItems(vm.data).then(function(response) {
                vm.hasRecord = response.length === 100;
                vm.members = vm.members.concat(response);
                vm.submitting = false;
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendOutstandingGeneralCtrl', legendOutstandingGeneralCtrl);

    function legendOutstandingGeneralCtrl($rootScope, $state, $scope, $timeout, $location, network) {
        var vm = this;
        vm.viewReport = viewReport;
        vm.memberReport = memberReport;
        vm.getAgencyReport = getAgencyReport;
        vm.getMemberReport = getMemberReport;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.bet = $location.search().game === undefined ? '' : $location.search().bet;
        vm.report.uid = $location.search().uid === undefined ? '' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.matchId = $location.search().matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 1,
                orderable: false
            }]
        };
        vm.outstandingReports = [];

        function getAgencyReport(page) {
            let data = {
                ParentUserId: vm.report.uid,
                GameTypes: vm.report.game.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            if (vm.report.bet) {
                data.BetTypes = [vm.report.bet]
            }
            network.Reporting.Legend.Outstanding.getChildrenReportGroupByUser(data).then(function(response) {
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
                vm.hasRecord = response.length === 50;
                vm.page = data.Page + 1;
                vm.outstandingReports = vm.outstandingReports.concat(response);
                if (vm.report.level === 1) {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(vm.outstandingReports, function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Point += item.Player.Point;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent.Commission += (item.Descendant.Commission + item.Commission);
                        vm.Total.Agent.Income += (item.Descendant.Income + item.Amount);
                        vm.Total.Company.Commission += item.Ancestor.Commission;
                        vm.Total.Company.Income += item.Ancestor.Income;
                    });
                } else {
                    vm.Total = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        My: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(vm.outstandingReports, function(item) {
                        vm.Total.Player.Quantity += item.Player.Quantity;
                        vm.Total.Player.Point += item.Player.Point;
                        vm.Total.Player.Amount += item.Player.Amount;
                        vm.Total.Agent.Commission += (item.Descendant.Commission + item.Commission);
                        vm.Total.Agent.Income += (item.Descendant.Income + item.Amount);
                        vm.Total.My.Commission += item.Parent.Commission;
                        vm.Total.My.Income += item.Parent.Income;
                        vm.Total.Company.Income += ((item.Ancestor.Income - item.Parent.Income) + (item.Ancestor.Commission - item.Parent.Commission));
                    });
                }
                $scope.$digest();
            });
        }

        function getMemberReport() {
            let data = {
                UserId: vm.report.uid,
                GameTypes: vm.report.game.split(',')
            };
            if (vm.report.bet) {
                data.BetTypes = [vm.report.bet]
            }
            network.Reporting.Legend.Outstanding.getPlayerReportGroupByBetType(data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.outstandingReports = response;
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            });
        }
        if (vm.report.level !== 9) {
            vm.getAgencyReport()
        } else {
            vm.getMemberReport()
        }

        function viewReport(item) {
            $state.go('app.legendary.statement.outstanding.general', {
                game: vm.report.game,
                uid: item.UserId,
                level: item.Level,
                name: item.Username,
                matchId: '',
                match: '',
            })
        }

        function memberReport(item, name) {
            $state.go('app.legendary.statement.outstanding.member', {
                game: item.GameType,
                bet: item.BetType,
                uid: vm.report.uid,
                name: name
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendOutstandingClassificationCtrl', legendOutstandingClassificationCtrl);

    function legendOutstandingClassificationCtrl($rootScope, $location, $state, $timeout, network, msUtils) {
        var vm = this;
        $rootScope.$broadcast('submitting', true);
        vm.classify = classify;
        vm.report = {};
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? '' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.matchId = $location.search().matchId;
        if (vm.report.matchId !== undefined) {
            vm.report.uid = vm.report.matchId
        }
        network.Reporting.Legend.Outstanding.getUserReportGroupByBetType({
            UserId: vm.report.uid,
            GameTypes: vm.report.game.split(',')
        }).then(function(response) {
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            vm.classifications = [];
            if (vm.report.level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Point: 0,
                        Amount: 0
                    },
                    Agent: {
                        Commission: 0,
                        Income: 0
                    },
                    Company: {
                        Commission: 0,
                        Income: 0
                    }
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Point: bet.Player.Point,
                                Amount: bet.Player.Amount
                            },
                            Agent: {
                                Commission: bet.Descendant.Commission,
                                Income: bet.Descendant.Income
                            },
                            Company: {
                                Commission: bet.Commission,
                                Income: bet.Amount
                            }
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Point += bet.Player.Point;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Income += bet.Descendant.Income;
                        oGame.SumByGame.Company.Commission += bet.Commission;
                        oGame.SumByGame.Company.Income += bet.Amount;
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Point += bet.Player.Point;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Income += bet.Descendant.Income;
                        vm.SumTotal.Company.Commission += bet.Commission;
                        vm.SumTotal.Company.Income += bet.Amount;
                    });
                    vm.classifications.push(oGame)
                });
            } else if (vm.report.level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Point: 0,
                        Amount: 0
                    },
                    Agent: {
                        Commission: 0,
                        Income: 0
                    },
                    Company: {
                        Commission: 0,
                        Income: 0
                    }
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        Company: {
                            Commission: 0,
                            Income: 0
                        }
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Point: bet.Player.Point,
                                Amount: bet.Player.Amount
                            },
                            Agent: {
                                Commission: bet.Commission,
                                Income: bet.Amount
                            },
                            Company: {
                                Commission: bet.Ancestor.Commission,
                                Income: bet.Ancestor.Income
                            }
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Point += bet.Player.Point;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Income += bet.Amount;
                        oGame.SumByGame.Company.Commission += bet.Ancestor.Commission;
                        oGame.SumByGame.Company.Income += bet.Ancestor.Income;
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Income += bet.Amount;
                        vm.SumTotal.Company.Commission += bet.Ancestor.Commission;
                        vm.SumTotal.Company.Income += bet.Ancestor.Income;
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Point: 0,
                        Amount: 0
                    },
                    Agent: {
                        Commission: 0,
                        Income: 0,
                    },
                    My: {
                        Commission: 0,
                        Income: 0
                    },
                    Company: {
                        Commission: 0,
                        Income: 0
                    }
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Point: 0,
                            Amount: 0
                        },
                        Agent: {
                            Commission: 0,
                            Income: 0
                        },
                        My: {
                            Commission: 0,
                            Income: 0,
                        },
                        Company: {
                            Commission: 0,
                            Income: 0,
                        }
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Point: bet.Player.Point,
                                Amount: bet.Player.Amount
                            },
                            Agent: {
                                Commission: bet.Descendant.Commission,
                                Income: bet.Descendant.Income
                            },
                            My: {
                                Commission: bet.Commission,
                                Income: bet.Amount
                            },
                            Company: {
                                Commission: bet.Ancestor.Commission,
                                Income: bet.Ancestor.Income
                            }
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Point += bet.Player.Point;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Income += bet.Descendant.Income;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Income += bet.Amount;
                        oGame.SumByGame.Company.Commission += bet.Ancestor.Commission;
                        oGame.SumByGame.Company.Income += bet.Ancestor.Income;
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Point += bet.Player.Point;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Income += bet.Descendant.Income;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Income += bet.Amount;
                        vm.SumTotal.Company.Commission += bet.Ancestor.Commission;
                        vm.SumTotal.Company.Income += bet.Ancestor.Income;
                    });
                    vm.classifications.push(oGame)
                })
            }
        });

        function classify(item) {
            $state.go('app.legendary.statement.outstanding.general', {
                uid: vm.report.uid,
                name: vm.report.name,
                level: vm.report.level,
                game: item.GameType,
                bet: item.BetType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('modifyTemplateLegendCtrl', modifyTemplateLegendCtrl);

    function modifyTemplateLegendCtrl($scope, $mdDialog, $location, $state, $timeout, network, message, msUtils) {
        let vm = this;
        let tempBackup;
        vm.updateTemplate = updateTemplate;
        vm.changeValues = changeValues;
        vm.changePrice = changePrice;
        vm.send = {};
        vm.templateID = $location.search().id;
        vm.newTemplate = $location.search().action === 'add';
        vm.submitting = true;
        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
        network.Games.Legend.PayoutsType.getById({
            Id: vm.templateID
        }).then(function(response) {
            vm.backUpTemplate = angular.copy(response);
            response.Values = msUtils.groupBy(response.Values, function(item) {
                return [item.GameType];
            });
            if (vm.newTemplate) {
                response.Title = 'Clone from ' + response.Title;
            }
            angular.forEach(response.Values, function(item) {
                item.sort(function(a, b) {
                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                })
            })
            vm.templates = response;
            vm.submitting = false;
            $scope.$digest()
        });

        function changeValues(bet, cond) {
            tempBackup = vm.backUpTemplate.Values.filter(function(item) {
                return item.GameType === bet.GameType && item.BetType === bet.BetType
            })[0];
            bet.highlight = {
                Price: false,
                Payouts: false
            };
            bet.highlight.Price = tempBackup.Price !== bet.Price;
            bet.highlight.Payouts = tempBackup.Payouts !== bet.Payouts;
        }

        function updateTemplate() {
            if (vm.newTemplate) {
                vm.send.Title = vm.templates.Title;
                vm.send.Description = vm.templates.Description;
                vm.send.RefId = vm.templateID;
                vm.send.Values = [];
                angular.forEach(vm.templates.Values, function(game) {
                    angular.forEach(game, function(bet) {
                        tempBackup = vm.backUpTemplate.Values.filter(function(item) {
                            return item.GameType === bet.GameType && item.BetType === bet.BetType
                        })[0];
                        if (tempBackup.Price !== bet.Price || tempBackup.Payouts !== bet.Payouts) {
                            vm.send.Values.push({
                                GameType: bet.GameType,
                                BetType: bet.BetType,
                                Price: bet.Price,
                                Payouts: bet.Payouts
                            })
                        }
                    })
                });
                if (vm.send.Values.length === 0) {
                    message.info('Ô! Giá bán và trả thưởng chả khác gì mẫu cũ?')
                } else {
                    vm.submitting = true;
                    network.Games.Legend.PayoutsType.create(vm.send).then(function(response) {
                        if (response) {
                            vm.submitting = false;
                            message.info('Tạo mẫu mới thành công');
                            $state.go('app.legendary.settings.template')
                        }
                    }).catch(function(error) {
                        vm.submitting = false;
                        message.alert(error.message)
                    })
                }
            } else {
                vm.submitting = true;
                network.Games.Legend.PayoutsType.updateById({
                    Id: vm.templateID,
                    Title: vm.templates.Title,
                    Description: vm.templates.Description
                }).then(function(response) {
                    if (response) {
                        vm.submitting = false;
                        message.info('Cập nhật mẫu thành công');
                        $state.go('app.legendary.settings.template')
                    }
                })
            }
        }

        function changePrice(payId, item, $event) {
            if (vm.newTemplate) return;
            if (item.BetType === 20 || item.BetType === 26) {
                return;
            }
            $mdDialog.show({
                controller: priceChangeTemplateCtrl,
                templateUrl: 'app/main/legendary/settings/template/modify/price-change.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    payId: payId
                }
            }).then(function() {}, function(cancel) {
                if (cancel !== undefined) {
                    item.Price = cancel.Price;
                    item.Payouts = cancel.Payouts;
                    item.Commission = cancel.Commission;
                }
            });

            function priceChangeTemplateCtrl($scope, $mdDialog, item, payId, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.priceInfo = angular.copy(item);
                $scope.Default = payId.Default;
                $scope.submitForm = function() {
                    $scope.submitting = true;
                    $scope.priceInfo.PayoutsTypeId = payId.Id;
                    network.Games.Legend.PriceChangeTask.create($scope.priceInfo).then(function(response) {
                        if (response.Result) {
                            $mdDialog.cancel($scope.priceInfo);
                            $timeout(function() {
                                message.info('Cập nhật thành công. Quá trình có thể mất vài phút.')
                            }, 500)
                        }
                    }).catch(function(error) {
                        $scope.submitting = false;
                        $scope.warningMessage = error.message;
                        $scope.$digest();
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberExecutiveCtrl', legendMemberExecutiveCtrl);

    function legendMemberExecutiveCtrl($rootScope, $scope, $location, $state, network) {
        var vm = this;
        vm.loadMemberWinLose = loadMemberWinLose;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.memberWinLoses = [];
        vm.Excludes = [];
        vm.submitting = true;

        function loadMemberWinLose(page) {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            network.Reporting.Legend.PlayerWinLose.getMyPlayersReportGroupByUser(data).then(function(response) {
                vm.memberWinLoses = vm.memberWinLoses.concat(response);
                vm.hasRecord = response.length === data.Size;
                vm.nextPage = data.Page + 1;
                vm.submitting = false;
                $scope.$digest();
            })
        }
        vm.loadMemberWinLose();

        function viewReport(item) {
            $state.go('app.legendary.statement.member.byMember', {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                name: item.Username,
                game: vm.report.game
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberNavigationCtrl', legendMemberNavigationCtrl);

    function legendMemberNavigationCtrl($rootScope, $state, $scope, $location, network, $q, msUtils) {
        let vm = this;
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.report = {
            category: 0,
            selected: []
        };
        vm.productions = [{
            id: 0,
            name: "Miền Bắc"
        }, {
            id: 1,
            name: "Miền Nam"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '1'] : $location.search().game.split(',');
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.username = $location.search().name;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả đài'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn đài'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' đài'
            }
        }
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name,
                Level: 9
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
                $scope.$digest();
            })
        }
        vm.searchText = '';

        function querySearch() {
            let result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 9
            }).then(function(response) {
                return response
            });
            let deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.username = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.username = '';
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            if (!vm.username) {
                $state.go('app.legendary.statement.member.executive', {
                    from: moment(vm.report.from).format('YYYY-MM-DD'),
                    to: moment(vm.report.to).format('YYYY-MM-DD'),
                    game: vm.selected.toString()
                }, {
                    reload: true
                })
            } else {
                if (parseInt(vm.report.category) === 0) {
                    $state.go('app.legendary.statement.member.general', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        name: vm.username,
                        uid: vm.matchId,
                        level: vm.matchLevel,
                        game: vm.selected.toString()
                    }, {
                        reload: true
                    })
                } else {
                    $state.go('app.legendary.statement.member.byMember', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        uid: vm.matchId,
                        name: vm.username
                    }, {
                        reload: true
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberGeneralCtrl', legendMemberGeneralCtrl);

    function legendMemberGeneralCtrl($rootScope, $scope, $state, $location, network) {
        var vm = this;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.report.level = $location.search().level;
        vm.send = {};
        vm.send.From = vm.report.from;
        vm.send.To = vm.report.to;
        vm.send.UserIds = [vm.report.uid];
        vm.send.GameTypes = vm.report.game.split(',');
        network.Reporting.Legend.PlayerWinLose.getPlayerReportGroupByUserTerm(vm.send).then(function(response) {
            vm.response = response;
            $scope.$digest();
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberDetailsCtrl', legendMemberDetailsCtrl);

    function legendMemberDetailsCtrl($rootScope, $scope, $location, network) {
        var vm = this;
        vm.loadMemberDetails = loadMemberDetails;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game;
        vm.report.bet = parseInt($location.search().bet);
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.loadMemberDetails();
        vm.memberDetails = [];

        function loadMemberDetails(ltID) {
            vm.submitting = true;
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                GameType: vm.report.game,
                BetType: vm.report.bet
            };
            network.Reporting.Legend.Statement.getTicketItems(data).then(function(response) {
                vm.submitting = false;
                vm.memberDetails = response;
                $scope.$digest();
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('baseLegendCtrl', baseLegendCtrl);

    function baseLegendCtrl($scope, $state, $location, network, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
        vm.editParam = editParam;
        vm.cancel = cancel;
        vm.save = save;
        vm.gameID = parseInt($location.search().id);
        network.Games.Legend.Parameter.getParametersByGameType({
            GameType: vm.gameID
        }).then(function(response) {
            response.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            vm.backup = angular.copy(response);
            vm.parameters = response;
            $scope.$digest();
        }).catch(function(error) {});

        function editParam(param) {
            param.editMode = true;
        }

        function cancel() {
            vm.parameters = angular.copy(vm.backup);
        }

        function save(param) {
            vm.send = {
                GameType: vm.gameID,
                BetType: param.BetType,
                MinItemPerTicket: param.MinItemPerTicket,
                MaxItemPerTicket: param.MaxItemPerTicket,
                BetTimes: param.BetTimes,
                MaxExtraPrice: param.MaxExtraPrice,
                MaxExtraPricePerLevel: param.MaxExtraPricePerLevel,
                ManualIncPoint: param.ManualIncPoint,
                MaxManualIncPointPerLevel: param.MaxManualIncPointPerLevel,
                MaxPointForNoShare: param.MaxPointForNoShare,
                MaxPointForMaxShare: param.MaxPointForMaxShare,
                MaxPointForNumberGroup: param.MaxPointForNumberGroup,
                CancelLimit: param.CancelLimit,
                AutoClose: param.AutoClose
            };
            if (param.BetType === 20) {
                vm.send.RemoveExtraPrice = {
                    Manual: param.RemoveExtraPrice.Manual,
                    Automatic: param.RemoveExtraPrice.Automatic,
                    Relationship: param.RemoveExtraPrice.Relationship,
                }
            }
            network.Games.Legend.Parameter.updateParameter(vm.send).then(function(response) {
                message.info('Cập nhật tham số thành công');
                param.editMode = false;
            }).catch(function(error) {})
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('riskLegendCtrl', riskLegendCtrl);

    function riskLegendCtrl($scope, $state, $mdDialog, $location, network, msUtils, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.init = init;
        vm.available = available;
        vm.changeByPointConf = changeByPointConf;
        vm.changeByRiskConf = changeByRiskConf;
        vm.changePointAvgConf = changePointAvgConf;
        vm.editParam = editParam;
        vm.cancel = cancel;
        vm.save = save;
        vm.changePointType = [{
            id: 1,
            name: 'Point'
        }, {
            id: 2,
            name: 'Risk'
        }, {
            id: 3,
            name: 'Point avg'
        }, {
            id: 0,
            name: 'Không tăng giá'
        }];
        vm.gameID = parseInt($location.search().id);
        vm.init();

        function init() {
            network.Games.Legend.PriceAutoManagement.getSettingsByGameType({
                GameType: vm.gameID
            }).then(function(response) {
                vm.backup = angular.copy(response);
                vm.parameters = response;
                $scope.$digest();
            }).catch(function(error) {});
        }

        function editParam(param) {
            param.editMode = true;
        }

        function cancel() {
            vm.parameters = angular.copy(vm.backup);
        }

        function save(item) {
            vm.send = {
                GameType: item.GameType,
                BetType: item.BetType,
                Type: item.Type
            };
            network.Games.Legend.PriceAutoManagement.updateAutoChangePriceType(vm.send).then(function(response) {
                message.info('Cập nhật tham số thành công');
                item.editMode = false;
            }).catch(function(error) {
                message.info(error.message);
            })
        }

        function available(bet) {
            var list = [0, 1, 7, 8, 9, 15, 21, 22, 23, 24, 25];
            return msUtils.exists(bet, list)
        }

        function changeByPointConf(param, ev) {
            $mdDialog.show({
                controller: changeByPointConfCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/risk/dialog/change.by.point.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: param,
                    writePermission: vm.hasWritePermission
                }
            });

            function changeByPointConfCtrl($scope, $mdDialog, $timeout, data, writePermission, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.writePermission = writePermission;
                $scope.param = data;
                $scope.submitting = false;
                $scope.pricepoints = angular.copy(data.Points);
                if ($scope.writePermission) {}
                $scope.add = function(index) {
                    if ($scope.pricepoints.length <= index + 1) {
                        $scope.pricepoints.splice(index + 1, 0, {
                            Start: '',
                            End: '',
                            Step: '',
                            Point: ''
                        });
                    }
                };
                $scope.delete = function($event, item) {
                    var index = $scope.pricepoints.indexOf(item);
                    if ($event.which === 1)
                        $scope.pricepoints.splice(index, 1);
                };
                $scope.changePricePoint = function() {
                    $scope.submitting = true;
                    $scope.send = {
                        GameType: data.GameType,
                        BetType: data.BetType,
                        Points: [],
                        CloseAtPoint: param.CloseAtPoint
                    };
                    angular.forEach($scope.pricepoints, function(value) {
                        var obj = {};
                        obj.Start = value.Start;
                        obj.End = value.End;
                        obj.Step = value.Step;
                        obj.Point = value.Point;
                        $scope.send.Points.push(obj)
                    });
                    network.Games.Legend.PriceAutoManagement.updatePoints($scope.send).then(function(response) {
                        if (response) {
                            $timeout(function() {
                                message.info('Cập nhật cấu hình thành công');
                                $scope.submitting = false;
                                vm.init();
                            }, 1000)
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function changeByRiskConf(param, ev) {
            $mdDialog.show({
                controller: changeByRiskConfCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/risk/dialog/change.by.risk.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: param,
                    writePermission: vm.hasWritePermission
                }
            });

            function changeByRiskConfCtrl($scope, $mdDialog, $timeout, data, writePermission, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.writePermission = writePermission;
                $scope.param = data;
                $scope.submitting = false;
                $scope.priceRisks = angular.copy(data.Risks);
                if (writePermission) {}
                $scope.add = function(index) {
                    if ($scope.priceRisks.length <= index + 1) {
                        $scope.priceRisks.splice(index + 1, 0, {
                            Start: '',
                            End: '',
                            Step: '',
                            Point: ''
                        });
                    }
                };
                $scope.delete = function($event, item) {
                    var index = $scope.priceRisks.indexOf(item);
                    if ($event.which === 1)
                        $scope.priceRisks.splice(index, 1);
                };
                $scope.changePriceRisk = function() {
                    $scope.submitting = true;
                    $scope.send = {
                        GameType: data.GameType,
                        BetType: data.BetType,
                        Risks: [],
                        CloseAtRisk: param.CloseAtRisk
                    };
                    angular.forEach($scope.priceRisks, function(value) {
                        var obj = {};
                        obj.Start = value.Start;
                        obj.End = value.End;
                        obj.Step = value.Step;
                        obj.Point = value.Point;
                        $scope.send.Risks.push(obj)
                    });
                    network.Games.Legend.PriceAutoManagement.updateRisks($scope.send).then(function(response) {
                        if (response) {
                            $timeout(function() {
                                message.info('Cập nhật cấu hình thành công');
                                $scope.submitting = false;
                                vm.init();
                            }, 1000)
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function changePointAvgConf(param, ev) {
            $mdDialog.show({
                controller: changePointAvgConfCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/risk/dialog/change.by.point.avg.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: param,
                    writePermission: vm.hasWritePermission
                }
            });

            function changePointAvgConfCtrl($scope, $mdDialog, $timeout, data, writePermission, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.writePermission = writePermission;
                $scope.param = data;
                $scope.submitting = false;
                $scope.pointAvg = angular.copy(data.PointAvg);
                $scope.changePricePointAvg = function() {
                    $scope.submitting = true;
                    $scope.send = {
                        GameType: data.GameType,
                        BetType: data.BetType,
                        PointAvg: {
                            Start: $scope.pointAvg.Start,
                            Step: $scope.pointAvg.Step,
                            Point: $scope.pointAvg.Point
                        }
                    };
                    network.Games.Legend.PriceAutoManagement.updatePointAvg($scope.send).then(function(response) {
                        if (response) {
                            $timeout(function() {
                                message.info('Cập nhật cấu hình thành công');
                                $scope.submitting = false;
                                vm.init();
                            }, 1000)
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberByMemberCtrl', legendMemberByMemberCtrl);

    function legendMemberByMemberCtrl($rootScope, $scope, $location, $state, network) {
        var vm = this;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            UserId: vm.report.uid,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Legend.Statement.getPlayerReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            vm.responseByMember = response;
            $scope.$digest();
        });

        function viewReport(item) {
            $state.go('app.legendary.statement.member.details', {
                from: vm.report.from,
                to: vm.report.to,
                uid: vm.report.uid,
                game: item.GameType,
                bet: item.BetType,
                name: vm.report.name
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.casino789', {
            abstract: true,
            url: '/casino789',
        }).state('app.casino789.dealer', {
            url: '/dealer',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legend-casino/dealer/dealer.html',
                    controller: 'legendDealerCtrl as vm'
                }
            }
        }).state('app.casino789.area', {
            url: '/area',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legend-casino/area/area.html',
                    controller: 'legendAreaCtrl as vm'
                }
            }
        }).state('app.casino789.parameter', {
            url: '/parameter',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legend-casino/parameter/parameter.html',
                    controller: 'legendCasinoParameterCtrl as vm'
                }
            }
        }).state('app.casino789.statement', {
            abstract: true,
            url: '/statement',
        }).state('app.casino789.statement.win-lose', {
            url: '/win-lose',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legend-casino/statement/winLose/winLose.html',
                },
                'portView@app.casino789.statement.win-lose': {
                    controller: 'casinoWinLoseCtrl as vm'
                }
            }
        }).state('app.casino789.statement.win-lose.general', {
            url: '/general?from&to&uid&level&name&game&bet&set',
            views: {
                'portView@app.casino789.statement.win-lose': {
                    templateUrl: 'app/main/legend-casino/statement/winLose/general/general.html',
                    controller: 'casinoGeneralCtrl as vm'
                },
                'navigation@app.casino789.statement.win-lose': {
                    templateUrl: 'app/main/legend-casino/statement/winLose/navigation/navigation.html',
                    controller: 'casinoNavigationCtrl as vm'
                }
            }
        }).state('app.casino789.statement.win-lose.classification', {
            url: '/classification?from&to&game',
            views: {
                'portView@app.casino789.statement.win-lose': {
                    templateUrl: 'app/main/legend-casino/statement/winLose/classification/classification.html',
                    controller: 'casinoClassificationCtrl as vm'
                },
                'navigation@app.casino789.statement.win-lose': {
                    templateUrl: 'app/main/legend-casino/statement/winLose/navigation/navigation.html',
                    controller: 'casinoNavigationCtrl as vm'
                }
            }
        }).state('app.casino789.statement.win-lose.member', {
            url: '/member?from&to&uid&name&game&bet',
            views: {
                'portView@app.casino789.statement.win-lose': {
                    templateUrl: 'app/main/legend-casino/statement/winLose/member/member.html',
                    controller: 'casinoMemberCtrl as vm'
                }
            }
        }).state('app.casino789.statement.win-lose.member.presidential', {
            url: '/presidential',
            views: {
                'portView@app.casino789.statement.win-lose': {
                    templateUrl: 'app/main/accounting/casino789/member/presidential/presidential.html',
                    controller: 'presidentialCasinoMemberCtrl as vm',
                }
            }
        }).state('app.casino789.statement.member', {
            url: '/member',
            views: {
                'content@app': {
                    templateUrl: 'app/main/legend-casino/statement/member/member.html',
                },
                'portView@app.casino789.statement.member': {
                    controller: 'casinoMemberController as vm'
                }
            }
        }).state('app.casino789.statement.member.executive', {
            url: '/?from&to&game',
            views: {
                'portView@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/executive/executive.html',
                    controller: 'casinoMemberExecutiveCtrl as vm'
                },
                'navigation@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/navigation/navigation.html',
                    controller: 'casinoMemberNavigationCtrl as vm'
                }
            }
        }).state('app.casino789.statement.member.byMember', {
            url: '/byMember?from&to&uid&name&game',
            views: {
                'portView@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/byMember/byMember.html',
                    controller: 'casinoMemberByMemberCtrl as vm'
                },
                'navigation@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/navigation/navigation.html',
                    controller: 'casinoMemberNavigationCtrl as vm'
                }
            }
        }).state('app.casino789.statement.member.details', {
            url: '/details?from&to&game&bet&uid&name',
            views: {
                'portView@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/details/details.html',
                    controller: 'casinoMemberDetailsCtrl as vm'
                }
            }
        }).state('app.casino789.statement.member.general', {
            url: '/general?from&to&uid&name&level&game',
            views: {
                'portView@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/general/general.html',
                    controller: 'casinoMemberGeneralCtrl as vm'
                },
                'navigation@app.casino789.statement.member': {
                    templateUrl: 'app/main/legend-casino/statement/member/navigation/navigation.html',
                    controller: 'casinoMemberNavigationCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoNavigationCtrl', casinoNavigationCtrl);

    function casinoNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, msUtils) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.jumpTo = jumpTo;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.productions = [{
            id: 0,
            name: "Xóc Đĩa"
        }, {
            id: 100,
            name: "Bầu cử TT"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0', '100'] : $location.search().game.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả Games'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn Game'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' Games'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.casino789.statement.win-lose.general' : 'app.casino789.statement.win-lose.classification';
            $state.go(appUrl, {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                game: vm.selected.toString(),
                set: ''
            }, {
                inherit: true,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });

        function jumpTo(item) {
            $state.go("app.casino789.statement.win-lose.general", {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                uid: item.uid,
                level: item.level,
                name: item.name
            })
        }
        vm.breadcrumbs = sessionStorage.getItem('breadcrumb') === null ? [] : JSON.parse(sessionStorage.getItem('breadcrumb'));
        $scope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
            if (Object.keys(fromParams).length) {
                if (parseInt(fromParams.set) === 0 || $location.search().level === undefined) {
                    vm.breadcrumbs = [];
                    sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                } else {
                    if (fromParams.level === undefined && fromParams.set === undefined) {
                        vm.breadcrumbs = [{
                            uid: '',
                            level: '',
                            name: $rootScope.User.Username
                        }];
                        sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                    }
                    if (fromParams.level !== undefined) {
                        if (vm.breadcrumbs.filter(function(bc) {
                                return bc.level === fromParams.level
                            }).length || fromParams.level > $location.search().level) {
                            vm.breadcrumbs = vm.breadcrumbs.filter(function(bc) {
                                return (parseInt(bc.level) < parseInt($location.search().level)) || bc.level === ''
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        } else {
                            vm.breadcrumbs.push({
                                uid: fromParams.uid,
                                level: fromParams.level,
                                name: fromParams.name
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        }
                    }
                }
            } else {
                vm.breadcrumbs = [];
                sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberCtrl', casinoMemberCtrl);

    function casinoMemberCtrl($rootScope, $scope, $state, $location, $timeout, $mdDialog, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, ]
        };
        vm.loadMemberReport = loadMemberReport;
        vm.viewIp = viewIp;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.LegendCasino.Statement.getBetItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.casino789').controller('casinoGeneralCtrl', casinoGeneralCtrl);

    function casinoGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? [0, 1] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.casino789.statement.win-lose.general", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            if (item.GameType === 0) {
                $state.go("app.casino789.statement.win-lose.member", {
                    from: vm.report.from,
                    to: vm.report.to,
                    game: item.GameType,
                    bet: item.BetType,
                    uid: vm.report.uid,
                    name: vm.report.name
                })
            } else {
                $state.go("app.casino789.statement.win-lose.member.presidential", {
                    from: vm.report.from,
                    to: vm.report.to,
                    game: item.GameType,
                    bet: item.BetType,
                    uid: vm.report.uid,
                    name: vm.report.name
                })
            }
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            network.Reporting.LegendCasino.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.LegendCasino.Statement.getPlayerReportGroupByGameType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        GrossCommission: 0,
                        WinLose: 0,
                        Company: {
                            Income: 0,
                            WinLose: 0
                        }
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission,
                        GrossCommission: item.Player.GrossCommission,
                        WinLose: item.Player.WinLose,
                        Company: {
                            Income: item.Company.Income,
                            WinLose: item.Company.WinLose,
                            Percent: {
                                Income: (item.Company.Income / item.Player.Amount),
                                WinLose: (-item.Company.WinLose / item.Player.WinLose)
                            }
                        }
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Player.GrossCommission += item.Player.GrossCommission;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.Company.Income += item.Company.Income;
                output.Sum.Player.Company.WinLose += item.Company.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        GrossCommission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission,
                        GrossCommission: item.Player.GrossCommission,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Player.GrossCommission += item.Player.GrossCommission;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoClassificationCtrl', casinoClassificationCtrl);

    function casinoClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumForCompany = sumForCompany;
        vm.sumForSuper = sumForSuper;
        vm.sumForAgent = sumForAgent;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.startDate,
            To: vm.report.endDate,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.LegendCasino.Statement.getUserReportGroupByGameType(data).then(function(response) {
            console.log(response)
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.sumForCompany(response)
            } else if ($rootScope.User.Level === 5) {
                vm.sumForAgent(response)
            } else {
                vm.sumForSuper(response)
            }
        });

        function sumForCompany(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                    NetAmount: 0,
                    Commission: 0,
                    GrossCommission: 0,
                    WinLose: 0,
                    Company: {
                        Income: 0,
                        WinLose: 0
                    }
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(game) {
                let oGame = {};
                oGame.GameType = game.GameType;
                oGame.Player = {
                    Quantity: game.Player.Quantity,
                    Amount: game.Player.Amount,
                    NetAmount: game.Player.NetAmount,
                    Commission: game.Player.Commission,
                    GrossCommission: game.Player.GrossCommission,
                    WinLose: game.Player.WinLose,
                    Company: {
                        Income: game.Company.Income,
                        WinLose: game.Company.WinLose,
                        Percent: {
                            Income: Math.abs(game.Company.Income / game.Player.Amount),
                            WinLose: Math.abs(game.Company.WinLose / game.Player.WinLose)
                        }
                    }
                };
                oGame.Agent = {
                    WinLose: game.Descendant.WinLose,
                    Commission: game.Descendant.Commission,
                    Total: (game.Descendant.WinLose + game.Descendant.Commission)
                }
                oGame.Company = (game.Commission + game.WinLose)
                vm.SumTotal.Player.Quantity += game.Player.Quantity;
                vm.SumTotal.Player.Amount += game.Player.Amount;
                vm.SumTotal.Player.NetAmount += game.Player.NetAmount;
                vm.SumTotal.Player.Commission += game.Player.Commission;
                vm.SumTotal.Player.GrossCommission += game.Player.GrossCommission;
                vm.SumTotal.Player.WinLose += game.Player.WinLose;
                vm.SumTotal.Player.Company.Income += game.Company.Income;
                vm.SumTotal.Player.Company.WinLose += game.Company.WinLose;
                vm.SumTotal.Agent.WinLose += game.Descendant.WinLose;
                vm.SumTotal.Agent.Commission += game.Descendant.Commission;
                vm.SumTotal.Agent.Total += (game.Descendant.WinLose + game.Descendant.Commission);
                vm.SumTotal.Company += (game.Commission + game.WinLose);
                vm.classifications.push(oGame)
            })
        }

        function sumForSuper(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                    NetAmount: 0,
                    Commission: 0,
                    GrossCommission: 0,
                    WinLose: 0
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                My: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(item) {
                let oGame = {};
                oGame.GameType = item.GameType;
                oGame.Player = {
                    Quantity: item.Player.Quantity,
                    Amount: item.Player.Amount,
                    NetAmount: item.Player.NetAmount,
                    Commission: item.Player.Commission,
                    GrossCommission: item.Player.GrossCommission,
                    WinLose: item.Player.WinLose
                };
                oGame.Agent = {
                    WinLose: item.Descendant.WinLose,
                    Commission: item.Descendant.Commission,
                    Total: (item.Descendant.WinLose + item.Descendant.Commission)
                };
                oGame.My = {
                    WinLose: item.WinLose,
                    Commission: item.Commission,
                    Total: (item.WinLose + item.Commission)
                };
                oGame.Company = (item.Ancestor.Commission + item.Ancestor.WinLose);
                vm.SumTotal.Player.Quantity += item.Player.Quantity;
                vm.SumTotal.Player.Amount += item.Player.Amount;
                vm.SumTotal.Player.NetAmount += item.Player.NetAmount;
                vm.SumTotal.Player.Commission += item.Player.Commission;
                vm.SumTotal.Player.GrossCommission += item.Player.GrossCommission;
                vm.SumTotal.Player.WinLose += item.Player.WinLose;
                vm.SumTotal.Agent.WinLose += item.Descendant.WinLose;
                vm.SumTotal.Agent.Commission += item.Descendant.Commission;
                vm.SumTotal.Agent.Total += (item.Descendant.WinLose + item.Descendant.Commission);
                vm.SumTotal.My.WinLose += item.WinLose;
                vm.SumTotal.My.Commission += item.Commission;
                vm.SumTotal.My.Total += (item.WinLose + item.Commission);
                vm.SumTotal.Company += (item.Ancestor.Commission + item.Ancestor.WinLose);
                vm.classifications.push(oGame)
            })
        }

        function sumForAgent(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    Amount: 0,
                    NetAmount: 0,
                    Commission: 0,
                    GrossCommission: 0,
                    WinLose: 0
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(item) {
                let oGame = {};
                oGame.GameType = item.GameType;
                oGame.Player = {
                    Quantity: item.Player.Quantity,
                    Amount: item.Player.Amount,
                    NetAmount: item.Player.NetAmount,
                    Commission: item.Player.Commission,
                    GrossCommission: item.Player.GrossCommission,
                    WinLose: item.Player.WinLose
                };
                oGame.Agent = {
                    WinLose: item.WinLose,
                    Commission: item.Commission,
                    Total: (item.WinLose + item.Commission)
                };
                oGame.Company = (item.Ancestor.Commission + item.Ancestor.WinLose)
                vm.SumTotal.Player.Quantity += item.Player.Quantity;
                vm.SumTotal.Player.Amount += item.Player.Amount;
                vm.SumTotal.Player.NetAmount += item.Player.NetAmount;
                vm.SumTotal.Player.Commission += item.Player.Commission;
                vm.SumTotal.Player.GrossCommission += item.Player.GrossCommission;
                vm.SumTotal.Player.WinLose += item.Player.WinLose;
                vm.SumTotal.Agent.WinLose += item.WinLose;
                vm.SumTotal.Agent.Commission += item.Commission;
                vm.SumTotal.Agent.Total += (item.WinLose + item.Commission);
                vm.SumTotal.Company += (item.Ancestor.Commission + item.Ancestor.WinLose);
                vm.classifications.push(oGame)
            })
        }

        function classify(GameType) {
            $state.go('app.casino789.statement.win-lose.general', {
                from: vm.report.startDate,
                to: vm.report.endDate,
                game: GameType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberNavigationCtrl', casinoMemberNavigationCtrl);

    function casinoMemberNavigationCtrl($rootScope, $state, $scope, $location, network, $q, msUtils) {
        var vm = this;
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.report = {
            category: 0,
            selected: []
        };

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.productions = [{
            id: 0,
            name: "Xóc Đĩa"
        }];
        vm.report.selected = $location.search().game === undefined ? ['0'] : $location.search().game.split(',');
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.username = $location.search().name;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả Games'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn Game'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' Games'
            }
        }
        if ($location.search().name !== undefined) {
            network.User.searchLite({
                MatchName: $location.search().name,
                Level: 9
            }).then(function(response) {
                vm.userSelected = response.filter(function(value) {
                    return value.Username === $location.search().name
                })[0];
                $scope.$digest();
            })
        }
        vm.searchText = '';

        function querySearch() {
            var result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 9
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.username = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function searchTextChange(item) {
            vm.username = '';
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            if (!vm.username) {
                $state.go('app.casino789.statement.member.executive', {
                    from: moment(vm.report.from).format('YYYY-MM-DD'),
                    to: moment(vm.report.to).format('YYYY-MM-DD'),
                    game: vm.selected.toString()
                }, {
                    reload: true
                })
            } else {
                if (parseInt(vm.report.category) === 0) {
                    $state.go('app.casino789.statement.member.general', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        name: vm.username,
                        uid: vm.matchId,
                        level: vm.matchLevel,
                        game: vm.selected.toString()
                    }, {
                        reload: true
                    })
                } else {
                    $state.go('app.casino789.statement.member.byMember', {
                        from: moment(vm.report.from).format('YYYY-MM-DD'),
                        to: moment(vm.report.to).format('YYYY-MM-DD'),
                        uid: vm.matchId,
                        name: vm.username
                    }, {
                        reload: true
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberExecutiveCtrl', casinoMemberExecutiveCtrl);

    function casinoMemberExecutiveCtrl($rootScope, $scope, $location, $state, network) {
        var vm = this;
        vm.loadMemberWinLose = loadMemberWinLose;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0' : $location.search().game;
        vm.memberWinLoses = [];
        vm.Excludes = [];
        vm.submitting = true;

        function loadMemberWinLose(page) {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game.split(','),
                Size: 50
            };
            data.Page = page === undefined ? 1 : page;
            network.Reporting.LegendCasino.Statement.Player.getMyPlayersReportGroupByUser(data).then(function(response) {
                vm.memberWinLoses = vm.memberWinLoses.concat(response);
                vm.hasRecord = response.length === data.Size;
                vm.nextPage = data.Page + 1;
                vm.submitting = false;
                $scope.$digest();
            })
        }
        vm.loadMemberWinLose();

        function viewReport(item) {
            $state.go('app.casino789.statement.member.byMember', {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                name: item.Username,
                game: vm.report.game
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberGeneralCtrl', casinoMemberGeneralCtrl);

    function casinoMemberGeneralCtrl($rootScope, $scope, $state, $location, network) {
        var vm = this;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.report.level = $location.search().level;
        vm.send = {};
        vm.send.From = vm.report.from;
        vm.send.To = vm.report.to;
        vm.send.UserIds = [vm.report.uid];
        vm.send.GameTypes = vm.report.game.split(',');
        network.Reporting.Legend.PlayerWinLose.getPlayerReportGroupByUserTerm(vm.send).then(function(response) {
            vm.response = response;
            $scope.$digest();
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberByMemberCtrl', casinoMemberByMemberCtrl);

    function casinoMemberByMemberCtrl($rootScope, $scope, $location, $state, network) {
        var vm = this;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0' : $location.search().game;
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            UserId: vm.report.uid,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.LegendCasino.Statement.Player.getPlayerReportGroupByGameType(data).then(function(response) {
            vm.responseByMember = response;
            $scope.$digest();
        });

        function viewReport(item) {
            $state.go('app.casino789.statement.member.details', {
                from: vm.report.from,
                to: vm.report.to,
                uid: vm.report.uid,
                game: item.GameType,
                bet: item.BetType,
                name: vm.report.name
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberDetailsCtrl', casinoMemberDetailsCtrl);

    function casinoMemberDetailsCtrl($rootScope, $scope, $location, $timeout, network) {
        var vm = this;
        vm.loadMemberDetails = loadMemberDetails;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game;
        vm.report.bet = parseInt($location.search().bet);
        vm.report.uid = $location.search().uid;
        vm.report.name = $location.search().name;
        vm.loadMemberDetails();
        vm.memberDetails = [];

        function loadMemberDetails(ltID) {
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                GameType: vm.report.game,
                Limit: 100
            };
            ltID = ltID === undefined ? '' : ltID;
            data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.LegendCasino.Statement.getBetItems(data).then(function(response) {
                vm.loadMore = response.length === data.Limit;
                vm.memberDetails = vm.memberDetails.concat(response);
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false;
                    $scope.$digest();
                }, 500);
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting', []).config(config);

    function config($stateProvider, msApiProvider) {
        $stateProvider.state('app.accounting', {
            abstract: true,
            url: '/accounting'
        }).state('app.accounting.combination', {
            abstract: true,
            url: '/combination'
        }).state('app.accounting.combination.winLose', {
            url: '/win-lose',
            views: {
                'content@app': {
                    templateUrl: 'app/main/accounting/combination/win-lose/win-lose.html',
                },
                'portView@app.accounting.combination.winLose': {
                    controller: 'accCombinationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.general', {
            url: '/general?from&to&uid&level&name&product&set',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/general/general.html',
                    controller: 'combineGroupCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.general.traditional', {
            url: '/traditional?game&bet',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/traditional/general/general.html',
                    controller: 'generalCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.general.traditional.member', {
            url: '/member',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/traditional/member/member.html',
                    controller: 'memberCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {}
            }
        }).state('app.accounting.combination.winLose.general.legendary', {
            url: '/legendary?game&bet',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/legendary/general/general.html',
                    controller: 'combinationLegendGeneralCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.general.legendary.member', {
            url: '/member',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/legendary/member/member.html',
                    controller: 'combinationLegendMemberCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {}
            }
        }).state('app.accounting.combination.winLose.general.casino', {
            url: '/casino?game',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/wm-casino/general/general.html',
                    controller: 'wmGeneralCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.general.casino.member', {
            url: '/member',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/wm-casino/member/member.html',
                    controller: 'wmMemberCtrl as vm',
                },
                'navigation@app.accounting.combination.winLose': {}
            }
        }).state('app.accounting.combination.winLose.general.casino789', {
            url: '/casino789?game',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/casino789/general/general.html',
                    controller: 'LegendCasinoGeneralCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.general.casino789.member', {
            url: '/member',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/casino789/member/member.html',
                    controller: 'LegendCasinoMemberCtrl as vm',
                },
                'navigation@app.accounting.combination.winLose': {}
            }
        }).state('app.accounting.combination.winLose.general.casino789.member.presidential', {
            url: '/presidential',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/casino789/member/presidential/presidential.html',
                    controller: 'presidentialCasinoMemberCtrl as vm',
                },
                'navigation@app.accounting.combination.winLose': {}
            }
        }).state('app.accounting.combination.winLose.general.saba', {
            url: '/saba?sport',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/saba/general/general.html',
                    controller: 'SabaGeneralCtrl as vm'
                }
            },
            resolve: {
                statement: function() {
                    return 'combination';
                }
            }
        }).state('app.accounting.combination.winLose.general.saba.member', {
            url: '/member',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/saba/member/member.html',
                    controller: 'sabaMemberCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {}
            },
            resolve: {
                sabaBetTypes: function(msApi) {
                    return msApi.resolve('saba@get');
                },
                sabaBetTypesVN: function(msApi) {
                    return msApi.resolve('saba-vn@get');
                }
            }
        }).state('app.accounting.combination.winLose.classification', {
            url: '/classification?from&to&product&sport',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/classification/classification.html',
                    controller: 'combineClassificationCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.classification.traditional', {
            url: '/traditional',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/traditional/classification/classification.html',
                    controller: 'combineTraditionalClassificationCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.classification.legendary', {
            url: '/legendary',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/legendary/classification/classification.html',
                    controller: 'legendaryClassificationCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.classification.casino', {
            url: '/casino',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/wm-casino/classification/classification.html',
                    controller: 'wmClassificationCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.classification.casino789', {
            url: '/casino789',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/casino789/classification/classification.html',
                    controller: 'LegendCasinoClassificationCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            }
        }).state('app.accounting.combination.winLose.classification.saba', {
            url: '/saba',
            views: {
                'portView@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/saba/classification/classification.html',
                    controller: 'combineSabaClassificationCtrl as vm'
                },
                'navigation@app.accounting.combination.winLose': {
                    templateUrl: 'app/main/accounting/combination/win-lose/navigation/navigation.html',
                    controller: 'combineNavigationCtrl as vm'
                }
            },
            resolve: {
                statement: function() {
                    return 'combination';
                }
            }
        }).state('app.accounting.combination.group', {
            url: '/group',
            views: {
                'content@app': {
                    templateUrl: 'app/main/accounting/combination/group/group.html',
                },
                'portView@app.accounting.combination.group': {
                    controller: 'groupCombineReportCtrl as vm'
                }
            }
        }).state('app.accounting.combination.group.general', {
            url: '/general?from&to&uid&level&name&product&bet&set',
            views: {
                'portView@app.accounting.combination.group': {
                    templateUrl: 'app/main/accounting/combination/group/general/general.html',
                    controller: 'groupCombineGeneralCtrl as vm'
                },
                'navigation@app.accounting.combination.group': {
                    templateUrl: 'app/main/accounting/combination/group/navigation/navigation.html',
                    controller: 'groupCombineNavigationCtrl as vm'
                }
            }
        })
        msApiProvider.register('saba', ['app/data/json/saba.bet-type.json']);
        msApiProvider.register('saba-vn', ['app/data/json/saba.bet-type-vn.json']);
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('combineNavigationCtrl', combineNavigationCtrl);

    function combineNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, $mdDialog, $interval, $timeout, msUtils) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.alarmSetting = alarmSetting;
        vm.checkConfig = checkConfig;
        vm.jumpTo = jumpTo;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Xổ số truyền thống"
        }, {
            id: 2,
            name: "789 Casino"
        }, {
            id: 100,
            name: "WM Casino"
        }, {
            id: 101,
            name: "Bong88"
        }];
        vm.report.selected = $location.search().product === undefined ? ['0', '1', '2', '100', '101'] : $location.search().product.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();
        vm.termLists = [{
            id: 0,
            active: false,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];

        function changeDate() {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.find = vm.termLists.filter(function(item) {
                return item.active;
            });
            if (vm.find.length !== 0) {
                vm.selectedLabel = vm.find[0].name;
            } else {
                vm.selectedLabel = 'Chọn ngày'
            }
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả sản phẩm'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn sản phẩm'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' sản phẩm'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            let appUrl = parseInt(vm.report.category) === 0 ? 'app.accounting.combination.winLose.general' : 'app.accounting.combination.winLose.classification';
            $state.go(appUrl, {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                product: vm.selected.toString(),
                set: ''
            }, {
                inherit: true,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });

        function jumpTo(item) {
            $state.go("app.accounting.combination.winLose.general", {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                uid: item.uid,
                level: item.level,
                name: item.name
            })
        }

        function alarmSetting($event) {
            $mdDialog.show({
                controller: alarmSettingCtrl,
                templateUrl: 'app/main/accounting/combination/win-lose/navigation/alarm-setting-dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {
                    console.log('onRemoving')
                }
            }).then(function(answer) {
                vm.checkConfig();
            }, function() {
                console.log('You cancelled the dialog.')
            });

            function alarmSettingCtrl($scope, $mdDialog) {
                $scope.close = function() {
                    $mdDialog.cancel();
                };
                let key = $state.current.name;
                $scope.initSetting = function() {
                    $scope.alarm = {
                        WinMax: 0,
                        LoseMax: 0,
                        Refresh: 0,
                        TurnOverMax: 0,
                        TurnOverMin: 0,
                        Excludes: ''
                    }
                }
                let lastSetting = JSON.parse(localStorage.getItem(key));
                if (typeof lastSetting === 'object' && lastSetting !== null) {
                    $scope.alarm = lastSetting
                } else {
                    $scope.initSetting();
                }
                $scope.updateRefresh = function() {
                    if ($scope.alarm.Refresh !== 0 && $scope.alarm.Refresh < 10) {
                        $scope.alarm.Refresh = 10
                    }
                }
                $scope.update = function() {
                    if ($scope.alarm.Refresh !== 0 && $scope.alarm.Refresh < 10) {
                        $scope.alarm.Refresh = 10
                    }
                    $scope.alarm.Excludes = $scope.alarm.Excludes.toLowerCase().replace(/ /g, '');
                    localStorage.setItem(key, JSON.stringify($scope.alarm))
                    $mdDialog.hide();
                }
                $scope.cancel = function() {
                    $scope.initSetting();
                    $scope.update();
                    $mdDialog.hide();
                }
            }
        }
        vm.checkConfig();

        function checkConfig() {
            let today = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            if ($rootScope.User.Level !== 1 || !(moment(today).isSame(vm.report.from, 'day') && moment(today).isSame(vm.report.to, 'day'))) {
                $rootScope.alsc = false;
                return
            }
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if (typeof lastSetting === 'object' && lastSetting !== null) {
                $rootScope.alsc = (lastSetting.Refresh !== 0 && lastSetting.WinMax !== 0) || (lastSetting.Refresh !== 0 && lastSetting.LoseMax !== 0) || (lastSetting.Refresh !== 0 && lastSetting.TurnOverMax !== 0) || (lastSetting.Refresh !== 0 && lastSetting.TurnOverMin !== 0)
            } else {
                $rootScope.alsc = false;
            }
            if ($rootScope.alsc) {
                vm.refresh = $timeout(function() {
                    vm.loadReport();
                }, lastSetting.Refresh * 1000)
            }
        }
        $scope.$on('$destroy', function() {
            $timeout.cancel(vm.refresh);
        });
        vm.breadcrumbs = sessionStorage.getItem('breadcrumb') === null ? [] : JSON.parse(sessionStorage.getItem('breadcrumb'));
        $scope.$on('$stateChangeSuccess', function(ev, to, toParams, from, fromParams) {
            if (Object.keys(fromParams).length) {
                if (parseInt(fromParams.set) === 0 || $location.search().level === undefined) {
                    vm.breadcrumbs = [];
                    sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                } else {
                    if (fromParams.level === undefined && fromParams.set === undefined) {
                        vm.breadcrumbs = [{
                            uid: '',
                            level: '',
                            name: $rootScope.User.Username
                        }];
                        sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                    }
                    if (fromParams.level !== undefined) {
                        if (vm.breadcrumbs.filter(function(bc) {
                                return bc.level === fromParams.level
                            }).length || fromParams.level > $location.search().level) {
                            vm.breadcrumbs = vm.breadcrumbs.filter(function(bc) {
                                return (parseInt(bc.level) < parseInt($location.search().level)) || bc.level === ''
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        } else {
                            vm.breadcrumbs.push({
                                uid: fromParams.uid,
                                level: fromParams.level,
                                name: fromParams.name
                            });
                            sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
                        }
                    }
                }
            } else {
                vm.breadcrumbs = [];
                sessionStorage.setItem('breadcrumb', JSON.stringify(vm.breadcrumbs));
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('groupCombineNavigationCtrl', groupCombineNavigationCtrl);

    function groupCombineNavigationCtrl($rootScope, $scope, $state, $location, $mdMedia, msUtils) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.report = {
            category: 0,
            selected: []
        };
        vm.setLabel = setLabel;
        vm.productLabel = productLabel;
        vm.selectProduct = selectProduct;
        vm.selectAllProduct = selectAllProduct;
        vm.changeRange = changeRange;
        vm.loadReport = loadReport;
        vm.changeDate = changeDate;
        vm.closeFromDate = closeFromDate;
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Xổ số truyền thống"
        }, {
            id: 2,
            name: "789 Casino"
        }, {
            id: 100,
            name: "WM Casino"
        }, {
            id: 101,
            name: "Bong88"
        }];
        vm.report.selected = $location.search().product === undefined ? ['0', '1', '2', '100', '101'] : $location.search().product.split(',');
        angular.forEach(vm.productions, function(product) {
            product.active = msUtils.exists(product.id.toString(), vm.report.selected)
        });
        vm.productLabel();

        function changeDate(e) {
            if (vm.report.to < vm.report.from) {
                vm.report.to = vm.report.from
            }
        }

        function closeFromDate() {
            vm.isOpenTo = true;
        }
        vm.termLists = [{
            id: 0,
            active: true,
            name: 'Hôm nay'
        }, {
            id: 1,
            active: false,
            name: 'Hôm qua'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.report.from = $location.search().from === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().from);
        vm.report.to = $location.search().to === undefined ? moment().subtract(11, 'hour').format('YYYY-MM-DD') : moment($location.search().to);
        vm.report.category = $state.current.name.split('.')[4] === 'general' ? 0 : 1;
        if ($location.search().from !== undefined && $location.search().to !== undefined) {
            if ($location.search().from === moment().subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 0
                })
            } else if ($location.search().from === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 1
                })
            } else if ($location.search().from === moment().startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 2
                })
            } else if ($location.search().from === moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 3
                })
            } else if ($location.search().from === moment().startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 4
                })
            } else if ($location.search().from === moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD') && $location.search().to === moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD')) {
                angular.forEach(vm.termLists, function(value) {
                    value.active = value.id === 5
                })
            }
            vm.setLabel();
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.report.from = moment().subtract(11, 'hour').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(11, 'hour').format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.report.from === vm.report.to) {
                    vm.report.from = moment(vm.report.from).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.report.to = moment(vm.report.to).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.report.from = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.report.to = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.report.from = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.report.from = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.report.from = moment().startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.report.from = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.report.to = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.find = vm.termLists.filter(function(item) {
                return item.active;
            });
            if (vm.find.length !== 0) {
                vm.selectedLabel = vm.find[0].name;
            } else {
                vm.selectedLabel = 'Chọn ngày'
            }
        }

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả sản phẩm'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Chọn sản phẩm'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' sản phẩm'
            }
        }

        function loadReport() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === 0) {
                vm.selectAllProduct();
            }
            vm.selected = [];
            angular.forEach(vm.productions, function(p) {
                if (p.active) {
                    vm.selected.push(p.id)
                }
            });
            $state.go('app.accounting.combination.group.general', {
                from: moment(vm.report.from).format('YYYY-MM-DD'),
                to: moment(vm.report.to).format('YYYY-MM-DD'),
                product: vm.selected.toString()
            }, {
                inherit: false,
                reload: true
            })
        }
        $scope.$on('submitting', function(event, value) {
            vm.submitting = value;
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('combineClassificationCtrl', combineClassificationCtrl);

    function combineClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.checkAlarm = checkAlarm;
        vm.alarm = alarm;
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.report.product = $location.search().product === undefined ? '' : $location.search().product.split(',');
        vm.sumValue = {
            GrossCommission: 0,
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.from,
            To: vm.report.to
        };
        if (vm.report.product !== '') {
            data.ProductTypes = vm.report.product
        }
        network.Reporting.Statements.getUserReportGroupByProduction(data).then(function(response) {
            response.sort(function(a, b) {
                return a.ProductType - b.ProductType
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0,
                    GrossCommission: 0
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        ProductType: bet.ProductType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            NetAmount: bet.Player.NetAmount,
                            Commission: bet.Player.Commission,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        Company: (bet.Commission + bet.WinLose),
                        GrossCommission: bet.GrossCommission
                    };
                    vm.checkAlarm(oGame)
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.NetAmount += bet.Player.NetAmount;
                    vm.SumTotal.Player.Commission += bet.Player.Commission;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                });
                vm.alarm(vm.classifications);
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        ProductType: bet.ProductType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose),
                        GrossCommission: bet.GrossCommission
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Commission;
                    vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                });
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0,
                    GrossCommission: 0
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        ProductType: bet.ProductType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            NetAmount: bet.Player.NetAmount,
                            Commission: bet.Player.Commission,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        My: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose),
                        GrossCommission: bet.GrossCommission
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.NetAmount += bet.Player.NetAmount;
                    vm.SumTotal.Player.Commission += bet.Player.Commission;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.My.WinLose += bet.WinLose;
                    vm.SumTotal.My.Commission += bet.Commission;
                    vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                });
            }
        }

        function classify(product) {
            let url;
            if (product === 0) {
                url = 'app.accounting.combination.winLose.classification.traditional'
            } else if (product === 1) {
                url = 'app.accounting.combination.winLose.classification.legendary'
            } else if (product === 2) {
                url = 'app.accounting.combination.winLose.classification.casino789'
            } else if (product === 100) {
                url = 'app.accounting.combination.winLose.classification.casino'
            } else if (product === 101) {
                url = 'app.accounting.combination.winLose.classification.saba'
            }
            $state.go(url, {
                product: ''
            })
        }

        function checkAlarm(record) {
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if ($rootScope.alsc && ((record.Player.WinLose > lastSetting.WinMax && lastSetting.WinMax !== 0) || (record.Player.WinLose < lastSetting.LoseMax && lastSetting.LoseMax !== 0))) {
                record.over = true
            }
        }

        function alarm(Records) {
            let buzz = 0
            Records.map(function(item) {
                if (item.over) {
                    buzz++
                }
            })
            if (buzz !== 0) {
                let audio = new Audio('/assets/seatbelt-sound.mp3');
                audio.play();
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('combineGroupCtrl', combineGroupCtrl);

    function combineGroupCtrl($rootScope, $scope, $state, $location, $timeout, msUtils, network, message, AuthService) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.product = $location.search().product === undefined ? '' : $location.search().product.split(',');
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }]
        };
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: 11,
                orderable: false
            })
        } else {
            vm.dtOptions.columnDefs.push({
                targets: 2,
                orderable: false
            })
        }
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenReportGroupByUser = getChildrenReportGroupByUser;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.getUserDateReports = getUserDateReports;
        vm.checkAlarmCompany = checkAlarmCompany;
        vm.checkAlarmAgent = checkAlarmAgent;
        vm.checkAlarmMember = checkAlarmMember;
        vm.alarm = alarm;
        if (vm.report.set !== 0) {
            if (vm.report.level !== 9) {
                vm.getChildrenReportGroupByUser();
            } else {
                vm.getUserDateReports()
            }
        }
        vm.responseData = [];

        function getChildrenReportGroupByUser(page) {
            $rootScope.$broadcast('submitting', true);
            let data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100
            };
            data.Page = page === undefined ? 1 : page;
            if (vm.report.uid !== undefined) {
                data.ParentUserId = vm.report.uid
            }
            if (vm.report.product !== '') {
                data.ProductTypes = vm.report.product
            }
            network.Reporting.Statements.getChildrenReportGroupByUser(data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.nextPage = data.Page + 1;
                vm.hasRecord = response.length === data.Size;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                vm.alarm(vm.dataReports.Records);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 50);
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function getUserDateReports() {
            $rootScope.$broadcast('submitting', true);
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                ProductTypes: vm.report.product
            };
            if (vm.report.product === '') {
                delete vm.data.ProductType
            }
            network.Reporting.Statements.getPlayerReportGroupByProduction(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                vm.dataReports = response;
                vm.dataReports.map(function(item) {
                    vm.checkAlarmMember(item)
                })
                vm.alarm(vm.dataReports);
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 50);
                $scope.$digest();
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function viewReport(item) {
            $state.go("app.accounting.combination.winLose.general", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            let url;
            if (item.ProductType === 0) {
                url = 'app.accounting.combination.winLose.general.traditional'
            } else if (item.ProductType === 1) {
                url = 'app.accounting.combination.winLose.general.legendary'
            } else if (item.ProductType === 2) {
                url = 'app.accounting.combination.winLose.general.casino789'
            } else if (item.ProductType === 100) {
                url = 'app.accounting.combination.winLose.general.casino'
            } else if (item.ProductType === 101) {
                url = 'app.accounting.combination.winLose.general.saba'
            }
            $state.go(url, {
                product: ''
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    GrossCommission: 0,
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                vm.checkAlarmCompany(Record)
                output.Records.push(Record);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    GrossCommission: 0,
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                vm.checkAlarmAgent(Record)
                output.Records.push(Record);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }

        function checkAlarmCompany(record) {
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if ($rootScope.alsc && !msUtils.exists(record.Username.toLowerCase(), lastSetting.Excludes.split(",")) && ((record.Player.WinLose > lastSetting.WinMax && lastSetting.WinMax !== 0) || (record.Player.WinLose < lastSetting.LoseMax && lastSetting.LoseMax !== 0) || (record.Player.NetAmount > lastSetting.TurnOverMax && lastSetting.TurnOverMax !== 0) || (record.Player.NetAmount < lastSetting.TurnOverMin && lastSetting.TurnOverMin !== 0))) {
                record.over = true
            }
        }

        function checkAlarmAgent(record) {
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if ($rootScope.alsc && !msUtils.exists(record.Username.toLowerCase(), lastSetting.Excludes.split(",")) && ((record.Player.WinLose > lastSetting.WinMax && lastSetting.WinMax !== 0) || (record.Player.WinLose < lastSetting.LoseMax && lastSetting.LoseMax !== 0) || (record.Player.NetAmount > lastSetting.TurnOverMax && lastSetting.TurnOverMax !== 0) || (record.Player.NetAmount < lastSetting.TurnOverMin && lastSetting.TurnOverMin !== 0))) {
                record.over = true
            }
        }

        function checkAlarmMember(record) {
            let key = $state.current.name;
            let lastSetting = JSON.parse(localStorage.getItem(key));
            if ($rootScope.alsc && ((record.WinLose > lastSetting.WinMax && lastSetting.WinMax !== 0) || (record.WinLose < lastSetting.LoseMax && lastSetting.LoseMax !== 0) || (record.NetAmount > lastSetting.TurnOverMax && lastSetting.TurnOverMax !== 0) || (record.NetAmount < lastSetting.TurnOverMin && lastSetting.TurnOverMin !== 0))) {
                record.over = true
            }
        }

        function alarm(Records) {
            let buzz = 0
            Records.map(function(item) {
                if (item.over) {
                    buzz++
                }
            })
            if (buzz !== 0) {
                let audio = new Audio('/assets/seatbelt-sound.mp3');
                audio.play();
            }
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.accounting').controller('groupCombineGeneralCtrl', groupCombineGeneralCtrl);

    function groupCombineGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, message, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.viewReport = viewReport;
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.product = $location.search().product === undefined ? '' : $location.search().product;
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        vm.dtOptions = {
            autoWidth: false,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }]
        };
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        } else {
            vm.dtOptions.columnDefs.push({
                targets: 2,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.accounting.combination.winLose.general", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.DisplayName,
                product: vm.report.product
            })
        }

        function getChildrenUserReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 50,
                Page: 1,
            };
            if (vm.report.product !== '') {
                vm.data.ProductTypes = vm.report.product.split(',');
            }
            network.Reporting.Consolidation.getReportGroupByUser(vm.data).then(function(response) {
                if (vm.report.level === 2) {
                    vm.dataReports = vm.arrangeCompany(response);
                } else {
                    vm.dataReports = vm.arrangeAgent(response);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        NetAmount: item.Player.NetAmount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: (item.Ancestor.WinLose + item.Ancestor.Commission)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company += item.Ancestor.WinLose + item.Ancestor.Commission;
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        NetAmount: item.Player.NetAmount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.Commission + item.Ancestor.WinLose + item.Parent.WinLose + item.Parent.Commission - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose + item.Parent.WinLose + item.Parent.Commission - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.Commission + item.Ancestor.WinLose + item.Parent.WinLose + item.Parent.Commission - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += 0;
                output.Sum.My.Commission += 0;
                output.Sum.My.Total += 0;
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose + item.Parent.WinLose + item.Parent.Commission - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('presidentialCasinoMemberCtrl', presidentialCasinoMemberCtrl);

    function presidentialCasinoMemberCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = $location.search().game;
        vm.data.betType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.name = $location.search().name;
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            Lotus.SenCasino.Games.Politics.Report.Statement.getBetItems(vm.data).then(function(response) {
                vm.loadMore = response.length === 25;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalWinLoseCtrl', traditionalWinLoseCtrl);

    function traditionalWinLoseCtrl($scope, $state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.traditional.statement.win-lose') {
            $state.go('app.traditional.statement.win-lose.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalMemberController', traditionalMemberController);

    function traditionalMemberController($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.dashboard');
            return;
        }
        if ($state.current.name === 'app.traditional.statement.member') {
            $state.go('app.traditional.statement.member.executive', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalOutstandingCtrl', traditionalOutstandingCtrl);

    function traditionalOutstandingCtrl($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.traditional.statement.outstanding') {
            $state.go('app.traditional.statement.outstanding.general', {
                game: '0,1,2,3,4,5'
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.statement').controller('traditionalCanceledCtrl', traditionalCanceledCtrl);

    function traditionalCanceledCtrl($scope, $mdDialog, $timeout, $location, $state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.traditional.statement.canceled') {
            $state.go('app.traditional.statement.canceled.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.settings').controller('publicOddsCtrl', publicOddsCtrl);

    function publicOddsCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, $http, $q, network, msUtils, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.updateUser = updateUser;

        function querySearch(text) {
            var result = network.User.searchLite({
                MatchName: text,
                Level: 9
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            $timeout(function() {
                vm.selectedItem = item;
            }, 300)
        }

        function searchTextChange(item) {
            vm.selectedItem = undefined;
        }
        network.Games.Lottery.PublicOdds.getSettings().then(function(response) {
            vm.publicUser = response.filter(function(t) {
                return t.Type === "PUBLIC_USER"
            })[0];
            $scope.$digest();
        });

        function updateUser() {
            network.Games.Lottery.PublicOdds.updateUserPublicOdds({
                UserId: vm.selectedItem.Id
            }).then(function(response) {
                vm.publicUser = vm.selectedItem;
                vm.selectedItem = undefined;
                vm.searchText = '';
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('traditionalTemporaryWinLoseCtrl', traditionalTemporaryWinLoseCtrl);

    function traditionalTemporaryWinLoseCtrl($scope, $state, AuthService) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.traditional_risk_management.temporary.statement') {
            $state.go('app.traditional_risk_management.temporary.statement.general', {
                term: moment().format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('riskManagementMemberCtrl', riskManagementMemberCtrl);

    function riskManagementMemberCtrl($rootScope, $scope, $timeout, $interval, $state, $mdDialog, $mdToast, $filter, $mdMedia, $mdSidenav, $mdBottomSheet, network, orderByFilter, msUtils, message, AuthService, $q) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.isCompany = AuthService.isCompany();
        vm.hasPermission = AuthService.hasPermission(16);
        vm.hasWritePermission = AuthService.hasPermission(8);
        if (!AuthService.hasPermission(16)) {
            $state.go('app.forbidden');
            return;
        }
        vm.aNumberShares = [];
        vm.numbers = [];
        vm.terms = [];
        vm.betTypes = [];
        vm.termHistory = [];
        vm.viewPoints = [{
            id: 0,
            name: 'Toàn bộ'
        }, {
            id: 1,
            name: 'Còn lại'
        }];
        vm.sortDefs = [{
            id: 'num',
            name: 'Thứ tự'
        }, {
            id: 'risk',
            name: 'Nguy cơ'
        }];
        vm.denominators = [1, 1000, 1000000];
        vm.changeTerm = changeTerm;
        vm.fetchCurrentTerm = fetchCurrentTerm;
        vm.fetchHistoryTerm = fetchHistoryTerm;
        vm.changeGame = changeGame;
        vm.fetchParam = fetchParam;
        vm.fetchNumbers = fetchNumbers;
        vm.changeBet = changeBet;
        vm.setupStep = setupStep;
        vm.createNumber2D = createNumber2D;
        vm.createNumber3D = createNumber3D;
        vm.createNumber4D = createNumber4D;
        vm.createPopover = createPopover;
        vm.sortNumber = sortNumber;
        vm.companyBoard = companyBoard;
        vm.viewUpline = viewUpline;
        vm.refreshEvent = refreshEvent;
        vm.immediatePrice = immediatePrice;
        vm.toggleSidenav = toggleSidenav;
        vm.navChangeGame = navChangeGame;
        vm.navChangeSortDefs = navChangeSortDefs;
        vm.activeNumber = activeNumber;
        vm.searchTextChange = searchTextChange;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.removeMember = removeMember;
        vm.rendered = rendered;
        vm.getAncestors = getAncestors;
        vm.updateBoard = updateBoard;
        vm.onSuccess = onSuccess;
        vm.findIP = findIP;
        vm.getPreviousTerm = getPreviousTerm;
        vm.getNewTerm = getNewTerm;
        vm.ipToUser = ipToUser;
        vm.getPlayersByIP = getPlayersByIP;
        vm.fillResult = fillResult;
        vm.compare = compare;
        vm.viewOutStanding = viewOutStanding;
        vm.searchText = '';
        vm.membersList = [];
        vm.ipAddress = [];
        vm.matchArr = [];
        vm.results = '';
        vm.previousTerm = [];
        let lastSetting = JSON.parse(localStorage.getItem('riskManagement'));
        if (lastSetting !== null) {
            vm.membersList = lastSetting.members;
        }
        vm.ipAddressModel = vm.ipAddress.join("\r\n")

        function searchTextChange(item) {
            vm.username = '';
        }

        function querySearch() {
            let result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 9
            }).then(function(response) {
                return response
            });
            let deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.previousTerm = [];
            if (item !== undefined) {
                vm.membersList.push(item);
            }
            let riskManagement = {
                members: vm.membersList,
                ipAddress: vm.ipAddress
            }
            localStorage.setItem('riskManagement', JSON.stringify(riskManagement))
            $timeout(function() {
                vm.searchText = '';
            }, 100)
        }

        function removeMember(item) {
            vm.previousTerm = [];
            vm.membersList = vm.membersList.filter(function(obj) {
                return obj.Id !== item.Id;
            });
            let riskManagement = {
                members: vm.membersList,
                ipAddress: vm.ipAddress
            }
            localStorage.setItem('riskManagement', JSON.stringify(riskManagement))
        }

        function getPreviousTerm(item) {
            vm.priceBoard.Term = item.Term;
            $timeout(function() {
                vm.rendered();
            }, 200)
        }

        function getNewTerm() {
            let newTerm = moment(vm.previousTerm[vm.previousTerm.length - 1].Term).subtract(1, 'day').format("YYYY-MM-DD")
            vm.priceBoard.Term = newTerm;
            $timeout(function() {
                vm.previousTerm.push({
                    Term: newTerm,
                    Income: 0
                })
                vm.rendered();
            }, 200)
        }

        function rendered() {
            vm.ipAddress = vm.ipAddressModel.replace(/ /g, '').replace(/\r/g, '').split("\n")
            vm.ipAddress = vm.ipAddress.filter(function(item) {
                return item.length !== 0
            })
            let riskManagement = {
                members: vm.membersList,
                ipAddress: vm.ipAddress
            }
            vm.fetchNumbers();
        }
        vm.priceView = {
            term: null
        };
        vm.priceBoard = {};
        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
        let z = moment().hour() < 19 ? 0 : -1;
        let max = vm.isCompany ? 60 : 20;
        for (let y = z; y < max; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }

        function refreshEvent(event) {
            vm.maxTimer = event;
            $interval.cancel(vm.refreshNumber);
            if (event === 0) {
                $timeout(function() {
                    $interval.cancel(vm.refreshNumber);
                    vm.timer = 'OFF'
                }, 200)
            } else {
                vm.timer = event;
            }
            vm.refreshNumber = $interval(function() {
                vm.timer--;
                if (vm.timer < 0) {
                    vm.timer = event;
                    vm.fetchNumbers();
                }
            }, 1000)
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.refreshNumber);
        });

        function immediatePrice() {
            vm.fetchNumbers();
            vm.refreshEvent(vm.maxTimer);
        }

        function changeTerm() {
            if ((vm.priceBoard.Term.replace(/-/g, '') > moment().format('YYYYMMDD') && moment().format('HH') > 12) || (vm.priceBoard.Term === moment().format('YYYY-MM-DD'))) {
                vm.fetchCurrentTerm(true);
                vm.priceView.currentTerm = true;
                vm.refreshEvent(60);
            } else {
                vm.fetchHistoryTerm(vm.priceBoard.Term);
                vm.priceView.currentTerm = false;
                vm.refreshEvent(0);
            }
        }

        function fetchCurrentTerm(cond) {
            network.Games.Lottery.Term.getTermsByDate({
                date: null
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                vm.priceBoard.Term = response[0].Term;
                $scope.$digest();
                if (cond) {
                    $timeout(function() {
                        vm.changeGame();
                    })
                }
            })
        }

        function fetchHistoryTerm(termName) {
            network.Games.Lottery.Term.getTermsByDate({
                date: termName
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                vm.priceBoard.Term = response[0].Term;
                $scope.$digest();
                $timeout(function() {
                    vm.changeGame();
                }, 200)
            }).catch(function(error) {
                if (error.code === 'DataNotFoundException') {
                    message.alert('Thông tin kỳ không tồn tại.')
                }
            })
        }

        function changeGame() {
            if (vm.running) {
                return
            }
            vm.running = true;
            vm.priceBoard.GameType = parseInt(vm.selected.GameType);
            vm.fetchParam();
            vm.priceBoard.TermStatus = vm.aTerms.filter(function(term) {
                return term.GameType === vm.priceBoard.GameType
            })[0].Status;
            if (vm.priceBoard.TermStatus !== 1) {
                vm.refreshEvent(0);
            }
            if (vm.priceBoard.GameType === 0) {
                vm.priceBoard.deadLine = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 1
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 0
                })[0].AutoCloseAt;
            } else if (msUtils.exists(vm.priceBoard.GameType, [1, 2, 3, 4])) {
                vm.priceBoard.deadLine = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 7
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 8
                })[0].AutoCloseAt;
            } else {
                vm.priceBoard.deadLine = vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 2
                })[0].AutoCloseAt;
            }
        }

        function fetchParam() {
            vm.betTypes = $.grep(vm.aTerms, function(e) {
                return e.GameType === vm.priceBoard.GameType;
            })[0].Games;
            vm.betTypes.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            vm.priceBoard.BetType = vm.betTypes[1].BetType;
            vm.fetchNumbers();
        }

        function changeBet(bet) {
            vm.priceBoard.BetType = bet.BetType;
            vm.previousTerm = [];
            vm.fetchNumbers();
        }

        function fetchNumbers() {
            vm.loadDisabled = false;
            if (vm.membersList.length === 0 && vm.ipAddress.length === 0) {
                vm.loadDisabled = true;
                return
            }
            vm.setupStep();
            let param = {
                Term: vm.priceBoard.Term,
                GameType: vm.priceBoard.GameType,
                BetType: vm.priceBoard.BetType,
                PlayerUserIdList: [],
                IPList: vm.ipAddress
            };
            vm.membersList.map(function(member) {
                param.PlayerUserIdList.push(member.Id)
            })
            if (param.PlayerUserIdList.length === 0) {
                delete param.PlayerUserIdList
            }
            if (param.IPList.length === 0) {
                delete param.IPList
            }
            Lotus.Lottery.PriceTable.buildCustomPlayerOdds(param).then(function(response) {
                response = reInit(response)
                let check = vm.previousTerm.filter(function(e) {
                    return e.Term === param.Term
                })
                if (check.length === 0) {
                    vm.previousTerm.push({
                        Term: param.Term,
                        Income: response.UplineTotalIncome.Company
                    })
                }
                if (check.length === 1 && check[0].Income === 0) {
                    check[0].Income = response.UplineTotalIncome.Company
                }
                vm.previousTerm.sort(function(a, b) {
                    return a.Term - b.Term
                })
                vm.odds = response;
                $timeout(function() {
                    vm.running = false;
                }, 200);
                $timeout(function() {
                    vm.allSet = true;
                }, 800);
                if (msUtils.exists(vm.priceBoard.BetType, [10, 11, 12, 17, 18])) {
                    vm.createNumber3D(vm.filterVal);
                } else if (msUtils.exists(vm.priceBoard.BetType, [13, 14, 19])) {
                    vm.createPopover();
                    vm.createNumber4D(vm.cond4d);
                } else {
                    vm.createNumber2D();
                }
                $timeout(function() {
                    vm.updateBoard();
                    vm.compare();
                }, 300)
            }).catch(function(error) {
                vm.odds = reInit({
                    "Price": 0,
                    "Numbers": [],
                    "UplineTotalIncome": {
                        "Company": 0,
                        "Manager": 0,
                        "Super": 0,
                        "Master": 0,
                        "Agent": 0
                    },
                    "UplineTotalPoint": {
                        "Company": 0,
                        "Manager": 0,
                        "Super": 0,
                        "Master": 0,
                        "Agent": 0
                    }
                });
                vm.loadDisabled = true;
                vm.allSet = false;
                message.info(error.message)
            })
        }

        function reInit(response) {
            response.totalIncome = response.UplineTotalIncome.Company + response.UplineTotalIncome.Manager + response.UplineTotalIncome.Master + response.UplineTotalIncome.Super + response.UplineTotalIncome.Agent;
            response.IncomePercent = {}
            response.IncomePercent.Company = response.UplineTotalIncome.Company / response.totalIncome * 100
            response.IncomePercent.Manager = response.UplineTotalIncome.Manager / response.totalIncome * 100
            response.IncomePercent.Master = response.UplineTotalIncome.Master / response.totalIncome * 100
            response.IncomePercent.Super = response.UplineTotalIncome.Super / response.totalIncome * 100
            response.IncomePercent.Agent = response.UplineTotalIncome.Agent / response.totalIncome * 100
            response.totalPoint = response.UplineTotalPoint.Company + response.UplineTotalPoint.Manager + response.UplineTotalPoint.Master + response.UplineTotalPoint.Super + response.UplineTotalPoint.Agent;
            response.PointPercent = {}
            response.PointPercent.Company = response.UplineTotalPoint.Company / response.totalPoint * 100
            response.PointPercent.Manager = response.UplineTotalPoint.Manager / response.totalPoint * 100
            response.PointPercent.Master = response.UplineTotalPoint.Master / response.totalPoint * 100
            response.PointPercent.Super = response.UplineTotalPoint.Super / response.totalPoint * 100
            response.PointPercent.Agent = response.UplineTotalPoint.Agent / response.totalPoint * 100
            return response
        }

        function setupStep() {
            vm.show3D = [10, 11, 12, 17, 18].indexOf(vm.priceBoard.BetType) !== -1;
            vm.show4D = [13, 14, 19].indexOf(vm.priceBoard.BetType) !== -1;
        }

        function createNumber2D() {
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 2) {
                vm.numbers = [];
                for (let i = 0; i < 100; i++) {
                    i = i < 10 ? '0' + i : i;
                    vm.numbers.push({
                        num: i.toString()
                    })
                }
            } else {}
            vm.riskNumbers = [];
            vm.hasPoints = [];
            angular.forEach(vm.numbers, function(item, i) {
                let findNrr = $.grep(vm.odds.Numbers, function(e) {
                    return e.Number === item.num
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].CompanyRiskAmount === undefined ? 0 : findNrr[0].CompanyRiskAmount;
                    item.totalRisk = findNrr[0].RiskAmount === undefined ? 0 : findNrr[0].RiskAmount;
                    item.point = (findNrr[0].UplinePoint !== undefined && findNrr[0].UplinePoint.Company !== undefined) ? findNrr[0].UplinePoint.Company : 0;
                    item.totalPoint = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.UplinePoint = findNrr[0].UplinePoint;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.UplineTotalIncome.Company;
                    item.totalRisk = vm.odds.totalIncome;
                }
                if (item.risk < 0) {
                    vm.riskNumbers.push(item.num)
                }
                if (item.point > 0) {
                    vm.hasPoints.push(item.num)
                }
            });
            vm.priceBoard.point = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].point
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].totalPoint
            }, 0);
            vm.priceBoard.averagePrice = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].price
            }, 0) / 100;
            vm.sortNumber();
        }

        function createNumber3D(cond) {
            vm.filterVal = cond !== undefined ? cond : undefined;
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 3) {}
            vm.numbers = [];
            let numberArr = [];
            if (vm.filterVal === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (let i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (let i = 0; i < 1000; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    i = i.toString()
                    let integer = Math.floor(vm.filterVal / 10);
                    if (integer === 2) {
                        if (Math.floor(i / 100) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else if (integer === 1) {
                        if (Math.floor((i % 100) / 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else {
                        if (Math.floor(i % 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    }
                }
            }
            angular.forEach(numberArr, function(val) {
                let item = {};
                item.num = val;
                let findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].CompanyRiskAmount === undefined ? 0 : findNrr[0].CompanyRiskAmount;
                    item.totalRisk = findNrr[0].RiskAmount === undefined ? 0 : findNrr[0].RiskAmount;
                    item.point = findNrr[0].UplinePoint.Company === undefined ? 0 : findNrr[0].UplinePoint.Company;
                    item.totalPoint = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.UplinePoint = findNrr[0].UplinePoint
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.UplineTotalIncome.Company;
                    item.totalRisk = vm.odds.totalIncome;
                }
                vm.numbers.push(item)
            });
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 1000) / 1000;
            vm.sortNumber();
        }

        function createNumber4D(cond) {
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 10000) / 10000;
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.numbers = [];
            let numberArr = [];
            if (cond === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (let i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (let i = 0; i < 10000; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    i = i.toString();
                    if (i.match(cond.id)) {
                        numberArr.push(i)
                    }
                }
            }
            angular.forEach(numberArr, function(val) {
                let item = {};
                item.num = val;
                let findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].CompanyRiskAmount === undefined ? 0 : findNrr[0].CompanyRiskAmount;
                    item.totalRisk = findNrr[0].RiskAmount === undefined ? 0 : findNrr[0].RiskAmount;
                    item.point = findNrr[0].UplinePoint.Company === undefined ? 0 : findNrr[0].UplinePoint.Company;
                    item.totalPoint = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.UplinePoint = findNrr[0].UplinePoint
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.UplineTotalIncome.Company;
                    item.totalRisk = vm.odds.totalIncome;
                }
                vm.numbers.push(item)
            });
            vm.sortNumber();
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];
            for (let i = 0; i < 100; i++) {
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                let j = i.split('');
                vm.popooxx.push({
                    id: '^' + i + '([0-9]+)$',
                    name: i + 'XX'
                });
                vm.popoxxo.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '$',
                    name: i.split('').join('XX')
                });
                vm.popoxox.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$',
                    name: i.split('').join('X') + 'X'
                });
                vm.popxoxo.push({
                    id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] + '$',
                    name: 'X' + i.split('').join('X')
                });
                vm.popxoox.push({
                    id: '^([0-9]+)' + i + '([0-9]+)$',
                    name: 'X' + i + 'X'
                });
                vm.popxxoo.push({
                    id: '^([0-9]+)' + i + '$',
                    name: 'XX' + i
                })
            }
        }

        function sortNumber() {
            vm.viewPoint = vm.viewPoint === undefined ? '1' : vm.viewPoint;
            vm.desc = false;
            if (vm.selected.sort === 'risk') {
                if (vm.viewPoint === '1') {
                    vm.propertyName = 'risk'
                } else {
                    vm.propertyName = 'totalRisk'
                }
                if (vm.priceBoard.BetType === 20) {
                    vm.propertyName = 'point';
                    vm.desc = true;
                }
            } else if (vm.selected.sort === 'num') {
                vm.propertyName = 'num'
            } else {
                vm.propertyName = 'MaxPercent'
            }
            vm.numbers = orderByFilter(vm.numbers, vm.propertyName, vm.desc);
            if (typeof(vm.numbers) === 'object') {
                vm.numbers = vm.numbers.slice(0, 100)
            }
        }

        function viewUpline(ev, item) {
            if (item.point === 0) {
                ev.stopPropagation()
                return;
            }
            $mdDialog.show({
                controller: viewBettingTraCtrl,
                templateUrl: 'app/main/traditional/risk-management/members/dialog/upline-dialog.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    item: item
                }
            });

            function viewBettingTraCtrl($scope, $mdDialog, $timeout, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.item = item
                $scope.total = item.UplinePoint.Company + item.UplinePoint.Manager + item.UplinePoint.Master + item.UplinePoint.Super + item.UplinePoint.Agent
            }
            ev.stopPropagation()
        }

        function toggleSidenav(sidenavId) {
            $mdSidenav(sidenavId).toggle();
        }

        function navChangeGame(game) {
            vm.selected.GameType = game;
            $timeout(function() {
                vm.changeGame();
            })
        }

        function navChangeSortDefs(id) {
            vm.selected.sort = id;
            $timeout(function() {
                vm.sortNumber()
            })
        }

        function activeNumber(number) {
            if (!vm.isCompany) {
                return
            }
            number.active = !number.active;
        }

        function getAncestors(item) {
            vm.parents = [];
            network.User.getAncestors({
                userId: item.Id
            }).then(function(response) {
                vm.parents = response;
                vm.parents.push({
                    Username: $rootScope.User.Username,
                    FullName: $rootScope.User.FullName,
                    Level: $rootScope.User.Level
                });
                vm.parents.push({
                    Username: item.Username,
                    FullName: item.FullName,
                    Level: item.Level,
                    UserId: item.Id
                });
                vm.parents.sort(function(a, b) {
                    return a.Level - b.Level
                });
                $scope.$digest();
            })
        }

        function companyBoard($event) {
            $mdDialog.show({
                controller: companyBoardCtrl,
                templateUrl: 'app/main/traditional/risk-management/members/dialog/big.board.dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {}
            });

            function companyBoardCtrl($scope, $mdDialog, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.onTabSelected = function(tab) {
                    $scope.GameType = tab;
                    $scope.count = 0;
                    if (tab === 0) {
                        $scope.monitorBets = [0, 1, 2, 3, 4, 20, 22, 21]
                    } else {
                        $scope.monitorBets = [2, 3, 4, 7, 8, 9, 10, 11, 12]
                    }
                }
                $scope.initSetting = function() {
                    $scope.alarmSetting = {
                        point: {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            20: 0,
                            21: 0,
                            22: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0
                        },
                        risk: {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            20: 0,
                            21: 0,
                            22: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0
                        },
                    }
                }
                let lastSetting = JSON.parse(localStorage.getItem('setting-alarm'));
                if (typeof lastSetting === 'object' && lastSetting !== null) {
                    $scope.alarmSetting = lastSetting
                } else {
                    $scope.initSetting();
                }
                $scope.updateSetting = function() {
                    localStorage.setItem('setting-alarm', JSON.stringify($scope.alarmSetting))
                }
                $scope.interval = 30;
                $scope.countdown = function() {
                    let interval = $timeout(function() {
                        $scope.interval = $scope.interval < 10 ? 10 : $scope.interval;
                        if ($scope.count === 0) {
                            $scope.getOdds();
                        }
                        $scope.count++;
                        if ($scope.count > $scope.interval) {
                            $scope.count = 0
                        }
                        $scope.countdown();
                    }, 1000);
                    $scope.$on('$destroy', function() {
                        $timeout.cancel(interval);
                    });
                };
                $scope.countdown();
                $scope.colors = ['#ff0400', '#0075c6', '#ffff00', '#00ae52', '#ff9900', '#990099', '#808080', '#99ccff', '#d47d7d', '#b3d303', '#a6d6ed', '#c77ff4', '#adf481', '#c7f0fc', '#fcc4ba', '#8cf7c3', '#ffc6d4', '#bc6ef4', '#f99fe7', '#a98bed', '#f98886', '#79f7d1', '#d38dfc', '#abd1fc', '#d7c2f9', '#ed817b', '#edfc7b'];

                function getOdd(BetType) {
                    let param = {
                        Term: vm.priceBoard.Term,
                        GameType: $scope.GameType,
                        BetType: BetType,
                        PlayerUserIdList: [],
                        IPList: vm.ipAddress
                    };
                    vm.membersList.map(function(member) {
                        param.PlayerUserIdList.push(member.Id)
                    })
                    if (param.PlayerUserIdList.length === 0) {
                        delete param.PlayerUserIdList
                    }
                    if (param.IPList.length === 0) {
                        delete param.IPList
                    }
                    return Lotus.Lottery.PriceTable.buildCustomPlayerOdds(param).then(function(response) {
                        response.BetType = param.BetType
                        response.Numbers.sort(function(a, b) {
                            return a.RiskAmount - b.RiskAmount
                        });
                        angular.forEach(response.Numbers, function(Number) {
                            Number.Price = Number.ExtraPrice !== undefined ? response.Price + Number.ExtraPrice : response.Price;
                        });
                        return response
                    }).catch(function() {
                        return {
                            BetType: param.BetType
                        }
                    })
                }
                $scope.highlightNumber = function() {
                    $scope.oddData = $scope.oddData.filter(function(obj) {
                        return obj.Numbers !== undefined;
                    });
                    $scope.oddData.map(function(odd) {
                        odd.TotalPoint = 0;
                        if (odd.Numbers !== undefined) {
                            odd.Numbers.map(function(number) {
                                odd.TotalPoint += number.Point !== undefined ? number.Point : 0;
                            })
                        }
                    })
                    let numberArr = [],
                        result = [];
                    angular.forEach($scope.oddData, function(odd) {
                        if (odd.BetType === 20) {
                            if (odd.Numbers !== undefined)
                                odd.Numbers = odd.Numbers.sort(function(a, b) {
                                    return b.Point - a.Point
                                })
                        }
                        if (odd.BetType !== 21) {
                            if (odd.Numbers !== undefined)
                                angular.forEach(odd.Numbers, function(number, index) {
                                    if (index < 10) {
                                        numberArr.push(number.Number)
                                    }
                                })
                        }
                    });
                    for (let i = 0; i < 100; i++) {
                        i = i < 10 ? '0' + i : i;
                        if ($.grep(numberArr, function(n) {
                                return n === i.toString()
                            }).length > 2) {
                            result.push(i.toString())
                        }
                    }
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            let indexColor = result.indexOf(number.Number);
                            if (indexColor > -1 && odd.BetType !== 21) {
                                number.classIndex = indexColor
                            }
                        })
                    })
                    $scope.alarmDanger();
                };
                $scope.getOdds = function() {
                    if ($scope.GameType === 0) {
                        Promise.all([getOdd(0), getOdd(1), getOdd(2), getOdd(3), getOdd(4), getOdd(20), getOdd(22), getOdd(21)]).then(function(values) {
                            $scope.oddData = values;
                            $scope.highlightNumber();
                        })
                    } else {
                        Promise.all([getOdd(2), getOdd(3), getOdd(4), getOdd(7), getOdd(8), getOdd(9), getOdd(10), getOdd(11), getOdd(12)]).then(function(values) {
                            $scope.oddData = values;
                            $scope.highlightNumber();
                        })
                    }
                };
                $scope.hoverOut = function() {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            number.hover = false;
                        })
                    })
                };
                $scope.hoverIn = function(num) {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            if (number.Number === num && number.classIndex !== undefined) {
                                number.hover = true;
                            }
                        })
                    })
                };
                $scope.alarmDanger = function() {
                    let danger = false;
                    let checkNumbers;
                    for (let key in $scope.alarmSetting) {
                        if ($scope.alarmSetting.hasOwnProperty(key)) {
                            for (let cp in $scope.alarmSetting[key]) {
                                if ($scope.alarmSetting[key].hasOwnProperty(cp)) {
                                    let checkValue = $scope.alarmSetting[key][cp];
                                    if ($scope.oddData.filter(function(k) {
                                            return k.BetType === parseInt(cp)
                                        }).length) {
                                        checkNumbers = $scope.oddData.filter(function(k) {
                                            return k.BetType === parseInt(cp)
                                        })[0].Numbers
                                        if (checkNumbers !== undefined && checkNumbers.length) {
                                            checkNumbers.map(function(number) {
                                                if (key === 'point') {
                                                    if (checkValue !== 0 && number.UplinePoint.Company > checkValue) {
                                                        danger = true;
                                                        number.highlightByPoint = true;
                                                    } else {
                                                        number.highlightByPoint = false
                                                    }
                                                } else {
                                                    if (checkValue !== 0 && number.CompanyRiskAmount < checkValue * 1000) {
                                                        danger = true;
                                                        number.highlightByRisk = true;
                                                    } else {
                                                        number.highlightByRisk = false;
                                                    }
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (danger) {
                        $scope.playSound();
                    }
                }
                $scope.playSound = function() {
                    let audio = new Audio('/assets/alarm-danger.mp3');
                    audio.play();
                }
            }
        }

        function updateBoard() {
            vm.matchArr = [];
            if (vm.inputNumbers === undefined) {
                vm.ObjNumber = []
            } else {
                vm.ObjNumber = vm.inputNumbers.replace(/\s+/g, '').split(',')
                vm.numbers.map(function(item) {
                    item.matched = item.point > 0 && msUtils.exists(item.num, vm.ObjNumber)
                    if (item.matched) {
                        vm.matchArr.push(item.num)
                    }
                })
            }
        }

        function onSuccess() {
            message.message('Copy thành công dải số')
        }

        function findIP(item) {
            vm.disabledFind = true;
            Lotus.Lottery.RiskManagement.getIPListByUsername({
                Term: vm.priceBoard.Term,
                Username: item.Username
            }).then(function(response) {
                if (response.IP.length === 0) {
                    message.info('Tài khoản này không có IP trong kỳ ' + vm.priceBoard.Term)
                } else {
                    $mdDialog.show({
                        controller: foundIpCtrl,
                        templateUrl: 'app/main/traditional/risk-management/members/dialog/ip.dialog.html',
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            Ips: response.IP
                        }
                    });

                    function foundIpCtrl($scope, $mdDialog, $timeout, Ips) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.IPs = Ips
                        $scope.replace = function() {
                            vm.ipAddressModel = $scope.IPs.join("\r\n")
                            $timeout(function() {
                                $mdDialog.cancel();
                            }, 200)
                        }
                    }
                }
            })
        }

        function ipToUser() {
            vm.ipAddress = vm.ipAddressModel.replace(/ /g, '').replace(/\r/g, '').split("\n")
            vm.ipAddress = vm.ipAddress.filter(function(item) {
                return item.length !== 0
            })
            if (vm.ipAddress.length > 1) {
                $mdDialog.show({
                    controller: chooseIpCtrl,
                    templateUrl: 'app/main/traditional/risk-management/members/dialog/choose-ip.html',
                    clickOutsideToClose: true,
                    multiple: true,
                    fullscreen: true,
                    locals: {
                        Ips: vm.ipAddress
                    }
                });

                function chooseIpCtrl($scope, $mdDialog, $timeout, Ips) {
                    $scope.cancel = function() {
                        $mdDialog.cancel();
                    };
                    $scope.IPs = Ips
                    $scope.chooseIP = function(ip) {
                        vm.getPlayersByIP(ip)
                        $timeout(function() {}, 200)
                    }
                }
            } else if (vm.ipAddress.length === 1) {
                vm.getPlayersByIP(vm.ipAddress[0])
            }
        }

        function getPlayersByIP(ip) {
            $mdDialog.show({
                controller: memberByIpCtrl,
                templateUrl: 'app/main/traditional/risk-management/members/dialog/member-by-ip.html',
                clickOutsideToClose: true,
                multiple: false,
                fullscreen: true,
                locals: {
                    Ip: ip
                }
            });

            function memberByIpCtrl($scope, $mdDialog, $timeout, Ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.Lottery.RiskManagement.getPlayersByIP({
                    Term: vm.priceBoard.Term,
                    IP: Ip
                }).then(function(response) {
                    console.log(response)
                    $scope.membersByIp = response;
                    $scope.$digest();
                    $timeout(function() {
                        $scope.submitting = false;
                    }, 100)
                })
                $scope.chooseMember = function(item) {
                    let findMember = vm.membersList.filter(function(mem) {
                        return mem.Id === item.UserId
                    })
                    if (findMember.length === 0) {
                        vm.membersList.push({
                            Id: item.UserId,
                            Username: item.Username,
                            Level: 9
                        });
                        let riskManagement = {
                            members: vm.membersList,
                            ipAddress: vm.ipAddress
                        }
                        localStorage.setItem('riskManagement', JSON.stringify(riskManagement))
                    } else {
                        message.infoMultiple('Hội viên đã tồn tại trong danh sách')
                    }
                }
            }
        }

        function fillResult() {
            vm.filling = true;
            if (msUtils.exists(vm.priceBoard.GameType, [2, 3, 4])) {
                network.Games.Lottery.LotteryResult.getSouthernResultByTerm({
                    Term: vm.priceBoard.Term,
                    GameType: vm.priceBoard.GameType
                }).then(function(response) {
                    delete response.Date;
                    let obj = Object.values(response).join(',').split(',')
                    let result = obj.map((element, index, array) => {
                        return element.slice(-2)
                    });
                    vm.results = result.toString();
                    vm.filling = false;
                    $scope.$digest();
                }).catch(function(error) {
                    vm.filling = false;
                    console.log(error.code)
                });
            } else {
                network.Games.Lottery.LotteryResult.getNorthernResultByTerm({
                    Term: vm.priceBoard.Term
                }).then(function(response) {
                    delete response.Date;
                    let obj = Object.values(response).join(',').split(',')
                    let result = obj.map((element, index, array) => {
                        return element.slice(-2)
                    });
                    vm.results = result.toString();
                    vm.filling = false;
                    $scope.$digest();
                }).catch(function(error) {
                    vm.filling = false;
                    console.log(error.code)
                });
            }
        }

        function compare() {
            vm.matchCompare = [];
            if (vm.results === undefined) {
                vm.ObjResult = []
            } else {
                vm.ObjResult = vm.results.replace(/\s+/g, '').split(',')
                vm.numbers.map(function(item) {
                    item.compared = item.point > 0 && msUtils.exists(item.num, vm.ObjResult)
                    if (item.compared) {
                        vm.matchCompare.push(item.num)
                    }
                })
            }
        }

        function viewOutStanding(member, ev) {
            $mdDialog.show({
                controller: viewOutStandingCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/view.outstanding.dialog.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: true,
                multiple: true,
                locals: {
                    member: member
                }
            });

            function viewOutStandingCtrl($scope, $mdDialog, $timeout, member) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.OutDtOptions = {
                    autoWidth: true,
                    responsive: true,
                    searching: false,
                    paging: false,
                    retrieve: true,
                    bInfo: false,
                    bPaginate: false,
                    columnDefs: [{
                        targets: 2,
                        orderable: false
                    }, {
                        targets: 4,
                        orderable: false
                    }]
                };
                $scope.member = member;
                $scope.priceBoard = vm.priceBoard;
                $scope.outStandingMembers = [];
                $scope.data = {
                    UserId: member.UserId,
                    GameType: vm.priceBoard.GameType,
                    BetType: vm.priceBoard.BetType,
                    Limit: 100
                };
                $scope.loadMemberReport = function(ltId) {
                    $scope.data.LastId = ltId === undefined ? '' : ltId;
                    $scope.submitting = true;
                    network.Reporting.Traditional.Outstanding.getTicketItems($scope.data).then(function(response) {
                        $scope.hasRecord = response.length === $scope.data.Limit;
                        $scope.outStandingMembers = $scope.outStandingMembers.concat(response);
                        $scope.submitting = false;
                        $scope.$digest();
                    })
                }
                $scope.loadMemberReport();
                $scope.viewIp = function(ip) {
                    $mdDialog.show({
                        controller: viewIpCtrl,
                        templateUrl: 'app/main/dashboard/dialog/ip.html',
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            ip: ip
                        }
                    });

                    function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        Lotus.IpLookup.lookup(ip).then(function(response) {
                            $scope.ipLookup = response;
                            $scope.$digest();
                        });
                    }
                }
            }
            ev.stopPropagation()
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.settings').controller('parameterCtrl', parameterCtrl);

    function parameterCtrl($scope, $mdDialog, $filter, $state, $timeout, network, message, msUtils, AuthService) {
        let vm = this;
        console.log(AuthService.isCompany(), AuthService.hasPermission(64))
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.loadProfiles = loadProfiles;
        vm.switchProfile = switchProfile;
        vm.deleteProfile = deleteProfile;
        vm.addProfile = addProfile;
        vm.detailsProfile = detailsProfile;
        vm.available = available;
        vm.viewByPoint = viewByPoint;
        vm.viewByRisk = viewByRisk;
        vm.viewPointAvg = viewPointAvg;
        vm.loadCurrentTime = loadCurrentTime;
        vm.updateTime = updateTime;
        vm.deleteTimer = deleteTimer;
        vm.Profiles = [];
        vm.submitting = true;
        vm.updateCancelLimit = updateCancelLimit;
        vm.TraditionalGames = [0, 1, 2, 3, 4, 5];

        function updateCancelLimit(data, gameType) {
            if (parseInt(data) > 315) {
                return 'Thời gian hủy cược không được quá 5 phút 15 giây'
            }
            network.PUTdata('api/parameter/cancellimit/' + gameType, {
                CancelLimit: data
            }).then(function(response) {
                if (!response) {
                    return 'Some thing wrong'
                }
            });
        }
        $timeout(function() {
            vm.loadProfiles();
        }, 1000);

        function loadProfiles() {
            Lotus.Lottery.PriceAutoProfile.list().then(function(response) {
                vm.submitting = false;
                vm.Profiles = response;
                $timeout(function() {
                    $scope.$digest();
                }, 10);
            })
        }

        function switchProfile(item, $event) {
            $mdDialog.show({
                controller: switchProfileCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function switchProfileCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Đổi profile';
                $scope.textContent = 'Xác nhận chạy giá theo Profile ' + item.Name + '?';
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.Lottery.PriceAutoProfile.switch({
                        Id: item.Id
                    }).then(function(response) {
                        if (response) {
                            vm.Profiles.map(function(profile) {
                                profile.Status = item.Id === profile.Id ? 'running' : 'idle';
                            })
                            message.info('Cập nhật Profile thành công');
                            $mdDialog.cancel();
                        }
                    })
                }
            }
        }

        function deleteProfile(item, $event) {
            $mdDialog.show({
                controller: deleteProfileCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function deleteProfileCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Xóa profile';
                $scope.textContent = 'Xác nhận xóa Profile ' + item.Name + '?';
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.Lottery.PriceAutoProfile.delete({
                        Id: item.Id
                    }).then(function(response) {
                        message.info('Xóa Profile thành công');
                        vm.loadProfiles();
                        $mdDialog.cancel();
                    })
                }
            }
        }

        function addProfile(ev) {
            $mdDialog.show({
                controller: addProfileCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/dialog/profile.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true
            }).then(function(answer) {
                if (answer) {
                    vm.loadProfiles()
                }
            }, function() {});

            function addProfileCtrl($scope) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.profileName = ''
                $scope.newProfile = function() {
                    $scope.submitting = true;
                    Lotus.Lottery.PriceAutoProfile.create({
                        Name: $scope.profileName
                    }).then(function(response) {
                        if (response) {
                            $mdDialog.hide(true);
                            message.info('Tạo Profile mới thành công');
                        }
                    });
                }
            }
        }

        function detailsProfile(item) {
            vm.submitting = true;
            vm.detailsProfiles = [];
            Lotus.Lottery.PriceAutoProfile.getDetails({
                Id: item.Id
            }).then(function(response) {
                vm.detailsProfiles = response;
                vm.submitting = false;
                $timeout(function() {
                    $scope.$digest();
                }, 10);
            })
        }

        function available(bet) {
            let list = [0, 1, 7, 8, 9, 15, 21, 22, 23, 24, 25, 29, 30];
            return msUtils.exists(bet, list)
        }

        function viewByPoint(item, ev) {
            $mdDialog.show({
                controller: viewByPointCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/dialog/by-point.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item,
                    writePermission: vm.hasWritePermission
                }
            });

            function viewByPointCtrl($scope, $mdDialog, $timeout, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.param = data;
                $scope.pricePoints = angular.copy(data.Points);
            }
        }

        function viewByRisk(item, ev) {
            $mdDialog.show({
                controller: viewByRiskCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/dialog/by-risk.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item,
                    writePermission: vm.hasWritePermission
                }
            });

            function viewByRiskCtrl($scope, $mdDialog, $timeout, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.param = data;
                $scope.submitting = false;
                $scope.priceRisks = angular.copy(data.Risks);
            }
        }

        function viewPointAvg(item, ev) {
            $mdDialog.show({
                controller: viewPointAvgCtrl,
                templateUrl: 'app/main/traditional/settings/parameter/dialog/by-point-avg.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item,
                    writePermission: vm.hasWritePermission
                }
            });

            function viewPointAvgCtrl($scope, $mdDialog, $timeout, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.param = data;
                $scope.submitting = false;
                $scope.pointAvg = angular.copy(data.PointAvg);
            }
        }

        function deleteTimer(item, $event) {
            $mdDialog.show({
                controller: deleteTimerCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function deleteTimerCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Xóa hẹn giờ';
                $scope.textContent = 'Xác nhận xóa lịch chạy tự động của Profile ' + item.Name + '?';
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.Lottery.PriceAutoProfile.setTimer({
                        Id: item.Id,
                        Time: null
                    }).then(function(response) {
                        if (response) {
                            vm.Profiles.map(function(profile) {
                                if (item.Id === profile.Id) {
                                    profile.TimeApplication = undefined;
                                }
                            })
                            message.info('Cập nhật Profile thành công');
                            $mdDialog.cancel();
                        }
                    }).catch(function(error) {
                        message.alert(error.message)
                    })
                }
            }
        }

        function loadCurrentTime(item) {
            vm.notValid = false;
            vm.updateInProcess = false;
            vm.TimeApplication = item.TimeApplication;
        }

        function updateTime(item) {
            if (!moment.utc(vm.TimeApplication, 'HH:mm:ss').isValid()) {
                vm.notValid = true;
                return
            }
            let send = {
                Id: item.Id,
                Time: vm.TimeApplication
            };
            vm.updateInProcess = true;
            Lotus.Lottery.PriceAutoProfile.setTimer(send).then(function(response) {
                if (response) {
                    vm.updateInProcess = false;
                    vm.Profiles.map(function(profile) {
                        if (item.Id === profile.Id) {
                            profile.TimeApplication = vm.TimeApplication;
                        }
                    })
                    $timeout(function() {
                        message.info('Thay đổi lịch chạy thành công');
                    }, 500)
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.settings').controller('livePriceCtrl', livePriceCtrl);

    function livePriceCtrl($scope, $state, $timeout, network, msUtils, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.checkBlue = checkBlue;
        vm.priceCalculation = priceCalculation;
        vm.resetPrice = resetPrice;
        vm.updatePrice = updatePrice;
        vm.resetPrice();

        function checkBlue(index) {
            return msUtils.exists(index, [4, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26])
        }

        function priceCalculation() {
            network.Games.Lottery.Live.calculateBasePrice({
                MinProfit: vm.prices.MinProfit,
                MaxProfit: vm.prices.MaxProfit,
                GameType: 0,
                BetType: 20
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.PrizeNr - b.PrizeNr
                });
                vm.prices.Values = response;
                vm.reCal = true;
                $timeout(function() {
                    $scope.$digest();
                })
            })
        }

        function resetPrice() {
            vm.submitting = true;
            network.Games.Lottery.Live.getBasePrices({
                GameType: 0,
                BetType: 20
            }).then(function(response) {
                response.Values.sort(function(a, b) {
                    return b.PrizeNr - a.PrizeNr
                });
                vm.prices = response;
                vm.reCal = false;
                $timeout(function() {
                    vm.submitting = false;
                    $scope.$digest();
                })
            })
        }

        function updatePrice() {
            network.Games.Lottery.Live.updateBasePrice({
                MinProfit: vm.prices.MinProfit,
                MaxProfit: vm.prices.MaxProfit,
                GameType: 0,
                BetType: 20
            }).then(function(response) {
                if (response) {
                    message.info('Cập nhật giá thành công');
                    vm.reCal = false;
                }
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('duplicateIpCtrl', duplicateIpCtrl).filter('joinMember', function() {
        return function(input) {
            let members = []
            input.map(function(item) {
                members.push(item.Username)
            })
            members = members.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            return members.join(', ');
        }
    });

    function duplicateIpCtrl($timeout, $mdDialog, $scope) {
        let vm = this;
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let y = z; y < 30; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        vm.submitting = false;
        vm.minMember = 2;
        vm.findingNemo = findingNemo;
        vm.getPlayersByIP = getPlayersByIP;
        vm.viewIp = viewIp;

        function findingNemo(page) {
            vm.minMember = isNaN(vm.minMember) === true || vm.minMember === null || vm.minMember > 100 ? 2 : vm.minMember;
            vm.submitting = true;
            let parameter = {
                Term: vm.Term,
                MinPlayers: vm.minMember,
                Size: 25,
            }
            if (vm.ipAddress !== undefined && vm.ipAddress.length > 6) {
                parameter.IP = vm.ipAddress
            }
            if (page === undefined) {
                vm.duplicateIps = []
            }
            parameter.Page = page === undefined ? 1 : page;
            vm.currentPage = parameter.Page;
            Lotus.Lottery.RiskManagement.getPlayersDuplicateIp(parameter).then(function(response) {
                vm.hasMoreRecord = response.length === parameter.Size
                vm.duplicateIps = vm.duplicateIps.concat(response);
                $timeout(function() {
                    vm.submitting = false;
                }, 200)
            })
        }

        function getPlayersByIP(item, ev) {
            if (item.point === 0) {
                ev.stopPropagation()
                return;
            }
            $mdDialog.show({
                controller: getPlayersByIPCtrl,
                templateUrl: 'app/main/traditional/risk-management/duplicate-ip/dialog/member-by-ip.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    item: item
                }
            });

            function getPlayersByIPCtrl($scope, $mdDialog, $timeout, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.submitting = true;
                $scope.item = item;
                $scope.Term = vm.Term;
                Lotus.Lottery.RiskManagement.getPlayersByIP({
                    Term: vm.Term,
                    IP: item.IP
                }).then(function(response) {
                    $scope.membersByIp = response;
                    $scope.$digest();
                    $timeout(function() {
                        $scope.submitting = false;
                    }, 100)
                })
            }
            ev.stopPropagation()
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('lookupIpCtrl', lookupIpCtrl)

    function lookupIpCtrl($timeout, $mdDialog, $scope, message) {
        let vm = this;
        vm.findIP = findIP;
        vm.copyIP = copyIP;
        vm.lookupIp = lookupIp;
        vm.ipAddress = []
        vm.ipAddressModel = vm.ipAddress.join("\r\n")
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let y = z; y < 30; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }

        function findIP() {
            vm.submitting = true;
            Lotus.Lottery.RiskManagement.getIPListByUsername({
                Term: vm.Term,
                Username: vm.Username
            }).then(function(response) {
                vm.IpList = response.IP
                vm.submitting = false;
                $scope.$digest();
            })
        }

        function copyIP(ip) {
            if (vm.ipAddress.length === 10) {
                message.info('Tối đa 10 IP')
                return
            }
            if (vm.ipAddressModel.length === 0) {
                vm.ipAddressModel = ip;
            } else {
                vm.ipAddressModel = vm.ipAddressModel.concat("\r\n" + ip);
            }
            vm.ipAddress = vm.ipAddressModel.replace(/\r/g, '').split("\n")
            vm.ipAddress = vm.ipAddress.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            $timeout(function() {
                vm.ipAddressModel = vm.ipAddress.join("\r\n")
            }, 100)
        }

        function lookupIp() {
            vm.submitting = true;
            vm.ipAddress = vm.ipAddressModel.replace(/\r/g, '').split("\n");
            if (vm.ipAddress.length > 10) {
                message.info('Tối đa 10 IP')
                return
            }
            Lotus.IpLookup.companyLookup(vm.ipAddress).then(function(response) {
                console.log(response)
                vm.IpLists = response;
                vm.submitting = false;
                $scope.$digest();
            })
        }

        function syntaxHighlight(json) {
            json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
            return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function(match) {
                var cls = 'number';
                if (/^"/.test(match)) {
                    if (/:$/.test(match)) {
                        cls = 'key';
                    } else {
                        cls = 'string';
                    }
                } else if (/true|false/.test(match)) {
                    cls = 'boolean';
                } else if (/null/.test(match)) {
                    cls = 'null';
                }
                return '<span class="' + cls + '">' + match + '</span>';
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.risk_management').controller('riskManagementAgencyCtrl', riskManagementAgencyCtrl);

    function riskManagementAgencyCtrl($rootScope, $scope, $timeout, $interval, $state, $mdDialog, $mdToast, $filter, $mdMedia, $mdSidenav, $mdBottomSheet, network, orderByFilter, msUtils, message, AuthService, $q) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.isCompany = AuthService.isCompany();
        vm.hasPermission = AuthService.hasPermission(16);
        vm.hasWritePermission = AuthService.hasPermission(8);
        if (!AuthService.hasPermission(16)) {
            $state.go('app.forbidden');
            return;
        }
        vm.aNumberShares = [];
        vm.numbers = [];
        vm.terms = [];
        vm.betTypes = [];
        vm.termHistory = [];
        vm.viewPoints = [{
            id: 0,
            name: 'Toàn bộ'
        }, {
            id: 1,
            name: 'Còn lại'
        }];
        vm.sortDefs = [{
            id: 'num',
            name: 'Thứ tự'
        }, {
            id: 'risk',
            name: 'Nguy cơ'
        }];
        vm.denominators = [1, 1000, 1000000];
        vm.changeTerm = changeTerm;
        vm.fetchCurrentTerm = fetchCurrentTerm;
        vm.fetchHistoryTerm = fetchHistoryTerm;
        vm.changeGame = changeGame;
        vm.fetchParam = fetchParam;
        vm.fetchNumbers = fetchNumbers;
        vm.changeBet = changeBet;
        vm.setupStep = setupStep;
        vm.createNumber2D = createNumber2D;
        vm.createNumber3D = createNumber3D;
        vm.createNumber4D = createNumber4D;
        vm.createPopover = createPopover;
        vm.sortNumber = sortNumber;
        vm.NumberAgents = NumberAgents;
        vm.companyBoard = companyBoard;
        vm.refreshEvent = refreshEvent;
        vm.immediatePrice = immediatePrice;
        vm.toggleSidenav = toggleSidenav;
        vm.navChangeGame = navChangeGame;
        vm.navChangeSortDefs = navChangeSortDefs;
        vm.activeNumber = activeNumber;
        vm.searchTextChange = searchTextChange;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.removeMember = removeMember;
        vm.rendered = rendered;
        vm.getAncestors = getAncestors;
        vm.changeGroup = changeGroup;
        vm.onSuccess = onSuccess;
        vm.onError = onError;
        vm.getNewTerm = getNewTerm;
        vm.getPreviousTerm = getPreviousTerm;
        vm.previousTerm = [];

        function onError(e) {}

        function onSuccess(e) {
            vm.numbers.map(function(item) {
                item.copied = item.RiskAmount < 0
            })
            $timeout(function() {
                vm.numbers.map(function(item) {
                    item.copied = false
                })
            }, 2000)
        }
        vm.usersGroups = [{
            id: 2,
            name: 'Quản trị'
        }, {
            id: 3,
            name: 'Cổ đông'
        }, {
            id: 4,
            name: 'Tổng đại lý'
        }, {
            id: 5,
            name: 'Đại lý'
        }];
        vm.level = 2;
        vm.searchText = '';
        let lastSetting = JSON.parse(localStorage.getItem('riskAgency'));
        if (lastSetting !== null) {
            vm.membersList = lastSetting;
        } else {
            vm.membersList = [];
        }

        function changeGroup() {}

        function searchTextChange(item) {
            vm.username = '';
        }

        function querySearch() {
            let result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: vm.level
            }).then(function(response) {
                return response
            });
            let deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.previousTerm = [];
            $timeout(function() {
                vm.searchText = '';
            }, 300)
            if (item !== undefined) {
                if (item.Level !== parseInt(vm.level)) {
                    message.show('Cấp tài khoản không hợp lệ. Vui lòng Refresh trình duyệt để xóa cache khi tìm kiếm.')
                    return;
                }
                if (vm.membersList.filter(function(member) {
                        return member.Id === item.Id
                    }).length) {
                    message.message('Tài khoản đã tồn tại')
                    return;
                }
                vm.membersList.push(item);
                localStorage.setItem('riskAgency', JSON.stringify(vm.membersList))
            }
        }

        function removeMember(item) {
            vm.previousTerm = [];
            vm.membersList = vm.membersList.filter(function(obj) {
                return obj.Id !== item.Id;
            });
            localStorage.setItem('riskAgency', JSON.stringify(vm.membersList))
        }

        function getPreviousTerm(item) {
            vm.priceBoard.Term = item.Term;
            $timeout(function() {
                vm.rendered();
            }, 200)
        }

        function getNewTerm() {
            let newTerm = moment(vm.previousTerm[vm.previousTerm.length - 1].Term).subtract(1, 'day').format("YYYY-MM-DD")
            vm.priceBoard.Term = newTerm;
            $timeout(function() {
                vm.previousTerm.push({
                    Term: newTerm,
                    Income: 0
                })
                vm.rendered();
            }, 200)
        }

        function rendered() {
            if (vm.membersList.length === 0) {
                message.show('Không có tài khoản khách hàng.');
                return;
            }
            vm.fetchNumbers();
        }
        vm.priceView = {
            term: null
        };
        vm.priceBoard = {};
        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
        let z = moment().hour() < 19 ? 0 : -1;
        let max = vm.isCompany ? 60 : 20;
        for (let y = z; y < max; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }

        function refreshEvent(event) {
            vm.maxTimer = event;
            $interval.cancel(vm.refreshNumber);
            if (event === 0) {
                $timeout(function() {
                    $interval.cancel(vm.refreshNumber);
                    vm.timer = 'OFF'
                }, 200)
            } else {
                vm.timer = event;
            }
            vm.refreshNumber = $interval(function() {
                vm.timer--;
                if (vm.timer < 0) {
                    vm.timer = event;
                    vm.fetchNumbers();
                }
            }, 1000)
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.refreshNumber);
        });

        function immediatePrice() {
            vm.fetchNumbers();
            vm.refreshEvent(vm.maxTimer);
        }

        function changeTerm() {
            if ((vm.priceBoard.Term.replace(/-/g, '') > moment().format('YYYYMMDD') && moment().format('HH') > 12) || (vm.priceBoard.Term === moment().format('YYYY-MM-DD'))) {
                vm.fetchCurrentTerm(true);
                vm.priceView.currentTerm = true;
                vm.refreshEvent(60);
            } else {
                vm.fetchHistoryTerm(vm.priceBoard.Term);
                vm.priceView.currentTerm = false;
                vm.refreshEvent(0);
            }
        }

        function fetchCurrentTerm(cond) {
            network.Games.Lottery.Term.getTermsByDate({
                date: null
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                vm.priceBoard.Term = response[0].Term;
                $scope.$digest();
                if (cond) {
                    $timeout(function() {
                        vm.changeGame();
                    })
                }
            })
        }

        function fetchHistoryTerm(termName) {
            network.Games.Lottery.Term.getTermsByDate({
                date: termName
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                vm.priceBoard.Term = response[0].Term;
                $scope.$digest();
                $timeout(function() {
                    vm.changeGame();
                }, 200)
            }).catch(function(error) {
                if (error.code === 'DataNotFoundException') {
                    message.alert('Thông tin kỳ không tồn tại.')
                }
            })
        }

        function changeGame() {
            if (vm.running) {
                return
            }
            vm.running = true;
            vm.priceBoard.GameType = parseInt(vm.selected.GameType);
            vm.fetchParam();
            vm.priceBoard.TermStatus = vm.aTerms.filter(function(term) {
                return term.GameType === vm.priceBoard.GameType
            })[0].Status;
            if (vm.priceBoard.TermStatus !== 1) {
                vm.refreshEvent(0);
            }
            if (vm.priceBoard.GameType === 0) {
                vm.priceBoard.deadLine = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 1
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 0
                })[0].AutoCloseAt;
            } else if (msUtils.exists(vm.priceBoard.GameType, [1, 2, 3, 4])) {
                vm.priceBoard.deadLine = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 7
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 8
                })[0].AutoCloseAt;
            } else {
                vm.priceBoard.deadLine = vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 2
                })[0].AutoCloseAt;
            }
        }

        function fetchParam() {
            vm.betTypes = $.grep(vm.aTerms, function(e) {
                return e.GameType === vm.priceBoard.GameType;
            })[0].Games;
            vm.betTypes.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            vm.priceBoard.BetType = vm.betTypes[1].BetType;
            vm.fetchNumbers();
        }

        function changeBet(bet) {
            vm.priceBoard.BetType = bet.BetType;
            vm.previousTerm = [];
            vm.fetchNumbers();
        }

        function fetchNumbers() {
            vm.loadDisabled = false;
            if (vm.membersList.length === 0) {
                vm.loadDisabled = true;
                return
            }
            vm.setupStep();
            let param = {
                Term: vm.priceBoard.Term,
                GameType: vm.priceBoard.GameType,
                BetType: vm.priceBoard.BetType,
                UserIdList: [],
            };
            vm.membersList.map(function(member) {
                param.UserIdList.push(member.Id)
            })
            if (param.UserIdList.length === 0) {
                delete param.UserIdList
            }
            Lotus.Lottery.PriceTable.buildCustomAgentOdds(param).then(function(response) {
                let check = vm.previousTerm.filter(function(e) {
                    return e.Term === param.Term
                })
                if (check.length === 0) {
                    vm.previousTerm.push({
                        Term: param.Term,
                        Income: response.CompanyTotalIncome
                    })
                }
                if (check.length === 1 && check[0].Income === 0) {
                    check[0].Income = response.CompanyTotalIncome
                }
                vm.previousTerm.sort(function(a, b) {
                    return a.Term - b.Term
                })
                vm.odds = response;
                vm.TotalAmount = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                    return previous + vm.odds.Numbers[key].Amount
                }, 0);
                vm.TotalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                    return previous + vm.odds.Numbers[key].Point
                }, 0);
                $timeout(function() {
                    vm.running = false;
                }, 200);
                $timeout(function() {
                    vm.allSet = true;
                }, 800);
                if (msUtils.exists(vm.priceBoard.BetType, [10, 11, 12, 17, 18])) {
                    vm.createNumber3D(vm.filterVal);
                } else if (msUtils.exists(vm.priceBoard.BetType, [13, 14, 19])) {
                    vm.createPopover();
                    vm.createNumber4D(vm.cond4d);
                } else {
                    vm.createNumber2D();
                }
            }).catch(function(error) {
                vm.loadDisabled = true;
                vm.allSet = false;
                message.info(error.message)
            })
        }

        function setupStep() {
            vm.show3D = [10, 11, 12, 17, 18].indexOf(vm.priceBoard.BetType) !== -1;
            vm.show4D = [13, 14, 19].indexOf(vm.priceBoard.BetType) !== -1;
        }

        function createNumber2D() {
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 2) {
                vm.numbers = [];
                for (let i = 0; i < 100; i++) {
                    i = i < 10 ? '0' + i : i;
                    vm.numbers.push({
                        num: i.toString()
                    })
                }
            }
            vm.riskNumbers = 0;
            vm.riskNumbersString = [];
            angular.forEach(vm.numbers, function(item, i) {
                let findNrr = $.grep(vm.odds.Numbers, function(e) {
                    return e.Number === item.num
                });
                if (findNrr.length) {
                    item.Price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.Amount = findNrr[0].Amount === undefined ? 0 : findNrr[0].Amount;
                    item.Point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.CompanyPoint = findNrr[0].CompanyPoint === undefined ? 0 : findNrr[0].CompanyPoint;
                    item.RiskAmount = findNrr[0].RiskAmount === undefined ? 0 : findNrr[0].RiskAmount;
                    item.CompanyRiskAmount = findNrr[0].CompanyRiskAmount;
                } else {
                    item.Price = vm.odds.Price;
                    item.Amount = 0;
                    item.Point = 0;
                    item.CompanyPoint = 0;
                    item.RiskAmount = vm.TotalAmount
                    item.CompanyRiskAmount = vm.odds.CompanyTotalIncome;
                }
                vm.riskNumbers += item.RiskAmount < 0 ? 1 : 0;
                if (item.RiskAmount < 0) {
                    vm.riskNumbersString.push(item.num)
                }
            });
            vm.priceBoard.CompanyPoint = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].CompanyPoint
            }, 0);
            vm.priceBoard.Point = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].Point
            }, 0);
            vm.priceBoard.averagePrice = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].Price
            }, 0) / 100;
            vm.sortNumber();
        }

        function createNumber3D(cond) {
            vm.filterVal = cond !== undefined ? cond : undefined;
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 3) {}
            vm.numbers = [];
            let numberArr = [];
            if (vm.filterVal === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (let i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (let i = 0; i < 1000; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    i = i.toString()
                    let integer = Math.floor(vm.filterVal / 10);
                    if (integer === 2) {
                        if (Math.floor(i / 100) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else if (integer === 1) {
                        if (Math.floor((i % 100) / 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else {
                        if (Math.floor(i % 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    }
                }
            }
            vm.riskNumbers = 0;
            vm.riskNumbersString = [];
            angular.forEach(numberArr, function(val) {
                let item = {};
                item.num = val;
                let findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.Price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.Amount = findNrr[0].Amount === undefined ? 0 : findNrr[0].Amount;
                    item.Point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.CompanyPoint = findNrr[0].CompanyPoint === undefined ? 0 : findNrr[0].CompanyPoint;
                    item.RiskAmount = findNrr[0].RiskAmount === undefined ? 0 : findNrr[0].RiskAmount;
                    item.CompanyRiskAmount = findNrr[0].CompanyRiskAmount;
                } else {
                    item.Price = vm.odds.Price;
                    item.Amount = 0;
                    item.Point = 0;
                    item.CompanyPoint = 0;
                    item.RiskAmount = vm.TotalAmount
                    item.CompanyRiskAmount = vm.odds.CompanyTotalIncome;
                }
                vm.riskNumbers += item.RiskAmount < 0 ? 1 : 0;
                if (item.RiskAmount < 0) {
                    vm.riskNumbersString.push(item.num)
                }
                vm.numbers.push(item)
            });
            vm.priceBoard.CompanyPoint = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].CompanyPoint
            }, 0);
            vm.priceBoard.Point = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].Point
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + (vm.numbers[key].ExtraPrice === undefined ? 0 : vm.numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 1000) / 1000;
            vm.sortNumber();
        }

        function createNumber4D(cond) {
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 10000) / 10000;
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.numbers = [];
            let numberArr = [];
            if (cond === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (let i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (let i = 0; i < 10000; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    i = i.toString();
                    if (i.match(cond.id)) {
                        numberArr.push(i)
                    }
                }
            }
            vm.riskNumbers = 0;
            vm.riskNumbersString = [];
            angular.forEach(numberArr, function(val) {
                let item = {};
                item.num = val;
                let findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.Price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.Amount = findNrr[0].Amount === undefined ? 0 : findNrr[0].Amount;
                    item.Point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.CompanyPoint = findNrr[0].CompanyPoint === undefined ? 0 : findNrr[0].CompanyPoint;
                    item.RiskAmount = findNrr[0].RiskAmount === undefined ? 0 : findNrr[0].RiskAmount;
                    item.CompanyRiskAmount = findNrr[0].CompanyRiskAmount;
                } else {
                    item.Price = vm.odds.Price;
                    item.Amount = 0;
                    item.Point = 0;
                    item.CompanyPoint = 0;
                    item.RiskAmount = vm.TotalAmount
                    item.CompanyRiskAmount = vm.odds.CompanyTotalIncome;
                }
                vm.riskNumbers += item.RiskAmount < 0 ? 1 : 0;
                if (item.RiskAmount < 0) {
                    vm.riskNumbersString.push(item.num)
                }
                vm.numbers.push(item)
            });
            vm.sortNumber();
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];
            for (let i = 0; i < 100; i++) {
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                let j = i.split('');
                vm.popooxx.push({
                    id: '^' + i + '([0-9]+)$',
                    name: i + 'XX'
                });
                vm.popoxxo.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '$',
                    name: i.split('').join('XX')
                });
                vm.popoxox.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$',
                    name: i.split('').join('X') + 'X'
                });
                vm.popxoxo.push({
                    id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] + '$',
                    name: 'X' + i.split('').join('X')
                });
                vm.popxoox.push({
                    id: '^([0-9]+)' + i + '([0-9]+)$',
                    name: 'X' + i + 'X'
                });
                vm.popxxoo.push({
                    id: '^([0-9]+)' + i + '$',
                    name: 'XX' + i
                })
            }
        }

        function sortNumber() {
            vm.viewPoint = vm.viewPoint === undefined ? '1' : vm.viewPoint;
            vm.desc = false;
            if (vm.selected.sort === 'risk') {
                if (vm.viewPoint === '1') {
                    vm.propertyName = 'CompanyRiskAmount'
                } else {
                    vm.propertyName = 'RiskAmount'
                }
                if (vm.priceBoard.BetType === 20) {
                    vm.propertyName = 'Point';
                    vm.desc = true;
                }
            } else if (vm.selected.sort === 'num') {
                vm.propertyName = 'num'
            } else {
                vm.propertyName = 'MaxPercent'
            }
            vm.numbers = orderByFilter(vm.numbers, vm.propertyName, vm.desc);
            if (typeof(vm.numbers) === 'object') {
                vm.numbers = vm.numbers.slice(0, 100)
            }
        }

        function toggleSidenav(sidenavId) {
            $mdSidenav(sidenavId).toggle();
        }

        function navChangeGame(game) {
            vm.selected.GameType = game;
            $timeout(function() {
                vm.changeGame();
            })
        }

        function navChangeSortDefs(id) {
            vm.selected.sort = id;
            $timeout(function() {
                vm.sortNumber()
            })
        }

        function activeNumber(number) {
            if (!vm.isCompany) {
                return
            }
            number.active = !number.active;
        }

        function getAncestors(item) {
            vm.parents = [];
            network.User.getAncestors({
                userId: item.Id
            }).then(function(response) {
                vm.parents = response;
                vm.parents.push({
                    Username: $rootScope.User.Username,
                    FullName: $rootScope.User.FullName,
                    Level: $rootScope.User.Level
                });
                vm.parents.push({
                    Username: item.Username,
                    FullName: item.FullName,
                    Level: item.Level
                });
                vm.parents.sort(function(a, b) {
                    return a.Level - b.Level
                });
                $scope.$digest();
            })
        }

        function NumberAgents(ev, item) {
            if (item.Point === 0) {
                ev.stopPropagation()
                return;
            }
            $mdDialog.show({
                controller: NumberAgentsCtrl,
                templateUrl: 'app/main/traditional/risk-management/agency/view.betting.dialog.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    item: item
                }
            });

            function NumberAgentsCtrl($scope, $mdDialog, $timeout, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.config = {
                    isInfinity: false,
                    MaxPoint: 0,
                    NumberLoaded: 0,
                    Paused: false
                }
                $scope.dtOptions = {
                    autoWidth: true,
                    responsive: true,
                    searching: false,
                    paging: false,
                    bInfo: false,
                    bPaginate: false,
                    columnDefs: [{
                        targets: 0,
                        orderable: false
                    }, {
                        targets: 4,
                        orderable: false
                    }]
                };
                $scope.item = item
                $scope.bettingContents = [];
                $scope.loadBetList = function(LastId) {
                    $scope.submitting = true;
                    let param = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        Number: item.num,
                        UserIdList: [],
                        Limit: 50,
                    }
                    vm.membersList.map(function(member) {
                        param.UserIdList.push(member.Id)
                    })
                    if (LastId !== undefined) {
                        param.LastId = LastId
                    }
                    Lotus.Lottery.Report.Outstanding.getTicketItemsByNumberAgents(param).then(function(response) {
                        $scope.loadMore = response.length === param.Limit;
                        $scope.lastID = response[response.length - 1].Id;
                        $scope.bettingContents = $scope.bettingContents.concat(response);
                        $scope.submitting = false;
                        $timeout(function() {
                            $scope.$digest();
                        }, 200)
                    })
                }
                $scope.loadBetList();
                $scope.viewOutStanding = function(member) {
                    $mdDialog.show({
                        controller: viewOutStandingCtrl,
                        templateUrl: 'app/main/traditional/price_table/dialog/view.outstanding.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        fullscreen: true,
                        multiple: true,
                        locals: {
                            member: member
                        }
                    });

                    function viewOutStandingCtrl($scope, $mdDialog, $timeout, member) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.OutDtOptions = {
                            autoWidth: true,
                            responsive: true,
                            searching: false,
                            paging: false,
                            retrieve: true,
                            bInfo: false,
                            bPaginate: false,
                            columnDefs: [{
                                targets: 2,
                                orderable: false
                            }, {
                                targets: 4,
                                orderable: false
                            }]
                        };
                        $scope.member = member;
                        $scope.priceBoard = vm.priceBoard;
                        $scope.outStandingMembers = [];
                        $scope.data = {
                            UserId: member.UserId,
                            GameType: vm.priceBoard.GameType,
                            BetType: vm.priceBoard.BetType,
                            Limit: 100
                        };
                        $scope.loadMemberReport = function(ltId) {
                            $scope.data.LastId = ltId === undefined ? '' : ltId;
                            $scope.submitting = true;
                            network.Reporting.Traditional.Outstanding.getTicketItems($scope.data).then(function(response) {
                                $scope.hasRecord = response.length === $scope.data.Limit;
                                $scope.outStandingMembers = $scope.outStandingMembers.concat(response);
                                $scope.submitting = false;
                                $scope.$digest();
                            })
                        }
                        $scope.loadMemberReport();
                        $scope.viewIp = function(ip) {
                            $mdDialog.show({
                                controller: viewIpCtrl,
                                templateUrl: 'app/main/dashboard/dialog/ip.html',
                                targetEvent: ev,
                                clickOutsideToClose: true,
                                multiple: true,
                                fullscreen: true,
                                locals: {
                                    ip: ip
                                }
                            });

                            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                                $scope.cancel = function() {
                                    $mdDialog.cancel();
                                };
                                Lotus.IpLookup.lookup(ip).then(function(response) {
                                    $scope.ipLookup = response;
                                    $scope.$digest();
                                });
                            }
                        }
                    }
                    ev.stopPropagation()
                }
                $scope.viewIp = function(ip) {
                    $mdDialog.show({
                        controller: viewIpCtrl,
                        templateUrl: 'app/main/dashboard/dialog/ip.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            ip: ip
                        }
                    });

                    function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        Lotus.IpLookup.lookup(ip).then(function(response) {
                            $scope.ipLookup = response;
                            $scope.$digest();
                        });
                    }
                }
            }
            ev.stopPropagation()
        }

        function companyBoard($event) {
            $mdDialog.show({
                controller: companyBoardCtrl,
                templateUrl: 'app/main/traditional/risk-management/agency/big.board.dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {}
            });

            function companyBoardCtrl($scope, $mdDialog, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.onTabSelected = function(tab) {
                    $scope.GameType = tab;
                    $scope.count = 0;
                    if (tab === 0) {
                        $scope.monitorBets = [0, 1, 2, 3, 4, 20, 22, 21]
                    } else {
                        $scope.monitorBets = [2, 3, 4, 7, 8, 9, 10, 11, 12]
                    }
                }
                $scope.initSetting = function() {
                    $scope.alarmSetting = {
                        point: {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            20: 0,
                            21: 0,
                            22: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0
                        },
                        risk: {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            20: 0,
                            21: 0,
                            22: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0
                        },
                    }
                }
                let lastSetting = JSON.parse(localStorage.getItem('setting-alarm'));
                if (typeof lastSetting === 'object' && lastSetting !== null) {
                    $scope.alarmSetting = lastSetting
                } else {
                    $scope.initSetting();
                }
                $scope.updateSetting = function() {
                    localStorage.setItem('setting-alarm', JSON.stringify($scope.alarmSetting))
                }
                $scope.interval = 30;
                $scope.countdown = function() {
                    let interval = $timeout(function() {
                        $scope.interval = $scope.interval < 10 ? 10 : $scope.interval;
                        if ($scope.count === 0) {
                            $scope.getOdds();
                        }
                        $scope.count++;
                        if ($scope.count > $scope.interval) {
                            $scope.count = 0
                        }
                        $scope.countdown();
                    }, 1000);
                    $scope.$on('$destroy', function() {
                        $timeout.cancel(interval);
                    });
                };
                $scope.countdown();
                $scope.colors = ['#ff0400', '#0075c6', '#ffff00', '#00ae52', '#ff9900', '#990099', '#808080', '#99ccff', '#d47d7d', '#b3d303', '#a6d6ed', '#c77ff4', '#adf481', '#c7f0fc', '#fcc4ba', '#8cf7c3', '#ffc6d4', '#bc6ef4', '#f99fe7', '#a98bed', '#f98886', '#79f7d1', '#d38dfc', '#abd1fc', '#d7c2f9', '#ed817b', '#edfc7b'];

                function getOdd(BetType) {
                    let param = {
                        Term: vm.priceBoard.Term,
                        GameType: $scope.GameType,
                        BetType: BetType,
                        UserIdList: [],
                    };
                    vm.membersList.map(function(member) {
                        param.UserIdList.push(member.Id)
                    })
                    return Lotus.Lottery.PriceTable.buildCustomAgentOdds(param).then(function(response) {
                        response.BetType = param.BetType
                        response.Numbers.sort(function(a, b) {
                            return a.RiskAmount - b.RiskAmount
                        });
                        angular.forEach(response.Numbers, function(Number) {
                            Number.Price = Number.ExtraPrice !== undefined ? response.Price + Number.ExtraPrice : response.Price;
                        });
                        return response
                    }).catch(function() {
                        return {
                            BetType: param.BetType
                        }
                    })
                }
                $scope.highlightNumber = function() {
                    $scope.oddData = $scope.oddData.filter(function(obj) {
                        return obj.Numbers !== undefined;
                    });
                    console.log($scope.oddData)
                    $scope.oddData.map(function(odd) {
                        odd.TotalPoint = 0;
                        if (odd.Numbers !== undefined) {
                            odd.Numbers.map(function(number) {
                                odd.TotalPoint += number.Point !== undefined ? number.Point : 0;
                            })
                        }
                    })
                    let numberArr = [],
                        result = [];
                    angular.forEach($scope.oddData, function(odd) {
                        if (odd.BetType === 20) {
                            if (odd.Numbers !== undefined)
                                odd.Numbers = odd.Numbers.sort(function(a, b) {
                                    return b.Point - a.Point
                                })
                        }
                        if (odd.BetType !== 21) {
                            if (odd.Numbers !== undefined)
                                angular.forEach(odd.Numbers, function(number, index) {
                                    if (index < 10) {
                                        numberArr.push(number.Number)
                                    }
                                })
                        }
                    });
                    for (let i = 0; i < 100; i++) {
                        i = i < 10 ? '0' + i : i;
                        if ($.grep(numberArr, function(n) {
                                return n === i.toString()
                            }).length > 2) {
                            result.push(i.toString())
                        }
                    }
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            let indexColor = result.indexOf(number.Number);
                            if (indexColor > -1 && odd.BetType !== 21) {
                                number.classIndex = indexColor
                            }
                        })
                    })
                    $scope.alarmDanger();
                };
                $scope.getOdds = function() {
                    if ($scope.GameType === 0) {
                        Promise.all([getOdd(0), getOdd(1), getOdd(2), getOdd(3), getOdd(4), getOdd(20), getOdd(22), getOdd(21)]).then(function(values) {
                            $scope.oddData = values;
                            $scope.highlightNumber();
                        })
                    } else {
                        Promise.all([getOdd(2), getOdd(3), getOdd(4), getOdd(7), getOdd(8), getOdd(9), getOdd(10), getOdd(11), getOdd(12)]).then(function(values) {
                            $scope.oddData = values;
                            $scope.highlightNumber();
                        })
                    }
                };
                $scope.hoverOut = function() {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            number.hover = false;
                        })
                    })
                };
                $scope.hoverIn = function(num) {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            if (number.Number === num && number.classIndex !== undefined) {
                                number.hover = true;
                            }
                        })
                    })
                };
                $scope.alarmDanger = function() {
                    let danger = false;
                    let checkNumbers;
                    for (let key in $scope.alarmSetting) {
                        if ($scope.alarmSetting.hasOwnProperty(key)) {
                            for (let cp in $scope.alarmSetting[key]) {
                                if ($scope.alarmSetting[key].hasOwnProperty(cp)) {
                                    let checkValue = $scope.alarmSetting[key][cp];
                                    if ($scope.oddData.filter(function(k) {
                                            return k.BetType === parseInt(cp)
                                        }).length) {
                                        checkNumbers = $scope.oddData.filter(function(k) {
                                            return k.BetType === parseInt(cp)
                                        })[0].Numbers
                                        if (checkNumbers !== undefined && checkNumbers.length) {
                                            checkNumbers.map(function(number) {
                                                if (key === 'point') {
                                                    if (checkValue !== 0 && number.CompanyPoint > checkValue) {
                                                        danger = true;
                                                        number.highlightByPoint = true;
                                                    } else {
                                                        number.highlightByPoint = false
                                                    }
                                                } else {
                                                    if (checkValue !== 0 && number.RiskAmount < checkValue * 1000) {
                                                        danger = true;
                                                        number.highlightByRisk = true;
                                                    } else {
                                                        number.highlightByRisk = false;
                                                    }
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (danger) {
                        $scope.playSound();
                    }
                }
                $scope.playSound = function() {
                    let audio = new Audio('/assets/alarm-danger.mp3');
                    audio.play();
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.live', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.traditional_live', {
            url: '/traditional/live',
            abstract: true,
        }).state('app.traditional_live.northern', {
            url: '/northern',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/live/northern/live.northern.html',
                    controller: 'liveNorthernCtrl as vm'
                }
            },
            resolve: {
                GameType: function() {
                    return 0
                }
            }
        }).state('app.traditional_live.southern', {
            url: '/southern',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/live/southern/live.southern.html',
                    controller: 'liveSouthernCtrl as vm'
                }
            },
            resolve: {
                GameType: function() {
                    return 1
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.live').controller('liveNorthernCtrl', liveNorthernCtrl);

    function liveNorthernCtrl($rootScope, $scope, $state, $interval, $timeout, $stateParams, network, $mdDialog, message, AuthService, msUtils, $location, $mdToast) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(256)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(128);
        vm.synchronized = false;
        vm.pingCount = 0;
        vm.loadCurrent = loadCurrent;
        vm.closedPrize = closedPrize;
        vm.reOpen = reOpen;
        vm.ping = ping;
        vm.openBet = openBet;
        vm.closeBet = closeBet;
        vm.makeOdds = makeOdds;
        vm.getCurrentResult = getCurrentResult;
        vm.updateResult = updateResult;
        vm.getPrizeResult = getPrizeResult;
        vm.sendResult = sendResult;
        vm.updateCurrentPrize = updateCurrentPrize;
        vm.closeLotto = closeLotto;
        vm.closeAll = closeAll;
        vm.currentLocation = $location.path() === '/traditional/live/northern';
        vm.submitting = false;
        vm.loadCurrent();
        network.Games.Lottery.Term.getTermsByDate({
            date: null
        }).then(function(response) {
            vm.aTerms = response;
        })

        function openBet(live) {
            if (!vm.hasWritePermission) {
                return
            }
            let GameTypes = [0];
            if (vm.synchronized) {
                GameTypes.push(1)
            }
            network.Games.Lottery.Live.open({
                Term: live.Term,
                GameTypes: GameTypes
            }).then(function(response) {
                if (response) {
                    $interval.cancel(vm.promise);
                    vm.loadCurrent();
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function closeBet(live, ev) {
            if (!vm.hasWritePermission) {
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận').textContent('Đóng cược toàn bộ?').ariaLabel('Close all').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                let GameTypes = [0];
                if (vm.synchronized) {
                    GameTypes.push(1)
                }
                network.Games.Lottery.Live.close({
                    Term: live.Term,
                    GameTypes: GameTypes
                }).then(function(response) {
                    if (response) {
                        $interval.cancel(vm.promise);
                        vm.loadCurrent();
                        message.info('Đóng cược thành công')
                    }
                });
            })
        }

        function closedPrize(live, prize) {
            if (!vm.hasWritePermission) {
                return
            }
            vm.submitting = true;
            let GameTypes = [live.GameType];
            if (vm.synchronized) {
                if (live.GameType === 0) {
                    GameTypes.push(1)
                } else {
                    GameTypes.push(0)
                }
            }
            network.Games.Lottery.Live.closePrize({
                Term: live.Term,
                GameTypes: GameTypes,
                PrizeNr: prize
            }).then(function(response) {
                if (response.Result) {
                    live.PrizeNr--;
                    $timeout(function() {
                        vm.submitting = false;
                        $scope.$digest()
                    });
                }
            }).catch(function(error) {
                vm.submitting = false;
                message.alert(error.message)
            })
        }

        function reOpen(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận mở lại Lô live').textContent('Vui lòng xác nhận đã đóng lại hết các giải đã mở thưởng trước khi mở lại cược!').ariaLabel('Re-Open').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                vm.ping(true)
            }, function() {});
        }

        function ping(ignore) {
            if (!vm.hasWritePermission || !vm.currentLocation) {
                return
            }
            let GameTypes = [];
            let arrError = [];
            angular.forEach(vm.liveCurrent, function(item) {
                if (item.Active) {
                    GameTypes.push(item.GameType)
                }
                if (item.error === 'TimeExceeded') {
                    arrError.push(item.id)
                }
            });
            if ((GameTypes.length === arrError.length) && !ignore) {
                $interval.cancel(vm.promise);
                return;
            }
            if (GameTypes.length === 0) {
                $interval.cancel(vm.promise);
                return;
            }
            network.Games.Lottery.Live.ping({
                Term: vm.liveCurrent[0].Term,
                GameTypes: GameTypes,
                IgnoreCheckTime: ignore
            }).then(function(response) {
                angular.forEach(response.Result, function(item) {
                    let match = vm.liveCurrent.filter(function(live) {
                        return live.GameType === item.GameType
                    });
                    match[0].error = item.Result;
                });
                vm.pingCount++;
                if (vm.pingCount === 10) {
                    vm.pingCount = 0;
                    $interval.cancel(vm.promise);
                    vm.loadCurrent();
                }
                if (ignore) {
                    vm.pingCount = 0;
                    vm.loadCurrent();
                }
            });
        }

        function loadCurrent() {
            network.Games.Lottery.Live.current({
                GameTypes: [0, 1]
            }).then(function(response) {
                vm.liveCurrent = response;
                vm.currentTerm = response.filter(function(t) {
                    return t.GameType === 0
                })[0].Term;
                $timeout(function() {
                    $scope.$digest();
                    vm.getCurrentResult();
                });
                vm.promise = $interval(function() {
                    vm.ping(false)
                }, 1000);
            })
        }

        function makeOdds(live) {
            if (!vm.hasWritePermission) {
                return
            }
            $rootScope.loadingProgress = true;
            network.Games.Lottery.Live.makeOdds({
                Term: live.Term,
                GameType: live.GameType
            }).then(function(response) {
                if (response) {
                    message.info('Chuyển giá thành công');
                    $interval.cancel(vm.promise);
                    $state.transitionTo($state.current, $stateParams, {
                        reload: true,
                        inherit: false,
                        notify: true
                    });
                }
                $rootScope.loadingProgress = false;
            }).catch(function(error) {
                $rootScope.loadingProgress = false;
                message.info(error.message);
            })
        }

        function getCurrentResult() {
            network.Games.Lottery.LotteryResult.getNorthernResultByTerm({
                Term: vm.currentTerm
            }).then(function(response) {
                vm.currentResult = response;
                $scope.$digest();
            }).catch(function(error) {
                vm.currentResult = {
                    "Jackpot": "",
                    "First": "",
                    "Second": ["", ""],
                    "Third": ["", "", "", "", "", ""],
                    "Fourth": ["", "", "", ""],
                    "Fiveth": ["", "", "", "", "", ""],
                    "Sixth": ["", "", ""],
                    "Seventh": ["", "", "", ""]
                };
            });
        }

        function updateResult($event, Prize, text) {
            let value = vm.getPrizeResult(Prize);
            let ran = msUtils.generatorNumber;
            if (value.length === 0 && ($location.host() === 'ag.nothing88.net' || $location.host() === 'localhost')) {
                if (msUtils.exists(Prize, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) {
                    value = ran(5);
                } else if (msUtils.exists(Prize, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) {
                    value = ran(4);
                } else if (msUtils.exists(Prize, [20, 21, 22])) {
                    value = ran(3);
                } else {
                    value = ran(2);
                }
                $mdToast.show($mdToast.simple().textContent('Kết quả được tạo ngẫu nhiên: ' + value).position("bottom right").hideDelay(3000));
            }
            let confirm = $mdDialog.prompt().title('Kết quả xổ số truyền thống').textContent('Xác nhận kết quả xổ số ' + text).placeholder('Kết quả').ariaLabel('result').initialValue(value).targetEvent($event).clickOutsideToClose(true).required(true).ok('Okay!').cancel('cancel');
            $mdDialog.show(confirm).then(function(result) {
                vm.sendResult(result, Prize, text)
            }, function() {});
        }

        function getPrizeResult(Prize) {
            switch (Prize) {
                case 0:
                    return vm.currentResult.Jackpot
                case 1:
                    return vm.currentResult.First
                case 2:
                    return vm.currentResult.Second[0]
                case 3:
                    return vm.currentResult.Second[1]
                case 4:
                    return vm.currentResult.Third[0]
                case 5:
                    return vm.currentResult.Third[1]
                case 6:
                    return vm.currentResult.Third[2]
                case 7:
                    return vm.currentResult.Third[3]
                case 8:
                    return vm.currentResult.Third[4]
                case 9:
                    return vm.currentResult.Third[5]
                case 10:
                    return vm.currentResult.Fourth[0]
                case 11:
                    return vm.currentResult.Fourth[1]
                case 12:
                    return vm.currentResult.Fourth[2]
                case 13:
                    return vm.currentResult.Fourth[3]
                case 14:
                    return vm.currentResult.Fiveth[0]
                case 15:
                    return vm.currentResult.Fiveth[1]
                case 16:
                    return vm.currentResult.Fiveth[2]
                case 17:
                    return vm.currentResult.Fiveth[3]
                case 18:
                    return vm.currentResult.Fiveth[4]
                case 19:
                    return vm.currentResult.Fiveth[5]
                case 20:
                    return vm.currentResult.Sixth[0]
                case 21:
                    return vm.currentResult.Sixth[1]
                case 22:
                    return vm.currentResult.Sixth[2]
                case 23:
                    return vm.currentResult.Seventh[0]
                case 24:
                    return vm.currentResult.Seventh[1]
                case 25:
                    return vm.currentResult.Seventh[2]
                case 26:
                    return vm.currentResult.Seventh[3]
            }
        }

        function sendResult(result, Prize, text) {
            if (msUtils.exists(Prize, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) {
                if (!/^[0-9]{5}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 5 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) {
                if (!/^[0-9]{4}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 4 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [20, 21, 22])) {
                if (!/^[0-9]{3}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 3 chữ số.')
                    return;
                }
            } else {
                if (!/^[0-9]{2}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 2 chữ số.')
                    return;
                }
            }
            if (result === vm.getPrizeResult(Prize)) {
                message.infoMultiple('Nothing to change');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Second) && msUtils.exists(Prize, [2, 3])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 2 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Third) && msUtils.exists(Prize, [4, 5, 6, 7, 8, 9])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 3 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Fourth) && msUtils.exists(Prize, [10, 11, 12, 13])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 4 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Fiveth) && msUtils.exists(Prize, [14, 15, 16, 17, 18, 19])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 5 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Sixth) && msUtils.exists(Prize, [20, 21, 22])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 6 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Seventh) && msUtils.exists(Prize, [23, 24, 25, 26])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 7 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            let data = {
                Term: vm.currentTerm,
                Prize: Prize,
                Result: result,
            }
            network.Games.Lottery.LotteryResult.updateNorthernResultLive(data).then(function(response) {
                vm.updateCurrentPrize({
                    Prize: Prize,
                    Result: result
                })
            }).catch(function(error) {
                message.show(error.message)
            })
        }

        function updateCurrentPrize(data) {
            switch (data.Prize) {
                case 0:
                    vm.currentResult.Jackpot = data.Result;
                    break;
                case 1:
                    vm.currentResult.First = data.Result;
                    break;
                case 2:
                    vm.currentResult.Second[0] = data.Result;
                    break;
                case 3:
                    vm.currentResult.Second[1] = data.Result;
                    break;
                case 4:
                    vm.currentResult.Third[0] = data.Result;
                    break;
                case 5:
                    vm.currentResult.Third[1] = data.Result;
                    break;
                case 6:
                    vm.currentResult.Third[2] = data.Result;
                    break;
                case 7:
                    vm.currentResult.Third[3] = data.Result;
                    break;
                case 8:
                    vm.currentResult.Third[4] = data.Result;
                    break;
                case 9:
                    vm.currentResult.Third[5] = data.Result;
                    break;
                case 10:
                    vm.currentResult.Fourth[0] = data.Result;
                    break;
                case 11:
                    vm.currentResult.Fourth[1] = data.Result;
                    break;
                case 12:
                    vm.currentResult.Fourth[2] = data.Result;
                    break;
                case 13:
                    vm.currentResult.Fourth[3] = data.Result;
                    break;
                case 14:
                    vm.currentResult.Fiveth[0] = data.Result;
                    break;
                case 15:
                    vm.currentResult.Fiveth[1] = data.Result;
                    break;
                case 16:
                    vm.currentResult.Fiveth[2] = data.Result;
                    break;
                case 17:
                    vm.currentResult.Fiveth[3] = data.Result;
                    break;
                case 18:
                    vm.currentResult.Fiveth[4] = data.Result;
                    break;
                case 19:
                    vm.currentResult.Fiveth[5] = data.Result;
                    break;
                case 20:
                    vm.currentResult.Sixth[0] = data.Result;
                    break;
                case 21:
                    vm.currentResult.Sixth[1] = data.Result;
                    break;
                case 22:
                    vm.currentResult.Sixth[2] = data.Result;
                    break;
                case 23:
                    vm.currentResult.Seventh[0] = data.Result;
                    break;
                case 24:
                    vm.currentResult.Seventh[1] = data.Result;
                    break;
                case 25:
                    vm.currentResult.Seventh[2] = data.Result;
                    break;
                case 26:
                    vm.currentResult.Seventh[3] = data.Result;
                    break;
            }
            $scope.$digest();
        }

        function closeLotto(live, $event) {
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === live.GameType
            })[0]);
            let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
            vm.selectedTermInfo.Games.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/traditional/live/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            });

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    if (data.GameType === 0) {
                        if (msUtils.exists(value.BetType, [1, 2, 3, 4, 6, 12, 14, 22, 23, 24, 25, 29])) {
                            $scope.selected.push(value.BetType)
                        }
                    } else {
                        if (msUtils.exists(value.BetType, [2, 3, 4, 7, 9, 10, 12, 14, 15, 17, 19, 30])) {
                            $scope.selected.push(value.BetType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function() {
                    $scope.submitting = true;
                    let param = {
                        term: data.Term,
                        gameType: data.GameType,
                        status: 0,
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.includeBetTypes = $scope.selected
                    }
                    network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide();
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function closeAll(GameType, ev) {
            $mdDialog.show({
                controller: closeBettingCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/close.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false,
                locals: {
                    data: vm.aTerms,
                    current: GameType
                }
            });

            function closeBettingCtrl($scope, $mdDialog, data, current, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.gameList = data;
                $scope.selected = [];
                angular.forEach(data, function(value) {
                    if (current === 0 || current === 1) {
                        if ([0, 1].indexOf(value.GameType) > -1) {
                            $scope.selected.push(value.GameType)
                        }
                    } else {
                        if ([2, 3, 4, 5].indexOf(value.GameType) > -1) {
                            $scope.selected.push(value.GameType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBetting = function(next) {
                    $scope.submitting = true;
                    if (!next) {
                        $scope.sent = [];
                        angular.forEach($scope.selected, function(item) {
                            $scope.sent.push({
                                id: item,
                                done: false
                            })
                        });
                    }
                    let count = 0;
                    angular.forEach($scope.sent, function(item) {
                        if (item.done) {
                            count++
                        }
                    });
                    if (count === $scope.sent.length) {
                        $mdDialog.hide();
                        $rootScope.$emit('CallParentMethod', {});
                    }
                    let continueCheck = false;
                    angular.forEach($scope.sent, function(item) {
                        if (!continueCheck) {
                            if (!item.done) {
                                continueCheck = true;
                                let param = {
                                    term: data[0].Term,
                                    gameType: item.id,
                                    status: 0,
                                    excludeBetTypes: [20]
                                };
                                network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                                    if (response) {
                                        item.done = true;
                                        continueCheck = false;
                                        $timeout(function() {
                                            $scope.closeBetting(true);
                                        }, 500)
                                    }
                                }).catch(function(error) {
                                    message.alert(error.message)
                                })
                            }
                        }
                    });
                }
            }
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.promise);
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.live').controller('liveSouthernCtrl', liveSouthernCtrl);

    function liveSouthernCtrl($rootScope, $scope, $state, $interval, $timeout, $stateParams, network, $mdDialog, message, AuthService, msUtils, $location, $mdToast) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(256)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(128);
        vm.synchronized = true;
        vm.pingCount = 0;
        vm.loadCurrent = loadCurrent;
        vm.closedPrize = closedPrize;
        vm.reOpen = reOpen;
        vm.ping = ping;
        vm.openBet = openBet;
        vm.closeBet = closeBet;
        vm.makeOdds = makeOdds;
        vm.getCurrentResult = getCurrentResult;
        vm.updateResult = updateResult;
        vm.getPrizeResult = getPrizeResult;
        vm.sendResult = sendResult;
        vm.updateCurrentPrize = updateCurrentPrize;
        vm.closeLotto = closeLotto;
        vm.closeAll = closeAll;
        network.Games.Lottery.Term.getTermsByDate({
            date: null
        }).then(function(response) {
            vm.aTerms = response;
        })
        vm.currentLocation = $location.path() === '/traditional/live/southern';
        vm.submitting = false;
        vm.loadCurrent();

        function openBet() {
            if (!vm.hasWritePermission) {
                return
            }
            network.Games.Lottery.Live.open({
                Term: vm.currentTerm,
                GameTypes: [2]
            }).then(function(response) {
                if (response) {
                    $interval.cancel(vm.promise);
                    vm.loadCurrent();
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function closeBet(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận').textContent('Đóng cược toàn bộ?').ariaLabel('Close all').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                network.Games.Lottery.Live.close({
                    Term: vm.currentTerm,
                    GameTypes: [2]
                }).then(function(response) {
                    if (response) {
                        $interval.cancel(vm.promise);
                        vm.loadCurrent();
                        message.info('Đóng cược thành công')
                    }
                });
            })
        }

        function closedPrize(prize) {
            if (!vm.hasWritePermission) {
                return
            }
            vm.submitting = true;
            network.Games.Lottery.Live.closePrize({
                Term: vm.currentTerm,
                GameTypes: [2],
                PrizeNr: prize
            }).then(function(response) {
                if (response.Result) {
                    vm.liveCurrent.PrizeNr--;
                    $timeout(function() {
                        vm.submitting = false;
                        $scope.$digest()
                    });
                }
            }).catch(function(error) {
                vm.submitting = false;
                message.alert(error.message)
            })
        }

        function reOpen(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận mở lại Lô live').textContent('Vui lòng xác nhận đã đóng lại hết các giải đã mở thưởng trước khi mở lại cược!').ariaLabel('Re-Open').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                vm.ping(true)
            }, function() {});
        }

        function ping(ignore) {
            if (!vm.hasWritePermission || !vm.currentLocation) {
                return
            }
            if ((vm.liveCurrent.error === 'TimeExceeded') && !ignore) {
                $interval.cancel(vm.promise);
                return;
            }
            network.Games.Lottery.Live.ping({
                Term: vm.liveCurrent.Term,
                GameTypes: [2],
                IgnoreCheckTime: ignore
            }).then(function(response) {
                vm.liveCurrent.error = response.Result[0].Result;
                vm.pingCount++;
                if (vm.pingCount === 10) {
                    vm.pingCount = 0;
                    $interval.cancel(vm.promise);
                    vm.loadCurrent();
                }
                if (ignore) {
                    vm.pingCount = 0;
                    vm.loadCurrent();
                }
            });
        }

        function loadCurrent() {
            network.Games.Lottery.Live.current({
                GameTypes: [2]
            }).then(function(response) {
                vm.liveCurrent = response[0];
                vm.currentTerm = response.filter(function(t) {
                    return t.GameType === 2
                })[0].Term;
                $timeout(function() {
                    $scope.$digest();
                    vm.getCurrentResult();
                });
                vm.promise = $interval(function() {
                    vm.ping(false)
                }, 1000);
            })
        }

        function makeOdds() {
            if (!vm.hasWritePermission) {
                return
            }
            $rootScope.loadingProgress = true;
            network.Games.Lottery.Live.makeOdds({
                Term: vm.currentTerm,
                GameType: 2
            }).then(function(response) {
                if (response) {
                    message.info('Chuyển giá thành công');
                    $interval.cancel(vm.promise);
                    $state.transitionTo($state.current, $stateParams, {
                        reload: true,
                        inherit: false,
                        notify: true
                    });
                }
                $rootScope.loadingProgress = false;
            }).catch(function(error) {
                $rootScope.loadingProgress = false;
                message.info(error.message);
            })
        }

        function getCurrentResult() {
            network.Games.Lottery.LotteryResult.getSouthernResultByTerm({
                Term: vm.currentTerm,
                GameType: 2
            }).then(function(response) {
                vm.currentResult = response;
                $scope.$digest();
            }).catch(function(error) {
                vm.currentResult = {
                    "Jackpot": "",
                    "First": "",
                    "Second": "",
                    "Third": ["", ""],
                    "Fourth": ["", "", "", "", "", "", ""],
                    "Fiveth": "",
                    "Sixth": ["", "", ""],
                    "Seventh": "",
                    "Eighth": ""
                };
            });
        }

        function updateResult($event, Prize, text) {
            let value = vm.getPrizeResult(Prize);
            let confirm = $mdDialog.prompt().title('Kết quả xổ số truyền thống').textContent('Xác nhận kết quả xổ số ' + text).placeholder('Kết quả').ariaLabel('result').initialValue(value).targetEvent($event).clickOutsideToClose(true).required(true).ok('Okay!').cancel('cancel');
            $mdDialog.show(confirm).then(function(result) {
                vm.sendResult(result, Prize, text)
            }, function() {});
        }

        function getPrizeResult(Prize) {
            switch (Prize) {
                case 0:
                    return vm.currentResult.Jackpot
                case 1:
                    return vm.currentResult.First
                case 2:
                    return vm.currentResult.Second
                case 3:
                    return vm.currentResult.Third[1]
                case 4:
                    return vm.currentResult.Third[0]
                case 5:
                    return vm.currentResult.Fourth[6]
                case 6:
                    return vm.currentResult.Fourth[5]
                case 7:
                    return vm.currentResult.Fourth[4]
                case 8:
                    return vm.currentResult.Fourth[3]
                case 9:
                    return vm.currentResult.Fourth[2]
                case 10:
                    return vm.currentResult.Fourth[1]
                case 11:
                    return vm.currentResult.Fourth[0]
                case 12:
                    return vm.currentResult.Fiveth
                case 13:
                    return vm.currentResult.Sixth[2]
                case 14:
                    return vm.currentResult.Sixth[1]
                case 15:
                    return vm.currentResult.Sixth[0]
                case 16:
                    return vm.currentResult.Seventh
                case 17:
                    return vm.currentResult.Eighth
            }
        }

        function sendResult(result, Prize, text) {
            if (msUtils.exists(Prize, [0])) {
                if (!/^[0-9]{6}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 6 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) {
                if (!/^[0-9]{5}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 5 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [12, 13, 14, 15])) {
                if (!/^[0-9]{4}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 4 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [16])) {
                if (!/^[0-9]{3}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 3 chữ số.')
                    return;
                }
            } else {
                if (!/^[0-9]{2}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 2 chữ số.')
                    return;
                }
            }
            if (result === vm.getPrizeResult(Prize)) {
                message.infoMultiple('Nothing to change');
                return;
            }
            let data = {
                Term: vm.currentTerm,
                Prize: Prize,
                Result: result,
                GameType: 2
            }
            network.Games.Lottery.LotteryResult.updateSouthernResultLive(data).then(function(response) {
                vm.updateCurrentPrize({
                    Prize: Prize,
                    Result: result
                })
            }).catch(function(error) {
                message.show(error.message)
            })
        }

        function updateCurrentPrize(data) {
            switch (data.Prize) {
                case 0:
                    vm.currentResult.Jackpot = data.Result;
                    break;
                case 1:
                    vm.currentResult.First = data.Result;
                    break;
                case 2:
                    vm.currentResult.Second = data.Result;
                    break;
                case 3:
                    vm.currentResult.Third[1] = data.Result;
                    break;
                case 4:
                    vm.currentResult.Third[0] = data.Result;
                    break;
                case 5:
                    vm.currentResult.Fourth[6] = data.Result;
                    break;
                case 6:
                    vm.currentResult.Fourth[5] = data.Result;
                    break;
                case 7:
                    vm.currentResult.Fourth[4] = data.Result;
                    break;
                case 8:
                    vm.currentResult.Fourth[3] = data.Result;
                    break;
                case 9:
                    vm.currentResult.Fourth[2] = data.Result;
                    break;
                case 10:
                    vm.currentResult.Fourth[1] = data.Result;
                    break;
                case 11:
                    vm.currentResult.Fourth[0] = data.Result;
                    break;
                case 12:
                    vm.currentResult.Fiveth = data.Result;
                    break;
                case 13:
                    vm.currentResult.Sixth[2] = data.Result;
                    break;
                case 14:
                    vm.currentResult.Sixth[1] = data.Result;
                    break;
                case 15:
                    vm.currentResult.Sixth[0] = data.Result;
                    break;
                case 16:
                    vm.currentResult.Seventh = data.Result;
                    break;
                case 17:
                    vm.currentResult.Eighth = data.Result;
                    break;
            }
            $scope.$digest();
        }

        function closeLotto(live, $event) {
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === live.GameType
            })[0]);
            let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
            vm.selectedTermInfo.Games.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/traditional/live/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            });

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    if (msUtils.exists(value.BetType, [2, 3, 4, 7, 10, 15, 16, 17, 18, 19, 30])) {
                        $scope.selected.push(value.BetType)
                    }
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function() {
                    $scope.submitting = true;
                    let param = {
                        term: data.Term,
                        gameType: data.GameType,
                        status: 0,
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.includeBetTypes = $scope.selected
                    }
                    network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide();
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function closeAll(GameType, ev) {
            $mdDialog.show({
                controller: closeBettingCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/close.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false,
                locals: {
                    data: vm.aTerms,
                    current: GameType
                }
            });

            function closeBettingCtrl($scope, $mdDialog, data, current, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.gameList = data;
                $scope.selected = [];
                angular.forEach(data, function(value) {
                    if (current === 0 || current === 1) {
                        if ([0, 1].indexOf(value.GameType) > -1) {
                            $scope.selected.push(value.GameType)
                        }
                    } else {
                        if ([2, 3, 4, 5].indexOf(value.GameType) > -1) {
                            $scope.selected.push(value.GameType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBetting = function(next) {
                    $scope.submitting = true;
                    if (!next) {
                        $scope.sent = [];
                        angular.forEach($scope.selected, function(item) {
                            $scope.sent.push({
                                id: item,
                                done: false
                            })
                        });
                    }
                    let count = 0;
                    angular.forEach($scope.sent, function(item) {
                        if (item.done) {
                            count++
                        }
                    });
                    if (count === $scope.sent.length) {
                        $mdDialog.hide();
                        $rootScope.$emit('CallParentMethod', {});
                    }
                    let continueCheck = false;
                    angular.forEach($scope.sent, function(item) {
                        if (!continueCheck) {
                            if (!item.done) {
                                continueCheck = true;
                                let param = {
                                    term: data[0].Term,
                                    gameType: item.id,
                                    status: 0,
                                    excludeBetTypes: [20]
                                };
                                network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                                    if (response) {
                                        item.done = true;
                                        continueCheck = false;
                                        $timeout(function() {
                                            $scope.closeBetting(true);
                                        }, 500)
                                    }
                                }).catch(function(error) {
                                    message.alert(error.message)
                                })
                            }
                        }
                    });
                }
            }
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.promise);
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.data_lake', []).config(config);

    function config($stateProvider, msApiProvider) {
        $stateProvider.state('app.traditional_data_lake', {
            url: '/traditional/data-lake',
            abstract: true,
        }).state('app.traditional_data_lake.members', {
            url: '/members',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/data-lake/members/data-members.html',
                    controller: 'dataMemberCtrl as vm'
                }
            }
        }).state('app.traditional_data_lake.tickets', {
            url: '/tickets',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/data-lake/tickets/data-tickets.html',
                    controller: 'dataTicketsCtrl as vm'
                }
            }
        }).state('app.traditional_data_lake.history', {
            url: '/history',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/data-lake/bet-histories/bet-histories.html',
                    controller: 'dataHistoryCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.data_lake').controller('dataTicketsCtrl', dataTicketsCtrl);

    function dataTicketsCtrl($scope, $mdDialog, $interval, $timeout, message) {
        let vm = this;
        vm.changeGame = changeGame;
        vm.PlayerTickets = PlayerTickets;
        vm.MinNumberMatch = 1
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let i = z; i < 30; i++) {
            vm.termHistory.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc 1',
            bet: [{
                id: 0,
                name: 'Đề'
            }, {
                id: 1,
                name: 'Lô'
            }, {
                id: 29,
                name: 'Lô Đầu'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 5,
                name: 'Đề Trượt'
            }, {
                id: 6,
                name: 'Lô Trượt'
            }, {
                id: 21,
                name: 'Đề Đầu'
            }, {
                id: 22,
                name: 'Đề G1'
            }, {
                id: 23,
                name: 'Đề Đầu G1'
            }, {
                id: 24,
                name: 'Đề Thần Tài'
            }, {
                id: 25,
                name: 'Đề Đầu TT'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 1,
            name: 'Miền Bắc 2',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 9,
                name: '2D 27Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 12,
                name: '3D 23Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 14,
                name: '4D 20Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 2,
            name: 'Miền Nam 18A',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 3,
            name: 'Miền Nam 18B',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 4,
            name: 'Miền Nam 18C',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 5,
            name: 'Xiên 18A + 18B',
            bet: [{
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }];

        function changeGame() {
            vm.BetTypes = vm.games.filter(function(item) {
                return item.id === vm.GameType
            })[0].bet;
        }

        function PlayerTickets() {
            if (vm.cancelNumbers === undefined || vm.cancelNumbers.length === 0 || vm.MinNumberMatch < 1) {
                message.show('Dữ liệu không đầy đủ')
                return;
            }
            let data = {
                Term: vm.Term,
                GameType: parseInt(vm.GameType),
                BetType: parseInt(vm.BetType),
                CancelNumbers: vm.cancelNumbers.replace(/ /g, '').split(','),
                MinNumberMatch: vm.MinNumberMatch,
            }
            if (data.CancelNumbers.length === 0) {
                message.show('Dữ liệu không đầy đủ')
                return;
            }
            if (data.MinNumberMatch > data.CancelNumbers.length || data.MinNumberMatch < 1) {
                message.show('Số trùng phải <= tổng số hủy')
                return;
            }
            vm.submitting = true;
            Lotus.Lottery.Report.DataLake.NewTicketItems.exportPlayerTickets(data).then(function(response) {
                if (response.QueryExecutionId) {
                    vm.submitting = false;
                    $mdDialog.show({
                        controller: openTaskCtrl,
                        templateUrl: 'app/main/traditional/data-lake/members/dialog/download.html',
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            task: response.QueryExecutionId
                        }
                    });

                    function openTaskCtrl($rootScope, $scope, $mdDialog, $interval, $timeout, task) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.submitting = true;
                        $scope.QueryId = task;
                        let QueryExecution = $interval(function() {
                            Lotus.Lottery.Report.DataLake.checkQueryExecution(task).then(function(response) {
                                $scope.response = response;
                                if (response.Status.State === "SUCCEEDED") {
                                    $interval.cancel(QueryExecution);
                                    $scope.submitting = false;
                                    $scope.DownloadFile = response.DownloadFile
                                }
                                $timeout(function() {
                                    $scope.$digest();
                                }, 100)
                            })
                        }, 3000)
                    }
                }
            }).catch(function(error) {
                message.show(error.message)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.data_lake').controller('dataMemberCtrl', dataMemberCtrl);

    function dataMemberCtrl($scope, $mdDialog, $interval, $timeout, message) {
        let vm = this;
        vm.changeGame = changeGame;
        vm.PlayerTotalBets = PlayerTotalBets;
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let i = z; i < 30; i++) {
            vm.termHistory.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc 1',
            bet: [{
                id: 0,
                name: 'Đề'
            }, {
                id: 1,
                name: 'Lô'
            }, {
                id: 29,
                name: 'Lô Đầu'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 5,
                name: 'Đề Trượt'
            }, {
                id: 6,
                name: 'Lô Trượt'
            }, {
                id: 21,
                name: 'Đề Đầu'
            }, {
                id: 22,
                name: 'Đề G1'
            }, {
                id: 23,
                name: 'Đề Đầu G1'
            }, {
                id: 24,
                name: 'Đề Thần Tài'
            }, {
                id: 25,
                name: 'Đề Đầu TT'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 1,
            name: 'Miền Bắc 2',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 9,
                name: '2D 27Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 12,
                name: '3D 23Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 14,
                name: '4D 20Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 2,
            name: 'Miền Nam 18A',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 3,
            name: 'Miền Nam 18B',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 4,
            name: 'Miền Nam 18C',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 5,
            name: 'Xiên 18A + 18B',
            bet: [{
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }];

        function changeGame() {
            vm.BetTypes = vm.games.filter(function(item) {
                return item.id === vm.GameType
            })[0].bet;
        }

        function PlayerTotalBets() {
            if (vm.cancelNumbers === undefined || vm.cancelNumbers.length === 0 || vm.doubtNumbers === undefined || vm.doubtNumbers.length === 0) {
                message.show('Dữ liệu không đầy đủ')
                return;
            }
            let data = {
                Term: vm.Term,
                GameType: parseInt(vm.GameType),
                BetType: parseInt(vm.BetType),
                CancelNumbers: vm.cancelNumbers.replace(/ /g, '').split(','),
                DoubtNumbers: vm.doubtNumbers.replace(/ /g, '').split(','),
            }
            if (data.CancelNumbers.length === 0 || data.DoubtNumbers.length === 0) {
                message.show('Dữ liệu không đầy đủ')
                return;
            }
            vm.submitting = true;
            Lotus.Lottery.Report.DataLake.NewTicketItems.exportAggPlayerTotalBets(data).then(function(response) {
                if (response.QueryExecutionId) {
                    vm.submitting = false;
                    $mdDialog.show({
                        controller: openTaskCtrl,
                        templateUrl: 'app/main/traditional/data-lake/members/dialog/download.html',
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            task: response.QueryExecutionId
                        }
                    });

                    function openTaskCtrl($rootScope, $scope, $mdDialog, $interval, $timeout, task) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.submitting = true;
                        $scope.QueryId = task;
                        let QueryExecution = $interval(function() {
                            Lotus.Lottery.Report.DataLake.checkQueryExecution(task).then(function(response) {
                                $scope.response = response;
                                if (response.Status.State === "SUCCEEDED") {
                                    $interval.cancel(QueryExecution);
                                    $scope.submitting = false;
                                    $scope.DownloadFile = response.DownloadFile
                                }
                                $timeout(function() {
                                    $scope.$digest();
                                }, 100)
                            })
                        }, 3000)
                    }
                }
            }).catch(function(error) {
                message.show(error.message)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.cancellation').controller('cancelTicketCtrl', cancelTicketCtrl);

    function cancelTicketCtrl($scope, $mdDialog, $timeout, $location, $state, $window, network) {
        let vm = this;
        vm.changeTerm = changeTerm;
        vm.termHistories = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let i = z; i < 30; i++) {
            vm.termHistories.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }

        function changeTerm() {
            let data = {
                Term: vm.Term,
                Limit: 100,
                LastId: ''
            };
            network.Games.Lottery.ReportTicket.getTasks(data).then(function(response) {
                vm.listTickets = response;
                $timeout(function() {
                    $scope.$digest();
                }, 200)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.data_lake').controller('dataHistoryCtrl', dataHistoryCtrl);

    function dataHistoryCtrl($scope, $mdDialog, $interval, $timeout, message) {
        let vm = this;
        vm.changeGame = changeGame;
        vm.PlayerTickets = PlayerTickets;
        vm.HistoryDays = 7
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let i = z; i < 30; i++) {
            vm.termHistory.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc 1',
            bet: [{
                id: 0,
                name: 'Đề'
            }, {
                id: 1,
                name: 'Lô'
            }, {
                id: 29,
                name: 'Lô Đầu'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 5,
                name: 'Đề Trượt'
            }, {
                id: 6,
                name: 'Lô Trượt'
            }, {
                id: 21,
                name: 'Đề Đầu'
            }, {
                id: 22,
                name: 'Đề G1'
            }, {
                id: 23,
                name: 'Đề Đầu G1'
            }, {
                id: 24,
                name: 'Đề Thần Tài'
            }, {
                id: 25,
                name: 'Đề Đầu TT'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 1,
            name: 'Miền Bắc 2',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 9,
                name: '2D 27Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 12,
                name: '3D 23Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 14,
                name: '4D 20Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 2,
            name: 'Miền Nam 18A',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 3,
            name: 'Miền Nam 18B',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 4,
            name: 'Miền Nam 18C',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 5,
            name: 'Xiên 18A + 18B',
            bet: [{
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }];

        function changeGame() {
            vm.BetTypes = vm.games.filter(function(item) {
                return item.id === vm.GameType
            })[0].bet;
        }

        function PlayerTickets() {
            if (vm.cancelNumbers === undefined || vm.cancelNumbers.length === 0) {
                message.show('Dữ liệu không đầy đủ')
                return;
            }
            let data = {
                Term: vm.Term,
                GameType: parseInt(vm.GameType),
                BetType: parseInt(vm.BetType),
                CancelNumbers: vm.cancelNumbers.replace(/ /g, '').split(','),
                HistoryDays: vm.HistoryDays,
            }
            if (data.CancelNumbers.length === 0) {
                message.show('Dữ liệu không đầy đủ')
                return;
            }
            if (data.HistoryDays > 30 || data.HistoryDays < 1) {
                message.show('Số ngày phải từ 1-30')
                return;
            }
            vm.submitting = true;
            Lotus.Lottery.Report.DataLake.NewTicketItems.exportPlayerBetHistory(data).then(function(response) {
                if (response.QueryExecutionId) {
                    vm.submitting = false;
                    $mdDialog.show({
                        controller: openTaskCtrl,
                        templateUrl: 'app/main/traditional/data-lake/members/dialog/download.html',
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            task: response.QueryExecutionId
                        }
                    });

                    function openTaskCtrl($rootScope, $scope, $mdDialog, $interval, $timeout, task) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.submitting = true;
                        $scope.QueryId = task;
                        let QueryExecution = $interval(function() {
                            Lotus.Lottery.Report.DataLake.checkQueryExecution(task).then(function(response) {
                                $scope.response = response;
                                if (response.Status.State === "SUCCEEDED") {
                                    $interval.cancel(QueryExecution);
                                    $scope.submitting = false;
                                    $scope.DownloadFile = response.DownloadFile
                                }
                                $timeout(function() {
                                    $scope.$digest();
                                }, 100)
                            })
                        }, 3000)
                    }
                }
            }).catch(function(error) {
                message.show(error.message)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.cancellation').controller('cancelNumbersCtrl', cancelNumbersCtrl);

    function cancelNumbersCtrl($rootScope, $scope, $mdDialog, $timeout, message, msUtils, network, numberGroups) {
        let vm = this;
        vm.onTabSelected = onTabSelected;
        vm.exists = exists;
        vm.groupNumbers = groupNumbers;
        vm.existsObj = existsObj;
        vm.toggle = toggle;
        vm.changeTerm = changeTerm;
        vm.changeGame = changeGame;
        vm.changeBetType = changeBetType;
        vm.selectNumber = selectNumber;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.buildSelectedNumbers = buildSelectedNumbers;
        vm.removeNumber = removeNumber;
        vm.createTask = createTask;
        vm.multipleTask = multipleTask;
        vm.getAllTasks = getAllTasks;
        vm.openTask = openTask;
        vm.copyTask = copyTask;
        vm.quickChoices = numberGroups.list;
        vm.selectedCheckbox = [];
        vm.termHistory = [];
        let z = moment().hour() < 19 ? 0 : -1;
        for (let i = z; i < 30; i++) {
            vm.termHistory.push(moment().subtract(i, 'day').format('YYYY-MM-DD'))
        }
        vm.CancelPlayers = '';
        vm.CancelAgents = '';
        vm.ExceptPlayers = '';
        vm.numbers = [];
        for (let i = 0; i < 100; i++) {
            i = i < 10 ? '0' + i : i;
            vm.numbers.push({
                number: i.toString()
            })
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc 1',
            bet: [{
                id: 0,
                name: 'Đề'
            }, {
                id: 1,
                name: 'Lô'
            }, {
                id: 29,
                name: 'Lô Đầu'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 5,
                name: 'Đề Trượt'
            }, {
                id: 6,
                name: 'Lô Trượt'
            }, {
                id: 21,
                name: 'Đề Đầu'
            }, {
                id: 22,
                name: 'Đề G1'
            }, {
                id: 23,
                name: 'Đề Đầu G1'
            }, {
                id: 24,
                name: 'Đề Thần Tài'
            }, {
                id: 25,
                name: 'Đề Đầu TT'
            }, {
                id: 20,
                name: 'Lô Live'
            }, ]
        }, {
            id: 1,
            name: 'Miền Bắc 2',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 12,
                name: '3D 23Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 14,
                name: '4D 20Lô'
            }, ]
        }, {
            id: 2,
            name: 'Miền Nam 18A',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 3,
            name: 'Miền Nam 18B',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 4,
            name: 'Miền Nam 18C',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 5,
            name: 'Xiên 18A + 18B',
            bet: [{
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }];

        function onTabSelected(tab) {
            vm.activeTab = tab;
        }

        function exists(parent, id) {
            let ids = parent.toString() + id.toString();
            return vm.selectedCheckbox.indexOf(ids) > -1;
        }

        function groupNumbers(parent, id) {
            let ids = parent.toString() + id.toString();
            let idx = vm.selectedCheckbox.indexOf(ids);
            if (idx > -1) {
                vm.selectedCheckbox.splice(idx, 1);
            } else {
                vm.selectedCheckbox.push(ids);
            }
            vm.checked = idx === -1;
            vm.arrayNumber = vm.quickChoices[parent].collection[id].numbers;
            if (vm.checked) {
                vm.numbers.map(function(item) {
                    if (msUtils.exists(item.number, vm.arrayNumber)) {
                        item.active = true
                    }
                })
            } else {
                vm.numbers.map(function(item) {
                    if (msUtils.exists(item.number, vm.arrayNumber)) {
                        item.active = false
                    }
                })
            }
            vm.buildSelectedNumbers()
        }
        vm.selected = [];

        function toggle(item, list) {
            let idx = list.indexOf(item);
            if (idx > -1) {
                list.splice(idx, 1);
            } else {
                list.push(item);
            }
        }

        function existsObj(item, list) {
            return list.indexOf(item) > -1;
        }

        function changeGame() {
            vm.BetTypes = vm.games.filter(function(item) {
                return item.id === vm.GameType
            })[0].bet;
        }

        function changeBetType() {
            vm.selectedNumbers = [];
            vm.numbers.map(function(item) {
                item.active = false;
            })
            if (msUtils.exists(vm.BetType, [10, 11, 12, 17, 18])) {
                vm.numberLength = 3
            } else if (msUtils.exists(vm.BetType, [13, 14, 19])) {
                vm.numberLength = 4
            } else {
                vm.numberLength = 2
            }
        }

        function selectNumber(item) {
            item.active = !item.active;
            vm.buildSelectedNumbers()
        }

        function inputKeyNumber(e) {
            if (!vm.keyNumber) {
                return
            }
            if (e.which === 8) {
                if (vm.keyNumber[vm.keyNumber.length - 1] !== ',') {
                    vm.keyNumber = vm.keyNumber.substring(0, vm.keyNumber.length - 1)
                }
            }
            let value = vm.keyNumber.split(',');
            if (value[value.length - 1].length > vm.numberLength - 1) {
                vm.keyNumber = vm.keyNumber + ','
            }
            if (e.which === 13) {
                vm.submitKeyNumber();
            }
        }

        function submitKeyNumber() {
            if (!vm.keyNumber) {
                return
            }
            vm.keyNumber = vm.keyNumber.replace(/\s+/g, '');
            if (vm.keyNumber.length === 0) {
                return
            }
            let arr = vm.keyNumber.split(',');
            if (vm.numberLength === 2) {
                let arrInput = [];
                for (let i = 0; i < arr.length; i++) {
                    let number = arr[i].slice(-2).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)) {
                        if (number.length !== 0)
                            arrInput.push(number)
                    }
                }
                vm.numbers.map(function(number) {
                    if (arrInput.indexOf(number.number) !== -1) {
                        number.active = true;
                    }
                })
                vm.keyNumber = '';
                $timeout(function() {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                    vm.buildSelectedNumbers();
                }, 100)
            } else if (vm.numberLength === 3) {
                for (let i = 0; i < arr.length; i++) {
                    let number = arr[i].slice(-3).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '00' + number : number;
                    number = number.length < 3 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)) {
                        if (number.length !== 0)
                            vm.selectedNumbers.push(number)
                    }
                }
                vm.keyNumber = '';
                $timeout(function() {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 100)
                vm.selectedNumbers = vm.selectedNumbers.filter(function(item, index, inputArray) {
                    return inputArray.indexOf(item) === index;
                });
            } else if (vm.numberLength === 4) {
                for (let i = 0; i < arr.length; i++) {
                    let number = arr[i].slice(-4).replace(/\s+/g, '');
                    number = number.length < 2 && number.length !== 0 ? '000' + number : number;
                    number = number.length < 3 && number.length !== 0 ? '00' + number : number;
                    number = number.length < 4 && number.length !== 0 ? '0' + number : number;
                    if (!isNaN(number) && angular.isNumber(+number)) {
                        if (number.length !== 0)
                            vm.selectedNumbers.push(number)
                    }
                }
                vm.keyNumber = '';
                $timeout(function() {
                    document.getElementsByClassName('input-numbers-array')[0].focus();
                }, 100)
                vm.selectedNumbers = vm.selectedNumbers.filter(function(item, index, inputArray) {
                    return inputArray.indexOf(item) === index;
                });
            }
        }

        function buildSelectedNumbers() {
            vm.selectedNumbers = [];
            vm.numbers.map(function(item) {
                if (item.active) {
                    vm.selectedNumbers.push(item.number)
                }
            })
        }

        function removeNumber(item) {
            let index = vm.selectedNumbers.indexOf(item);
            if (index > -1) {
                vm.selectedNumbers.splice(index, 1);
            }
        }

        function multipleTask() {
            if (vm.selected.length) {
                vm.createTask(vm.selected[0], vm.selected.length === 1)
                $timeout(function() {
                    vm.selected.shift()
                })
            }
        }

        function createTask(betType, multiple) {
            vm.submitting = true;
            let parameter = {
                Term: vm.Term,
                GameType: vm.GameType,
                BetType: betType,
                Numbers: vm.selectedNumbers,
                CancelAgents: vm.CancelAgents.replace(/ /g, '').replace(/\r/g, '').split("\n").filter(function(item) {
                    return item.length !== 0
                }),
                CancelPlayers: vm.CancelPlayers.replace(/ /g, '').replace(/\r/g, '').split("\n").filter(function(item) {
                    return item.length !== 0
                }),
                ExceptPlayers: vm.ExceptPlayers.replace(/ /g, '').replace(/\r/g, '').split("\n").filter(function(item) {
                    return item.length !== 0
                }),
            }
            Lotus.Lottery.NumberCancelTask.createTask(parameter).then(function(response) {
                if (multiple) {
                    if (response.Result === 'OK') {
                        message.show('Tạo Task hủy cược thành công');
                        vm.getAllTasks();
                    }
                    $timeout(function() {
                        vm.submitting = false;
                        vm.selectedNumbers = [];
                        vm.selectedCheckbox = [];
                        vm.CancelPlayers = '';
                        vm.CancelAgents = '';
                        vm.ExceptPlayers = '';
                        vm.numbers.map(function(item) {
                            item.active = false
                        })
                    }, 100)
                } else {
                    $timeout(function() {
                        vm.multipleTask();
                    }, 500)
                }
            }).catch(function(error) {
                $timeout(function() {
                    vm.submitting = false;
                }, 100)
                message.show(error.message)
            })
        }

        function getAllTasks() {
            Lotus.Lottery.NumberCancelTask.getAllTasks({
                Term: vm.taskTerm
            }).then(function(response) {
                vm.allTasks = response;
                vm.allTasks.map(function(item) {
                    if (item.TotalTasks !== undefined && item.FinishTasks === undefined) {
                        item.FinishTasks = 0
                    }
                })
                $scope.$digest()
            })
        }

        function changeTerm() {
            vm.getAllTasks();
        }

        function copyTask(task, cancel) {
            vm.Term = vm.taskTerm;
            vm.GameType = task.GameType;
            $timeout(function() {
                vm.changeGame();
                $timeout(function() {
                    vm.BetType = task.BetType;
                    if (msUtils.exists(task.BetType, [10, 11, 12, 17, 18])) {
                        vm.numberLength = 3
                    } else if (msUtils.exists(task.BetType, [13, 14, 19])) {
                        vm.numberLength = 4
                    } else {
                        vm.numberLength = 2
                    }
                    vm.selectedNumbers = task.Numbers;
                    vm.numbers.map(function(item) {
                        item.active = msUtils.exists(item.number, vm.selectedNumbers)
                    })
                    vm.selectedCheckbox = [];
                    vm.CancelPlayers = '';
                    vm.CancelAgents = '';
                    vm.ExceptPlayers = '';
                    if (Array.isArray(task.CancelPlayers)) {
                        let CancelPlayers = []
                        task.CancelPlayers.map(function(item) {
                            CancelPlayers.push(item.Username)
                        })
                        vm.CancelPlayers = CancelPlayers.toString().replaceAll(',', "\r\n")
                    }
                    if (Array.isArray(task.CancelAgents)) {
                        let CancelAgents = []
                        task.CancelAgents.map(function(item) {
                            CancelAgents.push(item.Username)
                        })
                        vm.CancelAgents = CancelAgents.toString().replaceAll(',', "\r\n")
                    }
                    if (Array.isArray(task.ExceptPlayers)) {
                        let ExceptPlayers = []
                        task.ExceptPlayers.map(function(item) {
                            ExceptPlayers.push(item.Username)
                        })
                        vm.ExceptPlayers = ExceptPlayers.toString().replaceAll(',', "\r\n")
                    }
                }, 100)
            }, 100)
        }

        function openTask(task, ev, number) {
            $mdDialog.show({
                controller: openTaskCtrl,
                templateUrl: 'app/main/traditional/cancellation/numbers/dialog/open-task.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    task: task,
                    number: number
                }
            });

            function openTaskCtrl($scope, $mdDialog, $timeout, task, number) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.task = task;
                $scope.getAncestors = function(item) {
                    $scope.parents = [];
                    network.User.getAncestors({
                        userId: item.UserId
                    }).then(function(response) {
                        $scope.parents = response;
                        $scope.parents.push({
                            Username: $rootScope.User.Username,
                            FullName: $rootScope.User.FullName,
                            Level: $rootScope.User.Level
                        });
                        $scope.parents.push({
                            Username: item.Username,
                            FullName: item.FullName,
                            Level: item.Level
                        });
                        $scope.parents.sort(function(a, b) {
                            return a.Level - b.Level
                        });
                        $scope.$digest();
                    })
                }
                $scope.cancelTask = function(task) {
                    $scope.submitting = true
                    Lotus.Lottery.NumberCancelTask.cancelTask({
                        TaskId: task.Id
                    }).then(function(response) {
                        if (response.Result === 'OK') {
                            task.Status = response.NewStatus;
                            $rootScope.$emit('CallParent', task);
                            $mdDialog.cancel();
                        }
                    }).catch(function(error) {
                        message.show(error.message)
                    })
                }
                $scope.startTask = function(task, event) {
                    $mdDialog.show({
                        controller: confirmStartCtrl,
                        templateUrl: 'app/main/traditional/cancellation/numbers/dialog/confirm-start.html',
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            task: task
                        }
                    });

                    function confirmStartCtrl($scope, $mdDialog, $timeout, task) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.correctTerm = false;
                        $scope.checkTerm = function() {
                            $scope.warn = false;
                            if ($scope.confirmTerm.length === 10 && $scope.confirmTerm === vm.taskTerm) {
                                $scope.correctTerm = true;
                            }
                            if ($scope.confirmTerm.length >= 10 && $scope.confirmTerm !== vm.taskTerm) {
                                $timeout(function() {
                                    document.getElementById('confirm-term').select();
                                    $scope.warn = true;
                                }, 10)
                            }
                        }
                        $scope.confirm = function() {
                            if (vm.taskTerm === $scope.confirmTerm) {
                                $scope.submitting = true
                                Lotus.Lottery.NumberCancelTask.startTask({
                                    TaskId: task.Id
                                }).then(function(response) {
                                    if (response.Result === 'OK') {
                                        task.Status = response.NewStatus;
                                        $rootScope.$emit('CallParent', task);
                                        $mdDialog.cancel();
                                    }
                                }).catch(function(error) {
                                    message.show(error.message)
                                })
                            } else {
                                message.infoMultiple('Số kỳ không đúng, vui lòng xác nhận lại')
                            }
                        }
                    }
                }
                $scope.getTaskDetails = function(task, number) {
                    $mdDialog.show({
                        controller: getTaskDetailsCtrl,
                        templateUrl: 'app/main/traditional/cancellation/numbers/dialog/task-details.html',
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            task: task,
                            number: number
                        }
                    });

                    function getTaskDetailsCtrl($scope, $mdDialog, $timeout, task, number) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.taskDetails = task;
                        $scope.currentNumber = number;
                        $scope.currentStatus = undefined
                        $scope.DetailsByNumbers = [];
                        $scope.getDetails = function(lastId) {
                            $scope.submitting = true
                            let param = {
                                TaskId: task.Id,
                                Number: $scope.currentNumber,
                                Status: $scope.currentStatus,
                                Limit: 30,
                            }
                            if (lastId !== undefined) {
                                param.LastId = lastId
                            }
                            Lotus.Lottery.NumberCancelTask.getTaskDetails(param).then(function(response) {
                                $scope.hasRecord = response.length === param.Limit;
                                $scope.DetailsByNumbers = $scope.DetailsByNumbers.concat(response);
                                $scope.$digest();
                                $timeout(function() {
                                    $scope.submitting = false
                                }, 200)
                            })
                        }
                        $scope.newNumberTask = function(number, status) {
                            $scope.DetailsByNumbers = [];
                            $scope.currentNumber = number;
                            $scope.currentStatus = status;
                            $scope.getDetails();
                        }
                        $scope.getDetails();
                    }
                }
                if (number !== undefined) {
                    $timeout(function() {
                        $scope.getTaskDetails(task, number)
                    }, 200)
                }
            }
        }
        $rootScope.$on('CallParent', function(event, data) {
            vm.allTasks.map(function(item) {
                if (item.Id === data.Id) {
                    item.Status = data.Status
                }
            })
            $scope.$digest();
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical', []).config(config);

    function config($stateProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.statistical', {
            url: '/statistical',
            abstract: true,
        }).state('app.statistical.general', {
            url: '/general',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/general/general.html',
                    controller: 'statisticalGeneralCtrl as vm'
                }
            }
        }).state('app.statistical.member', {
            url: '/member',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/member/member.html',
                    controller: 'statisticalMemberCtrl as vm'
                }
            }
        }).state('app.statistical.production', {
            url: '/production',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/production/production.html',
                    controller: 'statisticalProductionCtrl as vm'
                }
            }
        }).state('app.statistical.lottery', {
            url: '/lottery',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/lottery/lottery.html',
                    controller: 'statisticalLotteryCtrl as vm'
                }
            }
        }).state('app.statistical.agency', {
            url: '/agency',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/agency/agency.html',
                    controller: 'statisticalAgencyCtrl as vm'
                }
            }
        }).state('app.statistical.agent_production', {
            url: '/agent_production',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/agent/production/production.html',
                    controller: 'statisticalAgentProductionCtrl as vm'
                }
            }
        }).state('app.statistical.agent_lottery', {
            url: '/agent_lottery',
            views: {
                'content@app': {
                    templateUrl: 'app/main/statistical/agent/lottery/lottery.html',
                    controller: 'statisticalAgentLotteryCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalAgentProductionCtrl', statisticalAgentProductionCtrl);

    function statisticalAgentProductionCtrl($rootScope, $scope, $timeout, msUtils) {
        let vm = this;
        vm.termLists = [{
            id: 0,
            active: true,
            name: '2 Tuần gần nhất'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.changeRange = changeRange;
        vm.setLabel = setLabel;
        vm.setLabel();

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.filter.FromDate = moment().subtract(14, 'day').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.filter.FromDate === vm.filter.ToDate) {
                    vm.filter.FromDate = moment(vm.filter.FromDate).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment(vm.filter.ToDate).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.filter.FromDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.filter.FromDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.filter.FromDate = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.filter.FromDate = moment().startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.filter.FromDate = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.filter = {
            FromDate: moment().subtract(14, 'day'),
            ToDate: moment()
        }
        vm.renderStatistical = renderStatistical;
        vm.firstRender = true;
        vm.renderStatistical();

        function renderStatistical() {
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                From: moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DD"),
                To: moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DD"),
            }
            Lotus.Chart.Data.Report.aggAgentProductReportByDate(vm.setFilter).then(function(response) {
                if (vm.firstRender) {
                    vm.renderTurnover = DashboardChart.Product.AgentTurnover.render("Turnover", response, {
                        height: "600"
                    });
                    vm.renderLoss = DashboardChart.Product.AgentWinLoss.render("WinLoss", response, {
                        height: "600"
                    });
                } else {
                    DashboardChart.Product.Turnover.updateData(vm.renderTurnover, response);
                    DashboardChart.Product.WinLoss.updateData(vm.renderLoss, response);
                }
                $timeout(function() {
                    vm.firstRender = false;
                }, 500)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalAgentLotteryCtrl', statisticalAgentLotteryCtrl);

    function statisticalAgentLotteryCtrl($rootScope, $timeout, $location, msUtils) {
        let vm = this;
        vm.termLists = [{
            id: 0,
            active: true,
            name: '2 Tuần gần nhất'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.changeRange = changeRange;
        vm.setLabel = setLabel;
        vm.setLabel();

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.filter.FromDate = moment().subtract(14, 'day').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.filter.FromDate === vm.filter.ToDate) {
                    vm.filter.FromDate = moment(vm.filter.FromDate).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment(vm.filter.ToDate).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.filter.FromDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.filter.FromDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.filter.FromDate = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.filter.FromDate = moment().startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.filter.FromDate = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.filter = {
            GameType: -1,
            BetType: undefined,
            FromDate: moment().subtract(14, 'day'),
            ToDate: moment()
        }
        vm.localData = [{
            GameType: 0,
            BetTypes: [0, 1, 29, 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 20]
        }, {
            GameType: 1,
            BetTypes: [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 20]
        }, {
            GameType: 2,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 3,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 4,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 5,
            BetTypes: [2, 3, 4]
        }, ]
        vm.changeGame = changeGame;
        vm.setDefault = setDefault;
        vm.checkDisabled = checkDisabled;

        function changeGame() {
            vm.BetTypes = vm.localData.filter(function(item) {
                return item.GameType === vm.filter.GameType
            })
        }

        function checkDisabled() {
            return (new Date(moment().subtract(14, 'day').format('MM/DD/YYYY')).getTime() === new Date(moment(vm.filter.FromDate).format('MM/DD/YYYY')).getTime()) && (new Date(moment().format('MM/DD/YYYY')).getTime() === new Date(moment(vm.filter.ToDate).format('MM/DD/YYYY')).getTime() && parseInt(vm.filter.GameType) === -1)
        }

        function setDefault() {
            vm.filter.GameType = -1;
            vm.BetTypes.length = 0;
            vm.filter = {
                FromDate: moment().subtract(14, 'day'),
                ToDate: moment()
            }
            vm.termLists.map(function(item) {
                item.active = item.id === 0;
            })
            vm.setLabel();
            vm.renderDashboard();
        }
        vm.renderStatistical = renderStatistical;
        vm.renderStatistical();
        vm.firstRender = true;

        function renderStatistical() {
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                GameType: vm.filter.GameType,
                BetType: vm.filter.BetType,
                From: moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DD"),
                To: moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DD"),
            }
            if (parseInt(vm.filter.GameType) === -1 || vm.filter.GameType === undefined) {
                delete vm.setFilter.GameType;
                delete vm.setFilter.BetType;
            }
            if (parseInt(vm.filter.BetType) === -1 || vm.filter.BetType === undefined) {
                delete vm.setFilter.BetType;
            }
            Lotus.Chart.Data.Lottery.aggAgentBetTypeReportByDate(vm.setFilter).then(function(response) {
                if (vm.firstRender) {
                    vm.renderTurnOver = DashboardChart.Lottery.AgentTurnover.render("TurnOver", response, {
                        height: "600"
                    });
                    vm.renderWinLoss = DashboardChart.Lottery.AgentWinLoss.render("WinLoss", response, {
                        height: "600"
                    });
                } else {
                    DashboardChart.Lottery.Turnover.updateData(vm.renderTurnOver, response)
                    DashboardChart.Lottery.WinLoss.updateData(vm.renderWinLoss, response)
                }
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaWinCtrl', sabaWinCtrl);

    function sabaWinCtrl($scope, $state, AuthService) {
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.saba.statement.win-lose') {
            $state.go('app.saba.statement.win-lose.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialOutstandingCtrl', presidentialOutstandingCtrl);

    function presidentialOutstandingCtrl($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.presidential.statement.outstanding') {
            $state.go('app.presidential.statement.outstanding.general', {
                game: '0,1'
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaOutCtrl', sabaOutCtrl);

    function sabaOutCtrl($state, AuthService) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.saba.statement.outstanding') {
            $state.go('app.saba.statement.outstanding.general', {
                game: '0,1'
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaMemCtrl', sabaMemCtrl);

    function sabaMemCtrl($state, AuthService) {
        if (!AuthService.hasPermission(1)) {
            $state.go('app.dashboard');
            return;
        }
        if ($state.current.name === 'app.saba.statement.member') {
            $state.go('app.saba.statement.member.executive', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.notification', []).config(config);

    function config($stateProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.notification', {
            abstract: true,
            url: '/notification',
            views: {
                'content@app': {
                    templateUrl: 'app/main/notification/notification.html',
                    controller: 'notificationCtrl as vm'
                }
            }
        }).state('app.notification.normal', {
            url: '/normal',
            data: {
                'tab': 0
            },
            views: {
                'normal': {
                    templateUrl: 'app/main/notification/tabs/normal/normal.html',
                    controller: 'notificationNormalCtrl as vm'
                }
            }
        }).state('app.notification.special', {
            url: '/special',
            data: {
                'tab': 1
            },
            views: {
                'special': {
                    templateUrl: 'app/main/notification/tabs/special/special.html',
                    controller: 'notificationSpecialCtrl as vm'
                }
            }
        }).state('app.notification.system', {
            url: '/system',
            data: {
                'tab': 2
            },
            views: {
                'system': {
                    templateUrl: 'app/main/notification/tabs/system/system.html',
                    controller: 'notificationSystemCtrl as vm'
                }
            }
        }).state('app.notification.personal', {
            url: '/personal',
            data: {
                'tab': 3
            },
            views: {
                'personal': {
                    templateUrl: 'app/main/notification/tabs/personal/personal.html',
                    controller: 'notificationPersonalCtrl as vm'
                }
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.notification').controller('notificationPersonalCtrl', notificationPersonalCtrl);

    function notificationPersonalCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, network, message) {
        var vm = this;
        vm.personalNotification = personalNotification;
        vm.personalNotification();
        vm.newsLists = [];

        function personalNotification(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Category: 3,
                Limit: 50,
                LastId: ltId
            };
            network.Communication.Notification.Admin.getNotificationsByCategory(data).then(function(response) {
                vm.newsLists = vm.newsLists.concat(response);
                vm.hasData = response.length === data.Limit;
                $scope.$digest();
            }).catch(function() {
                vm.hasData = false;
                $scope.$digest();
            });
        }
        $rootScope.$on('updateNotification', function(event, data) {
            if (data.fresh) {
                vm.newsLists = [];
            }
            if (data.Category === 3) {
                vm.personalNotification();
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.notification').controller('notificationSpecialCtrl', notificationSpecialCtrl);

    function notificationSpecialCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, network) {
        var vm = this;
        vm.specialNotification = specialNotification;
        vm.specialNotification();
        vm.newsLists = [];

        function specialNotification(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Category: 2,
                Limit: 50,
                LastId: ltId
            };
            network.Communication.Notification.Admin.getNotificationsByCategory(data).then(function(response) {
                vm.newsLists = vm.newsLists.concat(response);
                vm.hasData = response.length === data.Limit;
                $scope.$digest();
            }).catch(function() {
                vm.hasData = false;
                $scope.$digest();
            });
        }
        $rootScope.$on('updateNotification', function(event, data) {
            if (data.Category === 2) {
                vm.specialNotification();
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.notification').controller('notificationSystemCtrl', notificationSystemCtrl);

    function notificationSystemCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, network) {
        var vm = this;
        vm.systemNotification = systemNotification;
        vm.systemNotification();
        vm.newsLists = [];

        function systemNotification(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Category: 0,
                Limit: 50,
                LastId: ltId
            };
            network.Communication.Notification.Admin.getNotificationsByCategory(data).then(function(response) {
                vm.newsLists = vm.newsLists.concat(response);
                vm.hasData = response.length === data.Limit;
                $scope.$digest();
            }).catch(function() {
                vm.hasData = false;
                $scope.$digest();
            });
        }
        $rootScope.$on('updateNotification', function(event, data) {
            console.log(data)
            if (data.Category === 0) {
                vm.systemNotification();
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.notification').controller('notificationNormalCtrl', notificationNormalCtrl);

    function notificationNormalCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, network) {
        var vm = this;
        vm.normalNotification = normalNotification;
        vm.normalNotification();
        vm.newsLists = [];

        function normalNotification(ltId) {
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                Category: 1,
                Limit: 50,
                LastId: ltId
            };
            network.Communication.Notification.Admin.getNotificationsByCategory(data).then(function(response) {
                vm.newsLists = vm.newsLists.concat(response);
                vm.hasData = response.length === data.Limit;
                $scope.$digest();
            }).catch(function() {
                vm.hasData = false;
                $scope.$digest();
            });
        }
        $rootScope.$on('updateNotification', function(event, data) {
            if (data.Category === 1) {
                vm.normalNotification();
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.my', []).config(config);

    function config($stateProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.my', {
            abstract: true,
            url: '/my'
        }).state('app.my.password', {
            url: '/password',
            views: {
                'content@app': {
                    templateUrl: 'app/main/my/password/password.html'
                },
                'password@app.my.password': {
                    templateUrl: 'app/main/my/password/password.template.html',
                    controller: 'passwordController as vm'
                }
            }
        }).state('app.my.telegram', {
            url: '/telegram',
            views: {
                'content@app': {
                    templateUrl: 'app/main/my/telegram/telegram.html',
                    controller: 'telegramCtrl as vm'
                }
            }
        }).state('app.my.otp', {
            url: '/otp',
            views: {
                'content@app': {
                    templateUrl: 'app/main/my/otp/otp.html'
                },
                'otpView@app.my.otp': {
                    templateUrl: 'app/main/my/otp/otp.template.html',
                    controller: 'otpController as vm'
                }
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.my').controller('cancelOtpCtrl', cancelOtpCtrl);

    function cancelOtpCtrl($rootScope, $mdDialog, message, $timeout, network) {
        let vm = this;
        vm.closeDialog = closeDialog;
        vm.cancelDialog = cancelDialog;
        vm.cancelOTP = cancelOTP;

        function closeDialog() {
            $mdDialog.hide();
        }

        function cancelDialog() {
            $mdDialog.cancel();
        }

        function cancelOTP() {
            vm.processing = true;
            network.User.disableMFA(vm.otp).then(function(resp) {
                if (resp) {
                    vm.closeDialog();
                    $timeout(function() {
                        message.info('Hủy xác minh 2 bước thành công.');
                    }, 500)
                }
            }).catch(function(err) {
                if (err.code === 'MFARequiredException') {
                    message.infoMultiple('Qúy khách bắt buộc phải sử dụng OTP')
                } else {
                    message.infoMultiple('OTP không hợp lệ')
                }
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('cancelTicketLegendCtrl', cancelTicketLegendCtrl);

    function cancelTicketLegendCtrl() {}
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendTermOpenCtrl', legendTermOpenCtrl);

    function legendTermOpenCtrl($scope, $state, $rootScope, $mdDialog, $timeout, network, message, msUtils, AuthService) {
        let vm = this;
        vm.createTerm = createTerm;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.minDate = new Date();
        vm.data = {
            GameType: '0',
            Fiscal: true
        };
        vm.data.DrawResultAt = moment().add(15, 'minute');

        function createTerm() {
            if (vm.data.DrawResultAt === undefined) {
                message.info('Vui lòng chọn giờ mở thưởng')
                return;
            }
            if (!vm.data.Fiscal && vm.data.FiscalDate === undefined) {
                message.info('Vui lòng chọn ngày tài chính')
                return;
            }
            vm.submitting = true;
            vm.data.DrawResultAt = moment(vm.data.DrawResultAt).toISOString();
            vm.data.FiscalDate = moment(vm.data.FiscalDate).toISOString();
            if (vm.data.Fiscal) {
                delete vm.data.FiscalDate
            }
            network.Games.Legend.Term.create(vm.data).then(function(response) {
                vm.submitting = false;
                $state.go('app.legendary.term')
            }).catch(function(error) {
                vm.submitting = false;
                message.info(error.message)
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendWinLoseCtrl', legendWinLoseCtrl);

    function legendWinLoseCtrl($scope, $state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.legendary.statement.win-lose') {
            $state.go('app.legendary.statement.win-lose.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendStatementTermCtrl', legendStatementTermCtrl);

    function legendStatementTermCtrl($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.legendary.statement.term') {
            $state.go('app.legendary.statement.term.date', {
                game: '0,1',
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendOutstandingCtrl', legendOutstandingCtrl);

    function legendOutstandingCtrl($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.legendary.statement.outstanding') {
            $state.go('app.legendary.statement.outstanding.general', {
                game: '0,1'
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.account', []).config(config);

    function config($stateProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.account', {
            abstract: true,
            url: '/account'
        }).state('app.account.agency', {
            url: '/agency?filter&group&page&match&type&sort&order&uid&level&name',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/agency/agency.html',
                    controller: 'agencyCtrl as vm'
                }
            }
        }).state('app.account.agency.child', {
            url: '/child?id&username&paging',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/agency/agency.html',
                    controller: 'agencyCtrl as vm'
                }
            }
        }).state('app.account.sub-account', {
            url: '/sub-account',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/sub-account/sub-account.html',
                    controller: 'subAccountCtrl as vm'
                }
            }
        }).state('app.account.tag-account', {
            url: '/tag-account',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/tag-account/tag-account.html',
                    controller: 'tagAccountCtrl as vm'
                }
            }
        }).state('app.account.parameter', {
            url: '/parameter',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/parameter/parameter.html',
                    controller: 'myParameterCtrl as vm'
                }
            }
        }).state('app.account.template', {
            url: '/template',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/template/template.html',
                    controller: 'memTemplateCtrl as vm'
                }
            }
        }).state('app.account.template.modify', {
            url: '/modify?id&action',
            views: {
                'content@app': {
                    templateUrl: 'app/main/account/template/modify/modify.template.html',
                    controller: 'modifyTemplateCtrl as vm'
                }
            }
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.account').controller('memLegendTemplateCtrl', memLegendTemplateCtrl);

    function memLegendTemplateCtrl($scope, $state, $timeout, network, AuthService) {
        var vm = this;
        vm.taskLists = [];
        vm.listTask = listTask;
        vm.loadMore = loadMore;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (AuthService.isSecondary()) {
            $state.go('app.forbidden');
            return;
        }
        vm.submitting = true;
        network.Games.Legend.PayoutsType.getAll().then(function(response) {
            vm.templates = response;
            vm.submitting = false;
            $scope.$digest();
            $timeout(function() {
                vm.listTask();
            }, 300)
        });

        function loadMore() {
            vm.listTask(vm.taskLists[vm.taskLists.length - 1].Id)
        }

        function listTask(LastId) {
            LastId = LastId = undefined ? '' : LastId;
            vm.loadingTask = true;
            network.Games.Legend.PriceChangeTask.list({
                LastId: LastId
            }).then(function(response) {
                vm.loadingTask = false;
                vm.taskLists = vm.taskLists.concat(response);
                vm.more = response.length === 20;
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendMemberController', legendMemberController);

    function legendMemberController($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.dashboard');
            return;
        }
        if ($state.current.name === 'app.legendary.statement.member') {
            $state.go('app.legendary.statement.member.executive', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('publicOddsLegendCtrl', publicOddsLegendCtrl);

    function publicOddsLegendCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, $http, $q, network, msUtils, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.updateUser = updateUser;

        function querySearch(text) {
            var result = network.User.searchLite({
                MatchName: text,
                Level: 9
            }).then(function(response) {
                return response
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            $timeout(function() {
                vm.selectedItem = item;
            }, 300)
        }

        function searchTextChange(item) {
            vm.selectedItem = undefined;
        }
        network.Games.Legend.PublicOdds.getSettings().then(function(response) {
            vm.publicUser = response.filter(function(t) {
                return t.Type === "PUBLIC_USER"
            })[0];
            $scope.$digest();
        });

        function updateUser() {
            network.Games.Legend.PublicOdds.updateUserPublicOdds({
                UserId: vm.selectedItem.Id
            }).then(function(response) {
                vm.publicUser = vm.selectedItem;
                vm.selectedItem = undefined;
                vm.searchText = '';
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('parameterLegendCtrl', parameterLegendCtrl);

    function parameterLegendCtrl($mdDialog, $filter, $state, $timeout, network, message, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.LegendaryGames = [0, 1];
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('livePriceLegendCtrl', livePriceLegendCtrl);

    function livePriceLegendCtrl($scope, $state, $timeout, network, msUtils, message, AuthService, BetType) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.checkBlue = checkBlue;
        vm.priceCalculation = priceCalculation;
        vm.resetPrice = resetPrice;
        vm.updatePrice = updatePrice;
        vm.resetPrice();

        function checkBlue(index) {
            return msUtils.exists(index, [4, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 26])
        }

        function priceCalculation() {
            network.Games.Legend.LoLive.calculatePrizePrice({
                GameType: 0,
                BetType: BetType,
                MinProfit: vm.prices.MinProfit,
                MaxProfit: vm.prices.MaxProfit,
                Price: vm.prices.Price,
            }).then(function(response) {
                response.sort(function(a, b) {
                    return b.PrizeNr - a.PrizeNr
                });
                vm.prices.Values = response;
                vm.reCal = true;
                $timeout(function() {
                    $scope.$digest();
                })
            })
        }

        function resetPrice() {
            vm.submitting = true;
            let data = {
                GameType: 0,
                BetType: BetType
            }
            network.Games.Legend.LoLive.getPrizePrices(data).then(function(response) {
                response.Values.sort(function(a, b) {
                    return b.PrizeNr - a.PrizeNr
                });
                vm.prices = response;
                vm.reCal = false;
                $timeout(function() {
                    vm.submitting = false;
                    $scope.$digest();
                })
            })
        }

        function updatePrice() {
            network.Games.Legend.LoLive.updatePrizePrice({
                GameType: 0,
                BetType: BetType,
                MinProfit: vm.prices.MinProfit,
                MaxProfit: vm.prices.MaxProfit,
                Price: vm.prices.Price,
                Commission: vm.prices.Commission,
            }).then(function(response) {
                if (response) {
                    message.info('Cập nhật giá thành công');
                    vm.reCal = false;
                }
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('liveNorthernLegendCtrl', liveNorthernLegendCtrl);

    function liveNorthernLegendCtrl($rootScope, $scope, $state, $interval, $timeout, $mdToast, $location, $stateParams, network, $mdDialog, message, AuthService, GameType, msUtils) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(256)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(128);
        vm.pingCount = 0;
        vm.loadCurrent = loadCurrent;
        vm.closedPrize = closedPrize;
        vm.reOpen = reOpen;
        vm.ping = ping;
        vm.openBet = openBet;
        vm.closeBet = closeBet;
        vm.currentTerm = currentTerm;
        vm.closeLotto = closeLotto;
        vm.updateResult = updateResult;
        vm.sendResult = sendResult;
        vm.getCurrentResult = getCurrentResult;
        vm.getPrizeResult = getPrizeResult;
        vm.JoinChanel = JoinChanel;
        vm.updateCurrentPrize = updateCurrentPrize;
        vm.pushNotifications = pushNotifications;
        vm.currentTerm();
        McSpeakerLotto789.init();

        function openBet() {
            if (!vm.hasWritePermission) {
                return
            }
            network.Games.Legend.LoLive.open({
                Term: vm.liveCurrent.Term,
                GameType: vm.liveCurrent.GameType
            }).then(function(response) {
                if (response) {
                    $interval.cancel(vm.promise);
                    vm.loadCurrent();
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function closeBet(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận').textContent('Đóng cược toàn bộ?').ariaLabel('Close all').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                network.Games.Legend.LoLive.close({
                    Term: vm.liveCurrent.Term,
                    GameType: vm.liveCurrent.GameType
                }).then(function(response) {
                    if (response) {
                        $interval.cancel(vm.promise);
                        vm.loadCurrent();
                        message.info('Đóng cược thành công')
                    }
                });
            })
        }

        function closedPrize(prize) {
            if (!vm.hasWritePermission) {
                return
            }
            network.Games.Legend.LoLive.closePrize({
                Term: vm.liveCurrent.Term,
                GameType: vm.liveCurrent.GameType,
                PrizeNr: prize
            }).then(function(response) {
                if (response.Result) {
                    vm.liveCurrent.PrizeNr--;
                    $timeout(function() {
                        $scope.$digest()
                    });
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function reOpen(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            let confirm = $mdDialog.confirm().title('Xác nhận mở lại Lô live').textContent('Vui lòng xác nhận đã đóng lại hết các giải đã mở thưởng trước khi mở lại cược!').ariaLabel('Re-Open').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                vm.ping(true)
            }, function() {});
        }

        function ping(ignore) {
            let acceptState = GameType === 0 ? 'app.legendary.loLive.northern' : 'app.legendary.loLive.southern';
            if ($state.current.name !== acceptState) {
                $interval.cancel(vm.promise);
                return;
            }
            if (!vm.hasWritePermission) {
                return
            }
            if (vm.liveCurrent.error === 'TimeExceeded' && !ignore) {
                $interval.cancel(vm.promise);
                return;
            }
            vm.pingCount++;
            if (vm.pingCount === 10) {
                vm.pingCount = 0;
                $interval.cancel(vm.promise);
                vm.loadCurrent();
            }
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.promise);
            Lotus.Lottery789.Realtime.unsubscribe();
            Lotus.Lottery789.Realtime.off("lottery789:general:event:1061", function() {})
        });

        function currentTerm() {
            network.Games.Legend.Term.latest({
                CheckBookKeepingReady: false
            }).then(function(response) {
                vm.aTerms = response;
                vm.currentTerm = response.filter(function(t) {
                    return t.GameType === GameType
                })[0].Term;
                vm.loadCurrent();
            })
        }

        function loadCurrent() {
            network.Games.Legend.LoLive.latest({
                Term: vm.currentTerm,
                GameType: GameType
            }).then(function(response) {
                vm.liveCurrent = response;
                $timeout(function() {
                    $scope.$digest();
                    vm.getCurrentResult();
                });
                vm.promise = $interval(function() {
                    vm.ping(false)
                }, 1000);
            })
        }

        function closeLotto($event) {
            console.log(vm.aTerms);
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === GameType
            })[0]);
            let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
            vm.selectedTermInfo.Games.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            });

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    if (data.GameType === 0) {
                        if (msUtils.exists(value.BetType, [1, 2, 3, 4, 6, 12, 14, 29])) {
                            $scope.selected.push(value.BetType)
                        }
                    } else {
                        if (msUtils.exists(value.BetType, [2, 3, 4, 7, 10, 15, 17, 19, 30])) {
                            $scope.selected.push(value.BetType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 0,
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide();
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function getCurrentResult() {
            network.Games.Legend.LotteryResult.getNorthernResultByTerm({
                Term: vm.currentTerm
            }).then(function(response) {
                vm.currentResult = response;
                $scope.$digest();
            }).catch(function(error) {
                vm.currentResult = {
                    "Jackpot": "",
                    "First": "",
                    "Second": ["", ""],
                    "Third": ["", "", "", "", "", ""],
                    "Fourth": ["", "", "", ""],
                    "Fiveth": ["", "", "", "", "", ""],
                    "Sixth": ["", "", ""],
                    "Seventh": ["", "", "", ""]
                };
            });
        }

        function updateResult($event, Prize, text) {
            let value = vm.getPrizeResult(Prize)
            let ran = msUtils.generatorNumber;
            if (value.length === 0 && ($location.host() === 'ag.nothing88.net' || $location.host() === 'localhost')) {
                if (msUtils.exists(Prize, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) {
                    value = ran(5);
                } else if (msUtils.exists(Prize, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) {
                    value = ran(4);
                } else if (msUtils.exists(Prize, [20, 21, 22])) {
                    value = ran(3);
                } else {
                    value = ran(2);
                }
                $mdToast.show($mdToast.simple().textContent('Kết quả được tạo ngẫu nhiên: ' + value).position("bottom right").hideDelay(3000));
            }
            let confirm = $mdDialog.prompt().title('Kết quả xổ số kiến thiết 789').textContent('Xác nhận kết quả xổ số ' + text).placeholder('Kết quả').ariaLabel('result').initialValue(value).targetEvent($event).clickOutsideToClose(true).required(true).ok('Okay!').cancel('cancel');
            $mdDialog.show(confirm).then(function(result) {
                vm.sendResult(result, Prize, text)
            }, function() {});
        }

        function sendResult(result, Prize, text) {
            if (msUtils.exists(Prize, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])) {
                if (!/^[0-9]{5}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 5 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) {
                if (!/^[0-9]{4}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 4 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [20, 21, 22])) {
                if (!/^[0-9]{3}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 3 chữ số.')
                    return;
                }
            } else {
                if (!/^[0-9]{2}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 2 chữ số.')
                    return;
                }
            }
            if (result === vm.getPrizeResult(Prize)) {
                message.infoMultiple('Nothing to change');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Second) && msUtils.exists(Prize, [2, 3])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 2 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Third) && msUtils.exists(Prize, [4, 5, 6, 7, 8, 9])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 3 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Fourth) && msUtils.exists(Prize, [10, 11, 12, 13])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 4 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Fiveth) && msUtils.exists(Prize, [14, 15, 16, 17, 18, 19])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 5 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Sixth) && msUtils.exists(Prize, [20, 21, 22])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 6 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            if (msUtils.exists(result, vm.currentResult.Seventh) && msUtils.exists(Prize, [23, 24, 25, 26])) {
                message.infoMultiple('Bộ số ' + result + ' đã nổ ở giải 7 rồi. Yêu cầu hiện trường quay lại');
                return;
            }
            let data = {
                Term: vm.currentTerm,
                Prize: Prize,
                Result: result,
            }
            McSpeakerLotto789.playResult(result);
            network.Games.Legend.LotteryResult.updateNorthernResultLive(data).then(function(response) {
                vm.updateCurrentPrize({
                    Prize: Prize,
                    Result: result
                })
            }).catch(function(error) {
                message.show(error.message)
            })
        }

        function getPrizeResult(Prize) {
            switch (Prize) {
                case 0:
                    return vm.currentResult.Jackpot
                case 1:
                    return vm.currentResult.First
                case 2:
                    return vm.currentResult.Second[0]
                case 3:
                    return vm.currentResult.Second[1]
                case 4:
                    return vm.currentResult.Third[0]
                case 5:
                    return vm.currentResult.Third[1]
                case 6:
                    return vm.currentResult.Third[2]
                case 7:
                    return vm.currentResult.Third[3]
                case 8:
                    return vm.currentResult.Third[4]
                case 9:
                    return vm.currentResult.Third[5]
                case 10:
                    return vm.currentResult.Fourth[0]
                case 11:
                    return vm.currentResult.Fourth[1]
                case 12:
                    return vm.currentResult.Fourth[2]
                case 13:
                    return vm.currentResult.Fourth[3]
                case 14:
                    return vm.currentResult.Fiveth[0]
                case 15:
                    return vm.currentResult.Fiveth[1]
                case 16:
                    return vm.currentResult.Fiveth[2]
                case 17:
                    return vm.currentResult.Fiveth[3]
                case 18:
                    return vm.currentResult.Fiveth[4]
                case 19:
                    return vm.currentResult.Fiveth[5]
                case 20:
                    return vm.currentResult.Sixth[0]
                case 21:
                    return vm.currentResult.Sixth[1]
                case 22:
                    return vm.currentResult.Sixth[2]
                case 23:
                    return vm.currentResult.Seventh[0]
                case 24:
                    return vm.currentResult.Seventh[1]
                case 25:
                    return vm.currentResult.Seventh[2]
                case 26:
                    return vm.currentResult.Seventh[3]
            }
        }

        function updateCurrentPrize(data) {
            switch (data.Prize) {
                case 0:
                    vm.currentResult.Jackpot = data.Result;
                    break;
                case 1:
                    vm.currentResult.First = data.Result;
                    break;
                case 2:
                    vm.currentResult.Second[0] = data.Result;
                    break;
                case 3:
                    vm.currentResult.Second[1] = data.Result;
                    break;
                case 4:
                    vm.currentResult.Third[0] = data.Result;
                    break;
                case 5:
                    vm.currentResult.Third[1] = data.Result;
                    break;
                case 6:
                    vm.currentResult.Third[2] = data.Result;
                    break;
                case 7:
                    vm.currentResult.Third[3] = data.Result;
                    break;
                case 8:
                    vm.currentResult.Third[4] = data.Result;
                    break;
                case 9:
                    vm.currentResult.Third[5] = data.Result;
                    break;
                case 10:
                    vm.currentResult.Fourth[0] = data.Result;
                    break;
                case 11:
                    vm.currentResult.Fourth[1] = data.Result;
                    break;
                case 12:
                    vm.currentResult.Fourth[2] = data.Result;
                    break;
                case 13:
                    vm.currentResult.Fourth[3] = data.Result;
                    break;
                case 14:
                    vm.currentResult.Fiveth[0] = data.Result;
                    break;
                case 15:
                    vm.currentResult.Fiveth[1] = data.Result;
                    break;
                case 16:
                    vm.currentResult.Fiveth[2] = data.Result;
                    break;
                case 17:
                    vm.currentResult.Fiveth[3] = data.Result;
                    break;
                case 18:
                    vm.currentResult.Fiveth[4] = data.Result;
                    break;
                case 19:
                    vm.currentResult.Fiveth[5] = data.Result;
                    break;
                case 20:
                    vm.currentResult.Sixth[0] = data.Result;
                    break;
                case 21:
                    vm.currentResult.Sixth[1] = data.Result;
                    break;
                case 22:
                    vm.currentResult.Sixth[2] = data.Result;
                    break;
                case 23:
                    vm.currentResult.Seventh[0] = data.Result;
                    break;
                case 24:
                    vm.currentResult.Seventh[1] = data.Result;
                    break;
                case 25:
                    vm.currentResult.Seventh[2] = data.Result;
                    break;
                case 26:
                    vm.currentResult.Seventh[3] = data.Result;
                    break;
            }
            $scope.$digest();
        }

        function JoinChanel() {
            Lotus.Lottery789.Realtime.subcribe().then(function() {
                Lotus.Lottery789.Realtime.on("lottery789:general:event:1061", function(data, message) {
                    vm.updateCurrentPrize(data)
                })
            })
        }
        $scope.$on('Realtime:connected', function() {
            vm.JoinChanel();
        })
        if ($rootScope.RealTime === 'connected') {
            vm.JoinChanel();
        }

        function pushNotifications($event) {
            $mdDialog.show({
                controller: pushNotificationsCtrl,
                templateUrl: 'app/main/legendary/loLive/dialog/notifications.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {
                    data: vm.currentResult
                }
            });

            function pushNotificationsCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.clear = function() {
                    $scope.setText = '';
                }
                $scope.setTemplate = function() {
                    $scope.setText = 'Do lỗi lồng cầu không ra bóng, chúng tôi tiến hành quay lại lồng cầu số';
                }
                $scope.setText = setText();
                $scope.current = vm.aTerms.filter(function(t) {
                    return t.GameType === GameType
                })[0];
                $scope.submit = function() {
                    if ($scope.setText === '') {
                        return
                    }
                    $scope.submitting = true;
                    let data = {
                        Term: $scope.current.Term,
                        GameType: $scope.current.GameType,
                        Message: $scope.setText,
                    }
                    network.Games.Legend.LoLive.notify(data).then(function(response) {
                        $mdDialog.cancel();
                    })
                }
            }

            function setText() {
                let obj = vm.currentResult;
                let countPrize = 0;
                Object.keys(obj).forEach(function(key) {
                    if (msUtils.exists(key, ['Jackpot', 'First', 'Second', 'Third', 'Fourth', 'Fiveth', 'Sixth', 'Seventh', 'Eighth'])) {
                        if (!Array.isArray(obj[key])) {
                            if (obj[key].length) {
                                countPrize++
                            }
                        } else {
                            for (let i = 0; i < obj[key].length; i++) {
                                if (obj[key][i].length) {
                                    countPrize++
                                }
                            }
                        }
                    }
                })
                switch (countPrize) {
                    case 1:
                        return 'Thực hiện quay lại giải nhì, bộ số thứ nhất vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 2:
                        return 'Thực hiện quay lại giải nhì, bộ số thứ hai vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 3:
                        return 'Thực hiện quay lại giải ba, bộ số thứ nhất vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 4:
                        return 'Thực hiện quay lại giải ba, bộ số thứ hai vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 5:
                        return 'Thực hiện quay lại giải ba, bộ số thứ ba vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 6:
                        return 'Thực hiện quay lại giải ba, bộ số thứ tư vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 7:
                        return 'Thực hiện quay lại giải ba, bộ số thứ năm vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 8:
                        return 'Thực hiện quay lại giải ba, bộ số thứ sáu vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 9:
                        return 'Thực hiện quay lại giải tư, bộ số thứ nhất vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 10:
                        return 'Thực hiện quay lại giải tư, bộ số thứ hai vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 11:
                        return 'Thực hiện quay lại giải tư, bộ số thứ ba vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 12:
                        return 'Thực hiện quay lại giải tư, bộ số thứ tư vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 13:
                        return 'Thực hiện quay lại giải năm, bộ số thứ nhất vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 14:
                        return 'Thực hiện quay lại giải năm, bộ số thứ hai vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 15:
                        return 'Thực hiện quay lại giải năm, bộ số thứ ba vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 16:
                        return 'Thực hiện quay lại giải năm, bộ số thứ tư vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 17:
                        return 'Thực hiện quay lại giải năm, bộ số thứ năm vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 18:
                        return 'Thực hiện quay lại giải năm, bộ số thứ sáu vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 19:
                        return 'Thực hiện quay lại giải sáu, bộ số thứ nhất vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 20:
                        return 'Thực hiện quay lại giải sáu, bộ số thứ hai vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 21:
                        return 'Thực hiện quay lại giải sáu, bộ số thứ ba vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 22:
                        return 'Thực hiện quay lại giải bảy, bộ số thứ nhất vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 23:
                        return 'Thực hiện quay lại giải bảy, bộ số thứ hai vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 24:
                        return 'Thực hiện quay lại giải bảy, bộ số thứ ba vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 25:
                        return 'Thực hiện quay lại giải bảy, bộ số thứ tư vì lý do trùng lặp kết quả với bộ số trước đó';
                    case 26:
                        return 'Thực hiện quay lại giải đặc biệt vì lý do trùng lặp kết quả với bộ số trước đó';
                }
            }
        }
        vm.speaker = {
            playNorthern: function(cond) {
                McSpeakerLotto789.playNorthern(cond);
                vm.voiceOff = true;
                $timeout(function() {
                    vm.voiceOff = false
                }, 3000)
            },
            playRedraw: function() {
                McSpeakerLotto789.playRedraw();
                vm.voiceOff = true;
                $timeout(function() {
                    vm.voiceOff = false
                }, 3000)
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('liveSouthernLegendCtrl', liveSouthernLegendCtrl);

    function liveSouthernLegendCtrl($rootScope, $scope, $state, $interval, $timeout, $stateParams, network, $mdDialog, message, AuthService, GameType, msUtils) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(256)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(128);
        vm.pingCount = 0;
        vm.loadCurrent = loadCurrent;
        vm.closedPrize = closedPrize;
        vm.reOpen = reOpen;
        vm.ping = ping;
        vm.openBet = openBet;
        vm.closeBet = closeBet;
        vm.currentTerm = currentTerm;
        vm.closeLotto = closeLotto;
        vm.updateResult = updateResult;
        vm.sendResult = sendResult;
        vm.getCurrentResult = getCurrentResult;
        vm.getPrizeResult = getPrizeResult;
        vm.JoinChanel = JoinChanel;
        vm.updateCurrentPrize = updateCurrentPrize;
        vm.pushNotifications = pushNotifications;
        vm.currentTerm();
        McSpeakerLotto789.init();

        function openBet() {
            if (!vm.hasWritePermission) {
                return
            }
            network.Games.Legend.LoLive.open({
                Term: vm.liveCurrent.Term,
                GameType: vm.liveCurrent.GameType
            }).then(function(response) {
                if (response) {
                    $interval.cancel(vm.promise);
                    vm.loadCurrent();
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function closeBet(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            var confirm = $mdDialog.confirm().title('Xác nhận').textContent('Đóng cược toàn bộ?').ariaLabel('Close all').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                network.Games.Legend.LoLive.close({
                    Term: vm.liveCurrent.Term,
                    GameType: vm.liveCurrent.GameType
                }).then(function(response) {
                    if (response) {
                        $interval.cancel(vm.promise);
                        vm.loadCurrent();
                        message.info('Đóng cược thành công')
                    }
                });
            })
        }

        function closedPrize(prize) {
            if (!vm.hasWritePermission) {
                return
            }
            network.Games.Legend.LoLive.closePrize({
                Term: vm.liveCurrent.Term,
                GameType: vm.liveCurrent.GameType,
                PrizeNr: prize
            }).then(function(response) {
                if (response.Result) {
                    vm.liveCurrent.PrizeNr--;
                    $timeout(function() {
                        $scope.$digest()
                    });
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function reOpen(ev) {
            if (!vm.hasWritePermission) {
                return
            }
            var confirm = $mdDialog.confirm().title('Xác nhận mở lại Lô live').textContent('Vui lòng xác nhận đã đóng lại hết các giải đã mở thưởng trước khi mở lại cược!').ariaLabel('Re-Open').targetEvent(ev).ok('Please do it!').cancel('Wait');
            $mdDialog.show(confirm).then(function() {
                vm.ping(true)
            }, function() {});
        }

        function ping(ignore) {
            let acceptState = GameType === 0 ? 'app.legendary.loLive.northern' : 'app.legendary.loLive.southern';
            if ($state.current.name !== acceptState) {
                $interval.cancel(vm.promise);
                return;
            }
            if (!vm.hasWritePermission) {
                return
            }
            if (vm.liveCurrent.error === 'TimeExceeded' && !ignore) {
                $interval.cancel(vm.promise);
                return;
            }
            if (vm.pingCount === 10) {
                vm.pingCount = 0;
                $interval.cancel(vm.promise);
                vm.loadCurrent();
            }
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.promise);
            Lotus.Lottery789.Realtime.unsubscribe();
            Lotus.Lottery789.Realtime.off("lottery789:general:event:1061", function() {})
        });

        function currentTerm() {
            network.Games.Legend.Term.latest({
                CheckBookKeepingReady: false
            }).then(function(response) {
                vm.aTerms = response;
                vm.currentTerm = response.filter(function(t) {
                    return t.GameType === GameType
                })[0].Term;
                vm.loadCurrent();
            })
        }

        function loadCurrent() {
            network.Games.Legend.LoLive.latest({
                Term: vm.currentTerm,
                GameType: GameType
            }).then(function(response) {
                vm.liveCurrent = response;
                $timeout(function() {
                    vm.getCurrentResult();
                    $scope.$digest()
                });
                vm.promise = $interval(function() {
                    vm.ping(false)
                }, 1000);
            })
        }

        function closeLotto($event) {
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === GameType
            })[0]);
            let order = [0, 1, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
            vm.selectedTermInfo.Games.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            });

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    if (data.GameType === 0) {
                        if (msUtils.exists(value.BetType, [1, 2, 3, 4, 6, 12, 14, 29])) {
                            $scope.selected.push(value.BetType)
                        }
                    } else {
                        if (msUtils.exists(value.BetType, [2, 3, 4, 7, 10, 15, 17, 19, 30])) {
                            $scope.selected.push(value.BetType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 0,
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide();
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function getCurrentResult() {
            network.Games.Legend.LotteryResult.getSouthernResultByTerm({
                Term: vm.currentTerm
            }).then(function(response) {
                console.log(response)
                vm.currentResult = response;
                $scope.$digest();
            }).catch(function(error) {
                vm.currentResult = {
                    "Jackpot": "",
                    "First": "",
                    "Second": "",
                    "Third": ["", ""],
                    "Fourth": ["", "", "", "", "", "", ""],
                    "Fiveth": "",
                    "Sixth": ["", "", ""],
                    "Seventh": "",
                    "Eighth": ""
                };
            });
        }

        function updateResult($event, Prize, text) {
            let value = vm.getPrizeResult(Prize)
            let confirm = $mdDialog.prompt().title('Kết quả xổ số kiến thiết 789').textContent('Xác nhận kết quả xổ số ' + text).placeholder('Kết quả').ariaLabel('result').initialValue(value).targetEvent($event).clickOutsideToClose(true).required(true).ok('Okay!').cancel('cancel');
            $mdDialog.show(confirm).then(function(result) {
                vm.sendResult(result, Prize, text)
            }, function() {});
        }

        function sendResult(result, Prize, text) {
            if (msUtils.exists(Prize, [0])) {
                if (!/^[0-9]{6}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 6 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) {
                if (!/^[0-9]{5}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 5 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [12, 13, 14, 15])) {
                if (!/^[0-9]{4}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 4 chữ số.')
                    return;
                }
            } else if (msUtils.exists(Prize, [16])) {
                if (!/^[0-9]{3}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 3 chữ số.')
                    return;
                }
            } else {
                if (!/^[0-9]{2}$/.test(result)) {
                    message.infoMultiple(text.charAt(0).toUpperCase() + text.substring(1) + ' phải chính xác 2 chữ số.')
                    return;
                }
            }
            if (result === vm.getPrizeResult(Prize)) {
                message.infoMultiple('Nothing to change');
                return;
            }
            let data = {
                Term: vm.currentTerm,
                Prize: Prize,
                Result: result,
            }
            McSpeakerLotto789.playResult(result);
            network.Games.Legend.LotteryResult.updateSouthernResultLive(data).then(function(response) {
                vm.updateCurrentPrize({
                    Prize: Prize,
                    Result: result
                })
            }).catch(function(error) {
                message.show(error.message)
            })
        }

        function getPrizeResult(Prize) {
            switch (Prize) {
                case 0:
                    return vm.currentResult.Jackpot
                case 1:
                    return vm.currentResult.First
                case 2:
                    return vm.currentResult.Second
                case 3:
                    return vm.currentResult.Third[1]
                case 4:
                    return vm.currentResult.Third[0]
                case 5:
                    return vm.currentResult.Fourth[6]
                case 6:
                    return vm.currentResult.Fourth[5]
                case 7:
                    return vm.currentResult.Fourth[4]
                case 8:
                    return vm.currentResult.Fourth[3]
                case 9:
                    return vm.currentResult.Fourth[2]
                case 10:
                    return vm.currentResult.Fourth[1]
                case 11:
                    return vm.currentResult.Fourth[0]
                case 12:
                    return vm.currentResult.Fiveth
                case 13:
                    return vm.currentResult.Sixth[2]
                case 14:
                    return vm.currentResult.Sixth[1]
                case 15:
                    return vm.currentResult.Sixth[0]
                case 16:
                    return vm.currentResult.Seventh
                case 17:
                    return vm.currentResult.Eighth
            }
        }

        function updateCurrentPrize(data) {
            switch (data.Prize) {
                case 0:
                    vm.currentResult.Jackpot = data.Result;
                    break;
                case 1:
                    vm.currentResult.First = data.Result;
                    break;
                case 2:
                    vm.currentResult.Second = data.Result;
                    break;
                case 3:
                    vm.currentResult.Third[1] = data.Result;
                    break;
                case 4:
                    vm.currentResult.Third[0] = data.Result;
                    break;
                case 5:
                    vm.currentResult.Fourth[6] = data.Result;
                    break;
                case 6:
                    vm.currentResult.Fourth[5] = data.Result;
                    break;
                case 7:
                    vm.currentResult.Fourth[4] = data.Result;
                    break;
                case 8:
                    vm.currentResult.Fourth[3] = data.Result;
                    break;
                case 9:
                    vm.currentResult.Fourth[2] = data.Result;
                    break;
                case 10:
                    vm.currentResult.Fourth[1] = data.Result;
                    break;
                case 11:
                    vm.currentResult.Fourth[0] = data.Result;
                    break;
                case 12:
                    vm.currentResult.Fiveth = data.Result;
                    break;
                case 13:
                    vm.currentResult.Sixth[2] = data.Result;
                    break;
                case 14:
                    vm.currentResult.Sixth[1] = data.Result;
                    break;
                case 15:
                    vm.currentResult.Sixth[0] = data.Result;
                    break;
                case 16:
                    vm.currentResult.Seventh = data.Result;
                    break;
                case 17:
                    vm.currentResult.Eighth = data.Result;
                    break;
            }
            $scope.$digest();
        }

        function JoinChanel() {
            Lotus.Lottery789.Realtime.subcribe().then(function() {
                Lotus.Lottery789.Realtime.on("lottery789:general:event:1061", function(data, message) {
                    vm.updateCurrentPrize(data)
                })
            })
        }
        $scope.$on('Realtime:connected', function() {
            vm.JoinChanel();
        })
        if ($rootScope.RealTime === 'connected') {
            vm.JoinChanel();
        }

        function pushNotifications($event) {
            $mdDialog.show({
                controller: pushNotificationsCtrl,
                templateUrl: 'app/main/legendary/loLive/dialog/notifications.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.currentResult
                }
            });

            function pushNotificationsCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.clear = function() {
                    $scope.setText = '';
                }
                $scope.setTemplate = function() {
                    $scope.setText = 'Do lỗi lồng cầu không ra bóng, chúng tôi tiến hành quay lại lồng cầu số';
                }
                $scope.setText = setText();
                $scope.current = vm.aTerms.filter(function(t) {
                    return t.GameType === GameType
                })[0];
                $scope.submit = function() {
                    if ($scope.setText === '') {
                        return
                    }
                    $scope.submitting = true;
                    let data = {
                        Term: $scope.current.Term,
                        GameType: $scope.current.GameType,
                        Message: $scope.setText,
                    }
                    network.Games.Legend.LoLive.notify(data).then(function(response) {
                        $mdDialog.cancel();
                    })
                }
            }

            function setText() {
                let obj = vm.currentResult;
                let countPrize = 0;
                Object.keys(obj).forEach(function(key) {
                    if (msUtils.exists(key, ['Jackpot', 'First', 'Second', 'Third', 'Fourth', 'Fiveth', 'Sixth', 'Seventh', 'Eighth'])) {
                        if (!Array.isArray(obj[key])) {
                            if (obj[key].length) {
                                countPrize++
                            }
                        } else {
                            for (let i = 0; i < obj[key].length; i++) {
                                if (obj[key][i].length) {
                                    countPrize++
                                }
                            }
                        }
                    }
                })
                switch (countPrize) {
                    case 1:
                        return 'Thực hiện quay lại giải bảy';
                    case 2:
                        return 'Thực hiện quay lại giải sáu, bộ số thứ nhất';
                    case 3:
                        return 'Thực hiện quay lại giải sáu, bộ số thứ hai';
                    case 4:
                        return 'Thực hiện quay lại giải sáu, bộ số thứ ba';
                    case 5:
                        return 'Thực hiện quay lại giải năm';
                    case 6:
                        return 'Thực hiện quay lại giải tư, bộ số thứ nhất';
                    case 7:
                        return 'Thực hiện quay lại giải tư, bộ số thứ hai';
                    case 8:
                        return 'Thực hiện quay lại giải tư, bộ số thứ ba';
                    case 9:
                        return 'Thực hiện quay lại giải tư, bộ số thứ tư';
                    case 10:
                        return 'Thực hiện quay lại giải tư, bộ số thứ năm';
                    case 11:
                        return 'Thực hiện quay lại giải tư, bộ số thứ sáu';
                    case 12:
                        return 'Thực hiện quay lại giải tư, bộ số thứ bảy';
                    case 13:
                        return 'Thực hiện quay lại giải ba, bộ số thứ nhất';
                    case 14:
                        return 'Thực hiện quay lại giải ba, bộ số thứ hai';
                    case 15:
                        return 'Thực hiện quay lại giải nhì';
                    case 16:
                        return 'Thực hiện quay lại giải nhất';
                    case 17:
                        return 'Thực hiện quay lại giải đặc biệt';
                }
            }
        }
        vm.speaker = {
            playSouthern: function(cond) {
                McSpeakerLotto789.playSouthern(cond);
                vm.voiceOff = true;
                $timeout(function() {
                    vm.voiceOff = false
                }, 3000)
            },
            playRedraw: function() {
                McSpeakerLotto789.playRedraw();
                vm.voiceOff = true;
                $timeout(function() {
                    vm.voiceOff = false
                }, 3000)
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.history', []).config(config);

    function config($stateProvider, $translatePartialLoaderProvider, msApiProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.history', {
            abstract: true,
            url: '/history',
        }).state('app.history.account', {
            url: '/account',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/account/account.html',
                    controller: 'historyAccountCtrl as vm'
                }
            }
        }).state('app.history.price', {
            url: '/price',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/price/price.html',
                    controller: 'historyPriceCtrl as vm'
                }
            }
        }).state('app.history.loLive', {
            url: '/loLive',
            abstract: true,
        }).state('app.history.loLive.traditional', {
            url: '/traditional',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/live/traditional/live.html',
                    controller: 'historyLiveCtrl as vm'
                }
            }
        }).state('app.history.loLive.legendary', {
            url: '/legendary',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/live/legendary/live.html',
                    controller: 'historyLiveLegendCtrl as vm'
                }
            }
        }).state('app.history.login', {
            url: '/login',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/price/price.html',
                    controller: 'parameterCtrl as vm'
                }
            }
        }).state('app.history.balance', {
            url: '/balance',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/balance/balance.html',
                    controller: 'balanceCtrl as vm'
                }
            }
        }).state('app.history.casino', {
            url: '/casino',
            abstract: true,
        }).state('app.history.casino.activity', {
            url: '/activity',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/casino/activity/activity.html',
                    controller: 'casinoActivityCtrl as vm'
                }
            }
        }).state('app.history.casino.activity-user', {
            url: '/activity-user',
            views: {
                'content@app': {
                    templateUrl: 'app/main/history/casino/activity-by-user/activity-by-user.html',
                    controller: 'casinoUserActivityCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.history').controller('historyLiveCtrl', historyLiveCtrl);

    function historyLiveCtrl($state, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.checkHistory = checkHistory;
        vm.history = [];
        vm.termHistory = [];
        var z = 0;
        for (var y = z; y < 20; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc 1'
        }, {
            id: 1,
            name: 'Miền Bắc 2'
        }];

        function checkHistory() {
            let data = {
                Term: vm.form.term,
                GameType: vm.form.game,
                Size: 100,
                Page: 1
            };
            vm.history = [];
            vm.submitting = true;
            network.Logging.ActivityLottery.searchLoLiveActivity(data).then(function(response) {
                console.log(response);
                vm.history = response.Records;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.history').controller('historyLiveLegendCtrl', historyLiveLegendCtrl);

    function historyLiveLegendCtrl($state, $timeout, network, AuthService) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.checkHistory = checkHistory;
        vm.history = [];
        vm.termHistory = [];
        vm.termRound = [];
        let z = 0;
        for (let y = z; y < 20; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
            vm.termRound.push(y + 1)
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc'
        }, {
            id: 1,
            name: 'Miền Nam'
        }];

        function checkHistory() {
            let data = {
                Term: vm.form.term + '.' + vm.form.subTerm,
                GameType: vm.form.game,
                Size: 100,
                Page: 1
            };
            vm.history = [];
            vm.submitting = true;
            network.Logging.Legend.searchLiveActivity(data).then(function(response) {
                vm.history = response.Records;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('fuse', ['app.core', 'app.statistical', 'app.navigation', 'app.toolbar', 'app.quick-panel', 'app.forbidden', 'app.must-change-password', 'app.auth', 'app.my', 'app.history', 'app.dashboard', 'app.accounting', 'app.notification', 'app.announcements', 'app.account', 'app.traditional', 'app.legendary', 'app.casino789', 'app.wm-casino', 'app.presidential', 'app.saba', ]);
})();
(function() {
    'use strict';
    angular.module('fuse').controller('casinoUserActivityCtrl', casinoUserActivityCtrl);

    function casinoUserActivityCtrl($scope, $state, $timeout, network, AuthService, message) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.history = [];
        vm.form = {};
        vm.Records = [];
        vm.hasData = false;
        vm.loadDone = false;
        vm.max = moment();
        vm.form.start = moment().startOf('day');
        vm.form.start = moment().startOf('month');
        vm.form.end = moment();
        vm.checkHistory = checkHistory;
        vm.activityLabel = activityLabel;
        vm.selectActivity = selectActivity;
        vm.selectAllActivity = selectAllActivity;
        vm.ActivityTypes = [{
            id: 0,
            name: "Cập nhật chung"
        }, {
            id: 1,
            name: "Kết sổ"
        }, {
            id: 2,
            name: "Kết sổ lại"
        }, {
            id: 3,
            name: "Huỷ ván sau khi kết sổ"
        }, {
            id: 4,
            name: "Dealer huỷ ván chơi game"
        }, {
            id: 5,
            name: "Thay đổi kết quả"
        }, ];
        angular.forEach(vm.ActivityTypes, function(product) {
            product.active = true;
        });
        vm.activityLabel();

        function activityLabel() {
            let checkLength = vm.ActivityTypes.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.ActivityTypes.length) {
                vm.textActivityLabel = 'Tất cả hoạt động'
            } else if (checkLength.length === 0) {
                vm.textActivityLabel = 'Chọn loại hoạt động'
            } else if (checkLength.length === 1) {
                vm.textActivityLabel = checkLength[0].name
            } else {
                vm.textActivityLabel = checkLength.length + ' hoạt động'
            }
        }

        function selectActivity(item) {
            angular.forEach(vm.ActivityTypes, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.activityLabel();
        }

        function selectAllActivity() {
            let checkLength = vm.ActivityTypes.filter(function(p) {
                return p.active
            }).length === vm.ActivityTypes.length;
            angular.forEach(vm.ActivityTypes, function(product) {
                product.active = !checkLength;
            });
            vm.activityLabel();
        }

        function checkHistory(page) {
            if (page === undefined) {
                vm.Records = [];
                vm.hasData = false;
                vm.loadDone = false;
            }
            vm.submitting = true;
            let data = {
                Username: vm.Username,
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                ActivityType: [],
                Size: 100,
            };
            data.Page = page === undefined ? 1 : page;
            angular.forEach(vm.ActivityTypes, function(product) {
                if (product.active) {
                    data.ActivityType.push(product.id)
                }
            });
            if (data.ActivityType.length === vm.ActivityTypes.length || data.ActivityType.length === 0) {
                delete data.ActivityType
            }
            network.Logging.LegendCasino.Sedie.searchGameActivityByUser(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000);
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message)
                $timeout(function() {
                    vm.submitting = false;
                }, 1000);
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('fuse').controller('casinoActivityCtrl', casinoActivityCtrl);

    function casinoActivityCtrl($scope, $state, $timeout, network, AuthService, message) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.checkHistory = checkHistory;
        vm.AreaNumber = 100;

        function checkHistory(page) {
            if (vm.GameRound === undefined || vm.GameRound.length === 0 || vm.GameNumber === undefined || vm.GameNumber.length === 0) {
                message.show('Tìm chính xác theo Game Number và Game Round')
                return
            }
            if (page === undefined) {
                vm.Records = [];
                vm.hasData = false;
                vm.loadDone = false;
            }
            vm.submitting = true;
            let data = {
                AreaNumber: vm.AreaNumber,
                GameNumber: vm.GameNumber,
                GameRound: vm.GameRound,
                Size: 100,
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.LegendCasino.Sedie.searchGameActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000);
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message)
                $timeout(function() {
                    vm.submitting = false;
                }, 1000);
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoWinLoseCtrl', casinoWinLoseCtrl);

    function casinoWinLoseCtrl($scope, $state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.casino789.statement.win-lose') {
            $state.go('app.casino789.statement.win-lose.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('casinoMemberController', casinoMemberController);

    function casinoMemberController($state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.dashboard');
            return;
        }
        if ($state.current.name === 'app.casino789.statement.member') {
            $state.go('app.casino789.statement.member.executive', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('wmMemberCtrl', wmMemberCtrl);

    function wmMemberCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = $location.search().game;
        vm.data.betType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.name = $location.search().name;
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.WMCasino.Statement.getBetItems(vm.data).then(function(response) {
                vm.loadMore = response.length === 25;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.accounting').controller('wmGeneralCtrl', wmGeneralCtrl);

    function wmGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '' : parseInt($location.search().game);
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }]
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        } else {
            vm.dtOptions.columnDefs.push({
                targets: 2,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.accounting.combination.winLose.general.casino", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.accounting.combination.winLose.general.casino.member", {
                game: item.GameType
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: [vm.report.game],
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            if (vm.report.game === '') {
                delete vm.data.GameTypes
            }
            network.Reporting.WMCasino.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                GameTypes: [vm.report.game]
            };
            if (vm.report.game === '') {
                delete vm.data.GameTypes
            }
            network.Reporting.WMCasino.Statement.getPlayerReportGroupByGameType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('wmClassificationCtrl', wmClassificationCtrl);

    function wmClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            GameTypes: ''
        };
        network.Reporting.WMCasino.Statement.getUserReportGroupByGameType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    Company: 0
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        GameType: bet.GameType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            NetAmount: bet.Player.NetAmount,
                            Commission: bet.Player.Commission,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        GrossCommission: bet.GrossCommission,
                        Company: (bet.Commission + bet.WinLose),
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.NetAmount += bet.Player.NetAmount;
                    vm.SumTotal.Player.Commission += bet.Player.Commission;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                    vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                });
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    Company: 0,
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        GameType: bet.GameType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        GrossCommission: bet.GrossCommission,
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose),
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Commission;
                    vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                });
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    Company: 0,
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        GameType: bet.GameType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            NetAmount: bet.Player.NetAmount,
                            Commission: bet.Player.Commission,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        My: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        GrossCommission: bet.GrossCommission,
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose),
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.NetAmount += bet.Player.NetAmount;
                    vm.SumTotal.Player.Commission += bet.Player.Commission;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.My.WinLose += bet.WinLose;
                    vm.SumTotal.My.Commission += bet.Commission;
                    vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                });
            }
        }

        function classify(GameType) {
            $state.go('app.accounting.combination.winLose.general.casino', {
                from: vm.report.from,
                to: vm.report.to,
                game: GameType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('sabaMemberCtrl', sabaMemberCtrl);

    function sabaMemberCtrl($rootScope, $scope, $state, $stateParams, $location, $timeout, msUtils, network, $mdDialog, AuthService, sabaBetTypes, sabaBetTypesVN) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.localParlayData = sessionStorage.getItem('Parlay') === null ? {} : JSON.parse(sessionStorage.getItem('Parlay'));
        if (vm.localParlayData.Teams === undefined) {
            vm.localParlayData.Teams = []
        }
        if (vm.localParlayData.Leagues === undefined) {
            vm.localParlayData.Leagues = []
        }
        if (vm.localParlayData.Matchs === undefined) {
            vm.localParlayData.Matchs = []
        }
        vm.sabaBetTypes = sabaBetTypes.data;
        vm.sabaBetTypesVN = sabaBetTypesVN.data;
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.From = $stateParams.from === undefined ? moment().unix() : $stateParams.from;
        vm.data.To = $stateParams.to === undefined ? moment().unix() : $stateParams.to;
        vm.data.UserId = $stateParams.uid;
        vm.data.SportGroup = parseInt($stateParams.sport);
        vm.data.Limit = 100;
        vm.data.name = $stateParams.name;
        vm.loadMemberReport();
        vm.getLeagueName = getLeagueName;
        vm.ParlayDetails = ParlayDetails;
        vm.showParlayData = showParlayData;
        vm.updateParlayData = updateParlayData;
        vm.getMatch = getMatch;
        vm.updateLeagueInfo = updateLeagueInfo;
        vm.getRNGBetItems = getRNGBetItems;
        vm.ticketResult = ticketResult;
        vm.ticketResultSingleParlay = ticketResultSingleParlay;
        vm.ticketResultIsLive = ticketResultIsLive;
        vm.ticketResultSystemParlay = ticketResultSystemParlay;
        vm.showScore = showScore;
        vm.viewIp = viewIp;
        vm.members = [];
        let MatchIds = [];

        function loadMemberReport(LastTx) {
            LastTx = LastTx === undefined ? '' : LastTx;
            vm.data.LastTx = LastTx;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            Lotus.Saba.Report.Statement.getBetItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                response.map(function(item) {
                    if (vm.data.SportGroup === 2 || vm.data.SportGroup === 1) {
                        MatchIds.push(item.MatchId)
                    }
                    matchingData(item);
                    if (item.ParlayType === 'MixParlay' && item.ParlayData.length) {
                        item.nOdds = 1;
                        item.ParlayData.map(function(par) {
                            item.nOdds = item.nOdds * par.Odds
                        })
                    }
                })
                MatchIds = MatchIds.filter(function(item, index, inputArray) {
                    return inputArray.indexOf(item) === index;
                });
                if (MatchIds.length) {
                    vm.getMatch(MatchIds).then(function(MatchInfo) {
                        response.map(function(item) {
                            let findMatch = MatchInfo.filter(function(match) {
                                return match.MatchId === item.MatchId;
                            })
                            if (findMatch.length) {
                                item.MatchDetails = findMatch[0]
                            }
                        })
                        vm.members = vm.members.concat(response);
                        $timeout(function() {
                            $scope.$digest();
                        }, 10)
                    })
                } else {
                    vm.members = vm.members.concat(response);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function showParlayData(item) {
            if (item.showParlay) {
                item.showParlay = !item.showParlay;
            } else {
                item.parlayUpdating = true;
                vm.updateParlayData(item).then(function(response) {
                    item.parlayUpdating = false;
                    item.showParlay = !item.showParlay;
                    $timeout(function() {
                        $scope.$digest();
                    }, 10)
                })
            }
        }

        function updateParlayData(item) {
            let PromiseTeamIds = []
            let PromiseLeagueIds = []
            item.ParlayData.map(function(parlay) {
                PromiseTeamIds.push(parlay.HomeId)
                PromiseTeamIds.push(parlay.AwayId);
                PromiseLeagueIds.push(parlay.LeagueId)
            })
            PromiseTeamIds = PromiseTeamIds.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            PromiseLeagueIds = PromiseLeagueIds.filter(function(item, index, inputArray) {
                return inputArray.indexOf(item) === index;
            });
            let promiseTeams = PromiseTeamIds.map(function(id) {
                return getTeamName(id)
            })
            return Promise.all(promiseTeams).then(function() {
                item.ParlayData.map(function(parlay) {
                    let findHome = vm.localParlayData.Teams.filter(function(team) {
                        return team.Id === parlay.HomeId
                    })[0];
                    let findAway = vm.localParlayData.Teams.filter(function(team) {
                        return team.Id === parlay.AwayId
                    })[0];
                    parlay.HomeTeamNameEn = findHome.Name
                    parlay.AwayTeamNameEn = findAway.Name
                    matchingData(parlay);
                })
                let promiseLeagues = PromiseLeagueIds.map(function(id) {
                    return getLeagueName(id)
                })
                return Promise.all(promiseLeagues).then(function() {
                    item.ParlayData.map(function(parlay) {
                        let findLeague = vm.localParlayData.Leagues.filter(function(League) {
                            return League.Id === parlay.LeagueId
                        })[0];
                        parlay.LeagueNameEn = findLeague.Name
                    })
                    return true
                })
            }).catch(function(e) {
                console.log(e);
            });
        }

        function getTeamName(id) {
            let find = vm.localParlayData.Teams.filter(function(team) {
                return team.Id === id
            })
            if (find.length !== 0) {
                return find[0]
            } else {
                return Lotus.Saba.Team.getTeamName({
                    TeamId: id
                }).then(function(response) {
                    response.Id = id
                    vm.localParlayData.Teams.push(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return response
                })
            }
        }

        function getLeagueName(id) {
            let find = vm.localParlayData.Leagues.filter(function(team) {
                return team.Id === id
            })
            if (find.length !== 0) {
                return $timeout(function() {
                    return find[0]
                })
            } else {
                return Lotus.Saba.League.getLeagueName({
                    LeagueId: id
                }).then(function(response) {
                    response.Id = id
                    vm.localParlayData.Leagues.push(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return response
                })
            }
        }

        function ParlayDetails(item, $event) {
            $mdDialog.show({
                controller: ParlayDetailsCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/dialog.parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function ParlayDetailsCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.MixParlay = item.ParlayType === 'MixParlay';
                if (item.ParlayType === 'MixParlay') {
                    vm.updateParlayData(item).then(function() {
                        $scope.ticket = item;
                        $timeout(function() {
                            $scope.$digest();
                        }, 10)
                    })
                } else {
                    let TeamIds = [];
                    Lotus.Saba.Report.Statement.getSystemParlayDetails({
                        RefNo: item.ParlayRefNo
                    }).then(function(response) {
                        response.map(function(item) {
                            if (item.SystemParlayDetail.length) {
                                item.nOdds = 1;
                                item.SystemParlayDetail.map(function(par) {
                                    item.nOdds = item.nOdds * par.Odds;
                                    TeamIds.push(par.HomeId)
                                    TeamIds.push(par.AwayId);
                                })
                            }
                        })
                        TeamIds = TeamIds.filter(function(item, index, inputArray) {
                            return inputArray.indexOf(item) === index;
                        });
                        let promises = TeamIds.map(function(id) {
                            return getTeamName(id)
                        })
                        Promise.all(promises).then(function(teams) {
                            response.map(function(item) {
                                if (item.SystemParlayDetail.length) {
                                    item.SystemParlayDetail.map(function(par) {
                                        par.HomeTeamNameEn = teams.filter(function(tea) {
                                            return tea.Id === par.HomeId
                                        })[0].Name;
                                        par.AwayTeamNameEn = teams.filter(function(tea) {
                                            return tea.Id === par.AwayId
                                        })[0].Name;
                                    })
                                }
                            })
                            $scope.SystemParlay = response;
                            $timeout(function() {
                                $scope.$digest()
                            }, 10)
                        })
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }

        function matchingData(item) {
            let data = vm.sabaBetTypes.filter(function(bet) {
                return bet.i === item.BetType
            });
            let vn = vm.sabaBetTypesVN.filter(function(bet) {
                return bet.i === item.BetType
            })
            item.BetTypeTrans = vn.length !== 0 ? vn[0].n : item.BetType;
            if (vn.length === 0) {
                item.BetTypeTrans = data.length !== 0 ? data[0].n : item.BetType;
            }
            if (data.length !== 0) {
                if (data[0].t !== undefined) {
                    let trans = data[0].t[item.BetTeam];
                    item.BetTeamTrans = trans;
                    if (msUtils.exists(vm.data.SportGroup, [0, 2]) && trans !== undefined) {
                        if (trans.includes('home')) {
                            if (item.HomeTeamNameEn !== undefined) {
                                item.BetTeamTrans = trans.replace(/home/g, item.HomeTeamNameEn);
                            }
                        }
                        if (trans.includes('away')) {
                            if (item.HomeTeamNameEn !== undefined) {
                                item.BetTeamTrans = trans.replace(/away/g, item.AwayTeamNameEn);
                            }
                        }
                    }
                } else {
                    item.BetTeamTrans = item.BetTeam;
                }
                if (item.BetType === 5) {
                    item.BetTeamTrans = 'FT.' + item.BetTeam;
                    item.HomeHdp = '';
                    item.AwayHdp = ''
                }
                if (item.BetType === 15) {
                    item.BetTeamTrans = 'HT.' + item.BetTeam;
                    item.HomeHdp = '';
                    item.AwayHdp = ''
                }
            } else {
                item.BetTeamTrans = item.BetTeam;
            }
            if (item.BetType === 10) {
                item.BetTeamTrans = getTeamName(item.BetTeam).Name;
            }
            if (item.LotteryBetType !== undefined) {
                item.LotteryBetType = convertSpecialNumberBetType(item.LotteryBetType)
            }
        }

        function convertSpecialNumberBetType(txt) {
            const prefix = 'special number';
            if (txt.startsWith(prefix)) {
                if (txt.length === prefix.length) {
                    return "number select";
                }
                return txt.slice(prefix.length).trim();
            }
            return txt;
        }

        function getMatch(arItem) {
            let Existed = [],
                ExistedId = [];
            vm.localParlayData.Matchs.map(function(item) {
                if (msUtils.exists(item.MatchId, arItem)) {
                    Existed.push(item);
                    ExistedId.push(item.MatchId);
                }
            })
            let dnExist = arItem.filter(function(item) {
                return ExistedId.indexOf(item) === -1;
            });
            if (dnExist.length === 0) {
                return $timeout(function() {
                    return Existed
                })
            } else {
                return Lotus.Saba.Match.getMatchDetails({
                    MatchIds: dnExist
                }).then(function(response) {
                    vm.localParlayData.Matchs = Existed.concat(response);
                    sessionStorage.setItem('Parlay', JSON.stringify(vm.localParlayData));
                    return vm.localParlayData.Matchs
                })
            }
        }

        function updateLeagueInfo(item) {
            vm.getLeagueName(item.MatchDetails.LeagueId).then(function(response) {
                item.LeagueName = response.Name;
                $timeout(function() {
                    $scope.$digest();
                })
            })
        }

        function ticketResult(item, $event) {
            if (vm.data.SportGroup === 0 && item.SingleParlayData !== undefined) {
                vm.ticketResultSingleParlay(item, $event);
            } else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType !== 'System Parlay' && item.ParlayType !== 'MixParlay') {
                vm.ticketResultIsLive(item, $event);
            } else if (vm.data.SportGroup === 0 && item.SingleParlayData === undefined && (item.ParlayType === 'System Parlay' || item.ParlayType === 'MixParlay')) {
                vm.ticketResultSystemParlay(item, $event);
            } else if (vm.data.SportGroup === 2) {
                vm.ticketResultIsLive(item, $event);
            }
        }

        function ticketResultSingleParlay(item, $event) {
            $mdDialog.show({
                controller: resultSingleParlayCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/result/single-parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function resultSingleParlayCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.item = item;
                vm.getMatch([item.MatchId]).then(function(response) {
                    $scope.item.MatchDetails = response[0];
                    $timeout(function() {
                        $scope.$digest();
                    })
                })
            }
        }

        function ticketResultIsLive(item, $event) {
            $mdDialog.show({
                controller: resultSportLiveCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/result/sport-live.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function resultSportLiveCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.item = item;
                vm.getMatch([item.MatchId]).then(function(response) {
                    $scope.item.MatchDetails = response[0];
                    $timeout(function() {
                        $scope.$digest();
                    })
                })
            }
        }

        function ticketResultSystemParlay(item, $event) {
            $mdDialog.show({
                controller: resultSystemParlayCtrl,
                templateUrl: 'app/main/accounting/saba/member/template/result/system-parlay.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                },
                fullscreen: true
            });

            function resultSystemParlayCtrl($scope, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                let MatchIds = [];
                item.ParlayData.map(function(parlay) {
                    MatchIds.push(parlay.MatchId)
                })
                vm.getMatch(MatchIds).then(function(response) {
                    item.ParlayData.map(function(parlay, index) {
                        let find = response.filter(function(res) {
                            return res.MatchId === parlay.MatchId;
                        })
                        if (find.length) {
                            parlay.GameStatus = find[0].GameStatus;
                            parlay.HomeScore = find[0].HomeScore;
                            parlay.AwayScore = find[0].AwayScore;
                            parlay.HtAwayScore = find[0].HtAwayScore;
                            parlay.HtHomeScore = find[0].HtHomeScore;
                            item.ParlayData[index] = Object.assign(find[0], parlay);
                        }
                    })
                    vm.updateParlayData(item).then(function(response) {
                        $timeout(function() {
                            $scope.item = item;
                            $scope.$digest();
                        }, 10)
                    })
                })
            }
        }

        function getRNGBetItems(item) {
            if (item.showBetItem === true) {
                item.showBetItem = false;
                return;
            }
            item.betItemUpdating = true;
            Lotus.Saba.Report.Statement.getRNGBetItems({
                RefNo: item.Tx
            }).then(function(response) {
                response.map(function(res) {
                    matchingData(res);
                })
                item.RNGBetItems = response;
                item.showBetItem = true;
                item.betItemUpdating = false;
                $timeout(function() {
                    $scope.$digest();
                }, 10)
            })
        }

        function showScore(item) {
            return msUtils.exists(item.SportType, [8, 1, 3, 4, 28, 26])
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('combineSabaClassificationCtrl', combineSabaClassificationCtrl);

    function combineSabaClassificationCtrl($rootScope, $state, $stateParams, $location, $timeout, network, msUtils, AuthService, statement) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByCompany = sumByCompany;
        vm.sumByAgent = sumByAgent;
        vm.sumBySuper = sumBySuper;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.From = $stateParams.from === undefined ? moment().unix() : $stateParams.from;
        vm.report.To = $stateParams.to === undefined ? moment().unix() : $stateParams.to;
        Lotus.Saba.Report.Statement.getUserReportGroupBySportGroup(vm.report).then(function(response) {
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            response.sort(function(a, b) {
                return a.SportGroup - b.SportGroup
            });
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.sumByCompany(response)
            } else if ($rootScope.User.Level === 5) {
                vm.sumByAgent(response)
            } else {
                vm.sumBySuper(response)
            }
        });

        function sumByCompany(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    WinLose: 0,
                    Amount: 0,
                    NetAmount: 0,
                    Commission: 0,
                    GrossCommission: 0,
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(sport) {
                let oSport = {
                    SportGroup: sport.SportGroup,
                    Player: {
                        Quantity: sport.Player.Quantity,
                        WinLose: sport.Player.WinLose,
                        Amount: sport.Player.Amount,
                        NetAmount: sport.Player.NetAmount,
                        Commission: sport.Player.Commission,
                        GrossCommission: sport.GrossCommission
                    },
                    Agent: {
                        WinLose: sport.Descendant.WinLose,
                        Commission: sport.Descendant.Commission,
                        Total: (sport.Descendant.WinLose + sport.Descendant.Commission)
                    },
                    Company: (sport.Commission + sport.WinLose)
                };
                vm.classifications.push(oSport)
                vm.SumTotal.Player.Quantity += sport.Player.Quantity;
                vm.SumTotal.Player.WinLose += sport.Player.WinLose;
                vm.SumTotal.Player.Amount += sport.Player.Amount;
                vm.SumTotal.Player.NetAmount += sport.Player.NetAmount;
                vm.SumTotal.Player.Commission += sport.Player.Commission;
                vm.SumTotal.Player.GrossCommission += sport.GrossCommission;
                vm.SumTotal.Agent.WinLose += sport.Descendant.WinLose;
                vm.SumTotal.Agent.Commission += sport.Descendant.Commission;
                vm.SumTotal.Agent.Total += (sport.Descendant.WinLose + sport.Descendant.Commission);
                vm.SumTotal.Company += (sport.Commission + sport.WinLose);
            })
        }

        function sumByAgent(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    WinLose: 0,
                    Amount: 0,
                    NetAmount: 0,
                    Commission: 0,
                    GrossCommission: 0,
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(sport) {
                let oSport = {
                    SportGroup: sport.SportGroup,
                    Player: {
                        Quantity: sport.Player.Quantity,
                        WinLose: sport.Player.WinLose,
                        Amount: sport.Player.Amount,
                        NetAmount: sport.Player.NetAmount,
                        Commission: sport.Player.Commission,
                        GrossCommission: sport.GrossCommission
                    },
                    Agent: {
                        WinLose: sport.WinLose,
                        Commission: sport.Commission,
                        Total: (sport.WinLose + sport.Commission)
                    },
                    Company: (sport.Ancestor.Commission + sport.Ancestor.WinLose)
                };
                vm.classifications.push(oSport)
                vm.SumTotal.Player.Quantity += sport.Player.Quantity;
                vm.SumTotal.Player.WinLose += sport.Player.WinLose;
                vm.SumTotal.Player.Amount += sport.Player.Amount;
                vm.SumTotal.Player.NetAmount += sport.Player.NetAmount;
                vm.SumTotal.Player.Commission += sport.Player.Commission;
                vm.SumTotal.Player.GrossCommission += sport.GrossCommission;
                vm.SumTotal.Agent.WinLose += sport.WinLose;
                vm.SumTotal.Agent.Commission += sport.Commission;
                vm.SumTotal.Agent.Total += (sport.WinLose + sport.Commission);
                vm.SumTotal.Company += (sport.Ancestor.Commission + sport.Ancestor.WinLose);
            })
        }

        function sumBySuper(response) {
            vm.SumTotal = {
                Player: {
                    Quantity: 0,
                    WinLose: 0,
                    Amount: 0,
                    NetAmount: 0,
                    Commission: 0,
                    GrossCommission: 0,
                },
                Agent: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                My: {
                    WinLose: 0,
                    Commission: 0,
                    Total: 0
                },
                Company: 0
            };
            angular.forEach(response, function(sport) {
                let oSport = {
                    SportGroup: sport.SportGroup,
                    Player: {
                        Quantity: sport.Player.Quantity,
                        WinLose: sport.Player.WinLose,
                        Amount: sport.Player.Amount,
                        NetAmount: sport.Player.NetAmount,
                        Commission: sport.Player.Commission,
                        GrossCommission: sport.GrossCommission
                    },
                    Agent: {
                        WinLose: sport.Descendant.WinLose,
                        Commission: sport.Descendant.Commission,
                        Total: (sport.Descendant.WinLose + sport.Descendant.Commission)
                    },
                    My: {
                        WinLose: sport.WinLose,
                        Commission: sport.Commission,
                        Total: (sport.WinLose + sport.Commission)
                    },
                    Company: (sport.Ancestor.Commission + sport.Ancestor.WinLose)
                };
                vm.classifications.push(oSport)
                vm.SumTotal.Player.Quantity += sport.Player.Quantity;
                vm.SumTotal.Player.WinLose += sport.Player.WinLose;
                vm.SumTotal.Player.Amount += sport.Player.Amount;
                vm.SumTotal.Player.NetAmount += sport.Player.NetAmount;
                vm.SumTotal.Player.Commission += sport.Player.Commission;
                vm.SumTotal.Player.GrossCommission += sport.GrossCommission;
                vm.SumTotal.Agent.WinLose += sport.Descendant.WinLose;
                vm.SumTotal.Agent.Commission += sport.Descendant.Commission;
                vm.SumTotal.Agent.Total += (sport.Descendant.WinLose + sport.Descendant.Commission);
                vm.SumTotal.My.WinLose += sport.WinLose;
                vm.SumTotal.My.Commission += sport.Commission;
                vm.SumTotal.My.Total += (sport.WinLose + sport.Commission);
                vm.SumTotal.Company += (sport.Ancestor.Commission + sport.Ancestor.WinLose);
            });
        }

        function classify(SportGroup) {
            let url = statement === 'combination' ? 'app.accounting.combination.winLose.general.saba' : 'app.saba.statement.win-lose.general';
            $state.go(url, {
                from: vm.report.From,
                to: vm.report.To,
                sport: SportGroup
            })
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.accounting').controller('combinationLegendGeneralCtrl', combinationLegendGeneralCtrl);

    function combinationLegendGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? [0, 1] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.accounting.combination.winLose.general.legendary", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.accounting.combination.winLose.general.legendary.member", {
                game: item.GameType,
                bet: item.BetType,
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            network.Reporting.Legend.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.Legend.Statement.getPlayerReportGroupByBetType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('combinationLegendMemberCtrl', combinationLegendMemberCtrl);

    function combinationLegendMemberCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, ]
        };
        vm.loadMemberReport = loadMemberReport;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.BetType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        if (isNaN(vm.data.BetType)) {
            delete vm.data.BetType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.Legend.Statement.getTicketItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('SabaGeneralCtrl', SabaGeneralCtrl);

    function SabaGeneralCtrl($rootScope, $scope, $state, $stateParams, $location, $timeout, network, AuthService, statement) {
        let vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $stateParams.from === undefined ? moment().format('YYYY-MM-DD') : $stateParams.from;
        vm.report.to = $stateParams.to === undefined ? moment().format('YYYY-MM-DD') : $stateParams.to;
        vm.report.sport = $stateParams.sport === undefined ? [0, 1, 2, 3, 4, 5, 6, 7, 8, 99] : $stateParams.sport.split(',');
        vm.report.uid = $stateParams.uid;
        vm.report.level = $stateParams.level === undefined ? $rootScope.User.Level : parseInt($stateParams.level);
        vm.report.name = $stateParams.name !== undefined ? $stateParams.name : $rootScope.User.Username;
        vm.report.set = parseInt($stateParams.set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }]
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            let url = statement === 'combination' ? 'app.accounting.combination.winLose.general.saba' : 'app.saba.statement.win-lose.general';
            $state.go(url, {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            let url = statement === 'combination' ? 'app.accounting.combination.winLose.general.saba.member' : 'app.saba.statement.win-lose.general.member';
            $state.go(url, {
                sport: item.SportGroup
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                SportGroups: vm.report.sport,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            if (vm.report.sport === undefined) {
                delete vm.data.SportGroups
            }
            Lotus.Saba.Report.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                SportGroups: vm.report.sport
            };
            if (vm.report.sport.length === 0) {
                delete vm.data.SportGroups
            }
            Lotus.Saba.Report.Statement.getPlayerReportGroupBySportGroup(vm.data).then(function(response) {
                response = response.sort(function(a, b) {
                    return a.SportGroup - b.SportGroup
                })
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('combineTraditionalClassificationCtrl', combineTraditionalClassificationCtrl);

    function combineTraditionalClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1,2,3,4,5' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.startDate,
            To: vm.report.endDate,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Traditional.Statement.getUserReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            Company: (bet.Commission + bet.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        My: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            My: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.My.WinLose += bet.WinLose;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.My.WinLose += bet.WinLose;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            }
        }

        function classify(GameType, BetType) {
            $state.go('app.accounting.combination.winLose.general.traditional', {
                from: vm.report.startDate,
                to: vm.report.endDate,
                game: GameType,
                bet: BetType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('legendaryClassificationCtrl', legendaryClassificationCtrl);

    function legendaryClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.startDate = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.endDate = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '0,1' : $location.search().game;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.startDate,
            To: vm.report.endDate,
            GameTypes: vm.report.game.split(',')
        };
        network.Reporting.Legend.Statement.getUserReportGroupByBetType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType || a.BetType - b.BetType
            });
            response = response.groupBy(function(o) {
                return JSON.stringify({
                    a: o.GameType
                })
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            Company: (bet.Commission + bet.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.Company += (bet.Commission + bet.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Commission;
                        oGame.SumByGame.Agent.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Commission;
                        vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                };
                angular.forEach(response, function(game) {
                    let oGame = {};
                    oGame.GameType = game.group[0].GameType;
                    oGame.Values = [];
                    oGame.SumByGame = {
                        Player: {
                            Quantity: 0,
                            Amount: 0,
                            WinLose: 0
                        },
                        Agent: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        My: {
                            WinLose: 0,
                            Commission: 0,
                            Total: 0
                        },
                        Company: 0
                    };
                    angular.forEach(game.group, function(bet) {
                        let oBet = {
                            BetType: bet.BetType,
                            Player: {
                                Quantity: bet.Player.Quantity,
                                Amount: bet.Player.Amount,
                                WinLose: bet.Player.WinLose
                            },
                            Agent: {
                                WinLose: bet.Descendant.WinLose,
                                Commission: bet.Descendant.Commission,
                                Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                            },
                            My: {
                                WinLose: bet.WinLose,
                                Commission: bet.Commission,
                                Total: (bet.WinLose + bet.Commission)
                            },
                            Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose)
                        };
                        oGame.Values.push(oBet);
                        oGame.SumByGame.Player.Quantity += bet.Player.Quantity;
                        oGame.SumByGame.Player.Amount += bet.Player.Amount;
                        oGame.SumByGame.Player.WinLose += bet.Player.WinLose;
                        oGame.SumByGame.Agent.WinLose += bet.Descendant.WinLose;
                        oGame.SumByGame.Agent.Commission += bet.Descendant.Commission;
                        oGame.SumByGame.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        oGame.SumByGame.My.WinLose += bet.WinLose;
                        oGame.SumByGame.My.Commission += bet.Commission;
                        oGame.SumByGame.My.Total += (bet.WinLose + bet.Commission);
                        oGame.SumByGame.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                        vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                        vm.SumTotal.Player.Amount += bet.Player.Amount;
                        vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                        vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                        vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                        vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                        vm.SumTotal.My.WinLose += bet.WinLose;
                        vm.SumTotal.My.Commission += bet.Commission;
                        vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                        vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                    });
                    vm.classifications.push(oGame)
                })
            }
        }

        function classify(GameType, BetType) {
            $state.go('app.accounting.combination.winLose.general.legendary', {
                from: vm.report.startDate,
                to: vm.report.endDate,
                game: GameType,
                bet: BetType
            })
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.accounting').controller('generalCtrl', generalCtrl);

    function generalCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? [0, 1, 2, 3, 4, 5] : $location.search().game.split(',');
        vm.report.bet = $location.search().bet;
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }],
            buttons: ['print']
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.accounting.combination.winLose.general.traditional", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            $state.go("app.accounting.combination.winLose.general.traditional.member", {
                game: item.GameType,
                bet: item.BetType,
            })
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: vm.report.game,
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            network.Reporting.Traditional.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                GameTypes: vm.report.game,
                UserId: vm.report.uid
            };
            if (vm.report.bet !== undefined) {
                vm.data.BetTypes = vm.report.bet.split(',');
            }
            network.Reporting.Traditional.Statement.getPlayerReportGroupByBetType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType || a.BetType - b.BetType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('memberCtrl', memberCtrl);

    function memberCtrl($rootScope, $scope, $state, $location, $timeout, $mdDialog, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 2,
                orderable: false
            }, ]
        };
        vm.loadMemberReport = loadMemberReport;
        vm.viewIp = viewIp;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = parseInt($location.search().game);
        vm.data.BetType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.Limit = 100;
        vm.data.name = $location.search().name;
        if (isNaN(vm.data.GameType)) {
            delete vm.data.GameType;
        }
        if (isNaN(vm.data.BetType)) {
            delete vm.data.BetType;
        }
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.Traditional.Statement.getTicketItems(vm.data).then(function(response) {
                vm.loadMore = response.length === vm.data.Limit;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('accCombinationCtrl', accCombinationCtrl);

    function accCombinationCtrl($scope, $state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.accounting.combination.winLose') {
            $state.go('app.accounting.combination.winLose.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('groupCombineReportCtrl', groupCombineReportCtrl);

    function groupCombineReportCtrl($scope, $state, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        if ($state.current.name === 'app.accounting.combination.group') {
            $state.go('app.accounting.combination.group.general', {
                from: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                to: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
                set: 0
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('LegendCasinoClassificationCtrl', LegendCasinoClassificationCtrl);

    function LegendCasinoClassificationCtrl($rootScope, $state, $location, $timeout, network, msUtils, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.classify = classify;
        vm.sumByGame = sumByGame;
        $rootScope.$broadcast('submitting', true);
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.report.uid = $location.search().uid === undefined ? 'me' : $location.search().uid;
        vm.report.name = $location.search().name === undefined ? $rootScope.User.Username : $location.search().name;
        vm.report.ug = $location.search().ug === undefined ? $rootScope.User.group : parseInt($location.search().ug);
        vm.sumValue = {
            memberQuantity: 0,
            memberAmount: 0,
            memberWinLose: 0,
            childWinLose: 0,
            childCommission: 0,
            childTotal: 0,
            myWinLose: 0,
            myCommission: 0,
            myTotal: 0,
            parentWinLose: 0
        };
        let data = {
            From: vm.report.from,
            To: vm.report.to,
            GameTypes: ''
        };
        network.Reporting.LegendCasino.Statement.getUserReportGroupByGameType(data).then(function(response) {
            response.sort(function(a, b) {
                return a.GameType - b.GameType
            });
            $timeout(function() {
                $rootScope.$broadcast('submitting', false)
            }, 500);
            vm.sumByGame(response)
        });

        function sumByGame(response) {
            vm.classifications = [];
            if ($rootScope.User.Level === 1) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    Company: 0
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        GameType: bet.GameType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            NetAmount: bet.Player.NetAmount,
                            Commission: bet.Player.Commission,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        GrossCommission: bet.GrossCommission,
                        Company: (bet.Commission + bet.WinLose),
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.NetAmount += bet.Player.NetAmount;
                    vm.SumTotal.Player.Commission += bet.Player.Commission;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                    vm.SumTotal.Company += (bet.Commission + bet.WinLose);
                });
            } else if ($rootScope.User.Level === 5) {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    Company: 0,
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        GameType: bet.GameType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        GrossCommission: bet.GrossCommission,
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose),
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Commission;
                    vm.SumTotal.Agent.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                });
            } else {
                vm.SumTotal = {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        NetAmount: 0,
                        Commission: 0,
                        WinLose: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    Company: 0,
                };
                angular.forEach(response, function(bet) {
                    let oGame = {
                        GameType: bet.GameType,
                        Player: {
                            Quantity: bet.Player.Quantity,
                            Amount: bet.Player.Amount,
                            NetAmount: bet.Player.NetAmount,
                            Commission: bet.Player.Commission,
                            WinLose: bet.Player.WinLose
                        },
                        Agent: {
                            WinLose: bet.Descendant.WinLose,
                            Commission: bet.Descendant.Commission,
                            Total: (bet.Descendant.WinLose + bet.Descendant.Commission)
                        },
                        My: {
                            WinLose: bet.WinLose,
                            Commission: bet.Commission,
                            Total: (bet.WinLose + bet.Commission)
                        },
                        GrossCommission: bet.GrossCommission,
                        Company: (bet.Ancestor.Commission + bet.Ancestor.WinLose),
                    };
                    vm.classifications.push(oGame);
                    vm.SumTotal.Player.Quantity += bet.Player.Quantity;
                    vm.SumTotal.Player.Amount += bet.Player.Amount;
                    vm.SumTotal.Player.NetAmount += bet.Player.NetAmount;
                    vm.SumTotal.Player.Commission += bet.Player.Commission;
                    vm.SumTotal.Player.WinLose += bet.Player.WinLose;
                    vm.SumTotal.Agent.WinLose += bet.Descendant.WinLose;
                    vm.SumTotal.Agent.Commission += bet.Descendant.Commission;
                    vm.SumTotal.Agent.Total += (bet.Descendant.WinLose + bet.Descendant.Commission);
                    vm.SumTotal.My.WinLose += bet.WinLose;
                    vm.SumTotal.My.Commission += bet.Commission;
                    vm.SumTotal.My.Total += (bet.WinLose + bet.Commission);
                    vm.SumTotal.GrossCommission += bet.GrossCommission;
                    vm.SumTotal.Company += (bet.Ancestor.Commission + bet.Ancestor.WinLose);
                });
            }
        }

        function classify(GameType) {
            $state.go('app.accounting.combination.winLose.general.casino789', {
                from: vm.report.from,
                to: vm.report.to,
                game: GameType
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.accounting').controller('LegendCasinoMemberCtrl', LegendCasinoMemberCtrl);

    function LegendCasinoMemberCtrl($rootScope, $scope, $state, $location, $timeout, $mdDialog, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        vm.loadMemberReport = loadMemberReport;
        vm.viewIp = viewIp;
        vm.data = {};
        vm.data.From = $location.search().from === undefined ? moment().unix() : $location.search().from;
        vm.data.To = $location.search().to === undefined ? moment().unix() : $location.search().to;
        vm.data.GameType = $location.search().game;
        vm.data.betType = parseInt($location.search().bet);
        vm.data.UserId = $location.search().uid;
        vm.data.name = $location.search().name;
        vm.loadMemberReport();
        vm.members = [];

        function loadMemberReport(ltID) {
            ltID = ltID === undefined ? '' : ltID;
            vm.data.LastId = ltID;
            $rootScope.$broadcast('submitting', true);
            vm.submitting = true;
            network.Reporting.LegendCasino.Statement.getBetItems(vm.data).then(function(response) {
                vm.loadMore = response.length === 25;
                vm.members = vm.members.concat(response);
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false);
                    vm.submitting = false
                }, 500);
            })
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.accounting').controller('LegendCasinoGeneralCtrl', LegendCasinoGeneralCtrl);

    function LegendCasinoGeneralCtrl($rootScope, $scope, $state, $location, $timeout, network, AuthService) {
        var vm = this;
        if (!AuthService.hasPermission(1)) {
            $state.go('app.forbidden');
            return;
        }
        $rootScope.$broadcast('submitting', true);
        vm.arrangeCompany = arrangeCompany;
        vm.arrangeAgent = arrangeAgent;
        vm.getChildrenUserReports = getChildrenUserReports;
        vm.getUserDateReports = getUserDateReports;
        vm.viewReport = viewReport;
        vm.viewMemberReport = viewMemberReport;
        vm.responseData = [];
        vm.report = {};
        vm.report.from = $location.search().from === undefined ? moment().format('YYYY-MM-DD') : $location.search().from;
        vm.report.to = $location.search().to === undefined ? moment().format('YYYY-MM-DD') : $location.search().to;
        vm.report.game = $location.search().game === undefined ? '' : parseInt($location.search().game);
        vm.report.uid = $location.search().uid;
        vm.report.level = $location.search().level === undefined ? $rootScope.User.Level : parseInt($location.search().level);
        vm.report.name = $location.search().name !== undefined ? $location.search().name : $rootScope.User.Username;
        vm.report.set = parseInt($location.search().set);
        if (vm.report.level !== 9) {
            if (vm.report.set === 0) {
                $rootScope.$broadcast('submitting', false);
                return
            }
            vm.getChildrenUserReports()
        } else {
            vm.getUserDateReports()
        }
        vm.dtOptions = {
            autoWidth: true,
            responsive: true,
            searching: false,
            paging: false,
            bInfo: false,
            bPaginate: false,
            columnDefs: [{
                targets: 0,
                orderable: false
            }, {
                targets: 1,
                orderable: false
            }]
        };
        let targetOrder = vm.report.level === 5 ? 6 : 8;
        if (vm.report.level !== 9) {
            vm.dtOptions.columnDefs.push({
                targets: targetOrder,
                orderable: false
            })
        } else {
            vm.dtOptions.columnDefs.push({
                targets: 2,
                orderable: false
            })
        }

        function viewReport(item) {
            $state.go("app.accounting.combination.winLose.general.casino789", {
                from: vm.report.from,
                to: vm.report.to,
                uid: item.UserId,
                level: item.Level,
                name: item.Username
            })
        }

        function viewMemberReport(item) {
            if (item.GameType === 0) {
                $state.go("app.accounting.combination.winLose.general.casino789.member", {
                    game: item.GameType
                })
            } else {
                $state.go("app.accounting.combination.winLose.general.casino789.member.presidential", {
                    game: item.GameType
                })
            }
        }

        function getChildrenUserReports(page) {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                Size: 100,
                GameTypes: [vm.report.game],
                ParentUserId: vm.report.uid
            };
            vm.data.Page = page === undefined ? 1 : page;
            if (vm.report.uid === undefined) {
                delete vm.data.ParentUserId
            }
            if (vm.report.game === '') {
                delete vm.data.GameTypes
            }
            network.Reporting.LegendCasino.Statement.getChildrenReportGroupByUser(vm.data).then(function(response) {
                vm.responseData = vm.responseData.concat(response);
                vm.hasRecord = response.length === vm.data.Size;
                vm.nextPage = vm.data.Page + 1;
                if (vm.report.level === 1) {
                    vm.dataReports = vm.arrangeCompany(vm.responseData);
                } else {
                    vm.dataReports = vm.arrangeAgent(vm.responseData);
                }
                $scope.$digest();
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function getUserDateReports() {
            vm.data = {
                From: vm.report.from,
                To: vm.report.to,
                UserId: vm.report.uid,
                GameTypes: [vm.report.game]
            };
            if (vm.report.game === '') {
                delete vm.data.GameTypes
            }
            network.Reporting.LegendCasino.Statement.getPlayerReportGroupByGameType(vm.data).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                vm.dataReports = response;
                $timeout(function() {
                    $rootScope.$broadcast('submitting', false)
                }, 500);
            })
        }

        function arrangeCompany(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    AgentPay: 0,
                    Company: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    }
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Ancestor.WinLose + item.Ancestor.Commission),
                    Company: {
                        WinLose: item.Ancestor.WinLose,
                        Commission: item.Ancestor.Commission,
                        Total: item.Ancestor.WinLose + item.Ancestor.Commission
                    }
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.AgentPay += -(item.Ancestor.WinLose + item.Ancestor.Commission);
                output.Sum.Company.WinLose += item.Ancestor.WinLose;
                output.Sum.Company.Commission += item.Ancestor.Commission;
                output.Sum.Company.Total += (item.Ancestor.WinLose + item.Ancestor.Commission);
            });
            return output;
        }

        function arrangeAgent(data) {
            let output = {
                Records: [],
                Sum: {
                    Player: {
                        Quantity: 0,
                        Amount: 0,
                        WinLose: 0,
                        NetAmount: 0,
                        Commission: 0
                    },
                    Agent: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    GrossCommission: 0,
                    AgentPay: 0,
                    My: {
                        WinLose: 0,
                        Commission: 0,
                        Total: 0
                    },
                    Company: 0
                }
            };
            angular.forEach(data, function(item) {
                let Record = {
                    UserId: item.UserId,
                    Level: item.Level,
                    Username: item.Username,
                    FullName: item.FullName,
                    GrossCommission: item.GrossCommission,
                    Player: {
                        Quantity: item.Player.Quantity,
                        Amount: item.Player.Amount,
                        WinLose: item.Player.WinLose,
                        NetAmount: item.Player.NetAmount,
                        Commission: item.Player.Commission
                    },
                    Agent: {
                        WinLose: item.Descendant.WinLose + item.WinLose,
                        Commission: item.Descendant.Commission + item.Commission,
                        Total: item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose
                    },
                    AgentPay: -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose),
                    My: {
                        WinLose: item.Parent.WinLose,
                        Commission: item.Parent.Commission,
                        Total: item.Parent.WinLose + item.Parent.Commission
                    },
                    Company: (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
                };
                output.Records.push(Record);
                output.Sum.Player.Quantity += item.Player.Quantity;
                output.Sum.Player.Amount += item.Player.Amount;
                output.Sum.Player.WinLose += item.Player.WinLose;
                output.Sum.Player.NetAmount += item.Player.NetAmount;
                output.Sum.Player.Commission += item.Player.Commission;
                output.Sum.Agent.WinLose += (item.Descendant.WinLose + item.WinLose);
                output.Sum.Agent.Commission += (item.Descendant.Commission + item.Commission);
                output.Sum.Agent.Total += (item.Descendant.Commission + item.Descendant.WinLose + item.Commission + item.WinLose);
                output.Sum.GrossCommission += item.GrossCommission;
                output.Sum.AgentPay += -(item.Parent.WinLose + item.Parent.Commission + item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose);
                output.Sum.My.WinLose += item.Parent.WinLose;
                output.Sum.My.Commission += item.Parent.Commission;
                output.Sum.My.Total += (item.Parent.WinLose + item.Parent.Commission);
                output.Sum.Company += (item.Ancestor.Commission + item.Ancestor.WinLose - item.Parent.Commission - item.Parent.WinLose)
            });
            return output
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.account').controller('modifyTemplateCtrl', modifyTemplateCtrl);

    function modifyTemplateCtrl($scope, $mdDialog, $location, $state, $timeout, network, message, msUtils) {
        let vm = this;
        let tempBackup;
        vm.updateTemplate = updateTemplate;
        vm.changeValues = changeValues;
        vm.changePrice = changePrice;
        vm.send = {};
        vm.templateID = $location.search().id;
        vm.newTemplate = $location.search().action === 'add';
        vm.submitting = true;
        network.Games.Lottery.PayoutsType.getById({
            Id: vm.templateID
        }).then(function(response) {
            vm.backUpTemplate = angular.copy(response);
            response.Values = msUtils.groupBy(response.Values, function(item) {
                return [item.GameType];
            });
            if (vm.newTemplate) {
                response.Title = 'Clone from ' + response.Title;
            }
            vm.templates = response;
            vm.submitting = false;
            $scope.$digest()
        });

        function changeValues(bet, cond) {
            tempBackup = vm.backUpTemplate.Values.filter(function(item) {
                return item.GameType === bet.GameType && item.BetType === bet.BetType
            })[0];
            bet.highlight = {
                Price: false,
                Payouts: false
            };
            bet.highlight.Price = tempBackup.Price !== bet.Price;
            bet.highlight.Payouts = tempBackup.Payouts !== bet.Payouts;
        }

        function updateTemplate() {
            if (vm.newTemplate) {
                vm.send.Title = vm.templates.Title;
                vm.send.Description = vm.templates.Description;
                vm.send.RefId = vm.templateID;
                vm.send.Values = [];
                angular.forEach(vm.templates.Values, function(game) {
                    angular.forEach(game, function(bet) {
                        tempBackup = vm.backUpTemplate.Values.filter(function(item) {
                            return item.GameType === bet.GameType && item.BetType === bet.BetType
                        })[0];
                        if (tempBackup.Price !== bet.Price || tempBackup.Payouts !== bet.Payouts) {
                            vm.send.Values.push({
                                GameType: bet.GameType,
                                BetType: bet.BetType,
                                Price: bet.Price,
                                Payouts: bet.Payouts
                            })
                        }
                    })
                });
                if (vm.send.Values.length === 0) {
                    message.info('Ô! Giá bán và trả thưởng chả khác gì mẫu cũ?')
                } else {
                    vm.submitting = true;
                    network.Games.Lottery.PayoutsType.create(vm.send).then(function(response) {
                        if (response) {
                            vm.submitting = false;
                            message.info('Tạo mẫu mới thành công');
                            $state.go('app.account.template')
                        }
                    }).catch(function(error) {
                        vm.submitting = false;
                        message.alert(error.message)
                    })
                }
            } else {
                vm.submitting = true;
                network.Games.Lottery.PayoutsType.updateById({
                    Id: vm.templateID,
                    Title: vm.templates.Title,
                    Description: vm.templates.Description
                }).then(function(response) {
                    if (response) {
                        vm.submitting = false;
                        message.info('Cập nhật mẫu thành công');
                        $state.go('app.account.template')
                    }
                })
            }
        }

        function changePrice(payId, item, $event) {
            if (vm.newTemplate) return;
            $mdDialog.show({
                controller: priceChangeTemplateCtrl,
                templateUrl: 'app/main/account/template/modify/price-change.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    payId: payId
                }
            }).then(function() {}, function(cancel) {
                if (cancel !== undefined) {
                    item.Price = cancel.Price;
                    item.Payouts = cancel.Payouts;
                }
            });

            function priceChangeTemplateCtrl($scope, $mdDialog, item, payId, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.priceInfo = angular.copy(item);
                $scope.submitForm = function() {
                    $scope.submitting = true;
                    $scope.priceInfo.PayoutsTypeId = payId;
                    network.Games.Lottery.PriceChangeTask.create($scope.priceInfo).then(function(response) {
                        if (response.Result) {
                            $mdDialog.cancel($scope.priceInfo);
                            $timeout(function() {
                                message.info('Cập nhật thành công. Quá trình có thể mất vài phút.')
                            }, 500)
                        }
                    }).catch(function(error) {
                        $scope.submitting = false;
                        $scope.warningMessage = error.message
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.quick-panel', []).config(config);

    function config($translatePartialLoaderProvider, msApiProvider) {}
})();
(function() {
    'use strict';
    angular.module('app.quick-panel').controller('ChatTabController', ChatTabController);

    function ChatTabController(msApi, $timeout) {
        var vm = this;
        vm.chat = {};
        vm.chatActive = false;
        vm.replyMessage = '';
        msApi.request('quickPanel.contacts@get', {}, function(response) {
            vm.contacts = response.data;
        });
        vm.toggleChat = toggleChat;
        vm.reply = reply;

        function toggleChat(contact) {
            vm.chatActive = !vm.chatActive;
            if (vm.chatActive) {
                vm.replyMessage = '';
                vm.chat.contact = contact;
                scrollToBottomOfChat(0);
            }
        }

        function reply() {
            if (vm.replyMessage === '') {
                return;
            }
            if (!vm.chat.contact.dialog) {
                vm.chat.contact.dialog = [];
            }
            vm.chat.contact.dialog.push({
                who: 'user',
                message: vm.replyMessage,
                time: 'Just now'
            });
            vm.replyMessage = '';
            scrollToBottomOfChat(400);
        }

        function scrollToBottomOfChat(speed) {
            var chatDialog = angular.element('#chat-dialog');
            $timeout(function() {
                chatDialog.animate({
                    scrollTop: chatDialog[0].scrollHeight
                }, speed);
            }, 0);
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.term', []).config(config);

    function config($stateProvider, $translatePartialLoaderProvider, msApiProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.traditional_term', {
            url: '/traditional/term',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/term/term.html',
                    controller: 'termCtrl as vm'
                }
            },
            resolve: {
                cities: function(msApi) {
                    return msApi.resolve('term.cities@get');
                }
            }
        });
        msApiProvider.register('term.cities', ['app/data/json/city.json']);
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.term').controller('termCtrl', termCtrl);

    function termCtrl($scope, $state, $rootScope, $mdDialog, $timeout, $hotkey, $location, network, message, cities, msUtils, AuthService) {
        let vm = this;
        if (!AuthService.isCompany()) {
            console.log('Not Company')
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            console.log('Not Permission')
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.fetchTerm = fetchTerm;
        vm.changeDate = changeDate;
        vm.termChange = termChange;
        vm.termHistory = termHistory;
        vm.updateResult = updateResult;
        vm.updateResultSouthern = updateResultSouthern;
        vm.updateResultCaishen = updateResultCaishen;
        vm.closing = closing;
        vm.reClosing = reClosing;
        vm.openTerm = openTerm;
        vm.loadCurrentTime = loadCurrentTime;
        vm.updateTime = updateTime;
        vm.TemporaryBookkeeping = TemporaryBookkeeping;
        vm.ReTemporaryBookkeeping = ReTemporaryBookkeeping;
        vm.terms = [];
        vm.formDate = new Date();
        vm.fetchTerm();

        function changeDate() {
            vm.fetchTerm(moment(vm.formDate).format('YYYY-MM-DD'));
        }

        function fetchTerm(term) {
            let date = term !== undefined ? term : null;
            vm.termname = term;
            vm.submitting = true;
            network.Games.Lottery.Term.getTermsByDate({
                date: date,
                checkBookKeepingReady: true
            }).then(function(response) {
                console.log(response)
                if (response) {
                    vm.submitting = false;
                    vm.newTermAllowed = $.grep(response, function(item) {
                        return item.Status === 9
                    }).length === response.length;
                    vm.currentTerm = vm.termname === undefined ? response[0].Term : '';
                    vm.termNotfound = false;
                    response.sort(function(a, b) {
                        return a.GameType - b.GameType
                    });
                    angular.forEach(response, function(game) {
                        if (game.GameType === 0) {
                            game.Close = {
                                deadLineBet: $.grep(game.Games, function(item) {
                                    return item.BetType === 1
                                })[0].AutoCloseAt,
                                deadLineJack: $.grep(game.Games, function(item) {
                                    return item.BetType === 0
                                })[0].AutoCloseAt,
                                deadLineCaishen: $.grep(game.Games, function(item) {
                                    return item.BetType === 25
                                })[0].AutoCloseAt
                            }
                        }
                        if (msUtils.exists(game.GameType, [1, 2, 3, 4])) {
                            game.Close = {
                                deadLineBet: $.grep(game.Games, function(item) {
                                    return item.BetType === 7
                                })[0].AutoCloseAt,
                                deadLineJack: $.grep(game.Games, function(item) {
                                    return item.BetType === 8
                                })[0].AutoCloseAt
                            }
                        }
                        if (game.GameType === 5) {
                            game.Close = {
                                deadLineBet: $.grep(game.Games, function(item) {
                                    return item.BetType === 2
                                })[0].AutoCloseAt,
                            }
                        }
                    });
                    vm.terms = response;
                    vm.closingValid = $.grep(response, function(item) {
                        return item.BookKeepingReady === true && item.Status !== 9
                    }).length;
                    if ($.grep(response, function(item) {
                            return item.Status === 2 || item.Status === 3 || item.Status === 10 || item.TemporaryBookkeepingStatus === 0 || item.TemporaryBookkeepingStatus === 1
                        }).length) {
                        vm.submitting = true;
                        vm.timer = $timeout(function() {
                            vm.fetchTerm()
                        }, 5000)
                    }
                    $scope.$digest();
                }
            }).catch(function(error) {
                vm.terms = [];
                vm.termNotfound = true;
            })
        }
        $scope.$on('$destroy', function() {
            $timeout.cancel(vm.timer);
        });

        function loadCurrentTime(item, pos) {
            vm.notValid = false;
            vm.updateInProcess = false;
            vm.pos = pos;
            if (pos === 'lo') {
                vm.deadLine = moment(item.Close.deadLineBet).format('HH:mm:ss');
            } else if (pos === 'de') {
                vm.deadLine = moment(item.Close.deadLineJack).format('HH:mm:ss');
            } else {
                vm.deadLine = moment(item.Close.deadLineCaishen).format('HH:mm:ss');
            }
        }

        function updateTime(item) {
            if (!moment.utc(vm.deadLine, 'HH:mm:ss').isValid()) {
                vm.notValid = true;
                return
            }
            let send = {
                term: item.Term,
                gameType: item.GameType,
                autoCloseAt: vm.deadLine
            };
            if (msUtils.exists(item.GameType, [0])) {
                if (vm.pos === 'lo') {
                    send.excludeBetTypes = [0, 5, 20, 21, 24, 25]
                } else if (vm.pos === 'de') {
                    send.includeBetTypes = [0, 5, 21]
                } else {
                    send.includeBetTypes = [24, 25]
                }
            } else if (msUtils.exists(item.GameType, [1, 2, 3, 4])) {
                if (vm.pos === 'lo') {
                    send.excludeBetTypes = [8, 11, 13, 20, 27]
                } else if (vm.pos === 'de') {
                    send.includeBetTypes = [8, 11, 13]
                }
            }
            vm.updateInProcess = true;
            network.Games.Lottery.Term.updateGameAutoClose(send).then(function(response) {
                if (response) {
                    vm.updateInProcess = false;
                    vm.fetchTerm();
                    $timeout(function() {
                        message.info('Thay đổi thời gian đóng cược thành công');
                    }, 500)
                }
            }).catch(function(error) {
                message.alert(error.message)
            })
        }

        function termChange(ev) {
            $mdDialog.show({
                controller: termChangeCtrl,
                templateUrl: 'app/main/traditional/term/dialog/term.change.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: ev
                }
            });

            function termChangeCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.change = angular.copy(data);
                $scope.change.Date = moment($scope.change.Date).format('DD/MM/YYYY');
                $scope.updateTerm = function() {
                    let send = {
                        DeadlineBet: $scope.change.deadlineBet,
                        DeadlineBetJackpots: $scope.change.deadlineBetJackpots
                    };
                    if (data.gameType === 0) {
                        send.DeadlineBetCaishen4 = $scope.change.deadlineBetCaishen4
                    }
                    network.PUTdata('api/term/' + $scope.change.id, send).then(function(response) {
                        if (response) {
                            $mdDialog.cancel();
                            message.info('Cập nhật thông tin kỳ thành công')
                        }
                    });
                }
            }
        }

        function termHistory(item, $event) {
            $mdDialog.show({
                controller: termHistoryCtrl,
                templateUrl: 'app/main/traditional/term/dialog/term.history.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    history: item
                }
            });

            function termHistoryCtrl($scope, $mdDialog, history, $filter) {
                $scope.submitting = true;
                let data = {
                    Term: history.Term,
                    GameType: history.GameType,
                    Size: 100,
                    Page: 1
                };
                network.Logging.ActivityLottery.searchTermActivity(data).then(function(response) {
                    $scope.termHistory = response.Records;
                    $timeout(function() {
                        $scope.submitting = false;
                    }, 1000)
                });
                $scope.cancel = function() {
                    $mdDialog.cancel();
                }
            }
        }

        function updateResult(ev, item) {
            $mdDialog.show({
                controller: updateResultCtrl,
                templateUrl: 'app/main/traditional/term/dialog/update.result.bac.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            }).then(function() {}, function() {
                $hotkey.unbind('Ctrl + S')
            });

            function updateResultCtrl($scope, $mdDialog, $mdToast, $http, $hotkey, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.data = data;
                $scope.enabled = true;
                $scope.result = {
                    "Jackpot": '',
                    "First": '',
                    "Second": ['', ''],
                    "Third": ['', '', '', '', '', ''],
                    "Fourth": ['', '', '', ''],
                    "Fiveth": ['', '', '', '', '', ''],
                    "Sixth": ['', '', ''],
                    "Seventh": ['', '', '', '']
                };
                network.Games.Lottery.LotteryResult.getNorthernResultByTerm({
                    Term: data.Term
                }).then(function(response) {
                    if (response.Jackpot) $scope.result.Jackpot = response.Jackpot;
                    if (response.First) $scope.result.First = response.First;
                    if (response.Second) $scope.result.Second = response.Second;
                    if (response.Third) $scope.result.Third = response.Third;
                    if (response.Fourth) $scope.result.Fourth = response.Fourth;
                    if (response.Fiveth) $scope.result.Fiveth = response.Fiveth;
                    if (response.Sixth) $scope.result.Sixth = response.Sixth;
                    if (response.Seventh) $scope.result.Seventh = response.Seventh;
                    $scope.$digest()
                }).catch(function(error) {
                    console.log(error.code)
                });
                $mdToast.show($mdToast.simple().textContent('Bấm "Ctrl + S" để cập nhanh kết quả (dùng khi làm lô tan) - MacOS Only').position("bottom right").hideDelay(10000));
                $hotkey.bind('Ctrl + S', function() {
                    $scope.submitResult(false);
                });
                $scope.loadResult = function() {
                    let date = moment(data.Date).format('DD/MM/YYYY');
                    let cityShort = cities.list[data.CityName].cityCode;
                    $http.get('https://tanthu.net/ketqua.asp?location=' + cityShort + '&day=' + date).then(function(response) {
                        $scope.date = response.data.date;
                        response = response.data.result.split('-');
                        $scope.result = {
                            "Jackpot": response[0],
                            "First": response[1],
                            "Second": [response[2], response[3]],
                            "Third": [response[4], response[5], response[6], response[7], response[8], response[9]],
                            "Fourth": [response[10], response[11], response[12], response[13]],
                            "Fiveth": [response[14], response[15], response[16], response[17], response[18], response[19]],
                            "Sixth": [response[20], response[21], response[22]],
                            "Seventh": [response[23], response[24], response[25], response[26]]
                        }
                    })
                };
                $scope.submitResult = function(close) {
                    if ($scope.result === undefined) {
                        return
                    }
                    let result = {
                        Term: data.Term,
                        Jackpot: $scope.result.Jackpot,
                        First: $scope.result.First,
                        Second: [],
                        Third: [],
                        Fourth: [],
                        Fiveth: [],
                        Sixth: [],
                        Seventh: []
                    };
                    if ($scope.result.Second[0]) result.Second.push($scope.result.Second[0]);
                    if ($scope.result.Second[1]) result.Second.push($scope.result.Second[1]);
                    if ($scope.result.Third[0]) result.Third.push($scope.result.Third[0]);
                    if ($scope.result.Third[1]) result.Third.push($scope.result.Third[1]);
                    if ($scope.result.Third[2]) result.Third.push($scope.result.Third[2]);
                    if ($scope.result.Third[3]) result.Third.push($scope.result.Third[3]);
                    if ($scope.result.Third[4]) result.Third.push($scope.result.Third[4]);
                    if ($scope.result.Third[5]) result.Third.push($scope.result.Third[5]);
                    if ($scope.result.Fourth[0]) result.Fourth.push($scope.result.Fourth[0]);
                    if ($scope.result.Fourth[1]) result.Fourth.push($scope.result.Fourth[1]);
                    if ($scope.result.Fourth[2]) result.Fourth.push($scope.result.Fourth[2]);
                    if ($scope.result.Fourth[3]) result.Fourth.push($scope.result.Fourth[3]);
                    if ($scope.result.Fiveth[0]) result.Fiveth.push($scope.result.Fiveth[0]);
                    if ($scope.result.Fiveth[1]) result.Fiveth.push($scope.result.Fiveth[1]);
                    if ($scope.result.Fiveth[2]) result.Fiveth.push($scope.result.Fiveth[2]);
                    if ($scope.result.Fiveth[3]) result.Fiveth.push($scope.result.Fiveth[3]);
                    if ($scope.result.Fiveth[4]) result.Fiveth.push($scope.result.Fiveth[4]);
                    if ($scope.result.Fiveth[5]) result.Fiveth.push($scope.result.Fiveth[5]);
                    if ($scope.result.Sixth[0]) result.Sixth.push($scope.result.Sixth[0]);
                    if ($scope.result.Sixth[1]) result.Sixth.push($scope.result.Sixth[1]);
                    if ($scope.result.Sixth[2]) result.Sixth.push($scope.result.Sixth[2]);
                    if ($scope.result.Seventh[0]) result.Seventh.push($scope.result.Seventh[0]);
                    if ($scope.result.Seventh[1]) result.Seventh.push($scope.result.Seventh[1]);
                    if ($scope.result.Seventh[2]) result.Seventh.push($scope.result.Seventh[2]);
                    if ($scope.result.Seventh[3]) result.Seventh.push($scope.result.Seventh[3]);
                    if (result.Jackpot.length === 0) delete result.Jackpot;
                    if (result.First.length === 0) delete result.First;
                    if (result.Second.length === 0) delete result.Second;
                    if (result.Third.length === 0) delete result.Third;
                    if (result.Fourth.length === 0) delete result.Fourth;
                    if (result.Fiveth.length === 0) delete result.Fiveth;
                    if (result.Sixth.length === 0) delete result.Sixth;
                    if (result.Seventh.length === 0) delete result.Seventh;
                    let countError = 0,
                        countResult = 0;
                    Object.keys(result).forEach(function(key) {
                        if (msUtils.exists(key, ["Jackpot", "First", "Second", "Third", "Fourth", "Fiveth", "Sixth", "Seventh"])) {
                            if (msUtils.exists(key, ["Jackpot", "First"])) {
                                countError = result[key].length === 5 ? countError : countError + 1;
                                countResult = result[key].length === 5 ? countResult + 1 : countResult;
                            }
                            if (msUtils.exists(key, ["Second", "Third"])) {
                                result[key].map(function(nr) {
                                    countResult = nr.length === 5 ? countResult + 1 : countResult;
                                })
                            }
                            if (msUtils.exists(key, ["Fourth", "Fiveth"])) {
                                result[key].map(function(nr) {
                                    countResult = nr.length === 4 ? countResult + 1 : countResult;
                                })
                            }
                            if (msUtils.exists(key, ["Sixth"])) {
                                result[key].map(function(nr) {
                                    countResult = nr.length === 3 ? countResult + 1 : countResult;
                                })
                            }
                            if (msUtils.exists(key, ["Seventh"])) {
                                result[key].map(function(nr) {
                                    countResult = nr.length === 2 ? countResult + 1 : countResult;
                                })
                            }
                        }
                    });
                    if (countResult < 27) {
                        message.infoMultiple('Kết quả không hợp lệ');
                        return;
                    }
                    $scope.enabled = false;
                    network.Games.Lottery.LotteryResult.updateNorthernResult(result).then(function(response) {
                        if (response) {
                            if (close) {
                                $mdDialog.cancel();
                                $rootScope.$emit('CallParentTerm', {});
                            } else {
                                $mdToast.show($mdToast.simple().textContent('Success').position("bottom right").hideDelay(3000));
                            }
                        }
                    }).catch(function(err) {
                        message.infoMultiple(err.message);
                        $scope.enabled = true;
                    })
                }
            }
        }

        function updateResultSouthern(ev, item) {
            $mdDialog.show({
                controller: updateResultSouthernCtrl,
                templateUrl: 'app/main/traditional/term/dialog/update.result.nam.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            });

            function updateResultSouthernCtrl($scope, $mdDialog, $mdToast, $http, $hotkey, data, network) {
                $scope.data = data;
                $scope.enabled = true;
                $scope.result = {
                    "Jackpot": '',
                    "First": '',
                    "Second": '',
                    "Third": ['', ''],
                    "Fourth": ['', '', '', '', '', '', ''],
                    "Fiveth": '',
                    "Sixth": ['', '', ''],
                    "Seventh": '',
                    "Eighth": ''
                };
                network.Games.Lottery.LotteryResult.getSouthernResultByTerm({
                    Term: data.Term,
                    GameType: data.GameType
                }).then(function(response) {
                    if (response.Jackpot) $scope.result.Jackpot = response.Jackpot;
                    if (response.First) $scope.result.First = response.First;
                    if (response.Second) $scope.result.Second = response.Second;
                    if (response.Third) $scope.result.Third = response.Third;
                    if (response.Fourth) $scope.result.Fourth = response.Fourth;
                    if (response.Fiveth) $scope.result.Fiveth = response.Fiveth;
                    if (response.Sixth) $scope.result.Sixth = response.Sixth;
                    if (response.Seventh) $scope.result.Seventh = response.Seventh;
                    if (response.Eighth) $scope.result.Eighth = response.Eighth;
                    $scope.$digest()
                }).catch(function(error) {
                    console.log(error.code)
                });
                $scope.debugOnly = ($location.host() === 'localhost' || $location.host() === 'ag.nothing88.net');
                $scope.sample = function() {
                    let ran = msUtils.generatorNumber;
                    $scope.result = {
                        "Jackpot": ran(6),
                        "First": ran(5),
                        "Second": ran(5),
                        "Third": [ran(5), ran(5)],
                        "Fourth": [ran(5), ran(5), ran(5), ran(5), ran(5), ran(5), ran(5)],
                        "Fiveth": ran(4),
                        "Sixth": [ran(4), ran(4), ran(4)],
                        "Seventh": ran(3),
                        "Eighth": ran(2)
                    }
                }
                $scope.loadResult = function() {
                    let date = moment(data.Date).format('DD/MM/YYYY');
                    let cityShort = cities.list[data.CityName].cityCode;
                    $http.get('https://tanthu.net/ketqua.asp?location=' + cityShort + '&day=' + date).then(function(response) {
                        $scope.date = response.data.date;
                        response = response.data.result.split('-');
                        $scope.result = {
                            "Jackpot": response[0],
                            "First": response[1],
                            "Second": response[2],
                            "Third": [response[3], response[4]],
                            "Fourth": [response[5], response[6], response[7], response[8], response[9], response[10], response[11]],
                            "Fiveth": response[12],
                            "Sixth": [response[13], response[14], response[15]],
                            "Seventh": response[16],
                            "Eighth": response[17]
                        }
                    })
                };
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.submitResult = function() {
                    if ($scope.result === undefined) {
                        return
                    }
                    let result = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Jackpot: $scope.result.Jackpot,
                        First: $scope.result.First,
                        Second: $scope.result.Second,
                        Third: [],
                        Fourth: [],
                        Fiveth: $scope.result.Fiveth,
                        Sixth: [],
                        Seventh: $scope.result.Seventh,
                        Eighth: $scope.result.Eighth
                    };
                    if ($scope.result.Third[0]) result.Third.push($scope.result.Third[0]);
                    if ($scope.result.Third[1]) result.Third.push($scope.result.Third[1]);
                    if ($scope.result.Fourth[0]) result.Fourth.push($scope.result.Fourth[0]);
                    if ($scope.result.Fourth[1]) result.Fourth.push($scope.result.Fourth[1]);
                    if ($scope.result.Fourth[2]) result.Fourth.push($scope.result.Fourth[2]);
                    if ($scope.result.Fourth[3]) result.Fourth.push($scope.result.Fourth[3]);
                    if ($scope.result.Fourth[4]) result.Fourth.push($scope.result.Fourth[4]);
                    if ($scope.result.Fourth[5]) result.Fourth.push($scope.result.Fourth[5]);
                    if ($scope.result.Fourth[6]) result.Fourth.push($scope.result.Fourth[6]);
                    if ($scope.result.Sixth[0]) result.Sixth.push($scope.result.Sixth[0]);
                    if ($scope.result.Sixth[1]) result.Sixth.push($scope.result.Sixth[1]);
                    if ($scope.result.Sixth[2]) result.Sixth.push($scope.result.Sixth[2]);
                    if (result.Jackpot.length === 0) delete result.Jackpot;
                    if (result.First.length === 0) delete result.First;
                    if (result.Second.length === 0) delete result.Second;
                    if (result.Third.length === 0) delete result.Third;
                    if (result.Fourth.length === 0) delete result.Fourth;
                    if (result.Fiveth.length === 0) delete result.Fiveth;
                    if (result.Sixth.length === 0) delete result.Sixth;
                    if (result.Seventh.length === 0) delete result.Seventh;
                    if (result.Eighth.length === 0) delete result.Eighth;
                    if (Object.keys(result).length < 2) {
                        message.infoMultiple('Kết quả không hợp lệ');
                        return;
                    }
                    $scope.enabled = false;
                    network.Games.Lottery.LotteryResult.updateSouthernResult(result).then(function(response) {
                        if (response) {
                            $mdDialog.cancel();
                            $rootScope.$emit('CallParentTerm', {});
                            $mdToast.show($mdToast.simple().textContent('Success').position("bottom right").hideDelay(3000))
                        }
                    }).catch(function(err) {
                        message.infoMultiple(err.message);
                        $scope.enabled = true;
                    })
                }
            }
        }

        function updateResultCaishen(ev, item) {
            $mdDialog.show({
                controller: updateResultCaishenCtrl,
                templateUrl: 'app/main/traditional/term/dialog/update.result.caishen.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            });

            function updateResultCaishenCtrl($scope, $mdDialog, $mdToast, $http, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.data = data;
                $scope.enabled = true;
                $scope.debugOnly = ($location.host() === 'localhost' || $location.host() === 'ag.nothing88.net');
                $scope.sample = function() {
                    let ran = msUtils.generatorNumber;
                    $scope.result = ran(4)
                }
                network.Games.Lottery.LotteryResult.getCaishen4ResultByTerm({
                    Term: data.Term
                }).then(function(response) {
                    $scope.result = response.Result;
                    $scope.$digest()
                }).catch(function(error) {
                    console.log(error.code)
                });
                $scope.submitResult = function(result) {
                    if (result === undefined) {
                        return
                    }
                    $scope.enabled = false;
                    network.Games.Lottery.LotteryResult.updateCaishen4Result({
                        Term: data.Term,
                        Result: result
                    }).then(function(response) {
                        if (response) {
                            $mdDialog.cancel();
                            $rootScope.$emit('CallParentTerm', {});
                            $mdToast.show($mdToast.simple().textContent('Success').position("bottom right").hideDelay(3000))
                        }
                    })
                }
            }
        }

        function closing(ev) {
            $mdDialog.show({
                controller: closingTermCtrl,
                templateUrl: 'app/main/traditional/term/dialog/term.closing.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    terms: vm.terms
                }
            });

            function closingTermCtrl($scope, $rootScope, $mdDialog, terms, message) {
                $scope.hide = function() {
                    $mdDialog.hide();
                };
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.regions = terms;
                $scope.selected = [];
                angular.forEach($scope.regions, function(item) {
                    if (item.Status === 1 && item.BookKeepingReady) {
                        $scope.selected.push(item.GameType)
                    }
                });
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.startExecution = function() {
                    $scope.submitted = true;
                    network.Games.Lottery.BookKeeping.startExecution({
                        term: terms[0].Term,
                        gameTypes: $scope.selected
                    }).then(function(response) {
                        if (response) {
                            $scope.submitted = false;
                            vm.fetchTerm();
                            $mdDialog.hide();
                        }
                    }).catch(function(error) {
                        message.show(error.message)
                    })
                }
            }
        }

        function reClosing(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: reClosingCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function reClosingCtrl($scope, $rootScope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Kết sổ lại';
                $scope.textContent = 'Xác nhận kết sổ lại đài ' + item.CityName;
                $scope.done = function() {
                    $scope.submitting = true;
                    network.Games.Lottery.BookKeeping.startExecution({
                        term: item.Term,
                        gameTypes: [item.GameType],
                        redo: true
                    }).then(function(response) {
                        if (response) {
                            $scope.submitted = false;
                            vm.fetchTerm();
                            $mdDialog.hide();
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function openTerm(ev) {
            $mdDialog.show({
                controller: openTermCtrl,
                templateUrl: 'app/main/traditional/term/dialog/term.open.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
            });

            function openTermCtrl($scope, $rootScope, $mdDialog) {
                $scope.regirons = [];
                $scope.gamelist = [{
                    day: 0,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'Tiền Giang (A)'
                    }, {
                        id: 3,
                        name: 'Kiên Giang (B)'
                    }, {
                        id: 4,
                        name: 'Đà Lạt (C)'
                    }, {
                        id: 5,
                        name: 'Tiền Giang + Kiên Giang'
                    }]
                }, {
                    day: 1,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'TP.HCM (A)'
                    }, {
                        id: 3,
                        name: 'Đồng Tháp (B)'
                    }, {
                        id: 4,
                        name: 'Cà Mau (C)'
                    }, {
                        id: 5,
                        name: 'TP.HCM + Đồng Tháp'
                    }]
                }, {
                    day: 2,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'Bến Tre (A)'
                    }, {
                        id: 3,
                        name: 'Vũng Tàu (B)'
                    }, {
                        id: 4,
                        name: 'Bạc Liêu (C)'
                    }, {
                        id: 5,
                        name: 'Bến Tre + Vũng Tàu'
                    }]
                }, {
                    day: 3,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'Đồng Nai (A)'
                    }, {
                        id: 3,
                        name: 'Cần Thơ (B)'
                    }, {
                        id: 4,
                        name: 'Sóc Trăng (C)'
                    }, {
                        id: 5,
                        name: 'Đồng Nai + Cần Thơ'
                    }]
                }, {
                    day: 4,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'Tây Ninh (A)'
                    }, {
                        id: 3,
                        name: 'An Giang (B)'
                    }, {
                        id: 4,
                        name: 'Bình Thuận (C)'
                    }, {
                        id: 5,
                        name: 'Tây Ninh + An Giang'
                    }]
                }, {
                    day: 5,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'Vĩnh Long (A)'
                    }, {
                        id: 3,
                        name: 'Bình Dương (B)'
                    }, {
                        id: 4,
                        name: 'Trà Vinh (C)'
                    }, {
                        id: 5,
                        name: 'Vĩnh Long + Bình Dương'
                    }]
                }, {
                    day: 6,
                    region: [{
                        id: 0,
                        name: 'Miền Bắc 1'
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'TP.HCM (A)'
                    }, {
                        id: 3,
                        name: 'Long An (B)'
                    }, {
                        id: 4,
                        name: 'Hậu Giang (C)'
                    }, {
                        id: 5,
                        name: 'TP.HCM + Long An'
                    }]
                }];

                function regiron(day) {
                    let weekday = moment.utc().add(day, 'day').utcOffset('+0700').day();
                    return $.grep($scope.gamelist, function(value, i) {
                        return value.day === weekday;
                    })[0].region;
                }
                $scope.data = {
                    day: '0'
                };
                $scope.$watch('data.day', function(value) {
                    $scope.selected = [];
                    $scope.regirons = regiron($scope.data.day);
                    for (let i = 0; i < $scope.regirons.length; i++) {
                        $scope.selected.push(i)
                    }
                });
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.submitTerm = function(data) {
                    $scope.submited = true;
                    $scope.request = {};
                    $scope.request.date = data.day === '0' ? moment().format('YYYY-MM-DD') : moment().add(1, 'd').format('YYYY-MM-DD');
                    $scope.request.gameTypes = $scope.selected;
                    network.Games.Lottery.Term.create($scope.request).then(function(response) {
                        if (response) {
                            $mdDialog.cancel();
                            $rootScope.$emit('CallParentTerm', {});
                        }
                    }).catch(function(error) {
                        message.alert(error.message)
                    })
                };
                $scope.hide = function() {
                    $mdDialog.hide();
                };
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
            }
        }

        function ReTemporaryBookkeeping(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: reTemporaryClosingCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function reTemporaryClosingCtrl($scope, $rootScope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Kết sổ thử lại';
                $scope.textContent = 'Xác nhận kết sổ thử lại đài ' + item.CityName;
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.Lottery.BookKeeping.startExecutionTemporary({
                        Term: item.Term,
                        GameType: item.GameType,
                        Redo: true
                    }).then(function(response) {
                        if (response) {
                            $scope.submitted = false;
                            vm.fetchTerm();
                            $mdDialog.hide();
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function TemporaryBookkeeping(item, $event) {
            console.log(item);
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: reTemporaryClosingCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function reTemporaryClosingCtrl($scope, $rootScope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Kết sổ thử';
                $scope.textContent = 'Xác nhận kết sổ thử đài ' + item.CityName;
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.Lottery.BookKeeping.startExecutionTemporary({
                        Term: item.Term,
                        GameType: item.GameType
                    }).then(function(response) {
                        if (response) {
                            $scope.submitted = false;
                            vm.fetchTerm();
                            $mdDialog.hide();
                        }
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }
        $rootScope.$on('CallParentTerm', function() {
            vm.fetchTerm();
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.price_table', []).config(config);

    function config($stateProvider, msNavigationServiceProvider, msApiProvider) {
        $stateProvider.state('app.traditional_price_table', {
            url: '/traditional/price_table',
            views: {
                'content@app': {
                    templateUrl: 'app/main/traditional/price_table/price_table.html',
                    controller: 'priceTableCtrl as vm'
                }
            },
            resolve: {
                collection: function(msApi) {
                    return msApi.resolve('number.collection@get');
                }
            }
        });
        msApiProvider.register('number.collection', ['app/data/json/collection.json']);
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional.price_table').controller('priceTableCtrl', priceTableCtrl).controller('ListBottomSheetCtrl', ListBottomSheetCtrl);

    function priceTableCtrl($rootScope, $scope, $timeout, $interval, $state, $mdDialog, $mdToast, $filter, $mdMedia, $mdSidenav, $mdBottomSheet, network, orderByFilter, msUtils, collection, message, AuthService) {
        let vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.isCompany = AuthService.isCompany();
        vm.hasPermission = AuthService.hasPermission(16);
        vm.hasWritePermission = AuthService.hasPermission(8);
        if (!AuthService.hasPermission(16)) {
            $state.go('app.forbidden');
            return;
        }
        vm.aNumberShares = [];
        vm.numbers = [];
        vm.terms = [];
        vm.betTypes = [];
        vm.termHistory = [];
        vm.viewPoints = [{
            id: 0,
            name: 'Toàn bộ'
        }, {
            id: 1,
            name: 'Còn lại'
        }];
        vm.sortDefs = [{
            id: 'num',
            name: 'Thứ tự'
        }, {
            id: 'risk',
            name: 'Nguy cơ'
        }];
        vm.denominators = [1, 1000, 1000000];
        vm.changeTerm = changeTerm;
        vm.fetchCurrentTerm = fetchCurrentTerm;
        vm.fetchHistoryTerm = fetchHistoryTerm;
        vm.changeGame = changeGame;
        vm.fetchParam = fetchParam;
        vm.fetchNumbers = fetchNumbers;
        vm.changeBet = changeBet;
        vm.setupStep = setupStep;
        vm.createNumber2D = createNumber2D;
        vm.createNumber3D = createNumber3D;
        vm.createNumber4D = createNumber4D;
        vm.createPopover = createPopover;
        vm.sortNumber = sortNumber;
        vm.openAll = openAll;
        vm.closeAll = closeAll;
        vm.closeExcept = closeExcept;
        vm.closeCaishen = closeCaishen;
        vm.checkboxEvent = checkboxEvent;
        vm.cancelChecked = cancelChecked;
        vm.closeNumber = closeNumber;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.priceSetting = priceSetting;
        vm.changePriceNumber = changePriceNumber;
        vm.settingPrice = settingPrice;
        vm.collectionNumber = collectionNumber;
        vm.viewBetting = viewBetting;
        vm.bettingItems = bettingItems;
        vm.companyBoard = companyBoard;
        vm.makeOdds = makeOdds;
        vm.refreshEvent = refreshEvent;
        vm.immediatePrice = immediatePrice;
        vm.getNumberPriceExceptions = getNumberPriceExceptions;
        vm.priceException = priceException;
        vm.addPriceException = addPriceException;
        vm.toggleSidenav = toggleSidenav;
        vm.navChangeGame = navChangeGame;
        vm.navChangeSortDefs = navChangeSortDefs;
        vm.showNumberSheet = showNumberSheet;
        vm.changeCurrentStatus = changeCurrentStatus;
        vm.activeNumber = activeNumber;
        vm.checkAddPriceCondition = checkAddPriceCondition;
        vm.changeManyPrice = changeManyPrice;
        vm.closeManyNumber = closeManyNumber;
        vm.setupHighlight = setupHighlight;
        vm.initHighlight = initHighlight;
        vm.calculationRisk = calculationRisk;
        vm.priceView = {
            term: null
        };
        vm.priceBoard = {};
        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
        let z = moment().hour() < 19 ? 0 : -1;
        let max = vm.isCompany ? 60 : 20;
        for (let y = z; y < max; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        $rootScope.$on('CallParentMethod', function() {
            vm.fetchCurrentTerm(true);
        });

        function refreshEvent(event) {
            vm.maxTimer = event;
            $interval.cancel(vm.refreshNumber);
            if (event === 0) {
                $timeout(function() {
                    $interval.cancel(vm.refreshNumber);
                    vm.timer = 'OFF'
                }, 200)
            } else {
                vm.timer = event;
            }
            vm.refreshNumber = $interval(function() {
                vm.timer--;
                if (vm.timer < 0) {
                    vm.timer = event;
                    vm.fetchNumbers();
                }
            }, 1000)
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.refreshNumber);
        });

        function immediatePrice() {
            vm.fetchNumbers();
            vm.refreshEvent(vm.maxTimer);
        }

        function changeTerm() {
            if ((vm.priceBoard.Term.replace(/-/g, '') > moment().format('YYYYMMDD')) || (vm.priceBoard.Term === moment().format('YYYY-MM-DD') && moment().format('HH') < 19)) {
                vm.fetchCurrentTerm(true);
                vm.priceView.currentTerm = true;
                vm.refreshEvent(60);
            } else {
                vm.fetchHistoryTerm(vm.priceBoard.Term);
                vm.priceView.currentTerm = false;
                vm.refreshEvent(0);
            }
        }

        function fetchCurrentTerm(cond) {
            network.Games.Lottery.Term.getTermsByDate({
                date: null
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                vm.priceBoard.Term = response[0].Term;
                $scope.$digest();
                if (cond) {
                    $timeout(function() {
                        vm.changeGame();
                    })
                }
            })
        }

        function fetchHistoryTerm(termName) {
            network.Games.Lottery.Term.getTermsByDate({
                date: termName
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                vm.priceBoard.Term = response[0].Term;
                $scope.$digest();
                $timeout(function() {
                    vm.changeGame();
                }, 200)
            }).catch(function(error) {
                if (error.code === 'DataNotFoundException') {
                    message.alert('Thông tin kỳ không tồn tại.')
                }
            })
        }

        function changeGame() {
            if (vm.running) {
                return
            }
            vm.running = true;
            vm.priceBoard.GameType = parseInt(vm.selected.GameType);
            vm.fetchParam();
            vm.priceBoard.TermStatus = vm.aTerms.filter(function(term) {
                return term.GameType === vm.priceBoard.GameType
            })[0].Status;
            if (vm.priceBoard.TermStatus !== 1) {
                vm.refreshEvent(0);
            }
            if (vm.priceBoard.GameType === 0) {
                vm.priceBoard.deadLine = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 1
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 0
                })[0].AutoCloseAt;
            } else if (msUtils.exists(vm.priceBoard.GameType, [1, 2, 3, 4])) {
                vm.priceBoard.deadLine = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 7
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 8
                })[0].AutoCloseAt;
            } else {
                vm.priceBoard.deadLine = vm.priceBoard.deadLineJP = $.grep($.grep(vm.aTerms, function(e) {
                    return e.GameType === vm.priceBoard.GameType;
                })[0].Games, function(item) {
                    return item.BetType === 2
                })[0].AutoCloseAt;
            }
        }

        function fetchParam() {
            vm.betTypes = $.grep(vm.aTerms, function(e) {
                return e.GameType === vm.priceBoard.GameType;
            })[0].Games;
            vm.betTypes.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            vm.priceBoard.BetType = vm.betTypes[0].BetType;
            vm.priceBoard.allowBetting = (vm.betTypes[0].Status === 1) && (moment(vm.betTypes[0].AutoCloseAt).unix() > moment().unix());
            vm.fetchNumbers();
            $timeout(function() {
                if (vm.isCompany) {
                    vm.getNumberPriceExceptions();
                }
            }, 200);
        }

        function changeBet(bet) {
            vm.priceBoard.BetType = bet.BetType;
            vm.fetchNumbers();
            $timeout(function() {
                if (vm.isCompany) {
                    vm.getNumberPriceExceptions();
                }
            }, 200);
            vm.priceBoard.allowBetting = (bet.Status === 1) && (moment(bet.AutoCloseAt).unix() > moment().unix());
            if (typeof(vm.checkbox) === 'object')
                Object.keys(vm.checkbox).map(function(objectKey, i) {
                    vm.checkbox[objectKey] = false
                })
        }

        function fetchNumbers() {
            vm.initHighlight();
            vm.setupStep();
            $rootScope.loadingProgress = true;
            let param = {
                term: vm.priceBoard.Term,
                gameType: vm.priceBoard.GameType,
                betType: vm.priceBoard.BetType
            };
            network.Games.Lottery.PriceTable.getOdds(param).then(function(response) {
                vm.odds = response;
                $rootScope.loadingProgress = false;
                $timeout(function() {
                    vm.running = false;
                }, 200);
                $timeout(function() {
                    vm.allSet = true;
                }, 800);
                if (msUtils.exists(vm.priceBoard.BetType, [10, 11, 12, 17, 18])) {
                    vm.createNumber3D(vm.filterVal);
                } else if (msUtils.exists(vm.priceBoard.BetType, [13, 14, 19])) {
                    vm.createPopover();
                    vm.createNumber4D(vm.cond4d);
                } else {
                    vm.createNumber2D();
                }
            }).catch(function(error) {})
        }

        function setupStep() {
            vm.steps = [];
            if (msUtils.exists(vm.priceBoard.BetType, [0, 21, 22, 23, 24, 25])) {
                vm.steps = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            } else if (msUtils.exists(vm.priceBoard.BetType, [1, 20, 27])) {
                vm.steps = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300]
            } else {
                vm.steps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
            }
            vm.setupKeyNumber = [10, 11, 12, 13, 14, 17, 18, 19].indexOf(vm.priceBoard.BetType) !== -1;
            vm.show3D = [10, 11, 12, 17, 18].indexOf(vm.priceBoard.BetType) !== -1;
            vm.show4D = [13, 14, 19].indexOf(vm.priceBoard.BetType) !== -1;
        }

        function createNumber2D() {
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 2) {
                vm.numbers = [];
                for (let i = 0; i < 100; i++) {
                    i = i < 10 ? '0' + i : i;
                    vm.numbers.push({
                        num: i.toString()
                    })
                }
            } else {}
            angular.forEach(vm.numbers, function(item, i) {
                let findNrr = $.grep(vm.odds.Numbers, function(e) {
                    return e.Number === item.num
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].RiskAmount === undefined ? vm.odds.Income : findNrr[0].RiskAmount;
                    item.totalRisk = findNrr[0].TotalRiskAmount === undefined ? vm.odds.TotalIncome : findNrr[0].TotalRiskAmount;
                    item.point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.totalPoint = findNrr[0].TotalPoint === undefined ? 0 : findNrr[0].TotalPoint;
                    item.stop = findNrr[0].Stop === undefined ? false : findNrr[0].Stop;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.Income;
                    item.totalRisk = vm.odds.TotalIncome;
                    item.stop = false;
                }
                item.higher = item.point > vm.highlight.atPoint && vm.highlight.enabled;
                item.active = item.point > vm.highlight.atPoint && vm.highlight.enabled && vm.highlight.auto;
            });
            vm.priceBoard.point = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].point
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].totalPoint
            }, 0);
            vm.priceBoard.averagePrice = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].price
            }, 0) / 100;
            vm.sortNumber();
        }

        function createNumber3D(cond) {
            vm.filterVal = cond !== undefined ? cond : undefined;
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 3) {}
            vm.numbers = [];
            let numberArr = [];
            if (vm.filterVal === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (let i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (let i = 0; i < 1000; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    i = i.toString()
                    let integer = Math.floor(vm.filterVal / 10);
                    if (integer === 2) {
                        if (Math.floor(i / 100) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else if (integer === 1) {
                        if (Math.floor((i % 100) / 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else {
                        if (Math.floor(i % 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    }
                }
            }
            angular.forEach(numberArr, function(val) {
                let item = {};
                item.num = val;
                let findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].RiskAmount === undefined ? vm.odds.Income : findNrr[0].RiskAmount;
                    item.totalRisk = findNrr[0].TotalRiskAmount === undefined ? vm.odds.TotalIncome : findNrr[0].TotalRiskAmount;
                    item.point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.totalPoint = findNrr[0].TotalPoint === undefined ? 0 : findNrr[0].TotalPoint;
                    item.stop = findNrr[0].Stop === undefined ? false : findNrr[0].Stop;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.Income;
                    item.totalRisk = vm.odds.TotalIncome;
                    item.stop = false;
                }
                vm.numbers.push(item)
            });
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 1000) / 1000;
            vm.sortNumber();
        }

        function createNumber4D(cond) {
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 10000) / 10000;
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.numbers = [];
            let numberArr = [];
            if (cond === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (let i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (let i = 0; i < 10000; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    i = i.toString();
                    if (i.match(cond.id)) {
                        numberArr.push(i)
                    }
                }
            }
            angular.forEach(numberArr, function(val) {
                let item = {};
                item.num = val;
                let findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].RiskAmount === undefined ? vm.odds.Income : findNrr[0].RiskAmount;
                    item.totalRisk = findNrr[0].TotalRiskAmount === undefined ? vm.odds.TotalIncome : findNrr[0].TotalRiskAmount;
                    item.point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.totalPoint = findNrr[0].TotalPoint === undefined ? 0 : findNrr[0].TotalPoint;
                    item.stop = findNrr[0].Stop === undefined ? false : findNrr[0].Stop;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.Income;
                    item.totalRisk = vm.odds.TotalIncome;
                    item.stop = false;
                }
                vm.numbers.push(item)
            });
            vm.sortNumber();
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];
            for (let i = 0; i < 100; i++) {
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                let j = i.split('');
                vm.popooxx.push({
                    id: '^' + i + '([0-9]+)$',
                    name: i + 'XX'
                });
                vm.popoxxo.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '$',
                    name: i.split('').join('XX')
                });
                vm.popoxox.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$',
                    name: i.split('').join('X') + 'X'
                });
                vm.popxoxo.push({
                    id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] + '$',
                    name: 'X' + i.split('').join('X')
                });
                vm.popxoox.push({
                    id: '^([0-9]+)' + i + '([0-9]+)$',
                    name: 'X' + i + 'X'
                });
                vm.popxxoo.push({
                    id: '^([0-9]+)' + i + '$',
                    name: 'XX' + i
                })
            }
        }

        function sortNumber() {
            vm.viewPoint = vm.viewPoint === undefined ? '1' : vm.viewPoint;
            vm.desc = false;
            if (vm.selected.sort === 'risk') {
                if (vm.viewPoint === '1') {
                    vm.propertyName = 'risk'
                } else {
                    vm.propertyName = 'totalRisk'
                }
                if (vm.priceBoard.BetType === 20) {
                    vm.propertyName = 'point';
                    vm.desc = true;
                }
            } else if (vm.selected.sort === 'num') {
                vm.propertyName = 'num'
            } else {
                vm.propertyName = 'MaxPercent'
            }
            vm.numbers = orderByFilter(vm.numbers, vm.propertyName, vm.desc);
            if (typeof(vm.numbers) === 'object') {
                vm.numbers = vm.numbers.slice(0, 100)
            }
        }

        function openAll(ev) {
            $mdDialog.show({
                controller: openBettingCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/open.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false,
                fullscreen: true,
                locals: {
                    data: vm.aTerms
                }
            });

            function openBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.gameList = data;
                $scope.selected = [];
                angular.forEach(data, function(value) {
                    $scope.selected.push(value.GameType)
                });
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.openBetting = function(next) {
                    $scope.submitting = true;
                    if (!next) {
                        $scope.sent = [];
                        angular.forEach($scope.selected, function(item) {
                            $scope.sent.push({
                                id: item,
                                done: false
                            })
                        });
                    }
                    let count = 0;
                    angular.forEach($scope.sent, function(item) {
                        if (item.done) {
                            count++
                        }
                    });
                    if (count === $scope.sent.length) {
                        $mdDialog.hide();
                        $rootScope.$emit('CallParentMethod', {});
                    }
                    let continueCheck = false;
                    angular.forEach($scope.sent, function(item) {
                        if (!continueCheck) {
                            if (!item.done) {
                                continueCheck = true;
                                let param = {
                                    term: data[0].Term,
                                    gameType: item.id,
                                    status: 1
                                };
                                if (param.gameType === 1) {
                                    param.includeBetTypes = [7, 10, 11, 12, 13, 14]
                                }
                                network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                                    if (response) {
                                        item.done = true;
                                        continueCheck = false;
                                        $timeout(function() {
                                            $scope.openBetting(true);
                                        }, 500)
                                    }
                                }).catch(function(error) {
                                    message.alert(error.message)
                                })
                            }
                        }
                    });
                };
            }
        }

        function closeAll(ev) {
            $mdDialog.show({
                controller: closeBettingCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/close.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false,
                fullscreen: true,
                locals: {
                    data: vm.aTerms,
                    current: vm.priceBoard.GameType
                }
            });

            function closeBettingCtrl($scope, $mdDialog, data, current, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.gameList = data;
                $scope.selected = [];
                angular.forEach(data, function(value) {
                    if (current === 0 || current === 1) {
                        if ([0, 1].indexOf(value.GameType) > -1) {
                            $scope.selected.push(value.GameType)
                        }
                    } else {
                        if ([2, 3, 4, 5].indexOf(value.GameType) > -1) {
                            $scope.selected.push(value.GameType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBetting = function(next) {
                    $scope.submitting = true;
                    if (!next) {
                        $scope.sent = [];
                        angular.forEach($scope.selected, function(item) {
                            $scope.sent.push({
                                id: item,
                                done: false
                            })
                        });
                    }
                    let count = 0;
                    angular.forEach($scope.sent, function(item) {
                        if (item.done) {
                            count++
                        }
                    });
                    if (count === $scope.sent.length) {
                        $mdDialog.hide();
                        $rootScope.$emit('CallParentMethod', {});
                    }
                    let continueCheck = false;
                    angular.forEach($scope.sent, function(item) {
                        if (!continueCheck) {
                            if (!item.done) {
                                continueCheck = true;
                                let param = {
                                    term: data[0].Term,
                                    gameType: item.id,
                                    status: 0,
                                    excludeBetTypes: [20]
                                };
                                network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                                    if (response) {
                                        item.done = true;
                                        continueCheck = false;
                                        $timeout(function() {
                                            $scope.closeBetting(true);
                                        }, 500)
                                    }
                                }).catch(function(error) {
                                    message.alert(error.message)
                                })
                            }
                        }
                    });
                }
            }
        }

        function closeExcept(ev) {
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false,
                fullscreen: true,
                locals: {
                    data: vm.aTerms
                }
            });

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.gameList = [];
                $scope.selected = [];
                angular.forEach(data, function(value) {
                    if ([0, 1].indexOf(value.GameType) > -1) {
                        $scope.gameList.push(value);
                        $scope.selected.push(value.GameType)
                    }
                });
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function(next) {
                    $scope.submitting = true;
                    if (!next) {
                        $scope.sent = [];
                        angular.forEach($scope.selected, function(item) {
                            $scope.sent.push({
                                id: item,
                                done: false
                            })
                        });
                    }
                    let count = 0;
                    angular.forEach($scope.sent, function(item) {
                        if (item.done) {
                            count++
                        }
                    });
                    if (count === $scope.sent.length) {
                        $mdDialog.hide();
                        $rootScope.$emit('CallParentMethod', {});
                    }
                    let continueCheck = false;
                    angular.forEach($scope.sent, function(item) {
                        if (!continueCheck) {
                            if (!item.done) {
                                continueCheck = true;
                                let param = {
                                    term: data[0].Term,
                                    gameType: item.id,
                                    status: 0,
                                    excludeBetTypes: []
                                };
                                if (item.id === 0) {
                                    param.excludeBetTypes.push(0, 5, 20, 21, 24, 25)
                                } else {
                                    param.excludeBetTypes.push(8, 11, 13, 20)
                                }
                                network.Games.Lottery.Term.updateGameStatus(param).then(function(response) {
                                    if (response) {
                                        item.done = true;
                                        continueCheck = false;
                                        $timeout(function() {
                                            $scope.closeBettingExcept(true);
                                        }, 500)
                                    }
                                }).catch(function(error) {
                                    message.alert(error.message)
                                })
                            }
                        }
                    })
                }
            }
        }

        function closeCaishen($event) {
            if (!vm.hasWritePermission || !vm.isCompany) {
                return
            }
            $mdDialog.show({
                controller: closeCaishenCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.aTerms
                }
            });

            function closeCaishenCtrl($scope, $mdDialog, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Đóng đề';
                $scope.textContent = 'Xác nhận đóng Đề Thần Tài';
                $scope.done = function() {
                    $scope.submitting = true;
                    let param = {
                        term: data[0].Term,
                        gameType: 0,
                        status: 0,
                        includeBetTypes: [24, 25]
                    };
                    network.Games.Lottery.Term.updateGameStatus(param).then(function(resp) {
                        $mdDialog.cancel();
                    }).catch(function(error) {
                        message.alert(error.message)
                    })
                }
            }
        }

        function checkboxEvent() {
            angular.forEach(vm.numbers, function(number) {
                number.active = false
            });
            Object.keys(vm.checkbox).map(function(objectKey, i) {
                let checkid = parseInt(objectKey.substring(3, 4));
                if (vm.checkbox[objectKey]) {
                    angular.forEach(vm.numbers, function(number, index) {
                        if (objectKey.substring(0, 3) === 'col') {
                            if (index % 10 === checkid) {
                                number.active = true;
                            }
                        } else {
                            if (Math.floor(index / 10) === checkid) {
                                number.active = true;
                            }
                        }
                    });
                }
            })
            vm.checkAddPriceCondition();
        }

        function cancelChecked() {
            angular.forEach(vm.numbers, function(number) {
                number.active = false
            });
            if (typeof(vm.checkbox) === 'object')
                Object.keys(vm.checkbox).map(function(objectKey, i) {
                    vm.checkbox[objectKey] = false
                })
            vm.checkAddPriceCondition();
        }

        function closeNumber(ev, item) {
            if (!vm.hasWritePermission || vm.priceBoard.TermStatus !== 1) {
                return
            }
            let msg = item.stop === false ? 'Quý khách muốn thực hiện đóng số <span class="badge badge-danger">' + item.num + '</span>' : 'Quý khách muốn mở cược cho số <span class="badge badge-primary">' + item.num + '</span>';
            let mdclass = item.stop ? 'md-accent' : 'md-warn';
            $mdDialog.show({
                parent: angular.element(document.body),
                clickOutsideToClose: true,
                targetEvent: ev,
                locals: {
                    data: vm.priceBoard
                },
                template: '<md-dialog aria-label="dialog" class="warning-close-number">' +
                    '<md-toolbar class="' + mdclass + '">' +
                    '<div class="md-toolbar-tools">Yêu cầu xác nhận</div>' +
                    '</md-toolbar>' +
                    '  <md-dialog-content style="min-width: 400px">' +
                    '   <div class="md-dialog-content">' +
                    '       <p>' + msg + '</p>' +
                    '   </div>' +
                    '</md-dialog-content>' +
                    '  <md-dialog-actions>' +
                    '    <md-button ng-click="closeDialog()">Cancel</md-button>' +
                    '    <md-button ng-click="confirmDialog()" class="md-primary">OK</md-button>' +
                    '  </md-dialog-actions>' +
                    '</md-dialog>',
                controller: function dialogCtrl($scope, data, message) {
                    $scope.closeDialog = function() {
                        $mdDialog.hide();
                    };
                    $scope.confirmDialog = function() {
                        let url = item.stop ? 'api/manipulation/managenumber/open' : 'api/manipulation/managenumber/close';
                        let mess = item.stop ? 'Mở số thành công' : 'Đóng số thành công';
                        let request = {
                            term: data.Term,
                            gameType: data.GameType,
                            betType: data.BetType,
                            numbers: [item.num]
                        };
                        if (!item.stop) {
                            network.Games.Lottery.PriceTable.closeNumbers(request).then(function(response) {
                                if (response) {
                                    message.info(mess);
                                    $mdDialog.hide();
                                    item.stop = !item.stop;
                                }
                            })
                        } else {
                            network.Games.Lottery.PriceTable.openNumbers(request).then(function(response) {
                                if (response) {
                                    message.info(mess);
                                    $mdDialog.hide();
                                    item.stop = !item.stop;
                                }
                            })
                        }
                    }
                }
            });
            ev.stopPropagation()
        }

        function inputKeyNumber() {
            let value = vm.keynumber.split(',');
            if (value[value.length - 1].length > 1) {
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber() {
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0) {
                return
            }
            let arr = vm.keynumber.split(',');
            let arrInput = [];
            for (let i = 0; i < arr.length; i++) {
                let number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)) {
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function(val) {
                if (arrInput.indexOf(val.num) !== -1) {
                    val.active = true
                }
            });
            vm.keynumber = '';
            document.getElementById('price-setup').focus();
            vm.checkAddPriceCondition();
        }

        function priceSetting() {
            let price = vm.pricesetup;
            if (isNaN(price) || !angular.isNumber(+price) || price.length === 0) {
                return
            }
            let data = {};
            data.term = vm.priceBoard.Term;
            data.gameType = vm.priceBoard.GameType;
            data.betType = vm.priceBoard.BetType;
            data.numberPrices = [];
            angular.forEach(vm.numbers, function(val) {
                if (val.active) {
                    data.numberPrices.push({
                        number: val.num,
                        price: price
                    })
                }
            });
            if (data.numberPrices.length !== 0) {
                $rootScope.loadingProgress = true;
                network.Games.Lottery.PriceTable.updatePrices(data).then(function(response) {
                    if (response) {
                        angular.forEach(vm.numbers, function(e) {
                            if (e.active) {
                                e.price = price;
                                delete e.active;
                            }
                        });
                        vm.pricesetup = '';
                        if (typeof(vm.checkbox) === 'object') {
                            Object.keys(vm.checkbox).map(function(objectKey, i) {
                                vm.checkbox[objectKey] = false
                            });
                        }
                        $rootScope.loadingProgress = false;
                        $timeout(function() {
                            $scope.$digest();
                        })
                    }
                }).catch(function(error) {
                    message.info(error.message);
                    $rootScope.loadingProgress = false;
                    $timeout(function() {
                        $scope.$digest();
                    })
                })
            }
        }

        function changePriceNumber(number, event, ev) {
            if (vm.priceBoard.TermStatus !== 1) {
                return
            }
            let newPrice = event === 'add' ? number.price + parseInt(vm.priceStep) : number.price - parseInt(vm.priceStep);
            let data = {};
            data.term = vm.priceBoard.Term;
            data.gameType = vm.priceBoard.GameType;
            data.betType = vm.priceBoard.BetType;
            data.numberPrices = [{
                number: number.num,
                price: newPrice
            }];
            $rootScope.loadingProgress = true;
            network.Games.Lottery.PriceTable.updatePrices(data).then(function(response) {
                if (response) {
                    number.price = newPrice;
                    $rootScope.loadingProgress = false;
                    $timeout(function() {
                        $scope.$digest();
                    })
                }
            }).catch(function(error) {
                $rootScope.loadingProgress = false;
                message.info(error.message)
            })
            ev.stopPropagation()
        }

        function settingPrice(ev, item) {
            if (!vm.hasWritePermission || vm.priceBoard.TermStatus !== 1) {
                return
            }
            $mdDialog.show({
                controller: settingPriceCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/settingPrice.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            }).then(function() {}, function(cancel) {
                if (cancel !== undefined)
                    item.price = cancel;
            });

            function settingPriceCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.newPrice = data.price;
                $scope.number = data.num;
                $scope.submitForm = function() {
                    let send = {};
                    send.term = vm.priceBoard.Term;
                    send.gameType = vm.priceBoard.GameType;
                    send.betType = vm.priceBoard.BetType;
                    send.numberPrices = [{
                        number: data.num,
                        price: $scope.newPrice
                    }];
                    $scope.submitting = true;
                    network.Games.Lottery.PriceTable.updatePrices(send).then(function(response) {
                        $scope.submitting = false;
                        if (response) {
                            $mdDialog.cancel($scope.newPrice);
                        }
                    }).catch(function(error) {
                        $scope.submitting = false;
                        $scope.warningMessage = error.message;
                        $scope.$digest();
                    })
                }
            }
            ev.stopPropagation()
        }

        function collectionNumber(ev) {
            $mdDialog.show({
                controller: collectionNumberCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/collection.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            }).then(function() {}, function(cancel) {
                if (cancel !== undefined)
                    angular.forEach(vm.numbers, function(item) {
                        if (cancel.indexOf(item.num) !== -1) {
                            item.active = true;
                        }
                    });
                vm.checkAddPriceCondition();
            });

            function collectionNumberCtrl($scope, $mdDialog) {
                $scope.dataCollection = {};
                $scope.dataCollection.congiap = collection.list['congiap'];
                $scope.dataCollection.dauduoi = collection.list['dauduoi'];
                $scope.dataCollection.tongba = collection.list['tongba'];
                $scope.dataCollection.bodau = collection.list['bodau'];
                $scope.dataCollection.tong = collection.list['tong'];
                $scope.dataCollection.kep = collection.list['kep'];
                $scope.dataList = collection.list;
                $scope.chooseRadio = function() {
                    $scope.setting = [];
                    Object.keys($scope.radio).map(function(objectKey, index) {
                        let arr = $.grep($scope.dataList[objectKey], function(e) {
                            return e.id === parseInt($scope.radio[objectKey])
                        });
                        $scope.setting.push(arr[0].content);
                    });
                    $scope.setting = containsAll.apply(this, $scope.setting);
                };
                $scope.cancel = function() {
                    $mdDialog.cancel($scope.setting);
                };

                function containsAll() {
                    let output = [];
                    let cntObj = {};
                    let array, item, cnt;
                    for (let i = 0; i < arguments.length; i++) {
                        array = arguments[i];
                        for (let j = 0; j < array.length; j++) {
                            item = "-" + array[j];
                            cnt = cntObj[item] || 0;
                            if (cnt === i) {
                                cntObj[item] = cnt + 1;
                            }
                        }
                    }
                    for (item in cntObj) {
                        if (cntObj.hasOwnProperty(item) && cntObj[item] === arguments.length) {
                            output.push(item.substring(1));
                        }
                    }
                    return (output);
                }
            }
        }

        function viewBetting(ev, item) {
            if (item.point === 0) {
                ev.stopPropagation()
                return;
            }
            $mdDialog.show({
                controller: viewBettingTraCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/view.betting.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    item: item
                }
            });

            function viewBettingTraCtrl($scope, $mdDialog, $timeout, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.isCompany = vm.isCompany;
                $scope.config = {
                    isInfinity: false,
                    MaxPoint: 0,
                    NumberLoaded: 0,
                    Paused: false
                }
                $scope.dtOptions = {
                    autoWidth: true,
                    responsive: true,
                    searching: false,
                    paging: false,
                    bInfo: false,
                    bPaginate: false,
                    columnDefs: [{
                        targets: 0,
                        orderable: false
                    }, {
                        targets: 4,
                        orderable: false
                    }]
                };
                $scope.bettingContents = [];
                $scope.FilterHighestPoint = function() {
                    $scope.bettingContents = [];
                    $scope.submitting = true;
                    $scope.loadMore = false;
                    let data = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        Number: item.num,
                        Limit: 100,
                        MaxPoint: $scope.config.MaxPoint
                    };
                    network.Reporting.Traditional.Outstanding.getHighestPointTicketItemsByNumber(data).then(function(response) {
                        $scope.bettingContents = response;
                        $timeout(function() {
                            $scope.submitting = false;
                        }, 200)
                    })
                }
                $scope.loadBetList = function(ltID) {
                    if ($scope.config.Paused) {
                        $scope.bettingContents = [];
                        $scope.config.Paused = false;
                        $scope.config.NumberLoaded = 0;
                    }
                    $scope.submitting = true;
                    ltID = ltID === undefined ? '' : ltID;
                    let data = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        Number: item.num,
                        LastId: ltID
                    };
                    network.Reporting.Traditional.Outstanding.getTicketItemsByNumber(data).then(function(response) {
                        $scope.loadMore = response.length === 25;
                        if ($scope.loadMore) {
                            $scope.config.NumberLoaded++;
                            $scope.lastID = response[response.length - 1].Id;
                        }
                        $scope.bettingContents = $scope.bettingContents.concat(response);
                        if ($scope.config.NumberLoaded > 19) {
                            $scope.config.Paused = true;
                            $scope.submitting = false;
                            $mdToast.show($mdToast.simple().textContent('Đã có 500 Records. Hãy copy ra sau đó tải tiếp').position('bottom right').hideDelay(7000));
                        }
                        if (!$scope.loadMore) {
                            message.message('Đã tải hết dữ liệu');
                        }
                        $timeout(function() {
                            $scope.submitting = false;
                            if ($scope.config.isInfinity && $scope.loadMore && !$scope.config.Paused) {
                                $scope.loadBetList($scope.lastID)
                            }
                        }, 500)
                    })
                };
                $scope.viewOutStanding = function(member) {
                    $mdDialog.show({
                        controller: viewOutStandingCtrl,
                        templateUrl: 'app/main/traditional/price_table/dialog/view.outstanding.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        fullscreen: true,
                        multiple: true,
                        locals: {
                            member: member
                        }
                    });

                    function viewOutStandingCtrl($scope, $mdDialog, $timeout, member) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.OutDtOptions = {
                            autoWidth: true,
                            responsive: true,
                            searching: false,
                            paging: false,
                            retrieve: true,
                            bInfo: false,
                            bPaginate: false,
                            columnDefs: [{
                                targets: 2,
                                orderable: false
                            }, {
                                targets: 4,
                                orderable: false
                            }]
                        };
                        $scope.member = member;
                        $scope.priceBoard = vm.priceBoard;
                        $scope.outStandingMembers = [];
                        $scope.data = {
                            UserId: member.UserId,
                            GameType: vm.priceBoard.GameType,
                            BetType: vm.priceBoard.BetType,
                            Limit: 100
                        };
                        $scope.loadMemberReport = function(ltId) {
                            $scope.data.LastId = ltId === undefined ? '' : ltId;
                            $scope.submitting = true;
                            network.Reporting.Traditional.Outstanding.getTicketItems($scope.data).then(function(response) {
                                $scope.hasRecord = response.length === $scope.data.Limit;
                                $scope.outStandingMembers = $scope.outStandingMembers.concat(response);
                                $scope.submitting = false;
                                $scope.$digest();
                            })
                        }
                        $scope.loadMemberReport();
                        $scope.viewIp = function(ip) {
                            $mdDialog.show({
                                controller: viewIpCtrl,
                                templateUrl: 'app/main/dashboard/dialog/ip.html',
                                targetEvent: ev,
                                clickOutsideToClose: true,
                                multiple: true,
                                fullscreen: true,
                                locals: {
                                    ip: ip
                                }
                            });

                            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                                $scope.cancel = function() {
                                    $mdDialog.cancel();
                                };
                                Lotus.IpLookup.lookup(ip).then(function(response) {
                                    $scope.ipLookup = response;
                                    $scope.$digest();
                                });
                            }
                        }
                    }
                    ev.stopPropagation()
                }
                $scope.loadBetList();
                $scope.viewIp = function(ip) {
                    $mdDialog.show({
                        controller: viewIpCtrl,
                        templateUrl: 'app/main/dashboard/dialog/ip.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            ip: ip
                        }
                    });

                    function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        Lotus.IpLookup.lookup(ip).then(function(response) {
                            $scope.ipLookup = response;
                            $scope.$digest();
                        });
                    }
                }
                $scope.countNumbers = function(item) {
                    if (!vm.isCompany) {
                        return
                    }
                    let param = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        PlayerUserIdList: [item.UserId],
                    };
                    $scope.submitting = true;
                    Lotus.Lottery.PriceTable.buildCustomPlayerOdds(param).then(function(response) {
                        let countNumbers = response.Numbers.filter(function(number) {
                            return number.Point > 0
                        })
                        item.counts = countNumbers.length;
                        $timeout(function() {
                            $scope.submitting = false;
                        }, 200)
                    })
                }
            }
            ev.stopPropagation()
        }

        function makeOdds() {
            if (!vm.hasPermission) {
                return
            }
            $rootScope.loadingProgress = true;
            network.Games.Lottery.Live.makeOdds({
                Term: vm.priceBoard.Term,
                GameType: vm.priceBoard.GameType
            }).then(function(response) {
                if (response) {
                    message.info('Chuyển giá thành công')
                }
                $rootScope.loadingProgress = false;
            }).catch(function(error) {
                $rootScope.loadingProgress = false;
                message.info(error.message);
            })
        }

        function getNumberPriceExceptions() {
            vm.aPriceExcep = [];
            network.Games.Lottery.PriceAutoManagement.getNumberPriceExceptions({
                Term: vm.priceBoard.Term,
                GameType: vm.priceBoard.GameType,
                BetType: vm.priceBoard.BetType
            }).then(function(response) {
                vm.aPriceExcep = response;
                vm.addPriceException();
            })
        }

        function priceException(ev, item) {
            if (!vm.hasWritePermission || !vm.isCompany || vm.priceBoard.TermStatus !== 1) {
                return
            }
            $mdDialog.show({
                controller: priceExceptionCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/price-exception.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function priceExceptionCtrl($scope, $mdDialog, item, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.number = angular.copy(item);
                $scope.number.PriceException = $scope.number.PriceException === undefined ? 0 : $scope.number.PriceException;
                $scope.submitForm = function() {
                    $scope.submitting = true;
                    let data = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        Number: $scope.number.num,
                        Price: $scope.number.PriceException
                    };
                    network.Games.Lottery.PriceAutoManagement.updateNumberPriceException(data).then(function(response) {
                        $scope.submitting = false;
                        let finPE = vm.aPriceExcep.filter(function(ap) {
                            return ap.Number === data.Number
                        });
                        if (finPE.length) {
                            finPE[0].Price = data.Price
                        } else {
                            vm.aPriceExcep.push({
                                Number: data.Number,
                                Price: data.Price
                            })
                        }
                        vm.addPriceException();
                        $mdDialog.cancel();
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
            ev.stopPropagation()
        }

        function addPriceException() {
            angular.forEach(vm.numbers, function(n) {
                let fn = vm.aPriceExcep.filter(function(fn) {
                    return fn.Number === n.num
                });
                if (fn.length) {
                    n.PriceException = fn[0].Price
                } else {
                    delete n.PriceException
                }
            })
        }

        function toggleSidenav(sidenavId) {
            $mdSidenav(sidenavId).toggle();
        }

        function navChangeGame(game) {
            vm.selected.GameType = game;
            $timeout(function() {
                vm.changeGame();
            })
        }

        function navChangeSortDefs(id) {
            vm.selected.sort = id;
            $timeout(function() {
                vm.sortNumber()
            })
        }

        function showNumberSheet(number, $event) {
            $mdBottomSheet.show({
                templateUrl: 'app/main/traditional/price_table/sidenavs/number-bottom-sheet-template.html',
                controller: 'ListBottomSheetCtrl'
            }).then(function(clickedItem) {
                if (clickedItem.id === 0) {
                    vm.settingPrice($event, number)
                } else if (clickedItem.id === 1) {
                    vm.customPercent($event, number)
                } else if (clickedItem.id === 2) {
                    vm.viewBetting($event, number)
                }
            }).catch(function(error) {})
        }

        function bettingItems(ev) {
            $mdDialog.show({
                controller: bettingItemsCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/betting.items.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: $rootScope.current
                }
            });

            function bettingItemsCtrl($scope, $mdDialog, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.betGroups = [{
                    id: 0,
                    name: '2D',
                    value: [0, 1, 21, 7, 8, 9, 20, 15, 16, 22, 23, 24, 25]
                }, {
                    id: 1,
                    name: '3D',
                    value: [10, 11, 12, 17, 18]
                }, {
                    id: 2,
                    name: '4D',
                    value: [13, 14, 19]
                }, {
                    id: 3,
                    name: 'Xiên 2',
                    value: [2]
                }, {
                    id: 4,
                    name: 'Xiên 3',
                    value: [3]
                }, {
                    id: 5,
                    name: 'Xiên 4',
                    value: [4]
                }];
                $scope.selected = [0];
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.filterGroup = {};
                $scope.filterGroup.userName = true;
                $scope.setting = {};
                $scope.setting.point = 2000;
                $scope.setting.minrecord = 3;
                $scope.colors = ['#eac2fc', '#fcfab3', '#7af4d6', '#c9b0f2', '#ceef73', '#f9b775', '#f977d5', '#efa2ee', '#f7f78a', '#a8fc9f', '#a6d6ed', '#c77ff4', '#adf481', '#c7f0fc', '#fcc4ba', '#8cf7c3', '#ffc6d4', '#bc6ef4', '#f99fe7', '#a98bed', '#f98886', '#79f7d1', '#d38dfc', '#abd1fc', '#d7c2f9', '#ed817b', '#edfc7b'];
                $scope.currentBetting = function() {
                    $scope.dataBinds = [];
                    let betlist = [];
                    angular.forEach($scope.selected, function(val) {
                        betlist.push.apply(betlist, $.grep($scope.betGroups, function(e, i) {
                            return e.id === val
                        })[0].value)
                    });
                    if (betlist.length) {
                        betlist.sort(function(a, b) {
                            return a - b
                        });
                        let post = {
                            TermName: data.Term,
                            BetTypes: betlist,
                            Point: $scope.setting.point
                        };
                        if ($scope.setting.account) {
                            post.UserName = $scope.setting.account
                        }
                        network.POSTdata('api/stats/bettingitems/latest', post).then(function(response) {
                            if (response.length) {
                                $scope.dataBinds = processData(response)
                            } else {
                                $scope.dataBinds = []
                            }
                        })
                    }
                };

                function processData(resp) {
                    let compare = groupBy(resp);
                    let srcOp = ($scope.filterGroup.userName ? 1 : 0) +
                        ($scope.filterGroup.number ? 2 : 0) +
                        ($scope.filterGroup.point ? 4 : 0) +
                        ($scope.filterGroup.ip ? 8 : 0) +
                        ($scope.filterGroup.betType ? 16 : 0);
                    $.each(resp, function(index, value) {
                        let search = jQuery.grep(compare, function(i, e) {
                            let findOp = 0;
                            if (i.userName === value.userName) {
                                findOp += 1;
                            }
                            if (i.numbers === value.numbers.join(',')) {
                                findOp += 2;
                            }
                            if (i.point === value.point) {
                                findOp += 4;
                            }
                            if (i.betType === value.betType) {
                                findOp += 16;
                            }
                            if (i.ipAddress === value.ipAddress) {
                                findOp += 8;
                            }
                            return (srcOp & findOp) === srcOp
                        });
                        if (search.length !== 0 && search[0].seq >= $scope.setting.minrecord) {
                            value.classIndex = search[0].groupIndex
                        } else {
                            value.classIndex = 0
                        }
                    });
                    return resp;
                }

                function groupBy(source) {
                    let group = [];
                    $scope.filterGroup = $scope.filterGroup || {
                        userName: false,
                        number: false,
                        point: false,
                        betType: false,
                        ip: false
                    };
                    let srcOp = ($scope.filterGroup.userName ? 1 : 0) +
                        ($scope.filterGroup.number ? 2 : 0) +
                        ($scope.filterGroup.point ? 4 : 0) +
                        ($scope.filterGroup.ip ? 8 : 0) +
                        ($scope.filterGroup.betType ? 16 : 0);
                    if (srcOp === 0) {
                        return group;
                    }
                    for (let i = 0; i < source.length; i++) {
                        let item = source[i];
                        let found = false;
                        for (let j = 0; j < group.length; j++) {
                            let distOp = 0;
                            if (group[j].userName === item.userName) {
                                distOp += 1;
                            }
                            if (group[j].numbers === item.numbers.join(',')) {
                                distOp += 2;
                            }
                            if (group[j].point === item.point) {
                                distOp += 4;
                            }
                            if (group[j].ipAddress === item.ipAddress) {
                                distOp += 8;
                            }
                            if (group[j].betType === item.betType) {
                                distOp += 16;
                            }
                            if ((distOp & srcOp) === srcOp) {
                                group[j].seq += 1;
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            let index = group.length + 1;
                            group.push({
                                seq: 1,
                                groupIndex: index,
                                userName: $scope.filterGroup.userName ? item.userName : 'nil',
                                point: $scope.filterGroup.point ? item.point : 'nil',
                                betType: $scope.filterGroup.betType ? item.betType : 'nil',
                                ipAddress: $scope.filterGroup.ip ? item.ipAddress : 'nil',
                                numbers: $scope.filterGroup.number ? item.numbers.join(',') : 'nil'
                            });
                        }
                    }
                    return group;
                }
            }
        }

        function companyBoard($event) {
            $mdDialog.show({
                controller: companyBoardCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/big.board.dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {}
            });

            function companyBoardCtrl($scope, $mdDialog, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.onTabSelected = function(tab) {
                    $scope.GameType = tab;
                    $scope.count = 0;
                    if (tab === 0) {
                        $scope.monitorBets = [0, 1, 2, 3, 4, 20, 22, 21]
                    } else {
                        $scope.monitorBets = [2, 3, 4, 7, 8, 9, 10, 11, 12]
                    }
                }
                $scope.initSetting = function() {
                    $scope.alarmSetting = {
                        point: {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            20: 0,
                            21: 0,
                            22: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0
                        },
                        risk: {
                            0: 0,
                            1: 0,
                            2: 0,
                            3: 0,
                            4: 0,
                            20: 0,
                            21: 0,
                            22: 0,
                            7: 0,
                            8: 0,
                            9: 0,
                            10: 0,
                            11: 0
                        },
                    }
                }
                let lastSetting = JSON.parse(localStorage.getItem('setting-alarm'));
                if (typeof lastSetting === 'object' && lastSetting !== null) {
                    $scope.alarmSetting = lastSetting
                } else {
                    $scope.initSetting();
                }
                $scope.updateSetting = function() {
                    localStorage.setItem('setting-alarm', JSON.stringify($scope.alarmSetting))
                }
                $scope.interval = 30;
                $scope.countdown = function() {
                    let interval = $timeout(function() {
                        $scope.interval = $scope.interval < 10 ? 10 : $scope.interval;
                        if ($scope.count === 0) {
                            $scope.getOdds();
                        }
                        $scope.count++;
                        if ($scope.count > $scope.interval) {
                            $scope.count = 0
                        }
                        $scope.countdown();
                    }, 1000);
                    $scope.$on('$destroy', function() {
                        $timeout.cancel(interval);
                    });
                };
                $scope.countdown();
                $scope.colors = ['#ff0400', '#0075c6', '#ffff00', '#00ae52', '#ff9900', '#990099', '#808080', '#99ccff', '#d47d7d', '#b3d303', '#a6d6ed', '#c77ff4', '#adf481', '#c7f0fc', '#fcc4ba', '#8cf7c3', '#ffc6d4', '#bc6ef4', '#f99fe7', '#a98bed', '#f98886', '#79f7d1', '#d38dfc', '#abd1fc', '#d7c2f9', '#ed817b', '#edfc7b'];

                function getOdd(BetType) {
                    let param = {
                        term: vm.priceBoard.Term,
                        gameType: $scope.GameType,
                        betType: BetType
                    };
                    return network.Games.Lottery.PriceTable.getOdds(param).then(function(response) {
                        response.BetType = BetType;
                        response.Numbers.sort(function(a, b) {
                            return a.RiskAmount - b.RiskAmount
                        });
                        angular.forEach(response.Numbers, function(Number) {
                            Number.Price = Number.ExtraPrice !== undefined ? response.Price + Number.ExtraPrice : response.Price;
                        });
                        return response
                    })
                }
                $scope.highlightNumber = function() {
                    $scope.oddData.map(function(odd) {
                        odd.TotalPoint = 0;
                        odd.Numbers.map(function(number) {
                            odd.TotalPoint += number.Point !== undefined ? number.Point : 0;
                        })
                    })
                    console.log($scope.oddData)
                    let numberArr = [],
                        result = [];
                    angular.forEach($scope.oddData, function(odd) {
                        if (odd.BetType === 20) {
                            odd.Numbers = odd.Numbers.sort(function(a, b) {
                                return b.Point - a.Point
                            })
                        }
                        if (odd.BetType !== 21) {
                            angular.forEach(odd.Numbers, function(number, index) {
                                if (index < 10) {
                                    numberArr.push(number.Number)
                                }
                            })
                        }
                    });
                    for (let i = 0; i < 100; i++) {
                        i = i < 10 ? '0' + i : i;
                        if ($.grep(numberArr, function(n) {
                                return n === i.toString()
                            }).length > 2) {
                            result.push(i.toString())
                        }
                    }
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            let indexColor = result.indexOf(number.Number);
                            if (indexColor > -1 && odd.BetType !== 21) {
                                number.classIndex = indexColor
                            }
                        })
                    })
                    $scope.alarmDanger();
                };
                $scope.getOdds = function() {
                    if ($scope.GameType === 0) {
                        Promise.all([getOdd(0), getOdd(1), getOdd(2), getOdd(3), getOdd(4), getOdd(20), getOdd(22), getOdd(21)]).then(function(values) {
                            $scope.oddData = values;
                            $scope.highlightNumber();
                        })
                    } else {
                        Promise.all([getOdd(2), getOdd(3), getOdd(4), getOdd(7), getOdd(8), getOdd(9), getOdd(10), getOdd(11), getOdd(12)]).then(function(values) {
                            $scope.oddData = values;
                            $scope.highlightNumber();
                        })
                    }
                };
                $scope.hoverOut = function() {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            number.hover = false;
                        })
                    })
                };
                $scope.hoverIn = function(num) {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            if (number.Number === num && number.classIndex !== undefined) {
                                number.hover = true;
                            }
                        })
                    })
                };
                $scope.alarmDanger = function() {
                    let danger = false;
                    let checkNumbers;
                    for (let key in $scope.alarmSetting) {
                        if ($scope.alarmSetting.hasOwnProperty(key)) {
                            for (let cp in $scope.alarmSetting[key]) {
                                if ($scope.alarmSetting[key].hasOwnProperty(cp)) {
                                    let checkValue = $scope.alarmSetting[key][cp];
                                    if ($scope.oddData.filter(function(k) {
                                            return k.BetType === parseInt(cp)
                                        }).length) {
                                        checkNumbers = $scope.oddData.filter(function(k) {
                                            return k.BetType === parseInt(cp)
                                        })[0].Numbers
                                        if (checkNumbers.length) {
                                            checkNumbers.map(function(number) {
                                                if (key === 'point') {
                                                    if (checkValue !== 0 && number.Point > checkValue) {
                                                        danger = true;
                                                        number.highlightByPoint = true;
                                                    } else {
                                                        number.highlightByPoint = false
                                                    }
                                                } else {
                                                    if (checkValue !== 0 && number.RiskAmount < checkValue * 1000) {
                                                        danger = true;
                                                        number.highlightByRisk = true;
                                                    } else {
                                                        number.highlightByRisk = false;
                                                    }
                                                }
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (danger) {
                        $scope.playSound();
                    }
                }
                $scope.playSound = function() {
                    let audio = new Audio('/assets/alarm-danger.mp3');
                    audio.play();
                }
            }
        }

        function changeCurrentStatus(status, $event) {
            if (!vm.hasWritePermission || !vm.isCompany) {
                return
            }
            $mdDialog.show({
                controller: openCurrentCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true
            });

            function openCurrentCtrl($scope, $mdDialog) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Xác nhận';
                $scope.textContent = status === 1 ? 'Xác nhận mở ' + $filter('bet')(vm.priceBoard.BetType, false, vm.priceBoard.GameType) : 'Xác nhận đóng ' + $filter('bet')(vm.priceBoard.BetType, false, vm.priceBoard.GameType);
                $scope.done = function() {
                    $scope.submitting = true;
                    let param = {
                        term: vm.aTerms[0].Term,
                        gameType: vm.priceBoard.GameType,
                        status: status,
                        includeBetTypes: [vm.priceBoard.BetType]
                    };
                    network.Games.Lottery.Term.updateGameStatus(param).then(function(resp) {
                        $mdDialog.cancel();
                        if (resp.Result) {
                            vm.fetchCurrentTerm(true);
                        }
                    }).catch(function(error) {
                        message.alert(error.message)
                    })
                }
            }
        }

        function activeNumber(number) {
            if (!vm.isCompany) {
                return
            }
            number.active = !number.active;
            vm.checkAddPriceCondition();
        }

        function checkAddPriceCondition() {
            let count = 0;
            vm.numbers.map(function(n, index) {
                if (n.active) {
                    count++
                }
            })
            vm.mayAdd = count !== 0;
        }

        function changeManyPrice(event) {
            if (vm.priceBoard.TermStatus !== 1) {
                return
            }
            let data = {};
            data.term = vm.priceBoard.Term;
            data.gameType = vm.priceBoard.GameType;
            data.betType = vm.priceBoard.BetType;
            data.numberPrices = [];
            vm.numbers.map(function(number, index) {
                if (number.active) {
                    let newPrice = event === 'add' ? number.price + parseInt(vm.priceStep) : number.price - parseInt(vm.priceStep);
                    data.numberPrices.push({
                        number: number.num,
                        price: newPrice
                    })
                }
            })
            $rootScope.loadingProgress = true;
            network.Games.Lottery.PriceTable.updatePrices(data).then(function(response) {
                if (response) {
                    vm.numbers.map(function(number, index) {
                        let find = data.numberPrices.filter(function(item) {
                            return item.number === number.num
                        })
                        if (find.length) {
                            number.price = find[0].price
                        }
                        number.active = false;
                    })
                    $rootScope.loadingProgress = false;
                    vm.cancelChecked();
                    $timeout(function() {
                        $scope.$digest();
                    })
                }
            }).catch(function(error) {
                $rootScope.loadingProgress = false;
                message.info(error.message)
            })
        }

        function closeManyNumber($event, cond) {
            if (!vm.hasWritePermission || vm.priceBoard.TermStatus !== 1) {
                return
            }
            let msg = cond === 'open' ? 'Quý khách muốn thực hiện mở danh sách số đã chọn?' : 'Quý khách muốn thực hiện đóng danh sách số đã chọn?';
            let mdclass = cond === 'open' ? 'md-accent' : 'md-warn';
            $mdDialog.show({
                parent: angular.element(document.body),
                clickOutsideToClose: true,
                targetEvent: $event,
                locals: {
                    data: vm.priceBoard
                },
                template: '<md-dialog aria-label="dialog" class="warning-close-number">' +
                    '<md-toolbar class="' + mdclass + '">' +
                    '<div class="md-toolbar-tools">Yêu cầu xác nhận</div>' +
                    '</md-toolbar>' +
                    '  <md-dialog-content style="min-width: 400px">' +
                    '   <div class="md-dialog-content">' +
                    '       <p>' + msg + '</p>' +
                    '   </div>' +
                    '</md-dialog-content>' +
                    '  <md-dialog-actions>' +
                    '    <md-button ng-click="closeDialog()">Cancel</md-button>' +
                    '    <md-button ng-click="confirmDialog()" class="md-primary">OK</md-button>' +
                    '  </md-dialog-actions>' +
                    '</md-dialog>',
                controller: function dialogCtrl($scope, data, message) {
                    $scope.closeDialog = function() {
                        $mdDialog.hide();
                    };
                    $scope.confirmDialog = function() {
                        let url = cond === 'open' ? 'api/manipulation/managenumber/open' : 'api/manipulation/managenumber/close';
                        let mess = cond === 'open' ? 'Mở số thành công' : 'Đóng số thành công';
                        let request = {
                            term: data.Term,
                            gameType: data.GameType,
                            betType: data.BetType,
                            numbers: []
                        };
                        vm.numbers.map(function(number, index) {
                            if (number.active) {
                                request.numbers.push(number.num)
                            }
                        })
                        if (cond === 'close') {
                            network.Games.Lottery.PriceTable.closeNumbers(request).then(function(response) {
                                if (response) {
                                    message.info(mess);
                                    $mdDialog.hide();
                                    vm.numbers.map(function(number, index) {
                                        let find = request.numbers.filter(function(item) {
                                            return item === number.num
                                        })
                                        if (find.length) {
                                            number.stop = true
                                        }
                                    });
                                    vm.cancelChecked();
                                }
                            }).catch(function(error) {
                                message.info(error.message)
                            })
                        } else {
                            network.Games.Lottery.PriceTable.openNumbers(request).then(function(response) {
                                if (response) {
                                    message.info(mess);
                                    $mdDialog.hide();
                                    vm.numbers.map(function(number, index) {
                                        let find = request.numbers.filter(function(item) {
                                            return item === number.num
                                        })
                                        if (find.length) {
                                            number.stop = false
                                        }
                                    });
                                    vm.cancelChecked();
                                }
                            }).catch(function(error) {
                                message.info(error.message)
                            })
                        }
                    }
                }
            })
        }

        function initHighlight() {
            vm.highlightObj = localStorage.getItem('highlight') === null ? {} : JSON.parse(localStorage.getItem('highlight'));
            vm.highlightObj[$rootScope.User.Username] === undefined ? vm.highlightObj[$rootScope.User.Username] = {} : vm.highlightObj[$rootScope.User.Username]
            vm.highlight = vm.highlightObj[$rootScope.User.Username][vm.priceBoard.BetType] === undefined ? {
                enabled: false,
                atPoint: 0,
                auto: false
            } : vm.highlightObj[$rootScope.User.Username][vm.priceBoard.BetType];
        }

        function setupHighlight($event) {
            $mdDialog.show({
                clickOutsideToClose: true,
                escapeToClose: true,
                targetEvent: $event,
                templateUrl: 'app/main/traditional/price_table/dialog/setup-highlight.html',
                controller: setupHighlightCtr,
                locals: {
                    data: vm.highlight
                }
            });

            function setupHighlightCtr($scope, data) {
                $scope.highlight = angular.copy(data);
                $scope.done = function() {
                    if ($scope.highlight.atPoint < 1) {
                        message.infoMultiple('Ngáo!')
                    } else {
                        vm.highlightObj[$rootScope.User.Username][vm.priceBoard.BetType] = $scope.highlight;
                        localStorage.setItem('highlight', JSON.stringify(vm.highlightObj));
                        vm.highlight = $scope.highlight;
                        $mdDialog.hide();
                    }
                }
            }
        }

        function calculationRisk($event) {
            $mdDialog.show({
                controller: calculationRiskCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/calculation.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {}
            });

            function calculationRiskCtrl($scope, $mdDialog) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.numbering = 27
                $scope.Income = vm.odds.Income;
                $scope.selectedNumbers = [];
                vm.numbers.map(function(item) {
                    if (item.active) {
                        $scope.selectedNumbers.push(item.num)
                    }
                })
                $scope.done = function() {
                    $scope.assumptions = [];
                    vm.numbers.map(function(item) {
                        if (msUtils.exists(item.num, $scope.selectedNumbers)) {
                            $scope.assumptions.push(item)
                        }
                    })
                    let totalPrice = 0,
                        totalPoint = 0;
                    $scope.totalMoney = 0;
                    $scope.assumptions.map(function(item) {
                        $scope.totalMoney += item.point * item.price;
                        totalPrice += item.price
                        totalPoint += item.point
                    })
                    $scope.averagePrice = totalPrice / $scope.assumptions.length;
                    $scope.averagePoint = totalPoint / $scope.assumptions.length;
                    let payout = 0
                    if (vm.priceBoard.BetType === 1) {
                        payout = 80000
                    } else if (vm.priceBoard.BetType === 9 || vm.priceBoard.BetType === 7) {
                        payout = 75000
                    } else if (vm.priceBoard.BetType === 12) {
                        payout = 650000
                    }
                    $scope.baseNumber = vm.priceBoard.BetType === 12 ? 1000 : 100;
                    $scope.odds = angular.copy($scope.assumptions)
                    $scope.odds = $scope.odds.sort(function(a, b) {
                        return b.point - a.point
                    })
                    $scope.oddsSlice = angular.copy($scope.odds.slice(0, $scope.numbering))
                    $scope.hypothetical = $scope.averagePoint * payout * $scope.numbering;
                    $scope.winLoseHundred = $scope.hypothetical - $scope.Income;
                    $scope.winLoseAss = $scope.hypothetical - $scope.totalMoney;
                }
                $scope.done();
            }
        }
    }

    function ListBottomSheetCtrl($scope, $mdBottomSheet) {
        let vm = this;
        $scope.items = [{
            id: 0,
            name: 'Thay đổi giá',
            icon: 'icon-tag-multiple'
        }, {
            id: 1,
            name: 'Thay đổi tỷ lệ thầu',
            icon: 'icon-percent'
        }, {
            id: 2,
            name: 'Chi tiết đặt cược',
            icon: 'icon-format-list-bulleted'
        }];
        $scope.listItemClick = function($index) {
            $mdBottomSheet.hide($scope.items[$index]);
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.wm-casino', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.wm', {
            abstract: true,
            url: '/wm',
        }).state('app.wm.maintenance', {
            url: '/maintenance',
            views: {
                'content@app': {
                    templateUrl: 'app/main/wm-casino/maintenance/maintenance.html',
                    controller: 'wmCasinoMainCtrl as vm'
                }
            }
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.wm-casino').controller('wmCasinoMainCtrl', wmCasinoMainCtrl);

    function wmCasinoMainCtrl($scope, $mdDialog, message) {
        let vm = this;
        vm.updateEvent = updateEvent;
        Lotus.WMCasino.Maintenance.getMaintenance().then(function(response) {
            vm.Maintenance = {
                Note: response.Note,
                StartAt: moment.unix(response.StartAt).toDate(),
                EndAt: moment.unix(response.EndAt).toDate()
            }
        })

        function updateEvent() {
            vm.send = angular.copy(vm.Maintenance)
            vm.send.StartAt = moment(vm.send.StartAt).unix();
            vm.send.EndAt = moment(vm.send.EndAt).unix();
            vm.submitting = true;
            Lotus.WMCasino.Maintenance.updateMaintenance(vm.send).then(function(response) {
                message.info("Cập nhật thành công");
                vm.submitting = false;
            }).catch(function(error) {
                message.info(error.message);
                vm.submitting = false;
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalProductionCtrl', statisticalProductionCtrl);

    function statisticalProductionCtrl($rootScope, $scope, $timeout, msUtils) {
        let vm = this;
        vm.termLists = [{
            id: 0,
            active: true,
            name: '2 Tuần gần nhất'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, ];
        vm.changeRange = changeRange;
        vm.setLabel = setLabel;
        vm.setLabel();

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.filter.FromDate = moment().subtract(14, 'day').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.filter.FromDate === vm.filter.ToDate) {
                    vm.filter.FromDate = moment(vm.filter.FromDate).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment(vm.filter.ToDate).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.filter.FromDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.filter.FromDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.filter.FromDate = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.filter.FromDate = moment().startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.filter.FromDate = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.filter = {
            FromDate: moment().subtract(14, 'day'),
            ToDate: moment()
        }
        vm.renderStatistical = renderStatistical;
        vm.firstRender = true;
        vm.renderStatistical();

        function renderStatistical() {
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                From: moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DD"),
                To: moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DD"),
            }
            let aggCompanyProductReportByDate = Lotus.Chart.Data.Report.aggCompanyProductReportByDate(vm.setFilter).then(function(response) {
                return response
            })
            let aggPlayerBetDailyByDate = Lotus.Chart.Data.Report.aggPlayerBetDailyByDate(vm.setFilter).then(function(response) {
                return response
            })
            Promise.all([aggCompanyProductReportByDate, aggPlayerBetDailyByDate]).then(function(response) {
                if (vm.firstRender) {
                    vm.renderTurnover = DashboardChart.Product.Turnover.render("Turnover", response[0], {
                        height: "600"
                    });
                    vm.renderLoss = DashboardChart.Product.WinLoss.render("WinLoss", response[0], {
                        height: "600"
                    });
                    vm.PlayerBetDaily = DashboardChart.Product.PlayerBetDaily.render("PlayerBetDaily", response[1], {
                        height: "600"
                    })
                } else {
                    DashboardChart.Product.Turnover.updateData(vm.renderTurnover, response[0]);
                    DashboardChart.Product.WinLoss.updateData(vm.renderLoss, response[0]);
                    DashboardChart.Product.PlayerBetDaily.updateData(vm.PlayerBetDaily, response[1])
                }
                $timeout(function() {
                    vm.firstRender = false;
                }, 500)
                let newArr = response[0].concat(response[1])
                vm.chartsData = [];
                let productions = msUtils.groupBy(newArr, function(item) {
                    return [item.date];
                });
                productions.map(function(byDate) {
                    let items = {}
                    items.date = byDate[0].date;
                    let products = [];
                    byDate.map(function(prod) {
                        products = products.concat(prod.products)
                    })
                    let out = products.reduce((a, v) => {
                        if (a[v.product]) {
                            a[v.product] = Object.assign(a[v.product], v);
                        } else {
                            a[v.product] = v
                        }
                        return a
                    }, {})
                    items.products = Object.values(out);
                    vm.chartsData.push(items)
                })
                vm.chartsData.map(function(item) {
                    item.datecp = item.date
                })
                vm.chartsData = vm.chartsData.sort(function(a, b) {
                    a.datecp = a.datecp.split('/').reverse().join('');
                    b.datecp = b.datecp.split('/').reverse().join('');
                    return b.datecp.localeCompare(a.datecp);
                });
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalMemberCtrl', statisticalMemberCtrl);

    function statisticalMemberCtrl($rootScope, $scope, network, $timeout, msUtils) {
        let vm = this;
        vm.termLists = [{
            id: 0,
            active: true,
            name: '2 Tuần gần nhất'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.getFieldClass = getFieldClass;
        vm.productLabel = productLabel;
        vm.selectAllProduct = selectAllProduct;
        vm.selectProduct = selectProduct;
        vm.changeRange = changeRange;
        vm.setLabel = setLabel;
        vm.getAncestors = getAncestors;
        vm.setLabel();

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.filter.FromDate = moment().subtract(14, 'day').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.filter.FromDate === vm.filter.ToDate) {
                    vm.filter.FromDate = moment(vm.filter.FromDate).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment(vm.filter.ToDate).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.filter.FromDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.filter.FromDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.filter.FromDate = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.filter.FromDate = moment().startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.filter.FromDate = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Xổ số truyền thống"
        }, {
            id: 2,
            name: "789 Casino"
        }, {
            id: 100,
            name: "WM Casino"
        }, {
            id: 101,
            name: "Bong88"
        }];
        vm.productLabel();

        function selectAllProduct() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            }).length === vm.productions.length;
            angular.forEach(vm.productions, function(product) {
                product.active = !checkLength;
            });
            vm.productLabel();
        }

        function selectProduct(item) {
            angular.forEach(vm.productions, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.productLabel();
        }

        function productLabel() {
            let checkLength = vm.productions.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.productions.length) {
                vm.textProductLabel = 'Tất cả sản phẩm'
            } else if (checkLength.length === 0) {
                vm.textProductLabel = 'Tất cả sản phẩm'
            } else if (checkLength.length === 1) {
                vm.textProductLabel = checkLength[0].name
            } else {
                vm.textProductLabel = checkLength.length + ' sản phẩm'
            }
        }
        vm.filter = {
            FromDate: moment().subtract(14, 'day'),
            ToDate: moment(),
            Products: []
        }
        vm.renderStatistical = renderStatistical;
        vm.renderStatistical();

        function renderStatistical() {
            vm.filter.Products = [];
            vm.productions.map(function(item) {
                if (item.active) {
                    vm.filter.Products.push(item.id)
                }
            })
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                From: moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DD"),
                To: moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DD"),
            }
            if (vm.filter.Products.length !== 0 && vm.filter.Products.length !== vm.productions.length) {
                vm.setFilter.Products = vm.filter.Products
            }
            Lotus.Chart.Data.Report.aggTopPlayerTurnoverWinLoss(vm.setFilter).then(function(response) {
                vm.members = response;
                vm.members.top_win = calculatorDifferenceRatio(vm.members.top_win)
                vm.members.top_win_ratio = calculatorDifferenceRatio(vm.members.top_win_ratio)
                vm.members.top_loss = calculatorDifferenceRatio(vm.members.top_loss)
                vm.members.top_company_loss = calculatorDifferenceRatio(vm.members.top_company_loss)
                vm.members.top_turnover = calculatorDifferenceRatio(vm.members.top_turnover)
                $scope.$digest();
            })
        }

        function getFieldClass(item) {
            if (item === undefined) {
                return
            }
            if (item === 0) {
                return {
                    "md-red-100-bg": true
                }
            } else if (item === 1) {
                return {
                    "md-red-200-bg": true
                }
            } else if (item === 2) {
                return {
                    "md-red-300-bg": true
                }
            } else if (item === 3) {
                return {
                    "md-red-400-bg": true
                }
            } else if (item === 4) {
                return {
                    "md-red-500-bg": true
                }
            } else if (item === 5) {
                return {
                    "md-red-600-bg": true
                }
            } else if (item === 6) {
                return {
                    "md-red-700-bg": true
                }
            } else {
                return {
                    "md-red-800-bg": true
                }
            }
        }

        function calculatorDifferenceRatio(data) {
            let averageRatio = data.reduce(function(total, next) {
                return total + next.win_loss_ratio
            }, 0) / data.length;
            let averageWinLoss = data.reduce(function(total, next) {
                return total + next.company_total_win_loss
            }, 0) / data.length;
            data.map(function(item) {
                if (item.win_loss_ratio > averageRatio) {
                    item.averageRatio = parseFloat(averageRatio.toFixed(2))
                }
                if (item.company_total_win_loss < averageWinLoss && item.company_total_win_loss < 0) {
                    item.averageWinLoss = parseFloat(averageWinLoss.toFixed(2))
                }
            })
            let ratioHigher = data.filter(function(item) {
                return item.averageRatio !== undefined
            })
            ratioHigher.sort(function(a, b) {
                return a.win_loss_ratio - b.win_loss_ratio
            })
            ratioHigher.map(function(item, index) {
                item.index = index
            })
            let winLossHigher = data.filter(function(item) {
                return item.averageWinLoss !== undefined
            })
            winLossHigher.sort(function(a, b) {
                return b.company_total_win_loss - a.company_total_win_loss
            })
            winLossHigher.map(function(item, index) {
                item.index = index
            })
            data.map(function(item) {
                let findHigherRatio = ratioHigher.filter(function(e) {
                    return e.user_id === item.user_id
                })
                let findHigherWinLoss = winLossHigher.filter(function(e) {
                    return e.user_id === item.user_id
                })
                if (findHigherRatio.length) {
                    item.index_ratio = findHigherRatio[0].index
                }
                if (findHigherWinLoss.length) {
                    item.index_win_loss = findHigherWinLoss[0].index
                }
            })
            return data;
        }

        function getAncestors(item) {
            vm.parents = [];
            network.User.getAncestors({
                userId: item.user_id
            }).then(function(response) {
                vm.parents = response;
                vm.parents.push({
                    Username: $rootScope.User.Username,
                    Level: $rootScope.User.Level
                });
                vm.parents.push({
                    Username: item.username,
                    Level: 9
                });
                vm.parents.sort(function(a, b) {
                    return a.Level - b.Level
                });
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalLotteryCtrl', statisticalLotteryCtrl);

    function statisticalLotteryCtrl($rootScope, $timeout, $location, msUtils) {
        let vm = this;
        vm.termLists = [{
            id: 0,
            active: true,
            name: '2 Tuần gần nhất'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.changeRange = changeRange;
        vm.setLabel = setLabel;
        vm.setLabel();

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.filter.FromDate = moment().subtract(14, 'day').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.filter.FromDate === vm.filter.ToDate) {
                    vm.filter.FromDate = moment(vm.filter.FromDate).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment(vm.filter.ToDate).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.filter.FromDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.filter.FromDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.filter.FromDate = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.filter.FromDate = moment().startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.filter.FromDate = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.filter = {
            GameType: -1,
            BetType: undefined,
            FromDate: moment().subtract(14, 'day'),
            ToDate: moment()
        }
        vm.localData = [{
            GameType: 0,
            BetTypes: [0, 1, 29, 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 20]
        }, {
            GameType: 1,
            BetTypes: [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 20]
        }, {
            GameType: 2,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 3,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 4,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 5,
            BetTypes: [2, 3, 4]
        }, ]
        vm.changeGame = changeGame;
        vm.setDefault = setDefault;
        vm.checkDisabled = checkDisabled;

        function changeGame() {
            vm.BetTypes = vm.localData.filter(function(item) {
                return item.GameType === vm.filter.GameType
            })
        }

        function checkDisabled() {
            return (new Date(moment().subtract(14, 'day').format('MM/DD/YYYY')).getTime() === new Date(moment(vm.filter.FromDate).format('MM/DD/YYYY')).getTime()) && (new Date(moment().format('MM/DD/YYYY')).getTime() === new Date(moment(vm.filter.ToDate).format('MM/DD/YYYY')).getTime() && parseInt(vm.filter.GameType) === -1)
        }

        function setDefault() {
            vm.filter.GameType = -1;
            vm.BetTypes.length = 0;
            vm.filter = {
                FromDate: moment().subtract(14, 'day'),
                ToDate: moment()
            }
            vm.termLists.map(function(item) {
                item.active = item.id === 0;
            })
            vm.setLabel();
            vm.renderDashboard();
        }
        vm.renderStatistical = renderStatistical;
        vm.renderStatistical();
        vm.firstRender = true;

        function renderStatistical() {
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                GameType: vm.filter.GameType,
                BetType: vm.filter.BetType,
                From: moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DD"),
                To: moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DD"),
            }
            if (parseInt(vm.filter.GameType) === -1 || vm.filter.GameType === undefined) {
                delete vm.setFilter.GameType;
                delete vm.setFilter.BetType;
            }
            if (parseInt(vm.filter.BetType) === -1 || vm.filter.BetType === undefined) {
                delete vm.setFilter.BetType;
            }
            let aggCompanyBetTypeReportByDate = Lotus.Chart.Data.Lottery.aggCompanyBetTypeReportByDate(vm.setFilter).then(function(response) {
                if (vm.firstRender) {
                    vm.renderTurnOver = DashboardChart.Lottery.Turnover.render("TurnOver", response, {
                        height: "600"
                    });
                    vm.renderWinLoss = DashboardChart.Lottery.WinLoss.render("WinLoss", response, {
                        height: "600"
                    });
                    vm.renderCommission = DashboardChart.Lottery.Commission.render("Commission", response, {
                        height: "600"
                    });
                } else {
                    DashboardChart.Lottery.Turnover.updateData(vm.renderTurnOver, response)
                    DashboardChart.Lottery.WinLoss.updateData(vm.renderWinLoss, response)
                    DashboardChart.Lottery.Commission.updateData(vm.renderCommission, response)
                }
            })
            let aggTopManagerTurnoverWinLossReport = Lotus.Chart.Data.Lottery.aggTopManagerTurnoverWinLossReport(vm.setFilter).then(function(response) {
                if (vm.firstRender) {
                    vm.renderTopManagerTurnover = DashboardChart.Lottery.TopManagerTurnover.render("TopManagerTurnover", response, {
                        height: "600"
                    });
                    vm.renderTopManagerLoss = DashboardChart.Lottery.TopManagerLoss.render("TopManagerLoss", response, {
                        height: "600"
                    });
                    vm.renderTopManagerWin = DashboardChart.Lottery.TopManagerWin.render("TopManagerWin", response, {
                        height: "600"
                    });
                } else {
                    DashboardChart.Lottery.TopManagerTurnover.updateData(vm.renderTopManagerTurnover, response);
                    DashboardChart.Lottery.TopManagerLoss.updateData(vm.renderTopManagerLoss, response);
                    DashboardChart.Lottery.TopManagerWin.updateData(vm.renderTopManagerWin, response);
                }
                $timeout(function() {
                    vm.firstRender = false;
                }, 500)
            })
            Promise.all([aggCompanyBetTypeReportByDate, aggTopManagerTurnoverWinLossReport, ]).then(function() {}).catch(function(e) {
                alert(e.message);
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalGeneralCtrl', statisticalGeneralCtrl);

    function statisticalGeneralCtrl($timeout) {
        Lotus.Chart.Data.Report.aggCurrentQuarterTotalWinLossByProduct().then(function(response) {
            DashboardChart.Quarter.WinLoss.render("Quarter", response, {
                height: "600"
            })
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.statistical').controller('statisticalAgencyCtrl', statisticalAgencyCtrl);

    function statisticalAgencyCtrl($rootScope, $timeout, $q, network) {
        let vm = this;
        vm.termLists = [{
            id: 0,
            active: true,
            name: '2 Tuần gần nhất'
        }, {
            id: 2,
            active: false,
            name: 'Tuần này'
        }, {
            id: 3,
            active: false,
            name: 'Tuần trước'
        }, {
            id: 4,
            active: false,
            name: 'Tháng này'
        }, {
            id: 5,
            active: false,
            name: 'Tháng trước'
        }];
        vm.changeRange = changeRange;
        vm.setLabel = setLabel;
        vm.setLabel();
        vm.searchTextChange = searchTextChange;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;

        function searchTextChange(item) {
            vm.username = '';
        }
        vm.searchText = '';

        function querySearch() {
            let result = network.User.searchLite({
                MatchName: vm.searchText,
                Level: 2
            }).then(function(response) {
                return response
            });
            let deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            vm.username = item !== undefined ? item.Username : '';
            vm.matchId = item !== undefined ? item.Id : '';
            vm.matchLevel = item !== undefined ? item.Level : '';
        }

        function changeRange(item) {
            angular.forEach(vm.termLists, function(term) {
                term.active = term === item;
            });
            if (item.id === 0) {
                vm.filter.FromDate = moment().subtract(14, 'day').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().format('YYYY-MM-DD');
            } else if (item.id === 1) {
                if (vm.filter.FromDate === vm.filter.ToDate) {
                    vm.filter.FromDate = moment(vm.filter.FromDate).subtract(1, 'day').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment(vm.filter.ToDate).subtract(1, 'day').format('YYYY-MM-DD');
                } else {
                    vm.filter.FromDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                    vm.filter.ToDate = moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD');
                }
            } else if (item.id === 2) {
                vm.filter.FromDate = moment().startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 3) {
                vm.filter.FromDate = moment().subtract(1, 'week').startOf('isoWeek').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'week').endOf('isoWeek').format('YYYY-MM-DD');
            } else if (item.id === 4) {
                vm.filter.FromDate = moment().startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().endOf('month').format('YYYY-MM-DD');
            } else if (item.id === 5) {
                vm.filter.FromDate = moment().subtract(1, 'month').startOf('month').format('YYYY-MM-DD');
                vm.filter.ToDate = moment().subtract(1, 'month').endOf('month').format('YYYY-MM-DD');
            }
            vm.setLabel();
        }

        function setLabel() {
            vm.selectedLabel = vm.termLists.filter(function(item) {
                return item.active;
            })[0].name;
        }
        let subW = $rootScope.User.Level === 1 ? 52 : 4;
        vm.myDate = new Date(moment().subtract(subW, 'week').startOf('isoWeek'));
        vm.minDate = new Date(vm.myDate.getFullYear(), vm.myDate.getMonth(), vm.myDate.getDate());
        vm.maxDate = new Date(new Date().getFullYear(), new Date(moment().add(1, 'month')).getMonth(), new Date(moment().endOf('isoWeek')).getDate());
        vm.maxDate = new Date(moment().add(1, 'month'))
        vm.productions = [{
            id: 0,
            name: "Miền Bắc 1"
        }, {
            id: 1,
            name: "Miền Bắc 2"
        }, {
            id: 2,
            name: "Miền Nam 18A"
        }, {
            id: 3,
            name: "Miền Nam 18B"
        }, {
            id: 4,
            name: "Miền Nam 18C"
        }, {
            id: 5,
            name: "Miền Nam 18AB"
        }];
        vm.filter = {
            GameType: -1,
            BetType: undefined,
            FromDate: moment().subtract(14, 'day'),
            ToDate: moment()
        }
        vm.localData = [{
            GameType: 0,
            BetTypes: [0, 1, 29, 2, 3, 4, 5, 6, 21, 22, 23, 24, 25, 20]
        }, {
            GameType: 1,
            BetTypes: [2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 20]
        }, {
            GameType: 2,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 3,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 4,
            BetTypes: [2, 3, 4, 7, 8, 10, 11, 13, 15, 16, 17, 18, 19, 27, 30]
        }, {
            GameType: 5,
            BetTypes: [2, 3, 4]
        }, ]
        vm.changeGame = changeGame;
        vm.setDefault = setDefault;
        vm.checkDisabled = checkDisabled;

        function changeGame() {
            vm.BetTypes = vm.localData.filter(function(item) {
                return item.GameType === vm.filter.GameType
            })
        }

        function checkDisabled() {
            return ((new Date(moment().subtract(14, 'day').format('MM/DD/YYYY')).getTime() === new Date(moment(vm.filter.FromDate).format('MM/DD/YYYY')).getTime()) && (new Date(moment().format('MM/DD/YYYY')).getTime() === new Date(moment(vm.filter.ToDate).format('MM/DD/YYYY')).getTime() && parseInt(vm.filter.GameType) === -1) && (vm.matchId === '' || vm.matchId === undefined))
        }

        function setDefault() {
            vm.filter.GameType = '-1';
            vm.BetTypes = [];
            vm.filter = {
                FromDate: moment().subtract(14, 'day'),
                ToDate: moment()
            }
            vm.termLists.map(function(item) {
                item.active = item.id === 0;
            })
            vm.setLabel();
            vm.render();
        }
        vm.renderDashboard = renderDashboard;

        function renderDashboard() {
            vm.filter.FromDate = moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DDTHH:mm:ssZ")
            vm.filter.ToDate = moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DDTHH:mm:ssZ")
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                game_type: vm.filter.GameType,
                bet_type: vm.filter.BetType,
                user_id: vm.matchId,
                date: {
                    $gte: vm.filter.FromDate,
                    $lte: vm.filter.ToDate,
                }
            }
            if (parseInt(vm.filter.GameType) === -1 || vm.filter.GameType === undefined) {
                delete vm.setFilter.game_type;
                delete vm.setFilter.bet_type;
            }
            if (parseInt(vm.filter.BetType) === -1 || vm.filter.BetType === undefined) {
                delete vm.setFilter.bet_type;
            }
            if (vm.setFilter.user_id === undefined || vm.setFilter.user_id === '') {
                delete vm.setFilter.user_id
            }
            let renderTurnOver = Lotus.Chart.renderChart("TurnOver", {
                chartId: "63444002-eab1-4fa9-862c-7c0fc0c65b3b",
                filter: vm.setFilter,
            }).then(function() {
                document.getElementById('TurnOver').firstChild.className = "flex-100"
            });
            let renderWinLoss = Lotus.Chart.renderChart("WinLoss", {
                chartId: "df3dc9bd-a6fe-4ea3-8b27-24b3ff2fabdb",
                filter: vm.setFilter,
            }).then(function() {
                document.getElementById('WinLoss').firstChild.className = "flex-100"
            });
            Promise.all([renderTurnOver, renderWinLoss, ]).then(function() {}).catch(function(e) {
                alert(e.message);
            });
        }
        vm.render = render;
        vm.firstRender = true;

        function render() {
            vm.filter.FromDate = new Date(vm.filter.FromDate)
            vm.filter.ToDate = new Date(vm.filter.ToDate)
            vm.setFilter = {
                GameType: vm.filter.GameType,
                BetType: vm.filter.BetType,
                UserId: vm.matchId,
                From: moment(vm.filter.FromDate).startOf("date").format("YYYY-MM-DD"),
                To: moment(vm.filter.ToDate).endOf('date').format("YYYY-MM-DD"),
            }
            if (parseInt(vm.filter.GameType) === -1 || vm.filter.GameType === undefined) {
                delete vm.setFilter.GameType;
                delete vm.setFilter.BetType;
            }
            if (parseInt(vm.filter.BetType) === -1 || vm.filter.BetType === undefined) {
                delete vm.setFilter.BetType;
            }
            Lotus.Chart.Data.Lottery.aggBookieBetTypeReportByDate(vm.setFilter).then(function(response) {
                if (vm.firstRender) {
                    vm.firstRender = false;
                    vm.renderTurnOver = DashboardChart.LotteryAgent.AgentTurnover.render("TurnOver", response, {
                        height: "600"
                    });
                    vm.renderWinLoss = DashboardChart.LotteryAgent.AgentWinLoss.render("WinLoss", response, {
                        height: "600"
                    });
                } else {
                    DashboardChart.LotteryAgent.AgentTurnover.updateData(vm.renderTurnOver, response);
                    DashboardChart.LotteryAgent.AgentWinLoss.updateData(vm.renderWinLoss, response);
                }
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialParameterCtrl', presidentialParameterCtrl).filter('candidate', candidate);

    function candidate() {
        return function(input) {
            if (input === 0) {
                return 'Đảng dân chủ'
            } else if (input === 1) {
                return 'Đảng cộng hoà'
            } else if (input === 10) {
                return 'Joe Biden'
            } else if (input === 11) {
                return 'Kamala Harris'
            } else if (input === 20) {
                return 'Donald Trump'
            } else if (input === 21) {
                return 'Mike Pence'
            } else if (input === 30) {
                return 'Ứng viên khác'
            } else {
                return input
            }
        }
    }

    function presidentialParameterCtrl($scope, AuthService, message) {
        let vm = this;
        vm.editParam = editParam;
        vm.cancel = cancel;
        vm.save = save;
        vm.updateStatus = updateStatus;
        vm.hasWritePermission = AuthService.hasPermission(32);
        let order = [1, 0, 10, 20, 11, 21, 30];
        Lotus.SenCasino.Games.Politics.Parameter.list().then(function(response) {
            response.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            vm.backup = angular.copy(response);
            vm.presidentialParameters = response;
            $scope.$digest();
        })

        function editParam(param) {
            param.editMode = true;
        }

        function cancel() {
            vm.presidentialParameters = angular.copy(vm.backup);
        }

        function save() {
            let param = vm.presidentialParameters.filter(function(p) {
                return p.editMode;
            })[0];
            vm.send = {
                BetType: param.BetType,
                Payouts: param.Payouts,
                Odds: param.Odds
            };
            Lotus.SenCasino.Games.Politics.Parameter.updateOdds([vm.send]).then(function(response) {
                message.info('Cập nhật tham số thành công');
                param.editMode = false;
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message);
            })
        }

        function updateStatus(param) {
            Lotus.SenCasino.Games.Politics.Parameter.updateStatus({
                BetType: param.BetType,
                Enabled: !param.Enabled
            }).then(function(response) {
                message.info('Cập nhật tham số thành công');
                param.Enabled = !param.Enabled;
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message);
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.presidential').controller('presidentialEventCtrl', presidentialEventCtrl).filter('presidentialStatus', presidentialStatus);

    function presidentialStatus() {
        return function(input) {
            if (input === 0) {
                return 'Mở'
            } else if (input === 1) {
                return 'Đóng'
            } else if (input === 2) {
                return 'Kết sổ'
            } else if (input === 9) {
                return 'Đã kết sổ'
            } else {
                return input
            }
        }
    }

    function presidentialEventCtrl($scope, $mdDialog, message) {
        let vm = this;
        vm.updateEvent = updateEvent;
        vm.updateResults = updateResults;
        vm.closingEvent = closingEvent;
        Lotus.SenCasino.Games.Politics.Event.current().then(function(response) {
            response.AutoCloseAt = moment(response.AutoCloseAt * 1000).format('DD-MM-YYYY H:mm')
            vm.presidentialEvent = response;
            $scope.$digest();
        })

        function updateEvent() {
            vm.data = {
                Event: vm.presidentialEvent.Event,
                Description: vm.presidentialEvent.Description,
                EventDate: moment(vm.presidentialEvent.EventDate).toISOString(),
                FiscalDate: moment(vm.presidentialEvent.FiscalDate).toISOString(),
                AutoCloseAt: moment(vm.presidentialEvent.AutoCloseAt).toISOString(),
            }
            Lotus.SenCasino.Games.Politics.Event.updateProperties(vm.data).then(function(response) {
                message.info('Cập nhật thành công')
            }).catch(function(error) {
                message.info(error.message)
            })
        }

        function updateResults($event) {
            $mdDialog.show({
                controller: updatePresidentialResultsCtrl,
                templateUrl: 'app/main/presidential/event/update-results-dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                hasBackdrop: false,
                fullscreen: true,
                locals: {
                    Event: vm.presidentialEvent
                }
            }).then(function() {}, function() {});

            function updatePresidentialResultsCtrl($scope, Event) {
                $scope.cancel = function() {
                    $mdDialog.hide();
                }
                $scope.candidates = [0, 1, 10, 11, 20, 21, 30];
                $scope.selected = Event.Results !== undefined ? angular.copy(Event.Results) : [];
                $scope.toggle = function(item, list) {
                    let idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.update = function() {
                    $scope.submitting = true;
                    Lotus.SenCasino.Games.Politics.Event.updateResults({
                        Event: Event.Event,
                        Results: $scope.selected
                    }).then(function() {
                        $scope.submitting = false;
                        $mdDialog.hide()
                    }).catch(function(e) {
                        $scope.submitting = false;
                        message.infoMultiple(e.message)
                    })
                }
            }
        }

        function closingEvent($event) {
            $mdDialog.show({
                controller: closingEventCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    Event: vm.presidentialEvent.Event
                }
            });

            function closingEventCtrl($scope, $mdDialog, Event) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Kết sổ';
                $scope.textContent = 'Chắc chưa? Không có kết sổ lại đâu!';
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.SenCasino.Games.Politics.BookKeeping.start({
                        Event: Event
                    }).then(function(resp) {
                        $mdDialog.cancel();
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.saba').controller('sabaMainCtrl', sabaMainCtrl);

    function sabaMainCtrl($scope, $mdDialog, message) {
        let vm = this;
        vm.updateEvent = updateEvent;
        Lotus.Saba.Maintenance.getMaintenance().then(function(response) {
            response.StartAt = response.StartAt === undefined ? moment().unix() : response.StartAt;
            response.EndAt = response.EndAt === undefined ? moment().unix() : response.EndAt;
            vm.Maintenance = {
                Note: response.Note,
                StartAt: moment.unix(response.StartAt).toDate(),
                EndAt: moment.unix(response.EndAt).toDate()
            }
        })

        function updateEvent() {
            vm.send = angular.copy(vm.Maintenance)
            vm.send.StartAt = moment(vm.send.StartAt).unix();
            vm.send.EndAt = moment(vm.send.EndAt).unix();
            vm.submitting = true;
            Lotus.Saba.Maintenance.updateMaintenance(vm.send).then(function(response) {
                message.info("Cập nhật thành công");
                vm.submitting = false;
            }).catch(function(error) {
                message.info(error.message);
                vm.submitting = false;
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.my').controller('telegramCtrl', telegramCtrl);

    function telegramCtrl($rootScope, $mdDialog, $timeout, $scope, message, msUtils) {
        let vm = this;
        vm.cancelTelegram = cancelTelegram;
        vm.initTelegram = initTelegram;
        vm.hasPsk = false;
        vm.deviceName = msUtils.isMobile() === null ? "máy tính" : "điện thoại";
        let tableList = ["iPad"]
        if (msUtils.exists(msUtils.isMobile(), tableList)) {
            vm.deviceName = "máy tính bảng"
        }
        vm.initTelegram();

        function initTelegram() {
            Lotus.Telegram.generateLink().then(function(response) {
                vm.hasPsk = true;
                vm.telegramBot = response;
                $timeout(function() {
                    $scope.$digest();
                }, 20)
            })
        }
        vm.copied = false;
        vm.onSuccess = function(e) {
            vm.copied = !vm.copied;
            setTimeout(function() {
                vm.copied = !vm.copied;
                $scope.$digest();
            }, 3000)
        };

        function cancelTelegram(ev) {
            let confirm = $mdDialog.confirm().title('Hủy liên kết?').textContent('Quý khách vui lòng xác nhận sẽ hủy liên kết tài khoản này với Telegram').ariaLabel('Lucky day').targetEvent(ev).clickOutsideToClose(true).ok('Hủy liên kết').cancel('Không');
            $mdDialog.show(confirm).then(function() {
                Lotus.Telegram.unlink().then(function(response) {
                    if (response.Result) {
                        message.show("Hủy liên kết thành công")
                        vm.telegramBot.Status = 0;
                        vm.initTelegram();
                        $scope.$digest();
                    }
                })
            }, function() {});
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.my').controller('passwordController', passwordController);

    function passwordController($rootScope, $state, $location, $timeout, network, message) {
        let vm = this;
        vm.mustChange = $location.path() === '/auth/set-password';
        vm.changePassword = changePassword;
        vm.cancel = cancel;
        vm.inputFocus = inputFocus;
        vm.inputKeyup = inputKeyup;
        let lowerCasePattern = /^(?=.*[a-z]).+$/;
        let upperCasePattern = /^(?=.*[A-Z]).+$/;
        let numberPattern = /^(?=.*[\d]).+$/;
        let specialCharacterPatter = /([-+=_!@#$%^&*.,;:'\"<>/?`~\[\]\(\)\{\}\\\|\s])/;
        let characterCountPattern = /^.{6,}/;
        vm.cancel();

        function cancel() {
            vm.user = {
                password: '',
                newPassword: '',
                rePassword: ''
            }
        }

        function inputFocus() {
            vm.showCheck = true;
            vm.inputKeyup();
        }

        function inputKeyup() {
            if (vm.user.newPassword === undefined) {
                return
            }
            vm.lowerCase = lowerCasePattern.test(vm.user.newPassword) ? 1 : 0;
            vm.upperCase = upperCasePattern.test(vm.user.newPassword) ? 1 : 0;
            vm.number = numberPattern.test(vm.user.newPassword) ? 1 : 0;
            vm.specialChar = specialCharacterPatter.test(vm.user.newPassword) ? 1 : 0;
            vm.characterCount = characterCountPattern.test(vm.user.newPassword);
            vm.totalScore = vm.lowerCase + vm.upperCase + vm.number + vm.specialChar;
            vm.passwordPerfect = (vm.totalScore) >= 3 && vm.characterCount;
            vm.showCheck = !vm.passwordPerfect;
        }

        function changePassword() {
            vm.send = {};
            vm.send.password = vm.user.password;
            vm.send.newPassword = vm.user.newPassword;
            let pattern = /^[a-zA-Z0-9\^$*.\[\]{}\(\)?"!@#%&/\,><\':;|_~`]{6,32}$/;
            if (!pattern.test(vm.send.newPassword)) {
                message.infoMultiple('Mật khẩu không hợp lệ')
                return;
            }
            vm.submitting = true;
            if (vm.mustChange) {
                network.User.completeNewPassword(vm.user.newPassword).then(function(resp) {
                    if (resp.RequireAction === 'SOFTWARE_TOKEN_MFA') {
                        message.info('Cập nhật mật khẩu thành công. Quý khách vui lòng đăng nhập lại để tiếp tục.');
                        $state.go('app.auth')
                    } else {
                        message.message('Cập nhật mật khẩu thành công');
                        $rootScope.$broadcast('userAccount::update');
                    }
                }).catch(function(err) {
                    message.alert(err.message);
                    vm.submitting = false;
                })
            } else {
                network.User.changePassword(vm.send).then(function(resp) {
                    vm.submitting = false;
                    if (resp) {
                        message.info('Thay đổi mật khẩu thành công. Quý khách vui lòng đăng nhập lại để tiếp tục');
                        $timeout(function() {
                            $rootScope.$broadcast('userAccount::signOut');
                        }, 1000)
                    }
                }).catch(function(err) {
                    message.alert(err.message);
                    vm.submitting = false;
                })
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.my').controller('otpController', otpController);

    function otpController($rootScope, $mdDialog, $mdToast, $timeout, $state, network, message) {
        var vm = this;
        vm.starting = starting;
        vm.cancelOTP = cancelOTP;
        vm.init = init;
        vm.init();

        function init() {
            if ($rootScope.User !== undefined) {
                vm.EnabledOTP = $rootScope.User.MfaType === 1;
            } else {
                $timeout(function() {
                    vm.init();
                }, 1000)
            }
        }

        function cancelOTP(ev) {
            $mdDialog.show({
                controller: 'cancelOtpCtrl',
                controllerAs: 'vm',
                templateUrl: 'app/main/my/otp/cancel-otp/cancel-otp.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: true,
            }).then(function() {
                vm.EnabledOTP = false;
                $rootScope.User.MfaType = 0;
                $rootScope.$broadcast('userAccount::update');
            }, function() {})
        }

        function cancelOTP2(ev) {
            var confirm = $mdDialog.prompt().title('Qúy khách muốn hủy xác minh 2 bước').textContent('Quý khách vui lòng cung cấp mã OTP để thực hiện hủy').placeholder('OTP').ariaLabel('OTP').targetEvent(ev).required(true).ok('OK').cancel('Cancel');
            $mdDialog.show(confirm).then(function(otp) {}, function() {});
        }

        function starting(ev) {
            $mdDialog.show({
                controller: setupOtpCtrl,
                templateUrl: 'app/main/my/otp/setup.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            }).then(function(value) {}, function(reason) {
                if (reason) {
                    vm.EnabledOTP = true;
                }
            });

            function setupOtpCtrl($scope) {
                $scope.cancel = function(ev) {
                    $mdDialog.cancel(ev);
                };
                $scope.data = {};
                $scope.data.device = 'apple';
                $scope.data.step = 0;
                $scope.copied = false;
                $scope.nextStep = function() {
                    if ($scope.data.step === 0) {
                        $scope.preSharedKey();
                        $scope.data.step = $scope.data.device === 'apple' ? 1 : 2;
                        $scope.data.remember = $scope.data.device === 'apple' ? 1 : 2;
                    } else {
                        $scope.data.step = 4;
                    }
                };
                $scope.preSharedKey = function() {
                    $scope.submitting = true;
                    network.User.generateTOTPSecretCode().then(function(resp) {
                        console.log(resp)
                        $scope.sharedKey = resp.SecretCode;
                        $scope.imgSrc = resp.Data;
                        $timeout(function() {
                            $scope.hasPsk = true;
                            $scope.submitting = false;
                        }, 1250)
                    })
                };
                $scope.cannotScan = function() {
                    $scope.data.step = 3;
                };
                $scope.onSuccess = function(e) {
                    $scope.copied = !$scope.copied;
                    setTimeout(function() {
                        $scope.copied = !$scope.copied;
                        $scope.$digest();
                    }, 3000)
                };
                $scope.onError = function(e) {
                    console.log(e)
                };
                $scope.otpInput = {
                    size: 6,
                    type: 'tel',
                    onDone: function(value) {
                        $scope.data.otp = value;
                    },
                    onChange: function(value) {
                        $scope.otpOk = value.length === 6;
                        $scope.valFalse = false;
                    }
                };
                $scope.setupOTP = function() {
                    $scope.submitting = true;
                    network.User.enableMFA($scope.data.otp).then(function(resp) {
                        if (resp) {
                            $scope.data.step = 5;
                            $scope.submitting = false;
                            $rootScope.$broadcast('userAccount::update');
                            $scope.$digest();
                        }
                    }).catch(function(err) {
                        $scope.submitting = false;
                        $scope.valFalse = true;
                        $scope.$digest();
                    });
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendTermCtrl', legendTermCtrl);

    function legendTermCtrl($scope, $state, $rootScope, $mdDialog, $timeout, $filter, $location, $hotkey, network, message, msUtils, AuthService) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (!AuthService.hasPermission(64)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(32);
        vm.fetchTerm = fetchTerm;
        vm.updateResult = updateResult;
        vm.updateResultSouthern = updateResultSouthern;
        vm.changeDrawResultAt = changeDrawResultAt;
        vm.updateGameAutoClose = updateGameAutoClose;
        vm.closing = closing;
        vm.historyActive = historyActive;
        vm.changeDate = changeDate;
        vm.changeGame = changeGame;
        vm.fetchHistoryTerm = fetchHistoryTerm;
        vm.termHistory = termHistory;
        vm.openAll = openAll;
        vm.closeAll = closeAll;
        vm.closeLotto = closeLotto;
        $scope.$on('$destroy', function() {
            $timeout.cancel(vm.timer);
        });
        vm.GameTypes = [{
            GameType: 0,
            label: 'Miền Bắc'
        }, {
            GameType: 1,
            label: 'Miền Nam'
        }];
        vm.dateHistory = [];
        for (let y = 0; y < 30; y++) {
            vm.dateHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        vm.minDate = new Date();
        vm.legendTerms = [];
        vm.fetchTerm();

        function fetchTerm() {
            network.Games.Legend.Term.latest({
                CheckBookKeepingReady: true
            }).then(function(response) {
                vm.legendTerms = updateTerm(response);
                if ($.grep(response, function(item) {
                        return item.Status === 2 || item.Status === 3 || item.Status === 10
                    }).length) {
                    vm.submitting = true;
                    vm.timer = $timeout(function() {
                        vm.fetchTerm()
                    }, 5000)
                }
                $scope.$digest();
            })
        }

        function updateTerm(response) {
            let deadLineBet, deadLineJack;
            angular.forEach(response, function(game) {
                game.DrawNix = moment(game.DrawResultAt).unix();
                game.DrawResult = moment(game.DrawResultAt).format('DD-MM-YYYY H:mm');
                if (game.GameType === 0) {
                    deadLineBet = $.grep(game.Games, function(item) {
                        return item.BetType === 1
                    })[0].AutoCloseAt;
                    deadLineJack = $.grep(game.Games, function(item) {
                        return item.BetType === 0
                    })[0].AutoCloseAt;
                    game.Close = {
                        deadLineBet: moment(moment.utc(deadLineBet, 'X').toISOString()).format('DD-MM-YYYY H:mm'),
                        deadLineJack: moment(moment.utc(deadLineJack, 'X').toISOString()).format('DD-MM-YYYY H:mm')
                    }
                } else {
                    deadLineBet = $.grep(game.Games, function(item) {
                        return item.BetType === 7
                    })[0].AutoCloseAt;
                    deadLineJack = $.grep(game.Games, function(item) {
                        return item.BetType === 8
                    })[0].AutoCloseAt;
                    game.Close = {
                        deadLineBet: moment(moment.utc(deadLineBet, 'X').toISOString()).format('DD-MM-YYYY H:mm'),
                        deadLineJack: moment(moment.utc(deadLineJack, 'X').toISOString()).format('DD-MM-YYYY H:mm')
                    }
                }
            });
            response = response.sort(function(a, b) {
                return a.GameType - b.GameType
            });
            return response
        }

        function updateGameAutoClose(item, pos) {
            let send = {
                Term: item.Term,
                GameType: item.GameType
            };
            if (item.GameType === 0) {
                if (pos === 'lo') {
                    send.AutoCloseAt = moment(item.Close.deadLineBet, 'DD-MM-YYYY H:mm').format('YYYY-MM-DDTHH:mm:ss+07:00')
                    send.ExcludeBetTypes = [0, 5, 13, 11, 21]
                } else if (pos === 'de') {
                    send.AutoCloseAt = moment(item.Close.deadLineJack, 'DD-MM-YYYY H:mm').format('YYYY-MM-DDTHH:mm:ss+07:00')
                    send.IncludeBetTypes = [0, 5, 13, 11, 21]
                }
            } else {
                if (pos === 'lo') {
                    send.AutoCloseAt = moment(item.Close.deadLineBet, 'DD-MM-YYYY H:mm').format('YYYY-MM-DDTHH:mm:ss+07:00')
                    send.ExcludeBetTypes = [8, 11, 13]
                } else if (pos === 'de') {
                    send.AutoCloseAt = moment(item.Close.deadLineJack, 'DD-MM-YYYY H:mm').format('YYYY-MM-DDTHH:mm:ss+07:00')
                    send.IncludeBetTypes = [8, 11, 13]
                }
            }
            vm.updateInProcess = true;
            network.Games.Legend.Term.updateGameAutoClose(send).then(function(response) {
                if (response) {
                    vm.updateInProcess = false;
                    vm.fetchTerm();
                    $timeout(function() {
                        message.info('Thay đổi thời gian đóng cược thành công');
                    }, 500)
                }
            }).catch(function(error) {
                message.info(error.message);
            })
        }

        function changeDrawResultAt(item) {
            let send = {
                Term: item.Term,
                GameType: item.GameType,
                DrawResultAt: moment(item.DrawResult, 'DD-MM-YYYY H:mm').format('YYYY-MM-DDTHH:mm:ss+07:00')
            };
            vm.updateInProcess = true;
            network.Games.Legend.Term.updateDrawResult(send).then(function(response) {
                if (response) {
                    vm.updateInProcess = false;
                    vm.fetchTerm();
                    $timeout(function() {
                        message.info('Thay đổi thời gian mở thường thành công');
                    }, 500)
                }
            }).catch(function(error) {
                message.info(error.message);
            })
        }

        function updateResult(ev, item) {
            $mdDialog.show({
                controller: updateResultCtrl,
                templateUrl: 'app/main/legendary/term/dialog/update.result.bac.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                fullscreen: true,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            }).then(function() {}, function() {
                $hotkey.unbind('Alt + Shift')
            });

            function updateResultCtrl($scope, $mdDialog, $mdToast, $http, $hotkey, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.data = data;
                $scope.enabled = true;
                $scope.result = {
                    "Jackpot": '',
                    "First": '',
                    "Second": ['', ''],
                    "Third": ['', '', '', '', '', ''],
                    "Fourth": ['', '', '', ''],
                    "Fiveth": ['', '', '', '', '', ''],
                    "Sixth": ['', '', ''],
                    "Seventh": ['', '', '', '']
                };
                $scope.debugOnly = ($location.host() === 'localhost' || $location.host() === 'ag.nothing88.net');
                network.Games.Legend.LotteryResult.getNorthernResultByTerm({
                    Term: data.Term
                }).then(function(response) {
                    if (response.Jackpot) $scope.result.Jackpot = response.Jackpot;
                    if (response.First) $scope.result.First = response.First;
                    if (response.Second) $scope.result.Second = response.Second;
                    if (response.Third) $scope.result.Third = response.Third;
                    if (response.Fourth) $scope.result.Fourth = response.Fourth;
                    if (response.Fiveth) $scope.result.Fiveth = response.Fiveth;
                    if (response.Sixth) $scope.result.Sixth = response.Sixth;
                    if (response.Seventh) $scope.result.Seventh = response.Seventh;
                    $scope.$digest()
                }).catch(function(error) {
                    console.log(error.code)
                });
                $scope.sample = function() {
                    let ran = msUtils.generatorNumber;
                    $scope.result = {
                        "Jackpot": ran(5),
                        "First": ran(5),
                        "Second": [ran(5), ran(5)],
                        "Third": [ran(5), ran(5), ran(5), ran(5), ran(5), ran(5)],
                        "Fourth": [ran(4), ran(4), ran(4), ran(4)],
                        "Fiveth": [ran(4), ran(4), ran(4), ran(4), ran(4), ran(4)],
                        "Sixth": [ran(3), ran(3), ran(3)],
                        "Seventh": [ran(2), ran(2), ran(2), ran(2)]
                    }
                }
                $scope.submitResult = function() {
                    if ($scope.result === undefined) {
                        return
                    }
                    $scope.enabled = false;
                    let result = {
                        Term: data.Term,
                        Jackpot: $scope.result.Jackpot,
                        First: $scope.result.First,
                        Second: [],
                        Third: [],
                        Fourth: [],
                        Fiveth: [],
                        Sixth: [],
                        Seventh: []
                    };
                    if ($scope.result.Second[0]) result.Second.push($scope.result.Second[0]);
                    if ($scope.result.Second[1]) result.Second.push($scope.result.Second[1]);
                    if ($scope.result.Third[0]) result.Third.push($scope.result.Third[0]);
                    if ($scope.result.Third[1]) result.Third.push($scope.result.Third[1]);
                    if ($scope.result.Third[2]) result.Third.push($scope.result.Third[2]);
                    if ($scope.result.Third[3]) result.Third.push($scope.result.Third[3]);
                    if ($scope.result.Third[4]) result.Third.push($scope.result.Third[4]);
                    if ($scope.result.Third[5]) result.Third.push($scope.result.Third[5]);
                    if ($scope.result.Fourth[0]) result.Fourth.push($scope.result.Fourth[0]);
                    if ($scope.result.Fourth[1]) result.Fourth.push($scope.result.Fourth[1]);
                    if ($scope.result.Fourth[2]) result.Fourth.push($scope.result.Fourth[2]);
                    if ($scope.result.Fourth[3]) result.Fourth.push($scope.result.Fourth[3]);
                    if ($scope.result.Fiveth[0]) result.Fiveth.push($scope.result.Fiveth[0]);
                    if ($scope.result.Fiveth[1]) result.Fiveth.push($scope.result.Fiveth[1]);
                    if ($scope.result.Fiveth[2]) result.Fiveth.push($scope.result.Fiveth[2]);
                    if ($scope.result.Fiveth[3]) result.Fiveth.push($scope.result.Fiveth[3]);
                    if ($scope.result.Fiveth[4]) result.Fiveth.push($scope.result.Fiveth[4]);
                    if ($scope.result.Fiveth[5]) result.Fiveth.push($scope.result.Fiveth[5]);
                    if ($scope.result.Sixth[0]) result.Sixth.push($scope.result.Sixth[0]);
                    if ($scope.result.Sixth[1]) result.Sixth.push($scope.result.Sixth[1]);
                    if ($scope.result.Sixth[2]) result.Sixth.push($scope.result.Sixth[2]);
                    if ($scope.result.Seventh[0]) result.Seventh.push($scope.result.Seventh[0]);
                    if ($scope.result.Seventh[1]) result.Seventh.push($scope.result.Seventh[1]);
                    if ($scope.result.Seventh[2]) result.Seventh.push($scope.result.Seventh[2]);
                    if ($scope.result.Seventh[3]) result.Seventh.push($scope.result.Seventh[3]);
                    if (result.Jackpot.length === 0) delete result.Jackpot;
                    if (result.First.length === 0) delete result.First;
                    if (result.Second.length === 0) delete result.Second;
                    if (result.Third.length === 0) delete result.Third;
                    if (result.Fourth.length === 0) delete result.Fourth;
                    if (result.Fiveth.length === 0) delete result.Fiveth;
                    if (result.Sixth.length === 0) delete result.Sixth;
                    if (result.Seventh.length === 0) delete result.Seventh;
                    network.Games.Legend.LotteryResult.updateNorthernResult(result).then(function(response) {
                        if (response) {
                            $mdDialog.cancel();
                            if (data.Status === 9) {
                                if (vm.Date === undefined) {
                                    vm.fetchTerm();
                                } else {
                                    vm.fetchHistoryTerm()
                                }
                            } else {
                                vm.fetchTerm();
                            }
                        }
                    }).catch(function(error) {
                        message.infoMultiple(error.message)
                    })
                }
            }
        }

        function updateResultSouthern(ev, item) {
            $mdDialog.show({
                controller: updateResultSouthernCtrl,
                templateUrl: 'app/main/legendary/term/dialog/update.result.nam.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {
                    data: item
                }
            }).then(function() {}, function() {
                $hotkey.unbind('Alt + Shift')
            })

            function updateResultSouthernCtrl($scope, $mdDialog, $mdToast, $http, $hotkey, data, network) {
                $scope.data = data;
                $scope.enabled = true;
                $scope.result = {
                    "Jackpot": '',
                    "First": '',
                    "Second": '',
                    "Third": ['', ''],
                    "Fourth": ['', '', '', '', '', '', ''],
                    "Fiveth": '',
                    "Sixth": ['', '', ''],
                    "Seventh": '',
                    "Eighth": ''
                };
                $scope.debugOnly = ($location.host() === 'localhost' || $location.host() === 'ag.nothing88.net');
                $scope.sample = function() {
                    let ran = msUtils.generatorNumber;
                    $scope.result = {
                        "Jackpot": ran(6),
                        "First": ran(5),
                        "Second": ran(5),
                        "Third": [ran(5), ran(5)],
                        "Fourth": [ran(5), ran(5), ran(5), ran(5), ran(5), ran(5), ran(5)],
                        "Fiveth": ran(4),
                        "Sixth": [ran(4), ran(4), ran(4)],
                        "Seventh": ran(3),
                        "Eighth": ran(2)
                    }
                }
                $scope.Reverse = function() {
                    $scope.backupRes = angular.copy($scope.result);
                    $scope.result.Sixth[0] = $scope.backupRes.Sixth[2];
                    $scope.result.Sixth[2] = $scope.backupRes.Sixth[0];
                    $scope.result.Fourth[6] = $scope.backupRes.Fourth[0];
                    $scope.result.Fourth[5] = $scope.backupRes.Fourth[1];
                    $scope.result.Fourth[4] = $scope.backupRes.Fourth[2];
                    $scope.result.Fourth[2] = $scope.backupRes.Fourth[4];
                    $scope.result.Fourth[1] = $scope.backupRes.Fourth[5];
                    $scope.result.Fourth[0] = $scope.backupRes.Fourth[6];
                    $scope.result.Third[0] = $scope.backupRes.Third[1];
                    $scope.result.Third[1] = $scope.backupRes.Third[0];
                }
                network.Games.Legend.LotteryResult.getSouthernResultByTerm({
                    Term: data.Term
                }).then(function(response) {
                    if (response.Jackpot) $scope.result.Jackpot = response.Jackpot;
                    if (response.First) $scope.result.First = response.First;
                    if (response.Second) $scope.result.Second = response.Second;
                    if (response.Third) $scope.result.Third = response.Third;
                    if (response.Fourth) $scope.result.Fourth = response.Fourth;
                    if (response.Fiveth) $scope.result.Fiveth = response.Fiveth;
                    if (response.Sixth) $scope.result.Sixth = response.Sixth;
                    if (response.Seventh) $scope.result.Seventh = response.Seventh;
                    if (response.Eighth) $scope.result.Eighth = response.Eighth;
                    $scope.$digest()
                }).catch(function(error) {
                    console.log(error.code)
                });
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.submitResult = function() {
                    if ($scope.result === undefined) {
                        return
                    }
                    $scope.enabled = false;
                    let result = {
                        Term: data.Term,
                        Jackpot: $scope.result.Jackpot,
                        First: $scope.result.First,
                        Second: $scope.result.Second,
                        Third: [],
                        Fourth: [],
                        Fiveth: $scope.result.Fiveth,
                        Sixth: [],
                        Seventh: $scope.result.Seventh,
                        Eighth: $scope.result.Eighth
                    };
                    if ($scope.result.Third[0]) result.Third.push($scope.result.Third[0]);
                    if ($scope.result.Third[1]) result.Third.push($scope.result.Third[1]);
                    if ($scope.result.Fourth[0]) result.Fourth.push($scope.result.Fourth[0]);
                    if ($scope.result.Fourth[1]) result.Fourth.push($scope.result.Fourth[1]);
                    if ($scope.result.Fourth[2]) result.Fourth.push($scope.result.Fourth[2]);
                    if ($scope.result.Fourth[3]) result.Fourth.push($scope.result.Fourth[3]);
                    if ($scope.result.Fourth[4]) result.Fourth.push($scope.result.Fourth[4]);
                    if ($scope.result.Fourth[5]) result.Fourth.push($scope.result.Fourth[5]);
                    if ($scope.result.Fourth[6]) result.Fourth.push($scope.result.Fourth[6]);
                    if ($scope.result.Sixth[0]) result.Sixth.push($scope.result.Sixth[0]);
                    if ($scope.result.Sixth[1]) result.Sixth.push($scope.result.Sixth[1]);
                    if ($scope.result.Sixth[2]) result.Sixth.push($scope.result.Sixth[2]);
                    if (result.Jackpot.length === 0) delete result.Jackpot;
                    if (result.First.length === 0) delete result.First;
                    if (result.Second.length === 0) delete result.Second;
                    if (result.Third.length === 0) delete result.Third;
                    if (result.Fourth.length === 0) delete result.Fourth;
                    if (result.Fiveth.length === 0) delete result.Fiveth;
                    if (result.Sixth.length === 0) delete result.Sixth;
                    if (result.Seventh.length === 0) delete result.Seventh;
                    if (result.Eighth.length === 0) delete result.Eighth;
                    network.Games.Legend.LotteryResult.updateSouthernResult(result).then(function(response) {
                        if (response) {
                            $mdDialog.cancel();
                            if (data.Status === 9) {
                                if (vm.Date === undefined) {
                                    vm.fetchTerm();
                                } else {
                                    vm.fetchHistoryTerm()
                                }
                            } else {
                                vm.fetchTerm();
                            }
                        }
                    }).catch(function(error) {
                        message.infoMultiple(error.message)
                    })
                }
            }
        }

        function closing(item, $event) {
            $mdDialog.show({
                controller: bookKeepingCtr,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                multiple: true,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function bookKeepingCtr($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.textContent = 'Xác nhận kết sổ đài ' + $filter('legendGame')(item.GameType);
                $scope.done = function() {
                    $scope.submitting = true;
                    let data = {
                        Term: item.Term,
                        GameType: item.GameType
                    }
                    if (item.Status === 9) {
                        data.Redo = true
                    }
                    network.Games.Legend.BookKeeping.startExecution(data).then(function(response) {
                        $scope.submitting = false;
                        $mdDialog.cancel();
                        if (data.Redo) {
                            if (vm.Date === undefined) {
                                vm.fetchTerm();
                            } else {
                                vm.fetchHistoryTerm()
                            }
                        } else {
                            vm.fetchTerm();
                        }
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }
        $rootScope.$on('CallParentTerm', function() {
            vm.fetchTerm();
        });

        function historyActive() {
            vm.history = !vm.history;
            vm.GameType = vm.GameType === undefined ? 0 : vm.GameType;
            if (vm.history) {
                vm.changeDate();
            } else {
                vm.legendTerms = [];
                vm.fetchTerm();
            }
        }

        function changeDate() {
            if (vm.Date !== undefined) {
                vm.changeGame(vm.GameType);
            }
        }

        function changeGame(GameType) {
            vm.GameType = GameType;
            vm.legendTerms = [];
            vm.fetchHistoryTerm();
        }

        function fetchHistoryTerm() {
            network.Games.Legend.Term.getTermsByDateGameType({
                Date: vm.Date,
                GameType: vm.GameType
            }).then(function(response) {
                vm.legendTerms = updateTerm(response);
                if ($.grep(response, function(item) {
                        return item.Status === 2 || item.Status === 3 || item.Status === 10
                    }).length) {
                    vm.submitting = true;
                    vm.timer = $timeout(function() {
                        vm.fetchHistoryTerm()
                    }, 5000)
                }
                $scope.$digest();
            }).catch(function(error) {
                message.info(error.message)
            })
        }

        function termHistory(item, $event) {
            $mdDialog.show({
                controller: termHistoryCtrl,
                templateUrl: 'app/main/traditional/term/dialog/term.history.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    history: item
                }
            });

            function termHistoryCtrl($scope, $mdDialog, history, $filter) {
                $scope.submitting = true;
                let data = {
                    Term: history.Term,
                    GameType: history.GameType,
                    Size: 100,
                    Page: 1
                };
                network.Logging.Legend.searchTermActivity(data).then(function(response) {
                    $scope.termHistory = response.Records;
                    $timeout(function() {
                        $scope.submitting = false;
                    }, 1000)
                });
                $scope.cancel = function() {
                    $mdDialog.cancel();
                }
            }
        }

        function openAll(item, $event) {
            vm.selectedTermInfo = angular.copy(vm.legendTerms.filter(function(t) {
                return t.GameType === item.GameType
            })[0]);
            $mdDialog.show({
                controller: openBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/open.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            }).then(function(param) {
                vm.legendTerms.map(function(t) {
                    if (t.GameType === param.GameType) {
                        t.Games.map(function(g) {
                            if (param.IncludeBetTypes === undefined) {
                                g.Status = 1
                            } else {
                                if (msUtils.exists(g.BetType, param.IncludeBetTypes)) {
                                    g.Status = 1
                                }
                            }
                        })
                    }
                })
            }, function() {});

            function openBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    $scope.selected.push(value.BetType)
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.openBetting = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 1
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide(param);
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function closeAll(item, $event) {
            vm.selectedTermInfo = angular.copy(vm.legendTerms.filter(function(t) {
                return t.GameType === item.GameType
            })[0]);
            $mdDialog.show({
                controller: closeBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/close.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            }).then(function(param) {
                vm.legendTerms.map(function(t) {
                    if (t.GameType === param.GameType) {
                        t.Games.map(function(g) {
                            if (param.IncludeBetTypes === undefined) {
                                if (!msUtils.exists(g.BetType, param.ExcludeBetTypes)) {
                                    g.Status = 0
                                }
                            } else {
                                if (msUtils.exists(g.BetType, param.IncludeBetTypes)) {
                                    g.Status = 0
                                }
                            }
                        })
                    }
                })
            }, function() {});

            function closeBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    $scope.selected.push(value.BetType)
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBetting = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 0,
                        ExcludeBetTypes: [20, 26, 27, 28]
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide(param);
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function closeLotto(item, $event) {
            vm.selectedTermInfo = angular.copy(vm.legendTerms.filter(function(t) {
                return t.GameType === item.GameType
            })[0]);
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            }).then(function(param) {
                vm.legendTerms.map(function(t) {
                    if (t.GameType === param.GameType) {
                        t.Games.map(function(g) {
                            if (param.IncludeBetTypes === undefined) {
                                g.Status = 0
                            } else {
                                if (msUtils.exists(g.BetType, param.IncludeBetTypes)) {
                                    g.Status = 0
                                }
                            }
                        })
                    }
                })
            }, function() {});

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
                data.Games.sort(function(a, b) {
                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                })
                angular.forEach(data.Games, function(value) {
                    if (data.GameType === 0) {
                        if (msUtils.exists(value.BetType, [1, 2, 3, 4, 6, 12, 14, 29])) {
                            $scope.selected.push(value.BetType)
                        }
                    } else {
                        if (msUtils.exists(value.BetType, [2, 3, 4, 7, 10, 15, 17, 19, 30])) {
                            $scope.selected.push(value.BetType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 0,
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide(param);
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.history').controller('historyPriceCtrl', historyPriceCtrl);

    function historyPriceCtrl($state, $timeout, network, AuthService) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.changeGame = changeGame;
        vm.checkHistory = checkHistory;
        vm.history = [];
        vm.termHistory = [];
        let z = 0;
        for (let y = z; y < 20; y++) {
            vm.termHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        vm.games = [{
            id: 0,
            name: 'Miền Bắc 1',
            bet: [{
                id: 0,
                name: 'Đề'
            }, {
                id: 1,
                name: 'Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }, {
                id: 5,
                name: 'Đề Trượt'
            }, {
                id: 6,
                name: 'Lô Trượt'
            }, {
                id: 21,
                name: 'Đề Đầu'
            }, {
                id: 22,
                name: 'Đề G1'
            }, {
                id: 23,
                name: 'Đề Đầu G1'
            }, {
                id: 24,
                name: 'Đề Thần Tài'
            }, {
                id: 25,
                name: 'Đề Đầu TT'
            }]
        }, {
            id: 1,
            name: 'Miền Bắc 2',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đuôi'
            }, {
                id: 9,
                name: '2D 27Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 12,
                name: '3D 23Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 14,
                name: '4D 20Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 2,
            name: 'Miền Nam 18A',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 3,
            name: 'Miền Nam 18B',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 4,
            name: 'Miền Nam 18C',
            bet: [{
                id: 7,
                name: '2D Đầu'
            }, {
                id: 8,
                name: '2D Đầu'
            }, {
                id: 15,
                name: '2D 18Lô'
            }, {
                id: 16,
                name: '2D 7Lô'
            }, {
                id: 10,
                name: '3D Đầu'
            }, {
                id: 11,
                name: '3D Đuôi'
            }, {
                id: 17,
                name: '3D 17Lô'
            }, {
                id: 18,
                name: '3D 7Lô'
            }, {
                id: 13,
                name: '4D Đuôi'
            }, {
                id: 19,
                name: '4D 16Lô'
            }, {
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }, {
            id: 5,
            name: 'Xiên 18A + 18B',
            bet: [{
                id: 2,
                name: 'Xiên 2'
            }, {
                id: 3,
                name: 'Xiên 3'
            }, {
                id: 4,
                name: 'Xiên 4'
            }]
        }];

        function changeGame() {
            vm.bets = vm.games.filter(function(item) {
                return item.id === vm.form.game
            })[0].bet;
        }

        function checkHistory(page) {
            vm.history = page === undefined ? [] : vm.history;
            page = page === undefined ? 1 : page;
            let data = {
                Term: vm.form.term,
                GameType: vm.form.game,
                BetType: vm.form.bet,
                Size: 50,
                Page: page
            };
            vm.submitting = true;
            network.Logging.ActivityLottery.searchHandleNumberActivity(data).then(function(response) {
                console.log(response);
                vm.response = response;
                vm.more = response.Page < response.TotalPages;
                vm.history = vm.history.concat(response.Records);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.legendary').controller('legendPriceBoardCtrl', legendPriceBoardCtrl).controller('ListBottomSheetCtrl', ListBottomSheetCtrl);

    function legendPriceBoardCtrl($rootScope, $scope, $timeout, $interval, $state, $mdDialog, $mdMedia, $mdSidenav, $mdBottomSheet, network, orderByFilter, msUtils, collection, message, AuthService) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.isCompany = AuthService.isCompany();
        vm.hasPermission = AuthService.hasPermission(16);
        vm.hasWritePermission = AuthService.hasPermission(8);
        vm.allowChangePrice = false;
        if (!AuthService.hasPermission(16)) {
            $state.go('app.forbidden');
            return;
        }
        vm.aNumberShares = [];
        vm.numbers = [];
        vm.terms = [];
        vm.betTypes = [];
        vm.dateHistory = [];
        vm.GameTypes = [];
        vm.viewPoints = [{
            id: 0,
            name: 'Toàn bộ'
        }, {
            id: 1,
            name: 'Còn lại'
        }];
        vm.sortDefs = [{
            id: 'num',
            name: 'Thứ tự'
        }, {
            id: 'risk',
            name: 'Nguy cơ'
        }];
        vm.denominators = [1, 1000, 1000000];
        vm.isLoLive = isLoLive;
        vm.historyActive = historyActive;
        vm.changeTerm = changeTerm;
        vm.getTermsByDateGameType = getTermsByDateGameType;
        vm.fetchCurrentTerm = fetchCurrentTerm;
        vm.changeDate = changeDate;
        vm.changeGame = changeGame;
        vm.fetchParam = fetchParam;
        vm.fetchNumbers = fetchNumbers;
        vm.changeBet = changeBet;
        vm.setDeadLine = setDeadLine;
        vm.setupStep = setupStep;
        vm.createNumber2D = createNumber2D;
        vm.createNumber3D = createNumber3D;
        vm.createNumber4D = createNumber4D;
        vm.createPopover = createPopover;
        vm.sortNumber = sortNumber;
        vm.openAll = openAll;
        vm.closeAll = closeAll;
        vm.closeLotto = closeLotto;
        vm.checkboxEvent = checkboxEvent;
        vm.cancelChecked = cancelChecked;
        vm.closeNumber = closeNumber;
        vm.inputKeyNumber = inputKeyNumber;
        vm.submitKeyNumber = submitKeyNumber;
        vm.priceSetting = priceSetting;
        vm.changePriceNumber = changePriceNumber;
        vm.settingPrice = settingPrice;
        vm.customPercent = customPercent;
        vm.collectionNumber = collectionNumber;
        vm.viewBetting = viewBetting;
        vm.bettingItems = bettingItems;
        vm.companyBoard = companyBoard;
        vm.refreshEvent = refreshEvent;
        vm.immediatePrice = immediatePrice;
        vm.NumberShareGetAll = NumberShareGetAll;
        vm.addMaxShare = addMaxShare;
        vm.getNumberPriceExceptions = getNumberPriceExceptions;
        vm.priceException = priceException;
        vm.addPriceException = addPriceException;
        vm.toggleSidenav = toggleSidenav;
        vm.navChangeGame = navChangeGame;
        vm.navChangeSortDefs = navChangeSortDefs;
        vm.showNumberSheet = showNumberSheet;
        vm.priceView = {
            term: null
        };
        vm.priceBoard = {};
        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
        let z = 0;
        let max = vm.isCompany ? 60 : 20;
        for (var y = z; y < max; y++) {
            vm.dateHistory.push(moment().subtract(y, 'day').format('YYYY-MM-DD'))
        }
        $rootScope.$on('CallParentMethod', function() {
            vm.fetchCurrentTerm(true);
        });

        function refreshEvent(event) {
            vm.maxTimer = event;
            $interval.cancel(vm.refreshNumber);
            if (event === 0) {
                $timeout(function() {
                    $interval.cancel(vm.refreshNumber);
                    vm.timer = 'OFF'
                }, 200)
            } else {
                vm.timer = event;
            }
            vm.refreshNumber = $interval(function() {
                vm.timer--;
                if (vm.timer < 0) {
                    vm.timer = event;
                    vm.fetchNumbers();
                }
            }, 1000)
        }
        $scope.$on('$destroy', function() {
            $interval.cancel(vm.refreshNumber);
        });

        function isLoLive(BetType) {
            return msUtils.exists(BetType, [20, 26, 27, 28])
        }

        function immediatePrice() {
            vm.fetchNumbers();
            vm.refreshEvent(vm.maxTimer);
        }

        function historyActive() {
            vm.history = !vm.history;
            if (vm.history) {
                vm.priceBoard.Date = vm.dateHistory[0];
                vm.GameTypes = [{
                    GameType: 0
                }, {
                    GameType: 1
                }];
                vm.changeGame();
                vm.refreshEvent(0);
            } else {
                vm.fetchCurrentTerm(true);
                vm.refreshEvent(60);
            }
        }
        if (!vm.history) {
            vm.fetchCurrentTerm(true);
            vm.refreshEvent(60);
        }

        function fetchCurrentTerm(cond) {
            network.Games.Legend.Term.latest({
                CheckBookKeepingReady: false
            }).then(function(response) {
                response.sort(function(a, b) {
                    return a.GameType - b.GameType
                });
                angular.forEach(response, function(item) {
                    item.Games.sort(function(a, b) {
                        return a.BetType - b.BetType
                    })
                });
                vm.aTerms = response;
                response.map(function(r) {
                    vm.GameTypes.push({
                        GameType: r.GameType
                    })
                })
                $scope.$digest();
                if (cond) {
                    $timeout(function() {
                        vm.changeGame();
                    })
                }
            })
        }

        function changeDate() {
            vm.getTermsByDateGameType();
        }

        function changeGame() {
            if (vm.running) {
                return
            }
            vm.running = true;
            vm.priceBoard.GameType = parseInt(vm.selected.GameType);
            if (!vm.history) {
                let deadData = vm.aTerms.filter(function(t) {
                    return t.GameType === vm.priceBoard.GameType
                })[0];
                vm.priceBoard.Term = deadData.Term
                vm.fetchParam(deadData);
                vm.setDeadLine(deadData);
            } else {
                vm.getTermsByDateGameType();
            }
        }

        function getTermsByDateGameType() {
            network.Games.Legend.Term.getTermsByDateGameType({
                Date: vm.priceBoard.Date,
                GameType: vm.priceBoard.GameType
            }).then(function(response) {
                response.sort(function(a, b) {
                    if (a.Term < b.Term) {
                        return 1;
                    }
                    if (a.Term > b.Term) {
                        return -1;
                    }
                    return 0;
                })
                vm.termHistories = response;
                vm.selected.Term = vm.termHistories[0].Term;
                vm.priceBoard.Term = vm.selected.Term;
                vm.setDeadLine(vm.termHistories[0]);
                vm.fetchParam(vm.termHistories[0]);
                $scope.$digest();
            }).catch(function(error) {
                if (error.code === 'DataNotFoundException') {
                    message.info('Không tồn tài kỳ mở thưởng phù hợp')
                } else {
                    message.info(error.message)
                }
            })
            $timeout(function() {
                vm.running = false;
            }, 200);
        }

        function changeTerm() {
            vm.priceBoard.Term = vm.selected.Term;
            let deadData = vm.termHistories.filter(function(his) {
                return his.Term === vm.selected.Term;
            })[0]
            vm.setDeadLine(deadData);
            vm.fetchParam(deadData);
        }

        function fetchParam(deadData) {
            vm.betTypes = deadData.Games;
            vm.betTypes.sort(function(a, b) {
                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
            })
            vm.priceBoard.BetType = vm.betTypes[0].BetType;
            vm.priceBoard.allowBetting = (vm.betTypes[0].Status === 1) && (moment(vm.betTypes[0].AutoCloseAt) > moment().unix());
            vm.fetchNumbers();
            $timeout(function() {
                if (vm.isCompany) {
                    vm.getNumberPriceExceptions();
                }
            }, 200);
        }

        function changeBet(bet) {
            vm.priceBoard.BetType = bet.BetType;
            vm.fetchNumbers();
            $timeout(function() {
                if (vm.isCompany) {
                    vm.getNumberPriceExceptions();
                }
            }, 200);
            vm.priceBoard.allowBetting = (bet.Status === 1) && (moment(bet.AutoCloseAt) > moment().unix());
            if (typeof(vm.checkbox) === 'object')
                Object.keys(vm.checkbox).map(function(objectKey, i) {
                    vm.checkbox[objectKey] = false
                });
        }

        function fetchNumbers() {
            vm.setupStep();
            $rootScope.loadingProgress = true;
            let param = {
                Term: vm.priceBoard.Term,
                GameType: vm.priceBoard.GameType,
                BetType: vm.priceBoard.BetType
            };
            network.Games.Legend.PriceTable.getOdds(param).then(function(response) {
                vm.odds = response;
                $rootScope.loadingProgress = false;
                $timeout(function() {
                    vm.running = false;
                }, 200);
                $timeout(function() {
                    vm.allSet = true;
                }, 800);
                if (msUtils.exists(vm.priceBoard.BetType, [10, 11, 12, 17, 18, 26, 28])) {
                    vm.createNumber3D(vm.filterVal);
                } else if (msUtils.exists(vm.priceBoard.BetType, [13, 14, 19])) {
                    vm.createPopover();
                    vm.createNumber4D(vm.cond4d);
                } else {
                    vm.createNumber2D();
                }
            }).catch(function(error) {})
        }

        function setDeadLine(deadData) {
            if (vm.priceBoard.GameType === 0) {
                vm.priceBoard.deadLine = $.grep(deadData.Games, function(item) {
                    return item.BetType === 1
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep(deadData.Games, function(item) {
                    return item.BetType === 0
                })[0].AutoCloseAt;
            } else if (vm.priceBoard.GameType === 1) {
                vm.priceBoard.deadLine = $.grep(deadData.Games, function(item) {
                    return item.BetType === 7
                })[0].AutoCloseAt;
                vm.priceBoard.deadLineJP = $.grep(deadData.Games, function(item) {
                    return item.BetType === 8
                })[0].AutoCloseAt;
            }
        }

        function setupStep() {
            vm.steps = [];
            if (msUtils.exists(vm.priceBoard.BetType, [0, 21, 22, 23, 24, 25])) {
                vm.steps = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]
            } else if (vm.priceBoard.BetType === 1) {
                vm.steps = [20, 40, 60, 80, 100, 120, 140, 160, 180, 200, 220, 240, 260, 280, 300]
            } else {
                vm.steps = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
            }
            vm.setupKeyNumber = [10, 11, 12, 13, 14, 17, 18, 19].indexOf(vm.priceBoard.BetType) !== -1;
            vm.show3D = [10, 11, 12, 17, 18, 26, 28].indexOf(vm.priceBoard.BetType) !== -1;
            vm.show4D = [13, 14, 19].indexOf(vm.priceBoard.BetType) !== -1;
        }

        function createNumber2D() {
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 2) {
                vm.numbers = [];
                for (var i = 0; i < 100; i++) {
                    i = i < 10 ? '0' + i : i;
                    vm.numbers.push({
                        num: i.toString()
                    })
                }
            } else {}
            angular.forEach(vm.numbers, function(item, i) {
                var findNrr = $.grep(vm.odds.Numbers, function(e) {
                    return e.Number === item.num
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].RiskAmount === undefined ? vm.odds.Income : findNrr[0].RiskAmount;
                    item.totalRisk = findNrr[0].TotalRiskAmount === undefined ? vm.odds.TotalIncome : findNrr[0].TotalRiskAmount;
                    item.point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.totalPoint = findNrr[0].TotalPoint === undefined ? 0 : findNrr[0].TotalPoint;
                    item.stop = findNrr[0].Stop === undefined ? false : findNrr[0].Stop;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.Income;
                    item.totalRisk = vm.odds.TotalIncome;
                    item.stop = false;
                }
            });
            vm.priceBoard.point = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].point
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].totalPoint
            }, 0);
            vm.priceBoard.averagePrice = Object.keys(vm.numbers).reduce(function(previous, key) {
                return previous + vm.numbers[key].price
            }, 0) / 100;
            vm.sortNumber();
        }

        function createNumber3D(cond) {
            vm.filterVal = cond !== undefined ? cond : undefined;
            if (vm.numbers.length === 0 || vm.numbers[0].num.length !== 3) {}
            vm.numbers = [];
            var numberArr = [];
            if (vm.filterVal === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (var i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (i = 0; i < 1000; i++) {
                    if (i < 10) {
                        i = '00' + i
                    } else if (i < 100) {
                        i = '0' + i
                    }
                    var integer = Math.floor(vm.filterVal / 10);
                    if (integer === 2) {
                        if (Math.floor(i / 100) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else if (integer === 1) {
                        if (Math.floor((i % 100) / 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    } else {
                        if (Math.floor(i % 10) === vm.filterVal % 10) {
                            numberArr.push(i)
                        }
                    }
                }
            }
            angular.forEach(numberArr, function(val) {
                var item = {};
                item.num = val;
                var findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].RiskAmount === undefined ? vm.odds.Income : findNrr[0].RiskAmount;
                    item.totalRisk = findNrr[0].TotalRiskAmount === undefined ? vm.odds.TotalIncome : findNrr[0].TotalRiskAmount;
                    item.point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.totalPoint = findNrr[0].TotalPoint === undefined ? 0 : findNrr[0].TotalPoint;
                    item.stop = findNrr[0].Stop === undefined ? false : findNrr[0].Stop;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.Income;
                    item.totalRisk = vm.odds.TotalIncome;
                    item.stop = false;
                }
                vm.numbers.push(item)
            });
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 1000) / 1000;
            vm.sortNumber();
        }

        function createNumber4D(cond) {
            vm.priceBoard.point = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].Point === undefined ? 0 : vm.odds.Numbers[key].Point)
            }, 0);
            vm.priceBoard.totalPoint = Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].TotalPoint === undefined ? 0 : vm.odds.Numbers[key].TotalPoint)
            }, 0);
            vm.priceBoard.averagePrice = (Object.keys(vm.odds.Numbers).reduce(function(previous, key) {
                return previous + (vm.odds.Numbers[key].ExtraPrice === undefined ? 0 : vm.odds.Numbers[key].ExtraPrice)
            }, 0) + vm.odds.Price * 10000) / 10000;
            vm.cond4d = cond !== undefined ? cond : undefined;
            vm.numbers = [];
            var numberArr = [];
            if (cond === undefined) {
                angular.forEach(vm.odds.Numbers, function(val) {
                    numberArr.push(val.Number)
                });
                for (var i = 0; i < 200; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    numberArr.push(i.toString())
                }
                numberArr = numberArr.filter(function(item, index, inputArr) {
                    return inputArr.indexOf(item) === index
                });
            } else {
                for (i = 0; i < 10000; i++) {
                    if (i < 10) {
                        i = '000' + i
                    } else if (i < 100) {
                        i = '00' + i
                    } else if (i < 1000) {
                        i = '0' + i
                    }
                    i = i.toString();
                    if (i.match(cond.id)) {
                        numberArr.push(i)
                    }
                }
            }
            angular.forEach(numberArr, function(val) {
                var item = {};
                item.num = val;
                var findNrr = $.grep(vm.odds.Numbers, function(arNr) {
                    return arNr.Number === val.toString();
                });
                if (findNrr.length) {
                    item.price = findNrr[0].ExtraPrice === undefined ? vm.odds.Price : findNrr[0].ExtraPrice + vm.odds.Price;
                    item.risk = findNrr[0].RiskAmount === undefined ? vm.odds.Income : findNrr[0].RiskAmount;
                    item.totalRisk = findNrr[0].TotalRiskAmount === undefined ? vm.odds.TotalIncome : findNrr[0].TotalRiskAmount;
                    item.point = findNrr[0].Point === undefined ? 0 : findNrr[0].Point;
                    item.totalPoint = findNrr[0].TotalPoint === undefined ? 0 : findNrr[0].TotalPoint;
                    item.stop = findNrr[0].Stop === undefined ? false : findNrr[0].Stop;
                } else {
                    item.price = vm.odds.Price;
                    item.point = 0;
                    item.totalPoint = 0;
                    item.risk = vm.odds.Income;
                    item.totalRisk = vm.odds.TotalIncome;
                    item.stop = false;
                }
                vm.numbers.push(item)
            });
            vm.sortNumber();
        }

        function createPopover() {
            vm.popooxx = [];
            vm.popoxxo = [];
            vm.popoxox = [];
            vm.popxoxo = [];
            vm.popxoox = [];
            vm.popxxoo = [];
            for (var i = 0; i < 100; i++) {
                i = i < 10 ? '0' + i : i;
                i = i.toString();
                var j = i.split('');
                vm.popooxx.push({
                    id: '^' + i + '([0-9]+)$',
                    name: i + 'XX'
                });
                vm.popoxxo.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '$',
                    name: i.split('').join('XX')
                });
                vm.popoxox.push({
                    id: '^' + j[0] + '([0-9]+)+' + j[1] + '([0-9]+)$',
                    name: i.split('').join('X') + 'X'
                });
                vm.popxoxo.push({
                    id: '^([0-9]+)' + j[0] + '([0-9]+)' + j[1] + '$',
                    name: 'X' + i.split('').join('X')
                });
                vm.popxoox.push({
                    id: '^([0-9]+)' + i + '([0-9]+)$',
                    name: 'X' + i + 'X'
                });
                vm.popxxoo.push({
                    id: '^([0-9]+)' + i + '$',
                    name: 'XX' + i
                })
            }
        }

        function sortNumber() {
            vm.viewPoint = vm.viewPoint === undefined ? '1' : vm.viewPoint;
            vm.desc = false;
            if (vm.selected.sort === 'risk') {
                if (vm.viewPoint === '1') {
                    vm.propertyName = 'risk'
                } else {
                    vm.propertyName = 'totalRisk'
                }
                if (vm.priceBoard.BetType === 20) {
                    vm.propertyName = 'point';
                    vm.desc = true;
                }
            } else if (vm.selected.sort === 'num') {
                vm.propertyName = 'num'
            } else {
                vm.propertyName = 'MaxPercent'
            }
            vm.numbers = orderByFilter(vm.numbers, vm.propertyName, vm.desc);
            if (typeof(vm.numbers) === 'object') {
                vm.numbers = vm.numbers.slice(0, 100)
            }
        }

        function openAll(ev) {
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === vm.priceBoard.GameType
            })[0]);
            $mdDialog.show({
                controller: openBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/open.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            }).then(function(param) {
                vm.aTerms.map(function(t) {
                    if (t.GameType === param.GameType) {
                        t.Games.map(function(g) {
                            if (param.IncludeBetTypes === undefined) {
                                g.Status = 1
                            } else {
                                if (msUtils.exists(g.BetType, param.IncludeBetTypes)) {
                                    g.Status = 1
                                }
                            }
                        })
                    }
                })
                vm.aTerms.map(function(t) {
                    if (t.GameType === vm.priceBoard.GameType) {
                        t.Games.map(function(g) {
                            if (g.BetType === vm.priceBoard.BetType) {
                                vm.priceBoard.allowBetting = (g.Status === 1) && (moment(g.AutoCloseAt) > moment().unix())
                            }
                        })
                    }
                })
            }, function() {});

            function openBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    $scope.selected.push(value.BetType)
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.openBetting = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 1
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide(param);
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function closeAll(ev) {
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === vm.priceBoard.GameType
            })[0]);
            $mdDialog.show({
                controller: closeBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/close.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            }).then(function(param) {
                vm.aTerms.map(function(t) {
                    if (t.GameType === param.GameType) {
                        t.Games.map(function(g) {
                            if (param.IncludeBetTypes === undefined) {
                                if (!msUtils.exists(g.BetType, param.ExcludeBetTypes)) {
                                    g.Status = 0
                                }
                            } else {
                                if (msUtils.exists(g.BetType, param.IncludeBetTypes)) {
                                    g.Status = 0
                                }
                            }
                        })
                    }
                })
                vm.aTerms.map(function(t) {
                    if (t.GameType === vm.priceBoard.GameType) {
                        t.Games.map(function(g) {
                            if (g.BetType === vm.priceBoard.BetType) {
                                vm.priceBoard.allowBetting = (g.Status === 1) && (moment(g.AutoCloseAt) > moment().unix())
                            }
                        })
                    }
                })
            }, function() {});

            function closeBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    $scope.selected.push(value.BetType)
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBetting = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 0,
                        ExcludeBetTypes: [20, 26, 27, 28]
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide(param);
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function closeLotto(ev) {
            vm.selectedTermInfo = angular.copy(vm.aTerms.filter(function(t) {
                return t.GameType === vm.priceBoard.GameType
            })[0]);
            $mdDialog.show({
                controller: closeExceptBettingCtrl,
                templateUrl: 'app/main/legendary/priceBoard/dialog/closeExcept.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: vm.selectedTermInfo
                }
            }).then(function(param) {
                vm.aTerms.map(function(t) {
                    if (t.GameType === param.GameType) {
                        t.Games.map(function(g) {
                            if (param.IncludeBetTypes === undefined) {
                                g.Status = 0
                            } else {
                                if (msUtils.exists(g.BetType, param.IncludeBetTypes)) {
                                    g.Status = 0
                                }
                            }
                        })
                    }
                })
                vm.aTerms.map(function(t) {
                    if (t.GameType === vm.priceBoard.GameType) {
                        t.Games.map(function(g) {
                            if (g.BetType === vm.priceBoard.BetType) {
                                vm.priceBoard.allowBetting = (g.Status === 1) && (moment(g.AutoCloseAt) > moment().unix())
                            }
                        })
                    }
                })
            }, function() {});

            function closeExceptBettingCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TermInfo = data;
                $scope.TermInfo.Games = $scope.TermInfo.Games.filter(function(g) {
                    return !msUtils.exists(g.BetType, [20, 26, 27, 28])
                })
                $scope.selected = [];
                angular.forEach(data.Games, function(value) {
                    if (data.GameType === 0) {
                        if (msUtils.exists(value.BetType, [1, 2, 3, 4, 6, 12, 14, 29])) {
                            $scope.selected.push(value.BetType)
                        }
                    } else {
                        if (msUtils.exists(value.BetType, [2, 3, 4, 7, 10, 15, 17, 19, 30])) {
                            $scope.selected.push(value.BetType)
                        }
                    }
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.closeBettingExcept = function() {
                    $scope.submitting = true;
                    let param = {
                        Term: data.Term,
                        GameType: data.GameType,
                        Status: 0,
                    };
                    if ($scope.selected.length !== data.Games.length) {
                        param.IncludeBetTypes = $scope.selected
                    }
                    network.Games.Legend.Term.updateGameStatus(param).then(function(response) {
                        $mdDialog.hide(param);
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = false;
                    })
                }
            }
        }

        function checkboxEvent() {
            angular.forEach(vm.numbers, function(number) {
                number.active = false
            });
            Object.keys(vm.checkbox).map(function(objectKey, i) {
                var checkid = parseInt(objectKey.substring(3, 4));
                if (vm.checkbox[objectKey]) {
                    angular.forEach(vm.numbers, function(number, index) {
                        if (objectKey.substring(0, 3) === 'col') {
                            if (index % 10 === checkid) {
                                number.active = true;
                            }
                        } else {
                            if (Math.floor(index / 10) === checkid) {
                                number.active = true;
                            }
                        }
                    });
                }
            })
        }

        function cancelChecked() {
            angular.forEach(vm.numbers, function(number) {
                number.active = false
            });
            if (typeof(vm.checkbox) === 'object')
                Object.keys(vm.checkbox).map(function(objectKey, i) {
                    vm.checkbox[objectKey] = false
                })
        }

        function closeNumber(ev, item) {
            if (!vm.hasWritePermission) {
                return
            }
            var msg = item.stop === false ? 'Quý khách muốn thực hiện đóng số <span class="badge badge-danger">' + item.num + '</span>' : 'Quý khách muốn mở cược cho số <span class="badge badge-primary">' + item.num + '</span>';
            var mdclass = item.stop ? 'md-accent' : 'md-warn';
            $mdDialog.show({
                parent: angular.element(document.body),
                clickOutsideToClose: true,
                targetEvent: ev,
                locals: {
                    data: vm.priceBoard
                },
                template: '<md-dialog aria-label="dialog" class="warning-close-number">' +
                    '<md-toolbar class="' + mdclass + '">' +
                    '<div class="md-toolbar-tools">Yêu cầu xác nhận</div>' +
                    '</md-toolbar>' +
                    '  <md-dialog-content style="min-width: 400px">' +
                    '   <div class="md-dialog-content">' +
                    '       <p>' + msg + '</p>' +
                    '   </div>' +
                    '</md-dialog-content>' +
                    '  <md-dialog-actions>' +
                    '    <md-button ng-click="closeDialog()">Cancel</md-button>' +
                    '    <md-button ng-click="confirmDialog()" class="md-primary">OK</md-button>' +
                    '  </md-dialog-actions>' +
                    '</md-dialog>',
                controller: function dialogCtrl($scope, data, message) {
                    $scope.closeDialog = function() {
                        $mdDialog.hide();
                    };
                    $scope.confirmDialog = function() {
                        var url = item.stop ? 'api/manipulation/managenumber/open' : 'api/manipulation/managenumber/close';
                        var mess = item.stop ? 'Mở số thành công' : 'Đóng số thành công';
                        var request = {
                            Term: data.Term,
                            GameType: data.GameType,
                            BetType: data.BetType,
                            Numbers: [item.num]
                        };
                        if (!item.stop) {
                            network.Games.Legend.PriceTable.closeNumbers(request).then(function(response) {
                                if (response) {
                                    message.info(mess);
                                    $mdDialog.hide();
                                    item.stop = !item.stop;
                                }
                            })
                        } else {
                            network.Games.Legend.PriceTable.openNumbers(request).then(function(response) {
                                if (response) {
                                    message.info(mess);
                                    $mdDialog.hide();
                                    item.stop = !item.stop;
                                }
                            })
                        }
                    }
                }
            });
        }

        function inputKeyNumber() {
            var value = vm.keynumber.split(',');
            if (value[value.length - 1].length > 1) {
                vm.keynumber = vm.keynumber + ','
            }
        }

        function submitKeyNumber() {
            vm.keynumber = vm.keynumber.replace(/\s+/g, '');
            if (vm.keynumber.length === 0) {
                return
            }
            var arr = vm.keynumber.split(',');
            var arrInput = [];
            for (var i = 0; i < arr.length; i++) {
                var number = arr[i].slice(-2).replace(/\s+/g, '');
                number = number.length < 2 && number.length !== 0 ? '0' + number : number;
                if (!isNaN(number) && angular.isNumber(+number)) {
                    if (number.length !== 0)
                        arrInput.push(number)
                }
            }
            angular.forEach(vm.numbers, function(val) {
                if (arrInput.indexOf(val.num) !== -1) {
                    val.active = true
                }
            });
            vm.keynumber = '';
            document.getElementById('price-setup').focus();
        }

        function priceSetting() {
            var price = vm.pricesetup;
            if (isNaN(price) || !angular.isNumber(+price) || price.length === 0) {
                return
            }
            var data = {};
            data.Term = vm.priceBoard.Term;
            data.GameType = vm.priceBoard.GameType;
            data.BetType = vm.priceBoard.BetType;
            data.NumberPrices = [];
            angular.forEach(vm.numbers, function(val) {
                if (val.active) {
                    data.NumberPrices.push({
                        Number: val.num,
                        Price: price
                    })
                }
            });
            if (data.NumberPrices.length !== 0) {
                $rootScope.loadingProgress = true;
                network.Games.Legend.PriceTable.updatePrices(data).then(function(response) {
                    if (response) {
                        angular.forEach(vm.numbers, function(e) {
                            if (e.active) {
                                e.price = price;
                                delete e.active;
                            }
                        });
                        vm.pricesetup = '';
                        if (typeof(vm.checkbox) === 'object') {
                            Object.keys(vm.checkbox).map(function(objectKey, i) {
                                vm.checkbox[objectKey] = false
                            });
                        }
                        $rootScope.loadingProgress = false;
                        $timeout(function() {
                            $scope.$digest();
                        })
                    }
                }).catch(function(error) {
                    message.info(error.message);
                    $rootScope.loadingProgress = false;
                    $timeout(function() {
                        $scope.$digest();
                    })
                })
            }
        }

        function changePriceNumber(number, event) {
            var newPrice = event === 'add' ? number.price + parseInt(vm.priceStep) : number.price - parseInt(vm.priceStep);
            var data = {};
            data.Term = vm.priceBoard.Term;
            data.GameType = vm.priceBoard.GameType;
            data.BetType = vm.priceBoard.BetType;
            data.NumberPrices = [{
                Number: number.num,
                Price: newPrice
            }];
            $rootScope.loadingProgress = true;
            network.Games.Legend.PriceTable.updatePrices(data).then(function(response) {
                if (response) {
                    number.price = newPrice;
                    $rootScope.loadingProgress = false;
                    $timeout(function() {
                        $scope.$digest();
                    })
                }
            }).catch(function(error) {
                $rootScope.loadingProgress = false;
                message.info(error.message)
            })
        }

        function settingPrice(ev, item) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: settingPriceCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/settingPrice.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            }).then(function() {}, function(cancel) {
                if (cancel !== undefined)
                    item.price = cancel;
            });

            function settingPriceCtrl($scope, $mdDialog, data, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.newPrice = data.price;
                $scope.number = data.num;
                $scope.submitForm = function() {
                    var send = {};
                    send.Term = vm.priceBoard.Term;
                    send.GameType = vm.priceBoard.GameType;
                    send.BetType = vm.priceBoard.BetType;
                    send.NumberPrices = [{
                        Number: data.num,
                        Price: $scope.newPrice
                    }];
                    $scope.submitting = true;
                    network.Games.Legend.PriceTable.updatePrices(send).then(function(response) {
                        $scope.submitting = false;
                        if (response) {
                            $mdDialog.cancel($scope.newPrice);
                        }
                    }).catch(function(error) {
                        $scope.submitting = false;
                        $scope.warningMessage = error.message;
                        $scope.$digest();
                    })
                }
            }
        }

        function collectionNumber(ev) {
            $mdDialog.show({
                controller: collectionNumberCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/collection.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            }).then(function() {}, function(cancel) {
                if (cancel !== undefined)
                    angular.forEach(vm.numbers, function(item) {
                        if (cancel.indexOf(item.num) !== -1) {
                            item.active = true;
                        }
                    });
            });

            function collectionNumberCtrl($scope, $mdDialog) {
                $scope.dataCollection = {};
                $scope.dataCollection.congiap = collection.list['congiap'];
                $scope.dataCollection.dauduoi = collection.list['dauduoi'];
                $scope.dataCollection.tongba = collection.list['tongba'];
                $scope.dataCollection.bodau = collection.list['bodau'];
                $scope.dataCollection.tong = collection.list['tong'];
                $scope.dataCollection.kep = collection.list['kep'];
                $scope.dataList = collection.list;
                $scope.chooseRadio = function() {
                    $scope.setting = [];
                    Object.keys($scope.radio).map(function(objectKey, index) {
                        var arr = $.grep($scope.dataList[objectKey], function(e) {
                            return e.id === parseInt($scope.radio[objectKey])
                        });
                        $scope.setting.push(arr[0].content);
                    });
                    $scope.setting = containsAll.apply(this, $scope.setting);
                };
                $scope.cancel = function() {
                    $mdDialog.cancel($scope.setting);
                };

                function containsAll() {
                    var output = [];
                    var cntObj = {};
                    var array, item, cnt;
                    for (var i = 0; i < arguments.length; i++) {
                        array = arguments[i];
                        for (var j = 0; j < array.length; j++) {
                            item = "-" + array[j];
                            cnt = cntObj[item] || 0;
                            if (cnt === i) {
                                cntObj[item] = cnt + 1;
                            }
                        }
                    }
                    for (item in cntObj) {
                        if (cntObj.hasOwnProperty(item) && cntObj[item] === arguments.length) {
                            output.push(item.substring(1));
                        }
                    }
                    return (output);
                }
            }
        }

        function viewBetting(ev, item) {
            if (item.point !== 0)
                $mdDialog.show({
                    controller: viewBettingCtrl,
                    templateUrl: 'app/main/traditional/price_table/dialog/view.betting.dialog.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    fullscreen: true,
                    locals: {
                        item: item
                    }
                });

            function viewBettingCtrl($scope, $mdDialog, $timeout, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.dtOptions = {
                    autoWidth: true,
                    responsive: true,
                    searching: false,
                    paging: false,
                    bInfo: false,
                    bPaginate: false,
                    columnDefs: [{
                        targets: 0,
                        orderable: false
                    }, {
                        targets: 3,
                        orderable: false
                    }]
                };
                $scope.bettingDatas = [];
                $scope.loadBetList = function(ltID) {
                    $scope.submitting = true;
                    ltID = ltID === undefined ? '' : ltID;
                    let data = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        Number: item.num,
                        LastId: ltID
                    };
                    network.Reporting.Legend.Outstanding.getTicketItemsByNumber(data).then(function(response) {
                        $scope.loadMore = response.length === 25;
                        $scope.bettingDatas.push.apply($scope.bettingDatas, response);
                        $scope.lastID = response[response.length - 1].Id;
                        $timeout(function() {
                            $scope.submitting = false;
                        }, 1000)
                    })
                };
                $scope.loadBetList();
            }
        }

        function NumberShareGetAll() {
            vm.aNumberShares = sessionStorage.getItem('NumberShare') === null ? [] : JSON.parse(sessionStorage.getItem('NumberShare'));
            let fns = vm.aNumberShares.filter(function(ns) {
                return ns.Term === vm.priceBoard.Term && ns.GameType === vm.priceBoard.GameType && ns.BetType === vm.priceBoard.BetType
            });
            if (fns.length === 0) {
                network.Games.Legend.NumberShare.getAll({
                    Term: vm.priceBoard.Term,
                    GameType: vm.priceBoard.GameType,
                    BetType: vm.priceBoard.BetType
                }).then(function(response) {
                    response.Term = vm.priceBoard.Term;
                    response.GameType = vm.priceBoard.GameType;
                    response.BetType = vm.priceBoard.BetType;
                    if (response.Numbers === undefined) {
                        response.Numbers = [];
                    }
                    vm.aNumberShares.push(response);
                    sessionStorage.setItem('NumberShare', JSON.stringify(vm.aNumberShares));
                })
            }
            vm.addMaxShare();
        }

        function addMaxShare() {
            vm.numberShareConf = vm.aNumberShares.filter(function(n) {
                return n.GameType === vm.priceBoard.GameType && n.BetType === vm.priceBoard.BetType
            });
            if (vm.numberShareConf.length) {
                angular.forEach(vm.numbers, function(n) {
                    let fn = vm.numberShareConf[0].Numbers.filter(function(fn) {
                        return fn.Number === n.num
                    });
                    if (fn.length && fn[0].MaxPercent !== vm.numberShareConf[0].Limit) {
                        n.MaxPercent = fn[0].MaxPercent
                    } else {
                        delete n.MaxPercent
                    }
                })
            }
        }

        function customPercent(ev, item) {
            if (!vm.hasWritePermission) {
                return
            }
            vm.numberShareConf = vm.aNumberShares.filter(function(n) {
                return n.GameType === vm.priceBoard.GameType && n.BetType === vm.priceBoard.BetType
            })[0];
            if (!vm.numberShareConf.Allow) {
                message.info('Chỉ tài khoản thầu mềm được thay đổi tỷ lệ thầu trên từng số.');
                return;
            }
            $mdDialog.show({
                controller: settingPercentCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/settingPercent.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function settingPercentCtrl($scope, $mdDialog, item, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.number = item.num;
                $scope.MaxPercent = vm.numberShareConf.Limit;
                let fMax = vm.numberShareConf.Numbers.filter(function(n) {
                    return n.Number === item.num
                });
                $scope.percent = fMax.length ? fMax[0].MaxPercent : vm.numberShareConf.Limit;
                $scope.setMaxPercent = function() {
                    $scope.percent = vm.numberShareConf.Limit;
                };
                $scope.changePercent = function() {
                    if ($scope.percent < 0) $scope.percent = 0;
                    if ($scope.percent > vm.numberShareConf.Limit) {
                        $scope.percent = vm.numberShareConf.Limit;
                        $scope.warningMessage = 'Quý khách không được thầu quá ' + vm.numberShareConf.Limit + '%'
                    } else {
                        $scope.warningMessage = ''
                    }
                };
                $scope.submitForm = function() {
                    $scope.submitting = true;
                    if ($scope.percent === vm.numberShareConf.Limit) {
                        network.Games.Legend.NumberShare.delete({
                            Term: vm.priceBoard.Term,
                            GameType: vm.priceBoard.GameType,
                            BetType: vm.priceBoard.BetType,
                            Number: item.num
                        }).then(function(response) {
                            if (response) {
                                angular.forEach(vm.numberShareConf.Numbers, function(n, i) {
                                    if (n.Number === item.num) {
                                        vm.numberShareConf.Numbers.splice(i, 1)
                                    }
                                });
                                vm.addMaxShare();
                                message.info('Cài thầu thành công')
                            }
                        })
                    } else {
                        network.Games.Legend.NumberShare.update({
                            Term: vm.priceBoard.Term,
                            GameType: vm.priceBoard.GameType,
                            BetType: vm.priceBoard.BetType,
                            Number: item.num,
                            MaxPercent: $scope.percent
                        }).then(function(response) {
                            $scope.submitting = false;
                            if (response) {
                                angular.forEach(vm.aNumberShares, function(an) {
                                    if (an.GameType === vm.priceBoard.GameType && an.BetType === vm.priceBoard.BetType) {
                                        let findN = an.Numbers.filter(function(fn) {
                                            return fn.Number === item.num
                                        });
                                        if (findN.length) {
                                            findN[0].MaxPercent = $scope.percent
                                        } else {
                                            an.Numbers.push({
                                                Number: item.num,
                                                MaxPercent: $scope.percent
                                            })
                                        }
                                    }
                                });
                                vm.addMaxShare();
                                message.info('Cài thầu thành công')
                            }
                        }).catch(function(error) {
                            $scope.submitting = false;
                            $scope.warningMessage = error.message
                        })
                    }
                }
            }
        }

        function getNumberPriceExceptions() {
            vm.aPriceExcep = [];
        }

        function priceException(ev, item) {
            if (!vm.hasWritePermission || !vm.isCompany) {
                return
            }
            $mdDialog.show({
                controller: priceExceptionCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/price-exception.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function priceExceptionCtrl($scope, $mdDialog, item, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.number = angular.copy(item);
                $scope.number.PriceException = $scope.number.PriceException === undefined ? 0 : $scope.number.PriceException;
                $scope.submitForm = function() {
                    $scope.submitting = true;
                    let data = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: vm.priceBoard.BetType,
                        Number: $scope.number.num,
                        Price: $scope.number.PriceException
                    };
                    network.Games.Legend.PriceAutoManagement.updateNumberPriceException(data).then(function(response) {
                        $scope.submitting = false;
                        let finPE = vm.aPriceExcep.filter(function(ap) {
                            return ap.Number === data.Number
                        });
                        if (finPE.length) {
                            finPE[0].Price = data.Price
                        } else {
                            vm.aPriceExcep.push({
                                Number: data.Number,
                                Price: data.Price
                            })
                        }
                        vm.addPriceException();
                        $mdDialog.cancel();
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }

        function addPriceException() {
            angular.forEach(vm.numbers, function(n) {
                let fn = vm.aPriceExcep.filter(function(fn) {
                    return fn.Number === n.num
                });
                if (fn.length) {
                    n.PriceException = fn[0].Price
                } else {
                    delete n.PriceException
                }
            })
        }

        function toggleSidenav(sidenavId) {
            $mdSidenav(sidenavId).toggle();
        }

        function navChangeGame(game) {
            vm.selected.GameType = game;
            $timeout(function() {
                vm.changeGame();
            })
        }

        function navChangeSortDefs(id) {
            vm.selected.sort = id;
            $timeout(function() {
                vm.sortNumber()
            })
        }

        function showNumberSheet(number, $event) {
            $mdBottomSheet.show({
                templateUrl: 'app/main/traditional/price_table/sidenavs/number-bottom-sheet-template.html',
                controller: 'ListBottomSheetCtrl'
            }).then(function(clickedItem) {
                if (clickedItem.id === 0) {
                    vm.customPercent($event, number)
                } else if (clickedItem.id === 1) {
                    vm.viewBetting($event, number)
                } else if (clickedItem.id === 2) {
                    vm.settingPrice($event, number)
                }
            }).catch(function(error) {})
        }

        function bettingItems(ev) {
            $mdDialog.show({
                controller: bettingItemsCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/betting.items.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: $rootScope.current
                }
            });

            function bettingItemsCtrl($scope, $mdDialog, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.betGroups = [{
                    id: 0,
                    name: '2D',
                    value: [0, 1, 21, 7, 8, 9, 20, 15, 16, 22, 23, 24, 25]
                }, {
                    id: 1,
                    name: '3D',
                    value: [10, 11, 12, 17, 18]
                }, {
                    id: 2,
                    name: '4D',
                    value: [13, 14, 19]
                }, {
                    id: 3,
                    name: 'Xiên 2',
                    value: [2]
                }, {
                    id: 4,
                    name: 'Xiên 3',
                    value: [3]
                }, {
                    id: 5,
                    name: 'Xiên 4',
                    value: [4]
                }];
                $scope.selected = [0];
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.filterGroup = {};
                $scope.filterGroup.userName = true;
                $scope.setting = {};
                $scope.setting.point = 2000;
                $scope.setting.minrecord = 3;
                $scope.colors = ['#eac2fc', '#fcfab3', '#7af4d6', '#c9b0f2', '#ceef73', '#f9b775', '#f977d5', '#efa2ee', '#f7f78a', '#a8fc9f', '#a6d6ed', '#c77ff4', '#adf481', '#c7f0fc', '#fcc4ba', '#8cf7c3', '#ffc6d4', '#bc6ef4', '#f99fe7', '#a98bed', '#f98886', '#79f7d1', '#d38dfc', '#abd1fc', '#d7c2f9', '#ed817b', '#edfc7b'];
                $scope.currentBetting = function() {
                    $scope.dataBinds = [];
                    var betlist = [];
                    angular.forEach($scope.selected, function(val) {
                        betlist.push.apply(betlist, $.grep($scope.betGroups, function(e, i) {
                            return e.id === val
                        })[0].value)
                    });
                    if (betlist.length) {
                        betlist.sort(function(a, b) {
                            return a - b
                        });
                        var post = {
                            TermName: data.Term,
                            BetTypes: betlist,
                            Point: $scope.setting.point
                        };
                        if ($scope.setting.account) {
                            post.UserName = $scope.setting.account
                        }
                        network.POSTdata('api/stats/bettingitems/latest', post).then(function(response) {
                            if (response.length) {
                                $scope.dataBinds = processData(response)
                            } else {
                                $scope.dataBinds = []
                            }
                        })
                    }
                };

                function processData(resp) {
                    var compare = groupBy(resp);
                    var srcOp = ($scope.filterGroup.userName ? 1 : 0) +
                        ($scope.filterGroup.number ? 2 : 0) +
                        ($scope.filterGroup.point ? 4 : 0) +
                        ($scope.filterGroup.ip ? 8 : 0) +
                        ($scope.filterGroup.betType ? 16 : 0);
                    $.each(resp, function(index, value) {
                        var search = jQuery.grep(compare, function(i, e) {
                            var findOp = 0;
                            if (i.userName === value.userName) {
                                findOp += 1;
                            }
                            if (i.numbers === value.numbers.join(',')) {
                                findOp += 2;
                            }
                            if (i.point === value.point) {
                                findOp += 4;
                            }
                            if (i.betType === value.betType) {
                                findOp += 16;
                            }
                            if (i.ipAddress === value.ipAddress) {
                                findOp += 8;
                            }
                            return (srcOp & findOp) === srcOp
                        });
                        if (search.length !== 0 && search[0].seq >= $scope.setting.minrecord) {
                            value.classIndex = search[0].groupIndex
                        } else {
                            value.classIndex = 0
                        }
                    });
                    return resp;
                }

                function groupBy(source) {
                    var group = [];
                    $scope.filterGroup = $scope.filterGroup || {
                        userName: false,
                        number: false,
                        point: false,
                        betType: false,
                        ip: false
                    };
                    var srcOp = ($scope.filterGroup.userName ? 1 : 0) +
                        ($scope.filterGroup.number ? 2 : 0) +
                        ($scope.filterGroup.point ? 4 : 0) +
                        ($scope.filterGroup.ip ? 8 : 0) +
                        ($scope.filterGroup.betType ? 16 : 0);
                    if (srcOp === 0) {
                        return group;
                    }
                    for (var i = 0; i < source.length; i++) {
                        var item = source[i];
                        var found = false;
                        for (var j = 0; j < group.length; j++) {
                            var distOp = 0;
                            if (group[j].userName === item.userName) {
                                distOp += 1;
                            }
                            if (group[j].numbers === item.numbers.join(',')) {
                                distOp += 2;
                            }
                            if (group[j].point === item.point) {
                                distOp += 4;
                            }
                            if (group[j].ipAddress === item.ipAddress) {
                                distOp += 8;
                            }
                            if (group[j].betType === item.betType) {
                                distOp += 16;
                            }
                            if ((distOp & srcOp) === srcOp) {
                                group[j].seq += 1;
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            var index = group.length + 1;
                            group.push({
                                seq: 1,
                                groupIndex: index,
                                userName: $scope.filterGroup.userName ? item.userName : 'nil',
                                point: $scope.filterGroup.point ? item.point : 'nil',
                                betType: $scope.filterGroup.betType ? item.betType : 'nil',
                                ipAddress: $scope.filterGroup.ip ? item.ipAddress : 'nil',
                                numbers: $scope.filterGroup.number ? item.numbers.join(',') : 'nil'
                            });
                        }
                    }
                    return group;
                }
            }
        }

        function companyBoard($event) {
            $mdDialog.show({
                controller: companyBoardCtrl,
                templateUrl: 'app/main/traditional/price_table/dialog/big.board.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                onRemoving: function() {
                    console.log('onRemoving')
                }
            });

            function companyBoardCtrl($scope, $mdDialog, network) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.interval = 30;
                $scope.count = 0;
                $scope.countdown = function() {
                    var interval = $timeout(function() {
                        $scope.interval = $scope.interval < 10 ? 10 : $scope.interval;
                        if ($scope.count === 0) {
                            $scope.getOdds();
                        }
                        $scope.count++;
                        if ($scope.count > $scope.interval) {
                            $scope.count = 0
                        }
                        $scope.countdown();
                    }, 1000);
                    $scope.$on('$destroy', function() {
                        $timeout.cancel(interval);
                    });
                };
                $scope.countdown();
                $scope.colors = ['#ff0400', '#0075c6', '#ffff00', '#00ae52', '#ff9900', '#990099', '#808080', '#99ccff', '#d47d7d', '#b3d303', '#a6d6ed', '#c77ff4', '#adf481', '#c7f0fc', '#fcc4ba', '#8cf7c3', '#ffc6d4', '#bc6ef4', '#f99fe7', '#a98bed', '#f98886', '#79f7d1', '#d38dfc', '#abd1fc', '#d7c2f9', '#ed817b', '#edfc7b'];

                function getOdd(BetType) {
                    let param = {
                        Term: vm.priceBoard.Term,
                        GameType: vm.priceBoard.GameType,
                        BetType: BetType
                    };
                    return network.Games.Legend.PriceTable.getOdds(param).then(function(response) {
                        response.BetType = BetType;
                        response.Numbers.sort(function(a, b) {
                            return a.RiskAmount - b.RiskAmount
                        });
                        angular.forEach(response.Numbers, function(Number) {
                            Number.Price = Number.ExtraPrice !== undefined ? response.Price + Number.ExtraPrice : response.Price;
                        });
                        return response
                    })
                }
                $scope.highlightNumber = function() {
                    let numberArr = [],
                        result = [];
                    angular.forEach($scope.oddData, function(odd) {
                        if (odd.BetType !== 21) {
                            angular.forEach(odd.Numbers, function(number, index) {
                                if (index < 10) {
                                    numberArr.push(number.Number)
                                }
                            })
                        }
                    });
                    for (let i = 0; i < 100; i++) {
                        i = i < 10 ? '0' + i : i;
                        if ($.grep(numberArr, function(n) {
                                return n === i.toString()
                            }).length > 2) {
                            result.push(i.toString())
                        }
                    }
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            var indexColor = result.indexOf(number.Number);
                            if (indexColor > -1 && odd.BetType !== 21) {
                                number.classIndex = indexColor
                            }
                        })
                    })
                };
                $scope.getOdds = function() {
                    Promise.all([getOdd(0), getOdd(1), getOdd(2), getOdd(3), getOdd(4), getOdd(21)]).then(function(values) {
                        $scope.oddData = values;
                        $scope.highlightNumber();
                    })
                };
                $scope.hoverOut = function() {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            number.hover = false;
                        })
                    })
                };
                $scope.hoverIn = function(num) {
                    angular.forEach($scope.oddData, function(odd) {
                        angular.forEach(odd.Numbers, function(number) {
                            if (number.Number === num && number.classIndex !== undefined) {
                                number.hover = true;
                            }
                        })
                    })
                };
            }
        }
    }

    function ListBottomSheetCtrl($scope, $mdBottomSheet) {
        $scope.items = [{
            id: 0,
            name: 'Thay đổi tỷ lệ thầu',
            icon: 'icon-percent'
        }, {
            id: 1,
            name: 'Chi tiết đặt cược',
            icon: 'icon-format-list-bulleted'
        }, ];
        $scope.listItemClick = function($index) {
            $mdBottomSheet.hide($scope.items[$index]);
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.history').controller('historyAccountCtrl', historyAccountCtrl).filter('WMActivity', function() {
        return function(input) {
            if (input === 0) {
                return 'Thay đổi thắng thua tối đa và cược tối đa'
            } else if (input === 1) {
                return 'Reset thống kê thắng thua'
            } else if (input === 2) {
                return 'Cập nhật trạng thái'
            } else {
                return ''
            }
        }
    });

    function historyAccountCtrl($state, $timeout, $mdDialog, network, message, AuthService) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.changeRules = changeRules;
        vm.password = password;
        vm.shareHolder = shareHolder;
        vm.userGameSetting = userGameSetting;
        vm.stopBetting = stopBetting;
        vm.suspend = suspend;
        vm.credit = credit;
        vm.paymentMethod = paymentMethod;
        vm.settle = settle;
        vm.login = login;
        vm.WmShareHolder = WmShareHolder;
        vm.WmUserGame = WmUserGame;
        vm.LegendShareHolder = LegendShareHolder;
        vm.LegendUserGame = LegendUserGame;
        vm.Production = Production;
        vm.Casino789ShareHolder = Casino789ShareHolder;
        vm.Casino789UserGame = Casino789UserGame;
        vm.bong88ShareHolder = bong88ShareHolder;
        vm.bong88UserGame = bong88UserGame;
        vm.viewIp = viewIp;
        vm.tab = 0;
        vm.hasData = false;
        vm.history = [];
        vm.form = {
            Username: '',
            UpdateUsername: '',
            IP: ''
        };
        vm.checkHistory = checkHistory;
        vm.max = moment();
        vm.form.start = moment().startOf('day');
        vm.form.end = moment();
        vm.searchRules = [{
            id: 0,
            active: true,
            name: 'Lịch sử đăng nhập'
        }, {
            id: 1,
            active: false,
            name: 'Mật khẩu'
        }, {
            id: 2,
            active: false,
            name: 'XSTT - Thông tin thầu'
        }, {
            id: 3,
            active: false,
            name: 'XSTT - Thông số tài khoản'
        }, {
            id: 4,
            active: false,
            name: 'Ngừng đặt'
        }, {
            id: 5,
            active: false,
            name: 'Đóng tài khoản'
        }, {
            id: 6,
            active: false,
            name: 'Tín dụng'
        }, {
            id: 7,
            active: false,
            name: 'Hình thức thanh toán'
        }, {
            id: 8,
            active: false,
            name: 'Kết toán'
        }, {
            id: 9,
            active: false,
            name: 'WM - Thông tin thầu'
        }, {
            id: 10,
            active: false,
            name: 'WM - Thông số tài khoản'
        }, {
            id: 11,
            active: false,
            name: 'Thay đổi sản phẩm'
        }, {
            id: 14,
            active: false,
            name: '789CSN - Thông tin thầu'
        }, {
            id: 15,
            active: false,
            name: '789CSN - Thông số tài khoản'
        }, {
            id: 16,
            active: false,
            name: 'Bong88 - Thông tin thầu'
        }, {
            id: 17,
            active: false,
            name: 'Bong88 - Thông số tài khoản'
        }, ];
        vm.selectedLabel = vm.searchRules[0].name;
        vm.selectedRule = vm.searchRules[0].id;

        function changeRules(item) {
            vm.hasData = false;
            vm.loadDone = false;
            vm.Records = [];
            vm.selectedRule = item.id;
            vm.selectedLabel = item.name;
            angular.forEach(vm.searchRules, function(rule) {
                rule.active = item.id === rule.id;
            })
        }

        function checkHistory() {
            if (vm.selectedRule === 0) {
                if (vm.form.Username.length === 0 && vm.form.IP.length === 0) {
                    message.show('Vui lòng nhập tên tài khoản hoặc IP cần truy vấn');
                    return;
                }
            } else {
                if (vm.form.Username.length === 0 && vm.form.UpdateUsername.length === 0) {
                    message.show('Vui lòng nhập tên tài khoản cần truy vấn');
                    return;
                }
            }
            vm.hasData = false;
            vm.loadDone = false;
            vm.Records = [];
            switch (vm.selectedRule) {
                case 0:
                    vm.login();
                    break;
                case 1:
                    vm.password();
                    break;
                case 2:
                    vm.shareHolder();
                    break;
                case 3:
                    vm.userGameSetting();
                    break;
                case 4:
                    vm.stopBetting();
                    break;
                case 5:
                    vm.suspend();
                    break;
                case 6:
                    vm.credit();
                    break;
                case 7:
                    vm.paymentMethod();
                    break;
                case 8:
                    vm.settle();
                    break;
                case 9:
                    vm.WmShareHolder();
                    break;
                case 10:
                    vm.WmUserGame();
                    break;
                case 11:
                    vm.Production();
                    break;
                case 12:
                    vm.LegendShareHolder();
                    break;
                case 13:
                    vm.LegendUserGame();
                    break;
                case 14:
                    vm.Casino789ShareHolder();
                    break;
                case 15:
                    vm.Casino789UserGame();
                    break;
                case 16:
                    vm.bong88ShareHolder();
                    break;
                case 17:
                    vm.bong88UserGame();
                    break;
                default:
            }
        }

        function login(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                Ip: vm.form.IP,
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchAuthActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function password(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 0,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function shareHolder(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername,
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityLottery.searchShareHolderActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            })
        }

        function userGameSetting(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername,
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityLottery.searchUserGameSettingActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            })
        }

        function stopBetting(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 2,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function suspend(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 3,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function credit(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 1,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function paymentMethod(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 4,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function settle(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 5,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function WmShareHolder(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.WMCasino.searchShareHolderActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function WmUserGame(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.WMCasino.searchUserGameActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function LegendShareHolder(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.Legend.searchShareHolderActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function LegendUserGame(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername,
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.Legend.searchUserGameSettingActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            })
        }

        function Production(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                ActivityType: 6,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.ActivityIdentity.searchIdentityActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function Casino789ShareHolder(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.LegendCasino.searchShareHolderActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function Casino789UserGame(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            network.Logging.LegendCasino.searchUserGameActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function bong88ShareHolder(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            Lotus.Saba.Logging.searchShareHolderActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function bong88UserGame(page) {
            vm.submitting = true;
            let data = {
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                Size: 100,
                Username: vm.form.Username,
                UpdateUsername: vm.form.UpdateUsername
            };
            data.Page = page === undefined ? 1 : page;
            Lotus.Saba.Logging.searchBetLimitActivity(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            }).catch(function(error) {
                message.info(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000)
            });
        }

        function viewIp(ip) {
            $mdDialog.show({
                controller: viewIpCtrl,
                templateUrl: 'app/main/dashboard/dialog/ip.html',
                clickOutsideToClose: true,
                multiple: true,
                fullscreen: true,
                locals: {
                    ip: ip
                }
            });

            function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                Lotus.IpLookup.lookup(ip).then(function(response) {
                    $scope.ipLookup = response;
                    $scope.$digest();
                });
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('fuse').controller('balanceCtrl', balanceCtrl);

    function balanceCtrl($scope, $state, $timeout, network, AuthService, message) {
        let vm = this;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        vm.history = [];
        vm.form = {};
        vm.Records = [];
        vm.hasData = false;
        vm.loadDone = false;
        vm.sort = 'asc'
        vm.max = moment();
        vm.form.start = moment().startOf('day');
        vm.form.start = moment().startOf('month');
        vm.form.end = moment();
        vm.checkHistory = checkHistory;
        vm.transactionLabel = transactionLabel;
        vm.selectTransaction = selectTransaction;
        vm.selectAllTransaction = selectAllTransaction;
        vm.changeSort = changeSort;
        vm.TransactionTypes = [{
            id: 0,
            name: "Cập nhật tín dụng"
        }, {
            id: 1,
            name: "Kết toán tài khoản bằng tay"
        }, {
            id: 100,
            name: "Cược xổ số truyền thống"
        }, {
            id: 101,
            name: "Huỷ đơn cược trả lại tiền"
        }, {
            id: 102,
            name: "Kết quả cược xổ số truyền thống"
        }, {
            id: 103,
            name: "Huỷ kết quả cược xổ số truyền thống"
        }, {
            id: 120,
            name: "Tiền cược WM CASINO"
        }, {
            id: 121,
            name: "Tiền thắng thua WM Casino"
        }, {
            id: 122,
            name: "Tiền COM chơi WM Casino"
        }, {
            id: 123,
            name: "Hoàn trả lại tiền cược WM Casino"
        }, {
            id: 160,
            name: "Cược 789 Casino"
        }, {
            id: 161,
            name: "Huỷ cược 789 Casino"
        }, {
            id: 162,
            name: "Trả thưởng kết quả cược 789 Casino"
        }, {
            id: 163,
            name: "Huỷ kết quả trả thưởng 789 Casino"
        }, {
            id: 180,
            name: "Chuyển tiền ví Bong88"
        }, {
            id: 181,
            name: "Tiền COM chơi SABA"
        }, {
            id: 182,
            name: "Lấy lại tiền COM SABA do huỷ đơn cược"
        }, ];
        angular.forEach(vm.TransactionTypes, function(product) {
            product.active = true;
        });
        vm.transactionLabel();

        function transactionLabel() {
            let checkLength = vm.TransactionTypes.filter(function(p) {
                return p.active
            });
            if (checkLength.length === vm.TransactionTypes.length) {
                vm.textTransactionLabel = 'Tất cả giao dịch'
            } else if (checkLength.length === 0) {
                vm.textTransactionLabel = 'Chọn loại giao dịch'
            } else if (checkLength.length === 1) {
                vm.textTransactionLabel = checkLength[0].name
            } else {
                vm.textTransactionLabel = checkLength.length + ' giao dịch'
            }
        }

        function selectTransaction(item) {
            angular.forEach(vm.TransactionTypes, function(product) {
                if (product.id === item.id) {
                    product.active = !product.active;
                }
            });
            vm.transactionLabel();
        }

        function selectAllTransaction() {
            let checkLength = vm.TransactionTypes.filter(function(p) {
                return p.active
            }).length === vm.TransactionTypes.length;
            angular.forEach(vm.TransactionTypes, function(product) {
                product.active = !checkLength;
            });
            vm.transactionLabel();
        }

        function changeSort(cond) {
            vm.sort = cond;
            vm.checkHistory();
        }

        function checkHistory(page) {
            if (vm.Username === undefined || vm.Username.length === 0) {
                message.show('Vui lòng nhập tên tài khoản cần truy vấn');
                return;
            }
            if (page === undefined) {
                vm.Records = [];
                vm.hasData = false;
                vm.loadDone = false;
            }
            vm.submitting = true;
            let data = {
                Username: vm.Username,
                From: moment(vm.form.start).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                To: moment(vm.form.end).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                TransactionTypes: [],
                Size: 100,
                Sort: vm.sort
            };
            data.Page = page === undefined ? 1 : page;
            angular.forEach(vm.TransactionTypes, function(product) {
                if (product.active) {
                    data.TransactionTypes.push(product.id)
                }
            });
            if (data.TransactionTypes.length === vm.TransactionTypes.length) {
                delete data.TransactionTypes
            }
            network.Logging.ActivityIdentity.searchAccountBalanceTx(data).then(function(response) {
                vm.loadDone = true;
                vm.Records = vm.Records.concat(response.Records);
                vm.hasData = response.TotalRecords > 0;
                vm.hasMoreRecord = response.Page < response.TotalPages;
                vm.nextPage = response.Page + 1;
                $timeout(function() {
                    vm.submitting = false;
                }, 1000);
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message);
                $timeout(function() {
                    vm.submitting = false;
                }, 1000);
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('legendDealerCtrl', legendDealerCtrl);

    function legendDealerCtrl($scope, $mdDialog, $timeout, $location, $state, $window, $http, network) {
        let vm = this;
        vm.openDealer = openDealer;
        vm.listDealer = listDealer;
        vm.listDealer();

        function listDealer() {
            network.Games.LegendCasino.Dealer.list().then(function(response) {
                vm.dealers = response;
                $scope.$digest();
            })
        }

        function openDealer($event, item) {
            $mdDialog.show({
                controller: openDealerCtrl,
                templateUrl: 'app/main/legend-casino/dealer/dialog/open.dealer.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            }).then(function(i) {
                console.log(i);
            }, function() {});

            function openDealerCtrl($scope, $mdDialog, $mdMedia, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.$mdMedia = $mdMedia;
                let newDealer = item === undefined;
                $scope.DealerInfo = item;
                $scope.submit = function() {
                    $scope.submitting = true;
                    if (newDealer) {
                        vm.listDealer();
                        network.Games.LegendCasino.Dealer.create($scope.DealerInfo).then(function(response) {
                            $mdDialog.cancel();
                            vm.listDealer();
                            $scope.submitting = false;
                            $scope.$digest();
                        })
                    } else {
                        network.Games.LegendCasino.Dealer.update($scope.DealerInfo).then(function(response) {
                            $mdDialog.cancel();
                            vm.listDealer();
                            $scope.submitting = false;
                            $scope.$digest();
                        })
                    }
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('legendCasinoParameterCtrl', legendCasinoParameterCtrl)

    function legendCasinoParameterCtrl($scope, $mdDialog, $timeout, $location, $state, AuthService, network, message) {
        let vm = this;
        vm.editParam = editParam;
        vm.cancel = cancel;
        vm.save = save;
        vm.hasWritePermission = AuthService.hasPermission(32);
        network.Games.LegendCasino.Sedie.Parameter.getParameters().then(function(response) {
            console.log(response);
            vm.backup = angular.copy(response);
            vm.parameters = response.sort(function(a, b) {
                return a.BetType - b.BetType;
            });
            $scope.$digest();
        })

        function editParam(param) {
            param.editMode = true;
        }

        function cancel() {
            vm.parameters = angular.copy(vm.backup);
        }

        function save(param) {
            vm.send = {
                BetType: param.BetType,
                Payouts: param.Payouts,
                MinBet: param.MinBet,
                MaxBet: param.MaxBet
            };
            network.Games.LegendCasino.Sedie.Parameter.updateProperties(vm.send).then(function(response) {
                message.info('Cập nhật tham số thành công');
                param.editMode = false;
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message);
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.casino789').controller('legendAreaCtrl', legendAreaCtrl).filter('areaStatus', areaStatus).filter('gameStatus', gameStatus).filter('betItemStatus', betItemStatus).filter('SedieResult', SedieResult).filter('gameStats', gameStats).filter('gameSumStats', gameSumStats).filter('gameSumWinLose', gameSumWinLose).filter('gameSumComm', gameSumComm)

    function areaStatus() {
        return function(input) {
            if (input === 0) {
                return 'OutOfService'
            } else if (input === 1) {
                return 'Paused'
            } else if (input === 2) {
                return 'Reserving'
            } else {
                return input
            }
        }
    }

    function gameStatus() {
        return function(input) {
            if (input === 0) {
                return 'GameStart'
            } else if (input === 1) {
                return 'GamePlay'
            } else if (input === 2) {
                return 'GameEnd'
            } else {
                return input
            }
        }
    }

    function betItemStatus() {
        return function(input) {
            if (input === -1) {
                return 'Cancelled'
            } else if (input === 0) {
                return 'Approved'
            } else if (input === 1) {
                return 'Đã kết sổ'
            } else {
                return input
            }
        }
    }

    function SedieResult() {
        return function(input) {
            if (input === 0) {
                return 'assets/images/sedie/0.png'
            } else if (input === 1) {
                return 'assets/images/sedie/1.png'
            } else if (input === 2) {
                return 'assets/images/sedie/2.png'
            } else if (input === 3) {
                return 'assets/images/sedie/3.png'
            } else if (input === 4) {
                return 'assets/images/sedie/4.png'
            } else {
                return input
            }
        }
    }

    function gameStats() {
        return function(input, BetType, seCondition) {
            if (input === undefined) {
                return ''
            }
            let data = input.filter(function(b) {
                return b.BetType === BetType;
            })
            if (data.length) {
                return data[0][seCondition]
            } else {
                return ''
            }
        }
    }

    function gameSumStats($filter) {
        return function(input) {
            let sumQuantity = 0,
                sumAmount = 0,
                sumNetAmount = 0;
            angular.forEach(input, function(b) {
                sumQuantity += b.Quantity;
                sumAmount += b.Amount;
                sumNetAmount += b.NetAmount;
            })
            return $filter('currency')(sumQuantity, '', 0) + ' / ' + $filter('currency')(sumAmount / 1000, '', 0)
        }
    }

    function gameSumWinLose() {
        return function(input) {
            let sum = 0;
            angular.forEach(input, function(b) {
                sum += b.WinLose;
            })
            return sum
        }
    }

    function gameSumComm($filter) {
        return function(input) {
            let sum = 0;
            let sumGross = 0;
            angular.forEach(input, function(b) {
                sum += b.Commission;
                sumGross += b.GrossCommission;
            })
            return $filter('currency')(sum / 1000, '', 0) + ' / ' + $filter('currency')(sumGross / 1000, '', 0)
        }
    }

    function legendAreaCtrl($rootScope, $scope, $mdDialog, $timeout, $interval, $location, $state, $window, $http, network, message) {
        let vm = this;
        let intervalArea;
        vm.updateBoardRoller = updateBoardRoller;
        vm.areaUpdateStatus = areaUpdateStatus;
        vm.areaUpdateProperties = areaUpdateProperties;
        vm.GamesByAreaNumber = GamesByAreaNumber;
        vm.appendDataArea = appendDataArea;
        vm.JoinChanel = JoinChanel;
        vm.gamesRedo = gamesRedo;
        vm.gamesBettingDetails = gamesBettingDetails;
        vm.gamesUpdateResults = gamesUpdateResults;
        vm.gamesCancelBetting = gamesCancelBetting;
        vm.thumbsSnap = thumbsSnap;
        vm.areaPlayback = areaPlayback;
        vm.playVideo = playVideo;
        vm.dragElement = dragElement;
        vm.playPause = playPause;
        vm.stopVideo = stopVideo;
        vm.reportDate = moment().subtract(11, 'hour');
        vm.GameResults = [];
        vm.submitting = true;
        network.Games.LegendCasino.Sedie.Area.getAreas().then(function(response) {
            vm.areas = response.filter(function(res) {
                return res.AreaNumber === 100
            })
            vm.dataRound = vm.areas[0].CurrentGame;
            vm.updateBoardRoller();
            vm.submitting = false;
            $scope.$digest();
        })

        function updateBoardRoller() {
            angular.forEach(vm.areas, function(area) {
                if (area.GameResults === undefined) {
                    area.GameResults = []
                }
                vm.GameResults = angular.copy(area.GameResults)
                let aCount = 150 - vm.GameResults.length;
                for (let y = 0; y < (aCount); y++) {
                    vm.GameResults.push('')
                }
            })
        }

        function areaUpdateStatus(item, $event) {
            $mdDialog.show({
                controller: areaUpdateStatusCtrl,
                templateUrl: 'app/main/legend-casino/area/dialog/area.update.status.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            }).then(function(answer) {
                vm.areas[0].Status = answer.Status;
                vm.areas[0].Note = answer.Note;
            }, function() {})

            function areaUpdateStatusCtrl($scope, $mdDialog, $mdMedia, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.Status = item.Status;
                $scope.$mdMedia = $mdMedia;
                $scope.updateStatus = function(status) {
                    $scope.Status = status;
                    $scope.Note = status === 0 ? 'Live Casino bảo trì định kỳ hàng tuần. Dự kiến từ 11h đến 13h30' : ''
                }
                $scope.submit = function() {
                    let data = {
                        AreaNumber: item.AreaNumber,
                        Status: $scope.Status
                    };
                    if ($scope.Status === undefined) {
                        message.infoMultiple('Cần cập nhật trạng thái');
                        return
                    }
                    if ($scope.Note !== undefined) {
                        data.Note = $scope.Note
                    }
                    $scope.submitting = true;
                    network.Games.LegendCasino.Sedie.Area.updateStatus(data).then(function(response) {
                        $scope.submitting = false;
                        $mdDialog.hide(data);
                        $scope.$digest();
                    }).catch(function(error) {
                        $scope.submitting = false;
                        message.infoMultiple(error.message)
                    })
                }
            }
        }

        function areaUpdateProperties(item, $event) {
            $mdDialog.show({
                controller: areaUpdatePropertiesCtrl,
                templateUrl: 'app/main/legend-casino/area/dialog/area.update.properties.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function areaUpdatePropertiesCtrl($scope, $mdDialog, $mdMedia, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.$mdMedia = $mdMedia;
                $scope.AreaItem = item;
                $scope.submit = function() {
                    console.log($scope.AreaItem)
                    $scope.submitting = true;
                    network.Games.LegendCasino.Sedie.Area.updateProperties($scope.AreaItem).then(function(response) {
                        console.log(response)
                        $scope.submitting = false;
                        $mdDialog.cancel();
                        $scope.$digest();
                    }).catch(function(error) {
                        $scope.submitting = false;
                        message.infoMultiple(error.message)
                    })
                }
            }
        }
        vm.GamesByAreaNumbers = [];

        function GamesByAreaNumber(ltId) {
            vm.GamesByAreaNumbers = ltId === undefined ? [] : vm.GamesByAreaNumbers;
            ltId = ltId === undefined ? '' : ltId;
            let data = {
                AreaNumber: 100,
                Date: moment(vm.reportDate).format('YYYY-MM-DD'),
                Limit: 100,
                LastId: ltId,
                IncludedGameStats: vm.IncludedGameStats
            }
            if (vm.GameNumber !== undefined && vm.GameNumber.length > 0) {
                data.GameNumber = vm.GameNumber
            }
            if (vm.GameRound !== undefined && vm.GameRound.length > 0) {
                data.GameRound = vm.GameRound
            }
            if (vm.AutoReload) {
                data.Limit = 5
            }
            vm.submitting = true;
            network.Games.LegendCasino.Sedie.Game.getGamesByAreaNumberDate(data).then(function(response) {
                vm.GamesByAreaNumbers = vm.GamesByAreaNumbers.concat(response);
                vm.loadMore = response.length === 100;
                vm.submitting = false;
                if (vm.IncludedGameStats && vm.GameNumber !== undefined && (vm.GameRound === undefined || vm.GameRound === '')) {
                    let gameResults = [];
                    let obj = {}
                    vm.GamesByAreaNumbers.map(function(are) {
                        obj[are.GameRound] = are.Stats;
                        if (are.GameResult !== undefined) {
                            gameResults.push(are.GameResult)
                        }
                    })
                    const results = {};
                    Object.keys(obj).forEach(function(arrayToInspect) {
                        obj[arrayToInspect].forEach(function(element) {
                            if (results[element.BetType]) {
                                results[element.BetType].Amount += element.Amount;
                                results[element.BetType].NetAmount += element.NetAmount;
                                results[element.BetType].Commission += element.Commission;
                                results[element.BetType].GrossCommission += element.GrossCommission;
                                results[element.BetType].Result += element.Result;
                                results[element.BetType].WinLose += element.WinLose;
                                results[element.BetType].Quantity += element.Quantity;
                            } else {
                                results[element.BetType] = element;
                            }
                        });
                    });
                    vm.SumByShoe = Object.values(results)
                    vm.sum_arr = [0, 0, 0, 0, 0];
                    vm.odd = 0;
                    vm.even = 0;
                    for (let i = 0; i < gameResults.length; i++) {
                        vm.sum_arr[0] += gameResults[i] === 0 ? 1 : 0;
                        vm.sum_arr[1] += gameResults[i] === 1 ? 1 : 0;
                        vm.sum_arr[2] += gameResults[i] === 2 ? 1 : 0;
                        vm.sum_arr[3] += gameResults[i] === 3 ? 1 : 0;
                        vm.sum_arr[4] += gameResults[i] === 4 ? 1 : 0;
                        if (gameResults[i] % 2 !== 0) {
                            vm.odd++
                        } else {
                            vm.even++
                        }
                    }
                }
                $scope.$digest();
            }).catch(function(error) {
                message.show(error.message)
            })
        }
        vm.Interval = 20;
        $scope.$watch('vm.AutoReload', function(value) {
            if (value) {
                vm.GamesByAreaNumber();
            } else {
                $interval.cancel(intervalArea)
            }
        })

        function gamesUpdateResults(item, $event) {
            $mdDialog.show({
                controller: gamesUpdateResultsCtrl,
                templateUrl: 'app/main/legend-casino/area/dialog/games.update.results.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            }).then(function(i) {
                item.GameResult = i;
            }, function() {});

            function gamesUpdateResultsCtrl($scope, $mdDialog, $mdMedia, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.$mdMedia = $mdMedia;
                $scope.currentResult = item.GameResult;
                $scope.submit = function() {
                    let data = {
                        GameId: item.Id,
                        GameResult: $scope.currentResult
                    }
                    $scope.submitting = true;
                    network.Games.LegendCasino.Sedie.Game.updateGameResult(data).then(function(response) {
                        $scope.submitting = false;
                        $mdDialog.hide($scope.currentResult);
                        $scope.$digest();
                    }).catch(function(error) {
                        message.infoMultiple(error.message)
                    })
                }
            }
        }

        function gamesRedo(item, $event) {
            $mdDialog.show({
                controller: GameRedoBookKeepingCtr,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                multiple: true,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function GameRedoBookKeepingCtr($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.textContent = 'Xác nhận kết sổ lại ván ' + item.GameNumber + '.' + item.GameRound;
                $scope.done = function() {
                    $scope.submitting = true;
                    let data = {
                        GameId: item.Id
                    }
                    network.Games.LegendCasino.Sedie.BookKeeping.redo(data).then(function(response) {
                        $scope.submitting = false;
                        $mdDialog.cancel();
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }

        function gamesBettingDetails(item, $event, BetType) {
            $mdDialog.show({
                controller: gamesBettingDetailsCtrl,
                templateUrl: 'app/main/legend-casino/area/dialog/game.betting.details.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    BetType: BetType
                }
            });

            function gamesBettingDetailsCtrl($scope, $mdDialog, $mdMedia, item, BetType) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.$mdMedia = $mdMedia;
                $scope.Games = item;
                $scope.itemsByGames = [];
                $scope.submitting = true;
                $scope._fGetBetItemsByGame = function(ldId) {
                    ldId = ldId === undefined ? '' : ldId;
                    let data = {
                        AreaNumber: 100,
                        GameNumber: item.GameNumber,
                        GameRound: item.GameRound,
                        Limit: 100,
                        LastId: ldId
                    }
                    if (BetType !== undefined) {
                        data.BetType = BetType
                    }
                    network.Games.LegendCasino.Sedie.Report.getBetItemsByGame(data).then(function(response) {
                        $scope.itemsByGames = $scope.itemsByGames.concat(response)
                        $scope.submitting = false;
                        $scope.loadMore = response.length === 100;
                        $scope.$digest();
                    })
                }
                $scope._fGetBetItemsByGame();
                $scope.getAncestors = function(item) {
                    $scope.parents = [];
                    network.User.getAncestors({
                        userId: item.UserId
                    }).then(function(response) {
                        $scope.parents = response;
                        $scope.parents.push({
                            Username: $rootScope.User.Username,
                            Level: $rootScope.User.Level
                        });
                        $scope.parents.push({
                            Username: item.Username,
                            FullName: item.FullName,
                            Level: 9
                        });
                        $scope.parents.sort(function(a, b) {
                            return a.Level - b.Level
                        });
                        $timeout(function() {
                            $scope.$digest();
                        }, 200)
                    })
                }
            }
        }

        function gamesCancelBetting(item, $event) {
            $mdDialog.show({
                controller: gamesCancelBettingCtr,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                multiple: true,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            }).then(function(GameId) {
                item.BookKeepingStatus = -9
            }, function() {});

            function gamesCancelBettingCtr($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.textContent = 'Xác nhận huỷ ván ' + item.GameNumber + '.' + item.GameRound;
                $scope.done = function() {
                    $scope.submitting = true;
                    let data = {
                        GameId: item.Id
                    }
                    network.Games.LegendCasino.Sedie.BookKeeping.cancelGame(data).then(function(response) {
                        $scope.submitting = false;
                        $mdDialog.hide(item.Id);
                    }).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }
        $scope.$on('$destroy', function() {
            if (intervalStats) {
                $interval.cancel(intervalStats)
                $interval.cancel(intervalArea)
            }
            $timeout(function() {
                H5LivePlayer.destroy();
            })
            Lotus.SenCasino.Games.Sedie.Realtime.unsubscribe();
            Lotus.SenCasino.Games.Sedie.Realtime.off("area:100:event:2001", function() {})
            Lotus.SenCasino.Games.Sedie.Realtime.off("area:100:event:2003", function() {})
        });
        $scope.$on('area:100:event:2001', function(event, data) {
            vm.dataRound = data;
            vm.areas[0].CurrentGame.GameNumber = data.GameNumber;
            vm.areas[0].CurrentGame.GameRound = data.GameRound;
            if (vm.AutoReload) {
                vm.GamesByAreaNumber();
            }
            if (data.GameRound === 1) {
                vm.areas[0].GameResults = [];
            }
        });
        $scope.$on('area:100:event:2003', function(event, data) {
            vm.areas[0].GameResults.push(data.GameResult);
            vm.updateBoardRoller();
        });
        vm.blankRound = [];
        for (let i = 0; i < 6; i++) {
            vm.blankRound.push({
                BetType: i,
                Quantity: 0,
                Amount: 0,
                GameNumber: '',
                GameRound: ''
            })
        }
        let intervalStats = $interval(function() {
            if (vm.dataRound === undefined) {
                return
            }
            vm.blankRound.map(function(x) {
                x.GameNumber = vm.dataRound.GameNumber;
                x.GameRound = vm.dataRound.GameRound;
                return x
            });
            vm.dataRound.AreaNumber = 100;
            network.Games.LegendCasino.Sedie.GameStats.getStatsByRound(vm.dataRound).then(function(response) {
                vm.RoundData = angular.copy(vm.blankRound);
                angular.forEach(vm.RoundData, function(r) {
                    let fu = response.filter(function(rd) {
                        return rd.BetType === r.BetType
                    })
                    if (fu.length) {
                        r.Quantity = fu[0].Quantity;
                        r.Amount = fu[0].Amount;
                    }
                    r.GameNumber = response[0].GameNumber;
                    r.GameRound = response[0].GameRound;
                })
                if (vm.IncludedGameStats && vm.AutoReload && response.length) {
                    vm.appendDataArea();
                }
                $scope.$digest();
            }).catch(function(error) {
                if (error.code === 'DataNotFoundException') {
                    vm.RoundData = angular.copy(vm.blankRound);
                    $scope.$digest();
                }
            })
        }, 1500)

        function appendDataArea() {
            let find = vm.GamesByAreaNumbers.filter(function(n) {
                return n.GameNumber === vm.RoundData[0].GameNumber && n.GameRound === vm.RoundData[0].GameRound
            })
            if (find.length) {
                angular.forEach(vm.RoundData, function(rd) {
                    let fs = find[0].Stats.filter(function(r) {
                        return r.BetType === rd.BetType
                    })
                    if (fs.length) {
                        fs[0].Quantity = rd.Quantity;
                        fs[0].Amount = rd.Amount;
                    } else {
                        find[0].Stats.push({
                            BetType: rd.BetType,
                            Quantity: rd.Quantity,
                            Amount: rd.Amount
                        })
                    }
                })
            }
        }
        if ($location.host() === 'localhost' || $location.host() === 'ag.nothing88.net') {
            vm.hostSnapshot = 'https://one-client-resources.s3-ap-southeast-1.amazonaws.com/game-result-thumbnails/sedie'
        } else {
            vm.hostSnapshot = 'https://vod.one789cdn.com/game-result-thumbnails/sedie'
        }

        function thumbsSnap(item) {
            return {
                "background-image": "url(" + vm.hostSnapshot + '/' + item.AreaNumber + '-' + item.GameNumber + '-' + item.GameRound + ".jpeg)"
            }
        }
        let interval;
        let timeout;

        function areaPlayback($event) {
            $mdDialog.show({
                controller: areaPlaybackCtrl,
                templateUrl: 'app/main/legend-casino/area/dialog/area.playback.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
            }).then(function() {}, function() {
                $interval.cancel(interval);
                $timeout.cancel(timeout)
            });

            function areaPlaybackCtrl($scope) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.currentIndex = vm.GamesByAreaNumbers[0].GameResult === undefined ? 1 : 0;
                $scope.secondPerRound = 3000;
                $scope.determinateValue = 0;
                $scope.playing = true;
                $scope.playbackFn = function() {
                    $scope.currentData = vm.GamesByAreaNumbers[$scope.currentIndex];
                    $scope.thumbs = {
                        "background-image": "url(" + vm.hostSnapshot + '/' + $scope.currentData.AreaNumber + '-' + $scope.currentData.GameNumber + '-' + $scope.currentData.GameRound + ".jpeg)"
                    }
                    if (interval !== undefined) {
                        $interval.cancel(interval)
                    }
                    interval = $interval(function() {
                        if (!$scope.playing) {
                            return;
                        }
                        $scope.determinateValue++
                        if ($scope.determinateValue > 100) {
                            $interval.cancel(interval)
                            $scope.currentIndex++
                            if ($scope.currentIndex < vm.GamesByAreaNumbers.length) {
                                $scope.determinateValue = 0;
                                timeout = $timeout(function() {
                                    $scope.playbackFn();
                                }, 300)
                            }
                        }
                    }, $scope.secondPerRound / 100)
                }
                $scope.playPause = function() {
                    $scope.playing = !$scope.playing;
                    $scope.checkMinMax()
                }
                $scope.skipNext = function() {
                    $scope.determinateValue = 0;
                    $scope.currentIndex++;
                    $scope.currentData = vm.GamesByAreaNumbers[$scope.currentIndex];
                    $scope.thumbs = {
                        "background-image": "url(" + vm.hostSnapshot + '/' + $scope.currentData.AreaNumber + '-' + $scope.currentData.GameNumber + '-' + $scope.currentData.GameRound + ".jpeg)"
                    }
                    $scope.checkMinMax();
                }
                $scope.skipPrevious = function() {
                    $scope.determinateValue = 0;
                    $scope.currentIndex--;
                    $scope.currentData = vm.GamesByAreaNumbers[$scope.currentIndex];
                    $scope.thumbs = {
                        "background-image": "url(" + vm.hostSnapshot + '/' + $scope.currentData.AreaNumber + '-' + $scope.currentData.GameNumber + '-' + $scope.currentData.GameRound + ".jpeg)"
                    }
                    $scope.checkMinMax();
                }
                $scope.checkMinMax = function() {
                    let minIndex = vm.GamesByAreaNumbers[0].GameResult === undefined ? 1 : 0;
                    $scope.disabledPrevious = ($scope.currentIndex === minIndex);
                    $scope.disabledNext = ($scope.currentIndex + 1) === vm.GamesByAreaNumbers.length;
                }
                $timeout(function() {
                    $scope.playbackFn();
                }, 300)
            }
        }
        vm.dragElement(document.getElementById("area-video"));

        function dragElement(elm) {
            var pos1 = 0,
                pos2 = 0,
                pos3 = 0,
                pos4 = 0;
            if (document.getElementById(elm.id + "-header")) {
                document.getElementById(elm.id + "-header").onmousedown = dragMouseDown;
            } else {
                elm.onmousedown = dragMouseDown;
            }

            function dragMouseDown(e) {
                e = e || window.event;
                e.preventDefault();
                pos3 = e.clientX;
                pos4 = e.clientY;
                document.onmouseup = closeDragElement;
                document.onmousemove = elementDrag;
            }

            function elementDrag(e) {
                e = e || window.event;
                e.preventDefault();
                pos1 = pos3 - e.clientX;
                pos2 = pos4 - e.clientY;
                pos3 = e.clientX;
                pos4 = e.clientY;
                elm.style.top = (elm.offsetTop - pos2) + "px";
                elm.style.left = (elm.offsetLeft - pos1) + "px";
            }

            function closeDragElement() {
                document.onmouseup = null;
                document.onmousemove = null;
            }
        }
        vm.playing = false;

        function playPause() {
            vm.playing = !vm.playing;
            if (vm.playing) {
                vm.playVideo();
            } else {
                vm.stopVideo();
            }
        }

        function stopVideo() {
            H5LivePlayer.destroy();
            document.getElementById("player-element").removeAttribute("style");
            videoElm.style.top = (window.innerHeight - 60) + 'px';
            videoElm.style.left = (window.innerWidth - 210) + 'px';
        }
        let videoElm = document.getElementById("area-video");

        function playVideo() {
            if (H5LivePlayer.isSupported()) {
                H5LivePlayer.startAdaptiveStream({
                    playerDivId: "player-element",
                    streamNames: ["vKzPg-C8By5", "vKzPg-reCqs", "vKzPg-xDN2P"],
                    startStream: "vKzPg-reCqs"
                });
                videoElm.style.top = (window.innerHeight - 410) + 'px';
                videoElm.style.left = (window.innerWidth - 642) + 'px';
            } else {
                alert("Trình duyệt của quý khách không hỗ trợ xem video phát trực tuyến")
            }
        }
        $scope.$on('Realtime:connected', function() {
            vm.JoinChanel();
        })
        if ($rootScope.RealTime === 'connected') {
            vm.JoinChanel();
        }

        function JoinChanel() {
            Lotus.SenCasino.Games.Sedie.Realtime.subcribe({
                AreaNumber: 100
            }).then(function() {
                console.log("Subscribe Game Sedie OK ");
                Lotus.SenCasino.Games.Sedie.Realtime.on("area:100:event:2001", function(data) {
                    $rootScope.$broadcast('area:100:event:2001', data);
                });
                Lotus.SenCasino.Games.Sedie.Realtime.on("area:100:event:2003", function(data) {
                    $rootScope.$broadcast('area:100:event:2003', data);
                });
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.account').filter('Task', TaskStatus).filter('TaskDescription', TaskDescription).controller('memTemplateCtrl', memTemplateCtrl);

    function TaskStatus() {
        return function(input) {
            switch (parseInt(input)) {
                case 0:
                    return 'Đang chờ';
                case 1:
                    return 'Đang thực hiện';
                case 9:
                    return 'Đã hoàn thành';
                case -9:
                    return 'Có lỗi sảy ra';
            }
        }
    }

    function TaskDescription() {
        return function(input) {
            return input.replace('Thay đổi giá và tỷ lệ trả thưởng ', '')
        }
    }

    function memTemplateCtrl($scope, $state, $timeout, network, AuthService) {
        var vm = this;
        vm.taskLists = [];
        vm.listTask = listTask;
        vm.loadMore = loadMore;
        if (!AuthService.isCompany()) {
            $state.go('app.forbidden');
            return;
        }
        if (AuthService.isSecondary()) {
            $state.go('app.forbidden');
            return;
        }
        vm.submitting = true;
        network.Games.Lottery.PayoutsType.getAll().then(function(response) {
            vm.templates = response;
            vm.submitting = false;
            $scope.$digest();
            $timeout(function() {
                vm.listTask();
            }, 300)
        });

        function loadMore() {
            vm.listTask(vm.taskLists[vm.taskLists.length - 1].Id)
        }

        function listTask(LastId) {
            LastId = LastId = undefined ? '' : LastId;
            vm.loadingTask = true;
            network.Games.Lottery.PriceChangeTask.list({
                LastId: LastId
            }).then(function(response) {
                vm.loadingTask = false;
                vm.taskLists = vm.taskLists.concat(response);
                vm.more = response.length === 20;
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.account').controller('tagAccountCtrl', tagAccountCtrl);

    function tagAccountCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, $http, $q, network, msUtils, message) {
        var vm = this;
        if ($rootScope.User.Level === 5) {
            $state.go('app.forbidden');
            return;
        }
        vm.searchText = '';
        vm.userTags = [];
        vm.init = init;
        vm.newGroup = newGroup;
        vm.newTags = newTags;
        vm.querySearch = querySearch;
        vm.selectedItemChange = selectedItemChange;
        vm.searchTextChange = searchTextChange;
        vm.addNewGroup = addNewGroup;
        vm.addNewCard = addNewCard;
        vm.removeItem = removeItem;
        vm.removeList = removeList;
        vm.excludes = [];
        vm.usersGroups = [1, 2, 3, 4, 5];
        vm.usersGroups = vm.usersGroups.filter(function(id) {
            return id > $rootScope.User.Level;
        });

        function newGroup(trigger) {
            vm.searchText = '';
            trigger = trigger === undefined;
            vm.groupActive = trigger;
            if (trigger) {
                vm.TagActive = false;
            }
        }

        function newTags(index, trigger) {
            vm.searchTag[index] = '';
            trigger = trigger === undefined;
            vm.TagActive = trigger;
            vm.TagActiveIndex = index;
            if (trigger) {
                vm.groupActive = false;
            }
        }
        vm.init();

        function init() {
            vm.loading = true;
            network.UserTag.getChildrenTags().then(function(response) {
                vm.loading = false;
                vm.userTags = response;
                angular.forEach(response, function(a) {
                    vm.excludes.push(a.UserId);
                    angular.forEach(a.Tags, function(b) {
                        vm.excludes.push(b.UserId)
                    })
                });
                $scope.$digest();
            }).catch(function(error) {
                $timeout(function() {
                    $window.location.reload();
                })
            })
        }

        function querySearch(text) {
            var result = network.User.searchLite({
                MatchName: text,
                Level: vm.usersGroups[0]
            }).then(function(response) {
                return response.filter(function(record) {
                    return !msUtils.exists(record.Id, vm.excludes)
                })
            });
            var deferred = $q.defer();
            deferred.resolve(result);
            return deferred.promise;
        }

        function selectedItemChange(item) {
            $timeout(function() {
                vm.selectedItem = item;
            }, 300)
        }

        function searchTextChange(item) {
            vm.selectedItem = undefined;
        }

        function addNewGroup() {
            if (vm.selectedItem !== undefined) {
                vm.excludes.push(vm.selectedItem.Id);
                vm.newGroup(false);
                vm.searchText = '';
                vm.userTags.push({
                    UserId: vm.selectedItem.Id,
                    Username: vm.selectedItem.Username,
                    FullName: vm.selectedItem.FullName,
                    Tags: []
                })
            }
        }

        function addNewCard(tag, index) {
            let data = {
                UserId: tag.UserId,
                Tags: []
            };
            angular.forEach(tag.Tags, function(u) {
                data.Tags.push(u.UserId)
            });
            data.Tags.push(vm.selectedItem.Id);
            vm.submitting = true;
            network.UserTag.tag(data).then(function(response) {
                if (response) {
                    vm.submitting = false;
                    vm.excludes.push(vm.selectedItem.Id);
                    angular.forEach(vm.userTags, function(t) {
                        if (t.UserId === tag.UserId) {
                            t.Tags.push({
                                UserId: vm.selectedItem.Id,
                                Username: vm.selectedItem.Username
                            });
                            t.Tags.sort(function(a, b) {
                                return a.Username - b.Username
                            });
                        }
                    });
                    vm.newTags(index, false);
                    $scope.$digest();
                }
            })
        }

        function removeItem(tag, item, $event) {
            if (tag.Tags.length === 1) {
                vm.removeList($event, tag);
                return;
            }
            $mdDialog.show({
                controller: removeTagItemCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    tag: tag,
                    item: item
                }
            });

            function removeTagItemCtrl($rootScope, $scope, $mdDialog, tag, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Xóa tài khoản báo biểu';
                $scope.textContent = 'Quý khách muốn xóa nhóm tài khoản ' + item.Username + ' ra khỏi nhóm?';
                $scope.done = function() {
                    $scope.submitting = true;
                    let data = {
                        UserId: tag.UserId,
                        Tags: []
                    };
                    angular.forEach(tag.Tags, function(x) {
                        if (x.UserId !== item.UserId) {
                            data.Tags.push(x.UserId)
                        }
                    });
                    network.UserTag.tag(data).then(function() {
                        angular.forEach(vm.userTags, function(a) {
                            if (a.UserId === tag.UserId) {
                                angular.forEach(a.Tags, function(b, i) {
                                    if (b.UserId === item.UserId) {
                                        a.Tags.splice(i, 1)
                                    }
                                })
                            }
                        });
                        angular.forEach(vm.excludes, function(e, i) {
                            if (e === item.UserId) {
                                vm.excludes.splice(i, 1)
                            }
                        });
                        $scope.$digest();
                        $mdDialog.cancel();
                    }).catch(function(error) {
                        message.info(error.message)
                    })
                }
            }
        }

        function removeList($event, item) {
            $mdDialog.show({
                controller: removeTagListCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function removeTagListCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Giải tán nhóm tài khoản';
                $scope.textContent = 'Quý khách muốn giải tán nhóm tài khoản báo biểu?';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.UserTag.deleteChildTag({
                        UserId: item.UserId
                    }).then(function(resp) {
                        angular.forEach(vm.userTags, function(u, i) {
                            if (u.UserId === item.UserId) {
                                vm.userTags.splice(i, 1)
                            }
                        });
                        let aRemoved = [];
                        aRemoved.push(item.UserId);
                        angular.forEach(item.Tags, function(s) {
                            aRemoved.push(s.UserId)
                        });
                        vm.excludes = vm.excludes.filter(function(e) {
                            return !aRemoved.includes(e);
                        });
                        $mdDialog.cancel();
                    }).catch(function(err) {})
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.account').controller('myParameterCtrl', myParameterCtrl);

    function myParameterCtrl($scope, $timeout, $window, network, msUtils) {
        var vm = this;
        vm.submitting = true;
        network.Games.Lottery.UserGameSetting.getSettings().then(function(settings) {
            $timeout(function() {
                network.Games.Lottery.ShareHolder.getShareHolders().then(function(shareHolders) {
                    let arr = [];
                    angular.forEach(settings, function(item, i) {
                        arr.push(Object.assign({}, item, shareHolders[i]))
                    });
                    vm.submitting = false;
                    arr.sort(function(a, b) {
                        return a.GameType - b.GameType || a.BetType - b.BetType
                    });
                    vm.myParameters = arr.groupBy(function(o) {
                        return JSON.stringify({
                            a: o.GameType
                        })
                    });
                    let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28];
                    angular.forEach(vm.myParameters, function(lotShare) {
                        lotShare.group.sort(function(a, b) {
                            return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                        })
                    })
                    $scope.$digest()
                });
            }, 800)
        }).catch(function(error) {
            $timeout(function() {
                $window.location.reload();
            })
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.account').controller('subAccountCtrl', subAccountCtrl);

    function subAccountCtrl($rootScope, $scope, $mdDialog, $mdMedia, $mdToast, $timeout, $state, AuthService, network, message) {
        $scope.$mdMedia = $mdMedia;
        var vm = this;
        vm.isCompany = AuthService.isCompany();
        if ($rootScope.User.Acl !== undefined) {
            $state.go('app.forbidden');
            return;
        }
        vm.create = create;
        vm.getAll = getAll;
        vm.disable = disable;
        vm.enable = enable;
        vm.setPassword = setPassword;
        vm.changeBiography = changeBiography;
        vm.disableTFA = disableTFA;
        vm.mustEnableTfa = mustEnableTfa;
        vm.checkAcl = checkAcl;
        vm.updateAcl = updateAcl;
        vm.submitting = true;
        vm.getAll();

        function getAll() {
            network.SubUser.getAll().then(function(response) {
                vm.submitting = false;
                vm.secondaryAccount = response;
                $scope.$digest();
            })
        }

        function disable(item) {
            network.SubUser.disable({
                UserId: item.Id
            }).then(function(response) {
                if (response) {
                    item.Status = 0;
                    $mdToast.show($mdToast.simple().textContent('Đóng tài khoản thành công').position("bottom right").hideDelay(3000))
                }
            }).catch(function(error) {
                message.alert(message.message)
            })
        }

        function enable(item) {
            network.SubUser.enable({
                UserId: item.Id
            }).then(function(response) {
                if (response) {
                    item.Status = 1;
                    $mdToast.show($mdToast.simple().textContent('Mở tài khoản thành công').position("bottom right").hideDelay(3000))
                }
            })
        }

        function setPassword(item, $event) {
            $mdDialog.show({
                controller: setPasswordCtrl,
                templateUrl: 'app/main/account/agency/dialog/change_password.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function setPasswordCtrl($scope, $mdDialog, item, msUtils) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.show = false;
                $scope.accountInfo = item;
                $scope.data = {
                    Automatically: false,
                    Ask: true
                };
                $scope.form = {
                    password: ''
                };
                $scope.showPassword = function() {
                    $scope.show = !$scope.show;
                };
                $scope.disablePost = function() {
                    if ($scope.data.Automatically) {
                        return false
                    } else return $scope.form.password.length < 6;
                };
                $scope.submit = function() {
                    $scope.submitting = true;
                    var password = $scope.data.Automatically ? msUtils.generatorPassword() : $scope.form.password;
                    network.SubUser.setPassword({
                        UserId: item.Id,
                        Password: password,
                        Permanent: !$scope.data.Ask
                    }).then(function(resp) {
                        if (Object.keys(resp).length === 0) {
                            $mdDialog.cancel();
                            $mdDialog.show({
                                controller: showPasswordCtrl,
                                templateUrl: 'app/main/account/agency/dialog/show_password.dialog.html',
                                parent: angular.element(document.body),
                                targetEvent: $event,
                                clickOutsideToClose: false,
                                locals: {
                                    item: {
                                        password: password,
                                        Username: item.Username
                                    }
                                }
                            });

                            function showPasswordCtrl($scope, $mdDialog, item) {
                                $scope.cancel = function() {
                                    $mdDialog.cancel();
                                };
                                $scope.accountInfo = item;
                                $scope.show = false;
                                $scope.copied = false;
                                $scope.showPassword = function() {
                                    $scope.show = !$scope.show;
                                };
                                $scope.onSuccess = function(e) {
                                    $scope.copied = !$scope.copied;
                                    setTimeout(function() {
                                        $scope.copied = !$scope.copied;
                                        $scope.$digest();
                                    }, 3000)
                                };
                                $scope.onError = function(e) {
                                    console.log(e)
                                }
                            }
                        }
                    }).catch(function(err) {
                        message.alert(err.message)
                    })
                }
            }
        }

        function checkAcl(item, per) {
            return (item.Acl & per) === per;
        }

        function updateAcl(item, val) {
            vm.disableAct = true;
            item.Acl = (item.Acl & val) === val ? item.Acl - val : item.Acl + val;
            vm.submitting = true;
            let isHasPermission = (item.Acl & val) === val;
            if (val === 2 && isHasPermission && !((item.Acl & 4) === 4)) {
                item.Acl += 4
            }
            if (val === 4 && !isHasPermission && ((item.Acl & 2) === 2)) {
                item.Acl -= 2
            }
            if (val === 8 && isHasPermission && !((item.Acl & 16) === 16)) {
                item.Acl += 16
            }
            if (val === 16 && !isHasPermission && ((item.Acl & 8) === 8)) {
                item.Acl -= 8
            }
            if (val === 32 && isHasPermission && !((item.Acl & 64) === 64)) {
                item.Acl += 64
            }
            if (val === 64 && !isHasPermission && ((item.Acl & 32) === 32)) {
                item.Acl -= 32
            }
            if (val === 128 && isHasPermission && !((item.Acl & 256) === 256)) {
                item.Acl += 256
            }
            if (val === 256 && !isHasPermission && ((item.Acl & 128) === 128)) {
                item.Acl -= 128
            }
            network.SubUser.setAcl({
                UserId: item.Id,
                Acl: item.Acl
            }).then(function(response) {
                if (response) {
                    $timeout(function() {
                        network.SubUser.getAll().then(function(response) {
                            $mdToast.show($mdToast.simple().textContent('Cập nhât quyền cho tài khoản thành công').position("bottom right").hideDelay(3000));
                            vm.submitting = false;
                            vm.disableAct = false;
                            vm.secondaryAccount = response;
                            $scope.$digest();
                        })
                    }, 2000)
                }
            })
        }

        function disableTFA(item, $event) {
            $mdDialog.show({
                controller: disableTFASubUserCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function disableTFASubUserCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Hủy xác minh 2 bước';
                $scope.textContent = 'Quý khách muốn hủy xác minh 2 bước cho tài khoản ' + item.Username + '?';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.SubUser.disableMfa({
                        UserId: item.Id
                    }).then(function(resp) {
                        $scope.submitting = false;
                        item.MfaType = 0;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        $scope.submitting = false;
                        if (err.code === 'MFARequiredException') {
                            message.alert('Tài khoản ' + item.Username + ' bắt buộc phải dùng OTP. Quý khách hãy tắt yêu cầu OTP trước khi hủy');
                        } else {
                            message.alert('Có lỗi. Quý khách vui lòng thử lại')
                        }
                    })
                }
            }
        }

        function mustEnableTfa(mfaRequired, item, $event) {
            $mdDialog.show({
                controller: mustEnableTfaCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    mfaRequired: mfaRequired
                }
            });

            function mustEnableTfaCtrl($rootScope, $scope, $mdDialog, item, mfaRequired) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Yêu cầu cài đặt xác minh 2 bước';
                $scope.textContent = mfaRequired ? 'Quý khách muốn tài khoản ' + item.Username + ' phải bật xác minh 2 bước?' : 'Quý khách muốn tài khoản ' + item.Username + ' được phép hủy xác minh 2 bước?';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.SubUser.setRequiredMFA({
                        UserId: item.Id,
                        MfaRequired: mfaRequired
                    }).then(function(resp) {
                        item.MfaRequired = mfaRequired;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.alert(err.message)
                    })
                }
            }
        }

        function create(ev) {
            $mdDialog.show({
                controller: createSecondaryCtrl,
                templateUrl: 'app/main/account/sub-account/dialog/create.secondary.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: false
            });

            function createSecondaryCtrl($rootScope, $scope, $mdDialog, msUtils, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.user = {
                    username: '',
                };
                $scope.show = false;
                $scope.data = {
                    Automatically: false,
                    Ask: true,
                    NameExists: true
                };
                $scope.showPassword = function() {
                    $scope.show = !$scope.show
                };
                $scope.create = function() {
                    $scope.user.password = $scope.data.Automatically ? msUtils.generatorPassword() : $scope.user.password;
                    let data = {
                        Username: $scope.user.username,
                        Password: $scope.user.password,
                    };
                    data.FullName = $scope.user.fullName === undefined ? '' : $scope.user.fullName;
                    if (data.FullName.length !== 0 && data.FullName.length < 3) {
                        $scope.errorText = 'Họ tên phải có ít nhất 3 ký tự';
                        return;
                    }
                    $scope.submitting = true;
                    network.SubUser.create(data).then(function(response) {
                        $scope.submitting = false;
                        $mdDialog.show({
                            controller: createAccountSuccessCtrl,
                            templateUrl: 'app/main/account/sub-account/dialog/create.secondary.success.dialog.html',
                            parent: angular.element(document.body),
                            clickOutsideToClose: false,
                            locals: {
                                data: $scope.user
                            }
                        }).then(function(answer) {
                            $rootScope.$emit('allParentMethod:SubUser', {});
                        });

                        function createAccountSuccessCtrl($scope, $mdDialog, data) {
                            $scope.cancel = function() {
                                $mdDialog.hide('load');
                            };
                            $scope.accountInfo = data;
                            $scope.show = false;
                            $scope.copied = false;
                            $scope.showPassword = function() {
                                $scope.show = !$scope.show;
                            };
                            $scope.onSuccess = function(e) {
                                $scope.copied = !$scope.copied;
                                setTimeout(function() {
                                    $scope.copied = !$scope.copied;
                                    $scope.$digest();
                                }, 3000)
                            };
                            $scope.onError = function(e) {};
                        }
                    }).catch(function(error) {
                        if (error.code === 'UsernameExistsException') {
                            $scope.errorText = 'Tài khoản đã tồn tại.';
                        } else {
                            message.infoMultiple(error.message)
                        }
                        $scope.submitting = false;
                        $scope.$digest();
                    });
                }
            }
        }

        function changeBiography(item, $event) {
            $mdDialog.show({
                controller: biographyCtrl,
                templateUrl: 'app/main/account/sub-account/dialog/biography.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function biographyCtrl($scope, $mdDialog, $mdMedia, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.$mdMedia = $mdMedia;
                $scope.accountInfo = angular.copy(item);
                $scope.submit = function() {
                    $scope.submitting = true;
                    network.SubUser.updateProfile({
                        UserId: item.Id,
                        FullName: $scope.accountInfo.FullName
                    }).then(function(resp) {
                        $scope.cancel();
                        message.message('Cập nhật thông tin tài khoản thành công');
                        $rootScope.$emit('allParentMethod:SubUser', {});
                    }).catch(function(err) {
                        message.alert(err.message)
                    })
                }
            }
        }
        $rootScope.$on('CallParentMethod:SubUser', function() {
            vm.getAll();
        });
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.account').controller('agencyCtrl', agencyCtrl);

    function agencyCtrl($rootScope, $scope, $mdDialog, $filter, $timeout, $q, $state, $location, $window, $mdMedia, network, msUtils, message, AuthService) {
        $scope.$mdMedia = $mdMedia;
        let vm = this;
        if (!AuthService.hasPermission(4)) {
            $state.go('app.forbidden');
            return;
        }
        vm.hasWritePermission = AuthService.hasPermission(2);
        vm.isCompany = AuthService.isCompany();
        vm.inProcess = [];
        vm.disabling = [];
        vm.inProcessing = true;
        vm.breakChange = true;
        vm.getAncestors = getAncestors;
        $timeout(function() {
            vm.breakChange = false;
        }, 1000);
        vm.usersGroups = [{
            id: 2,
            name: 'Quản trị'
        }, {
            id: 3,
            name: 'Cổ đông'
        }, {
            id: 4,
            name: 'Tổng đại lý'
        }, {
            id: 5,
            name: 'Đại lý'
        }, {
            id: 9,
            name: 'Hội viên'
        }];
        vm.usersGroups = vm.usersGroups.filter(function(value) {
            return value.id > $rootScope.User.Level
        });
        vm.usersGroups.push({
            id: 0,
            name: 'Tất cả'
        });
        vm.usersGroups.sort(function(a, b) {
            return a.id - b.id
        });
        vm.fetchUser = fetchUser;
        vm.sortingUser = sortingUser;
        vm.changePassword = changePassword;
        vm.changeDisplayName = changeDisplayName;
        vm.childAccount = childAccount;
        vm.compactAccount = compactAccount;
        vm.createAccount = createAccount;
        vm.setPage = setPage;
        vm.lockAccount = lockAccount;
        vm.unlockAccount = unlockAccount;
        vm.mustEnableTfa = mustEnableTfa;
        vm.disableTFA = disableTFA;
        vm.resetCreditPermission = resetCreditPermission;
        vm.resetCredit = resetCredit;
        vm.searchUser = searchUser;
        vm.changeFilter = changeFilter;
        vm.changeGroup = changeGroup;
        vm.changeType = changeType;
        vm.changeSort = changeSort;
        vm.changeOrder = changeOrder;
        vm.changeBiography = changeBiography;
        vm.creditUpdate = creditUpdate;
        vm.viewContract = viewContract;
        vm.productionManager = productionManager;
        vm.blockAccount = blockAccount;
        vm.unblockAccount = unblockAccount;
        vm.suspendAccount = suspendAccount;
        vm.unSuspendAccount = unSuspendAccount;
        vm.agencyShareHolder = agencyShareHolder;
        vm.agencyBettingLimit = agencyBettingLimit;
        vm.findMemberAccount = findMemberAccount;
        vm.getSabaBalance = getSabaBalance;
        vm.resetSabaBalance = resetSabaBalance;
        vm.creditRecovery = creditRecovery;
        setTimeout(function() {
            vm.fetchUser();
        }, 200);
        vm.url = {};
        vm.url.page = $location.search().page === undefined ? 1 : $location.search().page;
        vm.url.filter = $location.search().filter === undefined ? 1 : parseInt($location.search().filter);
        vm.url.group = $location.search().group === undefined ? 0 : parseInt($location.search().group);
        vm.userName = $location.search().match;
        vm.url.sort = $location.search().sort === undefined ? 'Username' : $location.search().sort;
        vm.url.order = $location.search().order === undefined ? 'asc' : $location.search().order;
        vm.userFilters = [{
            id: 1,
            name: 'Tất cả'
        }, {
            id: 2,
            name: 'Ngừng cược'
        }, {
            id: 3,
            name: 'Đóng'
        }];
        vm.filterType = $location.search().type === undefined ? 'keyword' : $location.search().type;
        vm.sortByArr = [{
            id: 'FullName',
            name: 'Họ và Tên'
        }, {
            id: 'Username',
            name: 'Tài khoản'
        }, {
            id: 'CreatedAt',
            name: 'Ngày tạo'
        }];
        vm.orderByArr = [{
            id: 'asc',
            name: 'A -> Z'
        }, {
            id: 'desc',
            name: 'Z -> A'
        }];
        $scope.$watch('vm.userName', function() {
            if (vm.breakChange) {
                return;
            }
            if (vm.userName.length === 0) {
                $timeout(function(delta) {
                    $state.go('app.account.agency', {
                        match: '',
                        page: '',
                        filter: '',
                        group: '',
                        uid: ''
                    });
                }, 500)
            }
        });

        function changeType(type) {
            vm.filterType = type;
            if (vm.filterType === 'keyword') {
                $state.go('app.account.agency', {
                    match: '',
                    page: '',
                    filter: '',
                    group: '',
                    sort: '',
                    order: '',
                    type: ''
                });
            } else {
                $state.go('app.account.agency', {
                    match: '',
                    page: '',
                    filter: '',
                    group: 9,
                    sort: '',
                    order: '',
                    type: vm.filterType
                });
            }
        }

        function searchUser() {
            if (vm.userName.length < 4) {
                message.alert('Tài khoản cần tìm kiếm phải có tối thiểu 4 ký tự')
            } else {
                $state.go('app.account.agency', {
                    match: vm.userName,
                    page: ''
                });
            }
        }

        function changeFilter() {
            if (vm.breakChange) {
                return;
            }
            if (parseInt(vm.filter) === 1) {
                $state.go('app.account.agency', {
                    filter: '',
                    page: ''
                });
            } else {
                $state.go('app.account.agency', {
                    filter: vm.filter,
                    page: ''
                });
            }
        }

        function changeGroup() {
            if (vm.breakChange) {
                return;
            }
            if (parseInt(vm.level) === 0) {
                $state.go('app.account.agency', {
                    group: '',
                    page: ''
                });
            } else {
                $state.go('app.account.agency', {
                    group: vm.level,
                    page: ''
                });
            }
        }

        function changeSort() {
            if (vm.breakChange) {
                return;
            }
            if (vm.sortfield === 'Username') {
                $state.go('app.account.agency', {
                    sort: '',
                    page: ''
                });
            } else {
                $state.go('app.account.agency', {
                    sort: vm.sortfield,
                    page: ''
                });
            }
        }

        function changeOrder() {
            if (vm.breakChange) {
                return;
            }
            if (vm.order === 'asc') {
                $state.go('app.account.agency', {
                    order: '',
                    page: ''
                });
            } else {
                $state.go('app.account.agency', {
                    order: vm.order,
                    page: ''
                });
            }
        }

        function fetchUser() {
            vm.autoReload = $timeout(function() {
                vm.fetchUser();
            }, 20000);
            vm.inProcessing = true;
            if ($state.current.name === 'app.account.agency.child') {
                let childId = $location.search().id;
                let paging = $location.search().paging === undefined ? 1 : $location.search().paging;
                network.User.getChildren({
                    UserId: childId,
                    Page: paging
                }).then(function(response) {
                    vm.sortingUser(response)
                })
            } else {
                if (vm.userName === undefined) {
                    let data = {
                        Page: vm.url.page
                    };
                    if (vm.url.filter !== 1) {
                        data.Status = parseInt(vm.url.filter.toString());
                    }
                    if (vm.url.group !== 0) {
                        data.Level = vm.url.group.toString();
                    }
                    if (vm.filterType === 'group') {
                        data.SortField = vm.url.sort;
                        if (vm.order === 'desc') {
                            data.SortOrder = vm.url.order
                        }
                        network.User.getDescendantsByLevel(data).then(function(response) {
                            vm.sortingUser(response);
                        })
                    } else {
                        network.User.getChildren(data).then(function(response) {
                            vm.sortingUser(response);
                        })
                    }
                } else {
                    network.User.searchChildren({
                        MatchName: vm.userName,
                        Page: vm.url.page
                    }).then(function(resp) {
                        if ($location.search().uid !== undefined && resp.Records.length === 0) {
                            $timeout(function() {
                                vm.fetchUser()
                            }, 2000)
                        } else {
                            vm.sortingUser(resp)
                        }
                    })
                }
            }
        }

        function sortingUser(resp) {
            $timeout.cancel(vm.autoReload);
            vm.agencies = resp;
            vm.findMemberAccount(resp.Records)
            angular.forEach(vm.agencies.Records, function(item) {
                item.parent = [];
                item.CreditLimit = item.CreditLimit / 1000;
                item.Balance = item.Balance / 1000;
                if (item.Id === $location.search().uid) {
                    vm.creditUpdate(item)
                }
                if (item.Level === 9 && item.PlayerPaymentDates === undefined) {
                    item.PlayerPaymentDates = [];
                }
            });
            $timeout(function() {
                vm.inProcessing = false;
            }, 1000);
            $scope.$digest();
            if ($state.current.name === 'app.account.agency.child') {
                if ($location.search().paging === undefined) {
                    vm.setPage();
                } else {
                    vm.setPage(parseInt($location.search().paging));
                }
            } else {
                if ($location.search().page === undefined) {
                    vm.setPage();
                } else {
                    vm.setPage(parseInt($location.search().page));
                }
            }
        }

        function setPage(currentPage) {
            if (currentPage !== undefined) {
                if ($state.current.name === 'app.account.agency.child') {
                    $state.go("app.account.agency.child", {
                        paging: currentPage
                    });
                } else {
                    $state.go("app.account.agency", {
                        page: currentPage
                    });
                }
            }
            currentPage = currentPage === undefined ? 1 : currentPage;
            vm.pager = {};
            vm.pager.pages = [];
            vm.pager.currentPage = currentPage;
            vm.pager.totalPages = vm.agencies.TotalPages;
            let startPage, endPage;
            if (vm.agencies.TotalPages <= 5) {
                startPage = 1;
                endPage = vm.agencies.TotalPages;
            } else {
                if (currentPage <= 3) {
                    startPage = 1;
                    endPage = 5;
                } else if (currentPage + 2 >= vm.agencies.TotalPages) {
                    startPage = vm.agencies.TotalPages - 4;
                    endPage = vm.agencies.TotalPages;
                } else {
                    startPage = currentPage - 2;
                    endPage = currentPage + 2;
                }
            }
            for (var i = startPage; i <= endPage; i++) {
                vm.pager.pages.push(i);
            }
        }

        function getAncestors(item) {
            vm.parents = [];
            network.User.getAncestors({
                userId: item.Id
            }).then(function(response) {
                vm.parents = response;
                vm.parents.push({
                    Username: $rootScope.User.Username,
                    Level: $rootScope.User.Level
                });
                vm.parents.push({
                    Username: item.Username,
                    Level: item.Level
                });
                vm.parents.sort(function(a, b) {
                    return a.Level - b.Level
                });
                $scope.$digest();
            })
        }

        function childAccount(item) {
            item.inProcess = true;
            let parentArr = angular.copy(item.parent);
            parentArr.push(item.Username);
            if (item.Level === 9) {
                return
            }
            $scope.childItems = [];
            $scope.getChild = function(page) {
                page = page === undefined ? 1 : page;
                network.User.getChildren({
                    UserId: item.Id,
                    Page: page
                }).then(function(response) {
                    vm.findMemberAccount(response.Records)
                    angular.forEach(response.Records, function(item) {
                        item.CreditLimit = item.CreditLimit / 1000;
                        item.Balance = item.Balance / 1000;
                    });
                    $scope.childItems.push.apply($scope.childItems, response.Records);
                    if (response.Records.length === 20) {
                        $scope.getChild(page + 1);
                    } else {
                        angular.forEach($scope.childItems, function(val) {
                            val.parent = parentArr;
                            val.parentLevel = item.parentLevel === undefined ? 1 : item.parentLevel + 1;
                        });
                        angular.forEach(vm.agencies.Records, function(value, i) {
                            if (item.Id === value.Id) {
                                vm.agencies.Records.splice.apply(vm.agencies.Records, [i + 1, 0].concat($scope.childItems));
                            }
                        });
                        item.hasChild = true;
                        item.inProcess = false;
                        $scope.$digest();
                    }
                })
            };
            $scope.getChild();
        }

        function compactAccount(item) {
            item.hasChild = false;
            vm.agencies.Records = vm.agencies.Records.filter(function(obj) {
                return !msUtils.exists(item.Username, obj.parent);
            });
        }

        function changeDisplayName(item, ev) {
            $mdDialog.show({
                controller: changeDisplayNameCtrl,
                templateUrl: 'app/main/agency/agencies/dialog/change_displayname.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    data: item
                }
            });

            function changeDisplayNameCtrl($scope, $mdDialog, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.accountInfo = data;
                $scope.displayName = data.DisplayName;
                $scope.displayOnchange = function() {
                    $scope.form.displayName.$setValidity('displayNameExists', true);
                };
                $scope.submit = function() {
                    $scope.submitting = true;
                    network.User.checkDisplayName($scope.displayName).then(function(resp) {
                        if (!resp.DisplayNameExists) {
                            network.User.changeDisplayName($scope.displayName).then(function(resp) {
                                if (resp) {
                                    message.message('Thay đổi tên hiển thị thành công');
                                    item.DisplayName = $scope.displayName;
                                    $mdDialog.cancel();
                                }
                            });
                        } else {
                            $scope.submitting = false;
                            $scope.form.displayName.$setValidity('displayNameExists', false);
                            $scope.$digest();
                        }
                    })
                }
            }
        }

        function changePassword(item, ev) {
            $mdDialog.show({
                controller: changePasswordCtrl,
                templateUrl: 'app/main/account/agency/dialog/change_password.dialog.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {
                    data: item
                }
            });

            function changePasswordCtrl($scope, $mdDialog, data) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.show = false;
                $scope.accountInfo = data;
                $scope.data = {
                    Automatically: false,
                    Ask: true
                };
                $scope.form = {
                    password: ''
                };
                $scope.showPassword = function() {
                    $scope.show = !$scope.show;
                };
                $scope.disablePost = function() {
                    if ($scope.data.Automatically) {
                        return false
                    } else return $scope.form.password.length < 6;
                };
                $scope.submit = function() {
                    let pattern = /^[a-zA-Z0-9\^$*.\[\]{}\(\)?"!@#%&/\,><\':;|_~`]{6,32}$/;
                    if (!pattern.test($scope.form.password)) {
                        message.infoMultiple('Mật khẩu không hợp lệ')
                        return;
                    }
                    $scope.submitting = true;
                    var password = $scope.data.Automatically ? msUtils.generatorPassword() : $scope.form.password;
                    network.User.setUserPassword({
                        userId: data.Id,
                        password: password,
                        permanent: !$scope.data.Ask
                    }).then(function(resp) {
                        if (resp) {
                            $mdDialog.cancel();
                            $mdDialog.show({
                                controller: showPasswordCtrl,
                                templateUrl: 'app/main/account/agency/dialog/show_password.dialog.html',
                                parent: angular.element(document.body),
                                targetEvent: ev,
                                clickOutsideToClose: false,
                                locals: {
                                    data: {
                                        password: password,
                                        Username: data.Username
                                    }
                                }
                            });

                            function showPasswordCtrl($scope, $mdDialog, data) {
                                $scope.cancel = function() {
                                    $mdDialog.cancel();
                                };
                                $scope.accountInfo = data;
                                $scope.show = false;
                                $scope.copied = false;
                                $scope.showPassword = function() {
                                    $scope.show = !$scope.show;
                                };
                                $scope.onSuccess = function(e) {
                                    $scope.copied = !$scope.copied;
                                    setTimeout(function() {
                                        $scope.copied = !$scope.copied;
                                        $scope.$digest();
                                    }, 3000)
                                };
                                $scope.onError = function(e) {
                                    console.log(e)
                                }
                            }
                        }
                    }).catch(function(error) {
                        $scope.submitting = false;
                        message.infoMultiple(error.message)
                    })
                }
            }
        }

        function lockAccount(item) {
            vm.inProcessing = true;
            network.User.disableUser({
                userId: item.Id
            }).then(function(resp) {
                if (resp) {
                    item.Status = 0;
                    vm.inProcessing = false;
                    message.info('Khóa tài khoản ' + item.Username + ' thành công')
                }
            })
        }

        function unlockAccount(item) {
            vm.inProcessing = true;
            network.User.enableUser({
                userId: item.Id
            }).then(function(resp) {
                if (resp) {
                    item.Status = 1;
                    vm.inProcessing = false;
                    message.info('Mở khóa tài khoản ' + item.Username + ' thành công')
                }
            })
        }

        function mustEnableTfa(mfaRequired, item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: mustEnableTfaCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    mfaRequired: mfaRequired
                }
            });

            function mustEnableTfaCtrl($rootScope, $scope, $mdDialog, item, mfaRequired) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Yêu cầu cài đặt xác minh 2 bước';
                $scope.textContent = mfaRequired ? 'Quý khách muốn tài khoản ' + item.Username + ' phải bật xác minh 2 bước?' : 'Quý khách muốn tài khoản ' + item.Username + ' được phép hủy xác minh 2 bước?';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.User.setUserRequiredMFA({
                        userId: item.Id,
                        mfaRequired: mfaRequired
                    }).then(function(resp) {
                        item.MfaRequired = mfaRequired;
                        $mdDialog.cancel();
                    }).catch(function(err) {})
                }
            }
        }

        function disableTFA(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: disableTFACtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function disableTFACtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Hủy xác minh 2 bước';
                $scope.textContent = 'Quý khách muốn hủy xác minh 2 bước cho tài khoản ' + item.Username + '?';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.User.disableUserMFA(item.Id).then(function(resp) {
                        $scope.submitting = false;
                        item.MfaType = 0;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        $scope.submitting = false;
                        if (err.code === 'MFARequiredException') {
                            message.alert('Tài khoản ' + item.Username + ' bắt buộc phải dùng OTP. Quý khách hãy tắt yêu cầu OTP trước khi hủy');
                        } else {
                            message.alert('Có lỗi. Quý khách vui lòng thử lại')
                        }
                    })
                }
            }
        }

        function resetCreditPermission(item) {
            let levelStep = [1, 2, 3, 4, 5, 9];
            return levelStep.indexOf(item.Level) - levelStep.indexOf($rootScope.User.Level) === 1
        }

        function resetCredit(item, $event) {
            if (!vm.resetCreditPermission(item)) {
                message.info('Quý khách không có quyền kết toán tài khoản này')
                return;
            }
            $mdDialog.show({
                controller: resetCreditCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function resetCreditCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Kết toán tài khoản';
                $scope.textContent = 'Quý khách muốn thực hiện kết toán cho tài khoản ' + item.Username + '?';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.Wallet.settle({
                        UserId: item.Id
                    }).then(function(resp) {
                        $scope.submitting = false;
                        if (item.Level === 9) {
                            item.Balance = item.CreditLimit;
                        }
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.infoMultiple(err.message)
                    })
                }
            }
        }

        function viewContract($event, item, production) {
            $mdDialog.show({
                controller: contractCtrl,
                templateUrl: 'app/main/account/agency/dialog/contract.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {
                    item: item,
                    production: production
                }
            });

            function contractCtrl($scope, $mdDialog, item, production) {
                $scope.tab = production === undefined ? 0 : production;
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.userData = item;
                $scope.onTabSelected = function(index) {
                    $scope.tabIndex = index;
                    $scope.submitting = true;
                    $timeout(function() {
                        if (index === 0) {
                            $scope.initLottery();
                        } else if (index === 1) {
                            $scope.initLegend();
                        } else if (index === 2) {
                            $scope.initWMCasino();
                        } else if (index === 3) {
                            $scope.initLegendCasino();
                        } else if (index === 4) {
                            $scope.initSaba();
                        }
                    }, 500)
                }
                $scope.initLottery = function() {
                    $scope.gameList = [{
                        id: 0,
                        name: 'Miền Bắc 1',
                        active: true
                    }, {
                        id: 1,
                        name: 'Miền Bắc 2'
                    }, {
                        id: 2,
                        name: 'Miền Nam 18A'
                    }, {
                        id: 3,
                        name: 'Miền Nam 18B'
                    }, {
                        id: 4,
                        name: 'Miền Nam 18C'
                    }, {
                        id: 5,
                        name: 'Miền Nam 18A + 18B'
                    }]
                    $scope.contractData = [];
                    $scope.fetchData = function(index) {
                        network.Games.Lottery.ShareHolder.getAncestorsShareHolderOverview({
                            userId: item.Id,
                            gameType: index
                        }).then(function(response) {
                            let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 21, 22, 23, 24, 25, 26, 27, 28];
                            angular.forEach(response, function(share) {
                                share.ShareHolders.sort(function(a, b) {
                                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                                })
                            });
                            $scope.contractData.push({
                                gameType: index,
                                content: response
                            });
                            $scope.contractData.sort(function(a, b) {
                                return a.gameType - b.gameType;
                            });
                            $scope.submitting = false;
                            $scope.$digest();
                        })
                    };
                    $scope.submitting = true;
                    $scope.fetchData(0);
                    $scope.loadMore = function(game) {
                        if (!game.active) {
                            $scope.submitting = true;
                            game.active = true;
                            $scope.fetchData(game.id)
                        }
                    }
                }
                $scope.initLegend = function() {
                    $scope.legendGameList = [{
                        id: 0,
                        name: 'Miền Bắc',
                        active: true
                    }, {
                        id: 1,
                        name: 'Miền Nam'
                    }]
                    $scope.legendContractData = [];
                    $scope.fetchLegendData = function(index) {
                        network.Games.Legend.ShareHolder.getAncestorsShareHolderOverview({
                            UserId: item.Id,
                            GameType: index
                        }).then(function(response) {
                            let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
                            angular.forEach(response, function(share) {
                                share.ShareHolders.sort(function(a, b) {
                                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                                })
                            });
                            $scope.legendContractData.push({
                                gameType: index,
                                content: response
                            });
                            $scope.legendContractData.sort(function(a, b) {
                                return a.gameType - b.gameType;
                            });
                            $scope.submitting = false;
                            $scope.$digest();
                        })
                    };
                    $scope.submitting = true;
                    $scope.fetchLegendData(0);
                    $scope.loadMoreLegend = function(game) {
                        if (!game.active) {
                            $scope.submitting = true;
                            game.active = true;
                            $scope.fetchLegendData(game.id)
                        }
                    }
                }
                $scope.initWMCasino = function() {
                    $scope.WMContractData = [];
                    network.Games.WMCasino.ShareHolder.getAncestorsShareHolderOverview({
                        UserId: item.Id
                    }).then(function(response) {
                        $scope.WMContractData = response;
                        $scope.submitting = false;
                        $scope.$digest();
                    })
                }
                $scope.initLegendCasino = function() {
                    $scope.LegendContractData = [];
                    network.Games.LegendCasino.ShareHolder.getAncestorsShareHolderOverview({
                        UserId: item.Id
                    }).then(function(response) {
                        $scope.LegendContractData = response;
                        $scope.submitting = false;
                        $scope.$digest();
                    })
                }
                $scope.initSaba = function() {
                    $scope.SabaContractData = [];
                    Lotus.Saba.ShareHolder.getUserAncestorsShareHolder({
                        UserId: item.Id
                    }).then(function(response) {
                        $scope.SabaContractData = response;
                        $scope.submitting = false;
                        $scope.$digest();
                    })
                }
            }
        }

        function createAccount($event) {
            $mdDialog.show({
                controller: createAccountCtrl,
                templateUrl: 'app/main/account/agency/dialog/create_account.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    usersGroups: vm.usersGroups
                }
            });

            function createAccountCtrl($rootScope, $scope, $mdDialog, usersGroups) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.user = {
                    username: '',
                    fullName: ''
                };
                $scope.show = false;
                $scope.data = {
                    Automatically: false,
                    Ask: true,
                    NameExists: true,
                    DisplayNameExists: true
                };
                $scope.usersGroups = usersGroups;
                $scope.usersGroups = $scope.usersGroups.filter(function(value) {
                    return value.id > $rootScope.User.Level
                });
                $scope.showPassword = function() {
                    $scope.show = !$scope.show
                };
                $scope.checkNameExists = function() {
                    $scope.form.username.$setValidity('nameExists', true);
                    if ($scope.user.username !== undefined && $scope.user.username !== '') {
                        $scope.submitting = true;
                        network.User.checkUsername($scope.user.username).then(function(resp) {
                            $scope.data.NameExists = resp.Result;
                            $scope.form.username.$setValidity('nameExists', !resp.Result);
                            $scope.submitting = false;
                            $scope.$digest();
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple('Tài khoản không hợp lệ')
                            console.log(error.message)
                        })
                    }
                };
                $scope.disablePost = function() {
                    return $scope.data.NameExists
                };
                $scope.submit = function() {
                    $scope.errorText = '';
                    if ($scope.user.fullName.length !== 0 && $scope.user.fullName.length < 3) {
                        $scope.errorText = 'Họ tên phải có ít nhất 3 ký tự'
                        return
                    }
                    let pattern = /^[a-zA-Z0-9\^$*.\[\]{}\(\)?"!@#%&/\,><\':;|_~`]{6,32}$/;
                    if (!pattern.test($scope.user.password)) {
                        $scope.errorText = 'Mật khẩu không hợp lệ'
                        return;
                    }
                    $scope.submitting = true;
                    $scope.send = {
                        Username: $scope.user.username,
                        Password: $scope.data.Automatically ? msUtils.generatorPassword() : $scope.user.password,
                        FullName: $scope.user.fullName,
                        About: $scope.user.about,
                        //Level: $scope.usersGroups[0].id
                    };
                    network.User.create($scope.send).then(function(resp) {
                        if (resp.UserId || true) {
                            $scope.send.UserId = resp.UserId;
                            $mdDialog.show({
                                controller: createAccountSuccessCtrl,
                                templateUrl: 'app/main/account/agency/dialog/create_account_success.dialog.html',
                                parent: angular.element(document.body),
                                locals: {
                                    data: $scope.send
                                }
                            });

                            function createAccountSuccessCtrl($scope, $mdDialog, data) {
                                $scope.cancel = function() {
                                    $mdDialog.cancel();
                                };
                                $scope.accountInfo = data;
                                $scope.show = false;
                                $scope.copied = false;
                                $scope.showPassword = function() {
                                    $scope.show = !$scope.show;
                                };
                                $scope.onSuccess = function(e) {
                                    $scope.copied = !$scope.copied;
                                    setTimeout(function() {
                                        $scope.copied = !$scope.copied;
                                        $scope.$digest();
                                    }, 3000)
                                };
                                $scope.onError = function(e) {
                                    console.log(e)
                                };
                            }
                        }
                    }).catch(function(err) {
                        $scope.submitting = false;
                        $scope.errorText = err.message;
                        $scope.$digest();
                    })
                }
            }
        }

        function creditUpdate(item, $event, payment) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: creditUpdateCtrl,
                templateUrl: 'app/main/account/agency/dialog/credit_update.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {
                    item: item,
                    payment: payment
                }
            }).then(function(answer) {
                item.CreditLimit = answer.CreditLimit;
                item.Balance = answer.Balance;
                item.PaymentMethod = answer.PaymentMethod;
                if (item.PlayerPaymentDates !== undefined) {
                    item.PlayerPaymentDates = answer.PlayerPaymentDates;
                }
                if (item.parent.length === 0) {
                    $rootScope.$broadcast('userAccount::update')
                } else {
                    angular.forEach(vm.agencies.Records, function(parent) {
                        if (parent.Username === item.parent[item.parent.length - 1]) {
                            parent.Balance = answer.parentBalance
                        }
                    })
                }
                if (item.Id === $location.search().uid) {
                    vm.agencyShareHolder($event, item)
                }
            }, function() {
                if (item.Id === $location.search().uid) {}
            });

            function creditUpdateCtrl($scope, $mdDialog, $mdMedia, item, payment) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.currentTab = payment !== undefined ? 1 : 0;
                $scope.childUser = angular.copy(item);
                $scope.paymentDateNotChanged = true;
                $scope.PaymentPermissions = vm.resetCreditPermission(item)
                $scope.paymentDates = [{
                    id: 1,
                    date: 'Thứ 2'
                }, {
                    id: 2,
                    date: 'Thứ 3'
                }, {
                    id: 3,
                    date: 'Thứ 4'
                }, {
                    id: 4,
                    date: 'Thứ 5'
                }, {
                    id: 5,
                    date: 'Thứ 6'
                }, {
                    id: 6,
                    date: 'Thứ 7'
                }, {
                    id: 7,
                    date: 'Chủ nhật'
                }, ];
                $scope.toggle = function(id, list) {
                    var idx = list.indexOf(id);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(id);
                    }
                    list.sort();
                    $scope.paymentDateNotChanged = ($scope.childUser.PlayerPaymentDates.length === item.PlayerPaymentDates.length) && $scope.childUser.PlayerPaymentDates.every(function(element, index) {
                        return element === item.PlayerPaymentDates[index];
                    });
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                if (item.Level === 9) {
                    $scope.childUser.parentLevel = 5
                } else {
                    $scope.childUser.parentLevel = item.Level - 1
                }
                network.Wallet.getWallet({
                    UserId: item.ParentId
                }).then(function(response) {
                    $scope.childUser.parentBalance = response.Balance / 1000;
                    $scope.childUser.oldParentBalance = angular.copy($scope.childUser.parentBalance);
                    $scope.$digest();
                });
                $scope.changeCredit = function() {
                    $scope.childUser.Balance = $scope.childUser.CreditLimit - item.CreditLimit + item.Balance;
                    $scope.disableChild = $scope.childUser.Balance < 0;
                    $scope.errChild = $scope.childUser.Balance < 0 ? 'Không thể rút tín dụng vượt mức đã cấp cho tài khoản con' : '';
                    if ($scope.childUser.parentLevel !== 1) {
                        $scope.childUser.parentBalance = ($scope.childUser.oldParentBalance + item.CreditLimit) - $scope.childUser.CreditLimit;
                        $scope.disabledParent = $scope.childUser.parentBalance < 0;
                        $scope.errParent = $scope.childUser.parentBalance < 0 ? 'Tín dụng của ' + $filter('group')($scope.childUser.parentLevel) + ' không đủ.' : '';
                    }
                    $scope.ChangedCredit = $scope.childUser.CreditLimit !== item.CreditLimit;
                };
                $scope.submit = function() {
                    vm.send = {
                        UserId: item.Id,
                        CreditLimit: $scope.childUser.CreditLimit * 1000
                    };
                    if (!$scope.disableChild && !$scope.disabledParent && $scope.ChangedCredit) {
                        $scope.submitting = true;
                        network.Wallet.updateCreditLimit(vm.send).then(function(response) {
                            if (response) {
                                $scope.updatePaymentMethod();
                            }
                        }).catch(function(error) {
                            console.log(error)
                            message.show(error.message)
                        })
                    } else {
                        $scope.updatePaymentMethod(true);
                    }
                };
                $scope.updatePaymentMethod = function(flag) {
                    if (!$scope.paymentDateNotChanged || ($scope.childUser.PaymentMethod !== item.PaymentMethod)) {
                        let data = {
                            UserId: item.Id,
                            PaymentMethod: $scope.childUser.PaymentMethod,
                        };
                        if ($scope.childUser.Level === 9) {
                            data.PlayerPaymentDates = $scope.childUser.PlayerPaymentDates;
                            if (data.PlayerPaymentDates.length === 0) {
                                message.infoMultiple('Vui lòng chọn 1 ngày thanh toán')
                                return;
                            }
                        }
                        network.Wallet.updatePaymentMethod(data).then(function(response) {
                            $mdDialog.hide($scope.childUser);
                        }).catch(function(error) {
                            if (!flag) {
                                $scope.childUser.PaymentMethod = item.PaymentMethod;
                                $mdDialog.hide($scope.childUser);
                            } else {
                                $mdDialog.cancel();
                            }
                            let exMessage = flag === undefined ? '. Tuy nhiên, tín dụng đã được cập nhật' : '';
                            message.infoMultiple(error.message + exMessage);
                        })
                    } else {
                        if (flag) {
                            message.infoMultiple('Không có thông tin nào thay đổi')
                        } else {
                            $mdDialog.hide($scope.childUser);
                        }
                    }
                }
            }
        }

        function blockAccount(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: blockAccountCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function blockAccountCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Đóng tài khoản.';
                $scope.textContent = 'Quý khách muốn đóng tài khoản ' + item.Username;
                $scope.done = function() {
                    $scope.submitting = true;
                    network.User.block({
                        UserId: item.Id
                    }).then(function(resp) {
                        item.Blocked = true;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }

        function unblockAccount(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: unblockAccountCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.unlock.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function unblockAccountCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Mở khoá đăng nhập.';
                $scope.textContent = 'Quý khách muốn mở khoá đăng nhập tài khoản ' + item.Username;
                $scope.IncludeDownlineUsers = true;
                $scope.done = function() {
                    $scope.submitting = true;
                    network.User.unblock({
                        UserId: item.Id,
                        IncludeDownlineUsers: $scope.IncludeDownlineUsers
                    }).then(function(resp) {
                        item.Blocked = false;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }

        function suspendAccount(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: suspendAccountCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function suspendAccountCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Ngừng cược';
                $scope.textContent = 'Quý khách muốn ngừng đặt cược cho tài khoản ' + item.Username;
                $scope.done = function() {
                    $scope.submitting = true;
                    network.User.suspend({
                        UserId: item.Id
                    }).then(function(resp) {
                        item.Suspended = true;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }

        function unSuspendAccount(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: unSuspendAccountCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function unSuspendAccountCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Ngừng đặt';
                $scope.textContent = 'Quý khách muốn cho phép tài khoản ' + item.Username + ' đặt cược';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.User.unsuspend({
                        UserId: item.Id
                    }).then(function(resp) {
                        item.Suspended = false;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }

        function agencyShareHolder($event, item, production) {
            $mdDialog.show({
                controller: agencyShareHolderCtrl,
                templateUrl: 'app/main/account/agency/dialog/share-holder-dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                hasBackdrop: false,
                fullscreen: true,
                locals: {
                    item: item,
                    production: production
                }
            }).then(function() {
                if (item.Id === $location.search().uid) {
                    vm.agencyBettingLimit($event, item, production)
                }
            }, function() {
                if (item.Id === $location.search().uid) {
                    vm.agencyBettingLimit($event, item, production)
                }
            });

            function agencyShareHolderCtrl($scope, $mdDialog, $mdMedia, item, production) {
                $scope.tab = production === undefined ? 0 : production;
                $scope.item = item;
                $scope.$mdMedia = $mdMedia;
                $scope.hasWritePermission = vm.hasWritePermission;
                $scope.commissionOptions = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0];
                $scope.sabaOptions1 = [1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0];
                $scope.sabaOptions2 = [1, 0.95, 0.9, 0.85, 0.8, 0.75, 0.7, 0.65, 0.6, 0.55, 0.5, 0.45, 0.4, 0.35, 0.3, 0.25, 0.2, 0.15, 0.1, 0.05, 0];
                $scope.cancel = function() {
                    $mdDialog.hide();
                };
                $scope.onTabSelected = function(index) {
                    $scope.tabIndex = index;
                    $scope.submitting = true;
                    $timeout(function() {
                        if (index === 0) {
                            $scope.initLotteryShareHolder();
                            if (item.Level === 9) {
                                network.Games.Lottery.PayoutsType.getUserPayoutsType({
                                    UserId: item.Id
                                }).then(function(response) {
                                    item.PayoutTypes = response
                                })
                            }
                        } else if (index === 1) {
                            $scope.initLegendShareHolder();
                            if (item.Level === 9) {
                                network.Games.Legend.PayoutsType.getUserPayoutsType({
                                    UserId: item.Id
                                }).then(function(response) {
                                    item.LegendPayoutTypes = response
                                })
                            }
                        } else if (index === 2) {
                            $scope.initWmShareHolder()
                        } else if (index === 3) {
                            $scope.initLegendCasinoShareHolder()
                        } else if (index === 4) {
                            $scope.initSabaShareHolder()
                        }
                    }, 500)
                };
                $scope.initLotteryShareHolder = function() {
                    network.Games.Lottery.ShareHolder.getUserShareHolders({
                        userId: item.Id
                    }).then(function(response) {
                        $scope.submitting = false;
                        response.sort(function(a, b) {
                            return a.GameType - b.GameType || a.BetType - b.BetType
                        });
                        $scope.lotteryShareHolders = response.groupBy(function(o) {
                            return JSON.stringify({
                                a: o.GameType
                            })
                        });
                        angular.forEach($scope.lotteryShareHolders, function(lotShare) {
                            if (msUtils.exists(lotShare.group[0].GameType, [1, 2, 3, 4])) {
                                let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
                                lotShare.group.sort(function(a, b) {
                                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                                })
                            } else {
                                let order = [0, 1, 29, 2, 3, 4, 5, 6, 20, 21, 22, 23, 24, 25];
                                lotShare.group.sort(function(a, b) {
                                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                                })
                            }
                        })
                        $scope.backupShareRates = angular.copy(response);
                        $scope.$digest();
                    })
                };
                $scope.lotteryChangePayoutTypes = function() {
                    $scope.submitting = true;
                    network.Games.Lottery.PayoutsType.getAll().then(function(response) {
                        $scope.payoutTemplates = response;
                        $scope.submitting = false;
                        $scope.$digest()
                    })
                };
                $scope.lotteryViewTemplate = function(templateId) {
                    templateId = templateId === undefined ? item.PayoutTypes.Id : templateId;
                    $mdDialog.show({
                        controller: viewTemplateCtrl,
                        templateUrl: 'app/main/account/agency/dialog/view_template.dialog.html',
                        parent: angular.element(document.body),
                        multiple: true,
                        clickOutsideToClose: true,
                        locals: {
                            item: templateId
                        }
                    });

                    function viewTemplateCtrl($scope, $mdDialog, item, msUtils) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.submitting = true;
                        $scope.template = item;
                        network.Games.Lottery.PayoutsType.getById({
                            Id: item.Id
                        }).then(function(response) {
                            $scope.submitting = false;
                            $scope.Values = msUtils.groupBy(response.Values, function(item) {
                                return [item.GameType];
                            });
                            $scope.$digest();
                        });
                    }
                };
                $scope.lotteryAssignPayout = function(templateId) {
                    $scope.submitting = true;
                    network.Games.Lottery.PayoutsType.updatePlayerPayoutsType({
                        UserId: item.Id,
                        PayoutsTypeId: templateId.Id
                    }).then(function(response) {
                        $scope.item.PayoutTypes = templateId;
                        $scope.$digest();
                        $scope.initLotteryShareHolder();
                    })
                };
                $scope.lotteryCopyGameType = function(item) {
                    angular.forEach($scope.lotteryShareHolders, function(game) {
                        angular.forEach(game.group, function(bet) {
                            bet.highlight = item.Percent !== $.grep($scope.backupShareRates, function(share) {
                                return share.GameType === bet.GameType && share.BetType === bet.BetType
                            })[0].Percent;
                            bet.Percent = item.Percent;
                            bet.Fixed = item.Fixed;
                            bet.ParentPercent = item.ParentPercent;
                        })
                    })
                };
                $scope.lotteryCopyBetType = function(item) {
                    angular.forEach($scope.lotteryShareHolders, function(game) {
                        if (game.group[0].GameType === item.GameType) {
                            angular.forEach(game.group, function(bet) {
                                bet.highlight = item.Percent !== $.grep($scope.backupShareRates, function(share) {
                                    return share.GameType === bet.GameType && share.BetType === bet.BetType
                                })[0].Percent;
                                bet.Percent = item.Percent;
                                bet.Fixed = item.Fixed;
                                bet.ParentPercent = item.ParentPercent;
                            })
                        }
                    })
                };
                $scope.lotteryChangePercent = function(item) {
                    let backup = $.grep($scope.backupShareRates, function(share) {
                        return share.GameType === item.GameType && share.BetType === item.BetType
                    })[0];
                    if (item.Percent !== backup.Percent) {
                        let parentPercent = item.ParentBasePercent - item.Percent;
                        if (parentPercent >= 0 && angular.isNumber(item.Percent)) {
                            item.highlight = true;
                            item.ParentPercent = item.ParentBasePercent - item.Percent;
                            item.ParentPercent = Number(Math.round(item.ParentPercent + 'e' + 1) + 'e-' + 1);
                        } else {
                            item.Percent = 0;
                            $scope.lotteryChangePercent(item)
                        }
                    } else {
                        item.ParentPercent = backup.ParentPercent;
                        delete item.highlight
                    }
                };
                $scope.lotteryChangePrice = function(item) {
                    let backup = $.grep($scope.backupShareRates, function(share) {
                        return share.GameType === item.GameType && share.BetType === item.BetType
                    })[0];
                    if (item.Price !== backup.Price) {
                        if (angular.isNumber(item.Price)) {
                            item.PriceChange = true;
                        } else {
                            item.Price = backup.Price;
                        }
                    } else {
                        delete item.PriceChange
                    }
                };
                $scope.lotteryCheckPrice = function(item) {
                    let backup = $.grep($scope.backupShareRates, function(share) {
                        return share.GameType === item.GameType && share.BetType === item.BetType
                    })[0];
                    if (item.Price < item.MinPrice || item.Price > item.MaxPrice) {
                        item.Price = backup.Price;
                        delete item.PriceChange
                        let gameTitle = $scope.tabIndex === 0 ? $filter('gameXs')(item.GameType) : $filter('legendGame')(item.GameType);
                        let betTitle = $scope.tabIndex === 0 ? $filter('bet')(item.BetType) : $filter('bet')(item.BetType, false, item.GameType);
                        message.infoMultiple('Giá ' + gameTitle + ' - ' + betTitle + ' nằm trong khoảng ' + $filter('currency')(item.MinPrice, '', 0) + '-' + $filter('currency')(item.MaxPrice, '', 0))
                    }
                }
                $scope.lotteryUpdateMinMaxPrice = function(cond) {
                    angular.forEach($scope.lotteryShareHolders, function(groups) {
                        angular.forEach(groups.group, function(bet) {
                            if (bet.BetType !== 20) {
                                bet.Price = cond === 'min' ? bet.MinPrice : bet.MaxPrice;
                                $scope.lotteryChangePrice(bet)
                            }
                        })
                    })
                }
                $scope.lotteryUpdate = function() {
                    let send = {
                        userId: $scope.item.Id,
                        shareHolders: []
                    };
                    angular.forEach($scope.lotteryShareHolders, function(game) {
                        angular.forEach(game.group, function(bet) {
                            let backup = $.grep($scope.backupShareRates, function(share) {
                                return share.GameType === bet.GameType && share.BetType === bet.BetType
                            })[0];
                            let shareHolder = {
                                gameType: bet.GameType,
                                betType: bet.BetType,
                                percent: bet.Percent,
                                parentPercent: bet.ParentPercent,
                                fixed: bet.Fixed,
                                price: bet.Price,
                            };
                            if (bet.Percent !== backup.Percent || bet.ParentPercent !== backup.ParentPercent || bet.Fixed !== backup.Fixed || bet.Price !== backup.Price) {
                                send.shareHolders.push(shareHolder)
                            }
                        })
                    });
                    if (send.shareHolders.length) {
                        $scope.submitting = true;
                        network.Games.Lottery.ShareHolder.updateUserShareHolders(send).then(function(response) {
                            if (response) {
                                message.infoMultiple('Cập nhật thông tin thầu và giá thành công');
                                $scope.initLotteryShareHolder();
                                $scope.submitting = false;
                            }
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.alert(error.message)
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                };
                $scope.initLegendShareHolder = function() {
                    network.Games.Legend.ShareHolder.getUserShareHolders({
                        UserId: item.Id
                    }).then(function(response) {
                        $scope.submitting = false;
                        response.sort(function(a, b) {
                            return a.GameType - b.GameType || a.BetType - b.BetType
                        });
                        $scope.legendShareHolders = response.groupBy(function(o) {
                            return JSON.stringify({
                                a: o.GameType
                            })
                        });
                        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
                        angular.forEach($scope.legendShareHolders, function(lotShare) {
                            lotShare.group.sort(function(a, b) {
                                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                            })
                        })
                        $scope.backupShareRates = angular.copy(response);
                        $scope.$digest();
                    })
                };
                $scope.legendChangePayoutTypes = function() {
                    $scope.submitting = true;
                    network.Games.Legend.PayoutsType.getAll().then(function(response) {
                        $scope.legendPayoutTemplates = response;
                        $scope.submitting = false;
                        $scope.$digest()
                    })
                };
                $scope.legendViewTemplate = function(templateId) {
                    templateId = templateId === undefined ? item.PayoutTypes.Id : templateId;
                    $mdDialog.show({
                        controller: viewTemplateCtrl,
                        templateUrl: 'app/main/account/agency/dialog/view_template.legend.dialog.html',
                        parent: angular.element(document.body),
                        multiple: true,
                        clickOutsideToClose: true,
                        locals: {
                            item: templateId
                        }
                    });

                    function viewTemplateCtrl($scope, $mdDialog, item, msUtils) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.submitting = true;
                        $scope.template = item;
                        network.Games.Legend.PayoutsType.getById({
                            Id: item.Id
                        }).then(function(response) {
                            $scope.submitting = false;
                            $scope.Values = msUtils.groupBy(response.Values, function(item) {
                                return [item.GameType];
                            });
                            $scope.$digest();
                        });
                    }
                };
                $scope.legendAssignPayout = function(templateId) {
                    $scope.submitting = true;
                    network.Games.Legend.PayoutsType.updatePlayerPayoutsType({
                        UserId: item.Id,
                        PayoutsTypeId: templateId.Id
                    }).then(function(response) {
                        $scope.item.PayoutTypes = templateId;
                        $scope.$digest();
                        $scope.initLegendShareHolder();
                    })
                };
                $scope.legendCopyGameType = function(item) {
                    angular.forEach($scope.legendShareHolders, function(game) {
                        angular.forEach(game.group, function(bet) {
                            bet.highlight = item.Percent !== $.grep($scope.backupShareRates, function(share) {
                                return share.GameType === bet.GameType && share.BetType === bet.BetType
                            })[0].Percent;
                            bet.Percent = item.Percent;
                            bet.Fixed = item.Fixed;
                            bet.ParentPercent = item.ParentPercent;
                        })
                    })
                }
                $scope.legendCopyBetType = function(item) {
                    angular.forEach($scope.legendShareHolders, function(game) {
                        if (game.group[0].GameType === item.GameType) {
                            angular.forEach(game.group, function(bet) {
                                bet.highlight = item.Percent !== $.grep($scope.backupShareRates, function(share) {
                                    return share.GameType === bet.GameType && share.BetType === bet.BetType
                                })[0].Percent;
                                bet.Percent = item.Percent;
                                bet.Fixed = item.Fixed;
                                bet.ParentPercent = item.ParentPercent;
                            })
                        }
                    })
                }
                $scope.legendUpdateMinMaxPrice = function(cond) {
                    angular.forEach($scope.legendShareHolders, function(groups) {
                        angular.forEach(groups.group, function(bet) {
                            bet.Price = cond === 'min' ? bet.MinPrice : bet.MaxPrice;
                            $scope.lotteryChangePrice(bet)
                        })
                    })
                }
                $scope.legendUpdate = function() {
                    let send = {
                        UserId: $scope.item.Id,
                        ShareHolders: []
                    };
                    angular.forEach($scope.legendShareHolders, function(game) {
                        angular.forEach(game.group, function(bet) {
                            let backup = $.grep($scope.backupShareRates, function(share) {
                                return share.GameType === bet.GameType && share.BetType === bet.BetType
                            })[0];
                            let shareHolder = {
                                GameType: bet.GameType,
                                BetType: bet.BetType,
                                Percent: bet.Percent,
                                ParentPercent: bet.ParentPercent,
                                Fixed: bet.Fixed,
                                Price: bet.Price,
                            };
                            if (bet.Percent !== backup.Percent || bet.ParentPercent !== backup.ParentPercent || bet.Fixed !== backup.Fixed || bet.Price !== backup.Price) {
                                send.ShareHolders.push(shareHolder)
                            }
                        })
                    });
                    if (send.ShareHolders.length) {
                        $scope.submitting = true;
                        network.Games.Legend.ShareHolder.updateUserShareHolders(send).then(function(response) {
                            if (response) {
                                message.infoMultiple('Cập nhật thông tin thầu và giá thành công');
                                $scope.initLegendShareHolder();
                                $scope.submitting = false;
                            }
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.alert(error.message)
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                }
                $scope.initWmShareHolder = function() {
                    network.Games.WMCasino.ShareHolder.getUserShareHolder({
                        UserId: item.Id,
                        IncludeParent: true
                    }).then(function(response) {
                        $scope.submitting = false;
                        $scope.WMShareHolder = response;
                        $scope.WMShareHolderBackup = angular.copy(response);
                        $scope.commissionOptions = $scope.commissionOptions.filter(function(item) {
                            return item <= response.Parent.CommissionPercent
                        });
                        $scope.$digest();
                    })
                };
                $scope.wmCasinoChangePercent = function() {
                    $scope.WMShareHolder.ParentPercent = $scope.WMShareHolder.Parent.Percent - $scope.WMShareHolder.Percent;
                    $scope.WMShareHolder.ParentPercent = Number(Math.round($scope.WMShareHolder.ParentPercent + 'e' + 1) + 'e-' + 1);
                };
                $scope.wmCasinoUpdate = function() {
                    if ($scope.WMShareHolder.Percent !== $scope.WMShareHolderBackup.Percent || $scope.WMShareHolder.Fixed !== $scope.WMShareHolderBackup.Fixed || $scope.WMShareHolder.ParentPercent !== $scope.WMShareHolderBackup.ParentPercent || $scope.WMShareHolder.CommissionPercent !== $scope.WMShareHolderBackup.CommissionPercent) {
                        $scope.submitting = true;
                        network.Games.WMCasino.ShareHolder.updateUserShareHolder({
                            UserId: item.Id,
                            Percent: $scope.WMShareHolder.Percent,
                            ParentPercent: $scope.WMShareHolder.ParentPercent,
                            Fixed: $scope.WMShareHolder.Fixed,
                            CommissionPercent: $scope.WMShareHolder.CommissionPercent
                        }).then(function(response) {
                            message.infoMultiple('Cập nhật thông tin thầu thành công');
                            $scope.submitting = false;
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple(error.message);
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                };
                $scope.initLegendCasinoShareHolder = function() {
                    network.Games.LegendCasino.ShareHolder.getUserShareHolder({
                        UserId: item.Id,
                        IncludeParent: true
                    }).then(function(response) {
                        $scope.submitting = false;
                        $scope.LegendCasinoShareHolder = response;
                        $scope.LegendCasinoShareHolderBackup = angular.copy(response);
                        $scope.commissionOptions = $scope.commissionOptions.filter(function(item) {
                            return item <= response.Parent.CommissionPercent;
                        });
                        $scope.$digest();
                    });
                }
                $scope.LegendCasinoChangePercent = function() {
                    $scope.LegendCasinoShareHolder.ParentPercent = $scope.LegendCasinoShareHolder.Parent.Percent - $scope.LegendCasinoShareHolder.Percent;
                    $scope.LegendCasinoShareHolder.ParentPercent = Number(Math.round($scope.LegendCasinoShareHolder.ParentPercent + 'e' + 1) + 'e-' + 1);
                };
                $scope.LegendCasinoUpdate = function() {
                    if ($scope.LegendCasinoShareHolder.Percent !== $scope.LegendCasinoShareHolderBackup.Percent || $scope.LegendCasinoShareHolder.Fixed !== $scope.LegendCasinoShareHolderBackup.Fixed || $scope.LegendCasinoShareHolder.ParentPercent !== $scope.LegendCasinoShareHolderBackup.ParentPercent || $scope.LegendCasinoShareHolder.CommissionPercent !== $scope.LegendCasinoShareHolderBackup.CommissionPercent) {
                        $scope.submitting = true;
                        network.Games.LegendCasino.ShareHolder.updateUserShareHolder({
                            UserId: item.Id,
                            Percent: $scope.LegendCasinoShareHolder.Percent,
                            ParentPercent: $scope.LegendCasinoShareHolder.ParentPercent,
                            Fixed: $scope.LegendCasinoShareHolder.Fixed,
                            CommissionPercent: $scope.LegendCasinoShareHolder.CommissionPercent
                        }).then(function(response) {
                            message.infoMultiple('Cập nhật thông tin thầu thành công');
                            $scope.submitting = false;
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple(error.message);
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                };
                $scope.PresidentialUpdate = function(cond) {
                    if ($scope.PresidentialGames.MinBet !== $scope.PresidentialGamesBackup.MinBet || $scope.PresidentialGames.MaxBet !== $scope.PresidentialGamesBackup.MaxBet || $scope.PresidentialGames.HandicapCommission !== $scope.PresidentialGamesBackup.HandicapCommission || $scope.PresidentialGames.OutrightCommission !== $scope.PresidentialGamesBackup.OutrightCommission) {
                        $scope.submitting = true;
                        Lotus.SenCasino.Games.Politics.UserGame.updateUserGame({
                            UserId: item.Id,
                            MinBet: $scope.PresidentialGames.MinBet,
                            MaxBet: $scope.PresidentialGames.MaxBet,
                            HandicapCommission: $scope.PresidentialGames.HandicapCommission,
                            OutrightCommission: $scope.PresidentialGames.OutrightCommission
                        }).then(function() {
                            message.infoMultiple('Cập nhật thông tin thầu thành công');
                            $scope.submitting = false;
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple(error.message);
                        })
                    } else {
                        if (cond) {
                            message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                        }
                    }
                }
                $scope.initSabaShareHolder = function() {
                    Lotus.Saba.ShareHolder.getUserShareHolder({
                        UserId: item.Id,
                        IncludeParent: true
                    }).then(function(response) {
                        $scope.submitting = false;
                        $scope.SabaShareHolder = response;
                        $scope.SabahareHolderBackup = angular.copy(response);
                        $scope.sabaOptions1 = $scope.sabaOptions1.filter(function(item) {
                            return item <= response.Parent.CommissionPercent1
                        });
                        $scope.sabaOptions2 = $scope.sabaOptions2.filter(function(item) {
                            return item <= response.Parent.CommissionPercent2
                        });
                        $scope.$digest();
                    })
                }
                $scope.sabaChangePercent = function() {
                    $scope.SabaShareHolder.ParentPercent = $scope.SabaShareHolder.Parent.Percent - $scope.SabaShareHolder.Percent;
                    $scope.SabaShareHolder.ParentPercent = Number(Math.round($scope.SabaShareHolder.ParentPercent + 'e' + 1) + 'e-' + 1);
                }
                $scope.sabaUpdate = function() {
                    if ($scope.SabaShareHolder.Percent === undefined) {
                        message.infoMultiple('Tỷ lệ thầu không hợp lệ')
                        return;
                    }
                    if ($scope.SabaShareHolder.Percent !== $scope.SabahareHolderBackup.Percent || $scope.SabaShareHolder.Fixed !== $scope.SabahareHolderBackup.Fixed || $scope.SabaShareHolder.ParentPercent !== $scope.SabahareHolderBackup.ParentPercent || $scope.SabaShareHolder.CommissionPercent1 !== $scope.SabahareHolderBackup.CommissionPercent1 || $scope.SabaShareHolder.CommissionPercent2 !== $scope.SabahareHolderBackup.CommissionPercent2) {
                        $scope.submitting = true;
                        Lotus.Saba.ShareHolder.updateUserShareHolder({
                            UserId: item.Id,
                            Percent: $scope.SabaShareHolder.Percent,
                            ParentPercent: $scope.SabaShareHolder.ParentPercent,
                            Fixed: $scope.SabaShareHolder.Fixed,
                            CommissionPercent1: $scope.SabaShareHolder.CommissionPercent1,
                            CommissionPercent2: $scope.SabaShareHolder.CommissionPercent2
                        }).then(function(response) {
                            message.infoMultiple('Cập nhật thông tin thầu thành công');
                            $scope.submitting = false;
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple(error.message);
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                }
                $scope.update = function() {
                    if ($scope.tabIndex === 0) {
                        $scope.lotteryUpdate()
                    } else if ($scope.tabIndex === 1) {
                        $scope.legendUpdate();
                    } else if ($scope.tabIndex === 2) {
                        $scope.wmCasinoUpdate();
                    } else if ($scope.tabIndex === 3) {
                        $scope.LegendCasinoUpdate();
                    } else if ($scope.tabIndex === 4) {
                        $scope.sabaUpdate();
                    }
                }
            }
        }

        function agencyBettingLimit($event, item, production) {
            $mdDialog.show({
                controller: agencyBettingLimitCtrl,
                templateUrl: 'app/main/account/agency/dialog/betting-limit-dialog.html',
                targetEvent: $event,
                clickOutsideToClose: true,
                hasBackdrop: false,
                fullscreen: true,
                locals: {
                    item: item,
                    production: production
                }
            });

            function agencyBettingLimitCtrl($scope, $mdDialog, $mdMedia, item, production) {
                $scope.tab = production === undefined ? 0 : production;
                $scope.item = item;
                $scope.$mdMedia = $mdMedia;
                $scope.hasWritePermission = vm.hasWritePermission;
                $scope.cancel = function() {
                    $mdDialog.hide();
                };
                $scope.onTabSelected = function(index) {
                    $scope.tabIndex = index;
                    $scope.submitting = true;
                    $timeout(function() {
                        if (index === 0) {
                            $scope.initLotteryBettingLimit();
                        } else if (index === 1) {
                            $scope.initLegendBettingLimit();
                        } else if (index === 2) {
                            $scope.initWMCasinoBettingLimit();
                        } else if (index === 3) {
                            $scope.initLegendCasinoBettingLimit();
                        } else if (index === 4) {
                            $scope.initSabaBettingLimit();
                        }
                    }, 1000)
                };
                $scope.initLotteryBettingLimit = function() {
                    network.Games.Lottery.UserGameSetting.getUserSettings({
                        UserId: item.Id
                    }).then(function(response) {
                        $scope.submitting = false;
                        response.sort(function(a, b) {
                            return a.GameType - b.GameType || a.BetType - b.BetType
                        });
                        $scope.agencyParams = response.groupBy(function(o) {
                            return JSON.stringify({
                                a: o.GameType
                            })
                        });
                        angular.forEach($scope.agencyParams, function(lotShare) {
                            if (msUtils.exists(lotShare.group[0].GameType, [1, 2, 3, 4])) {
                                let order = [7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 2, 3, 4];
                                lotShare.group.sort(function(a, b) {
                                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                                })
                            } else {
                                let order = [0, 1, 29, 2, 3, 4, 5, 6, 20, 21, 22, 23, 24, 25];
                                lotShare.group.sort(function(a, b) {
                                    return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                                })
                            }
                            angular.forEach(lotShare.group, function(bet) {
                                bet.warn = bet.MaxPointPerNumber > bet.TotalPointPerNumber;
                            })
                        })
                        $scope.backupParams = angular.copy(response);
                        $scope.$digest();
                    });
                };
                $scope.lotteryChangeValues = function(item, param) {
                    item.highlight = {};
                    let backup = $.grep($scope.backupParams, function(share) {
                        return share.GameType === item.GameType && share.BetType === item.BetType
                    })[0];
                    if (param === 'TotalPointPerNumber') {
                        if (item.TotalPointPerNumber > item.TotalPointPerNumber) {
                            item.TotalPointPerNumber = backup.TotalPointPerNumber;
                        }
                        item.highlight.TotalPointPerNumber = item.TotalPointPerNumber !== backup.TotalPointPerNumber
                    } else {
                        if (item.MaxPointPerNumber > item.Parent.MaxPointPerNumber) {
                            item.MaxPointPerNumber = backup.MaxPointPerNumber;
                        }
                        item.highlight.MaxPointPerNumber = item.MaxPointPerNumber !== backup.MaxPointPerNumber
                    }
                    item.warn = item.MaxPointPerNumber > item.TotalPointPerNumber
                };
                $scope.lotteryCopyRow = function(item) {
                    angular.forEach($scope.agencyParams, function(game) {
                        if (game.group[0].GameType === item.GameType) {
                            angular.forEach(game.group, function(bet) {
                                bet.highlight = {};
                                bet.highlight.MaxPointPerNumber = item.MaxPointPerNumber !== $.grep($scope.backupParams, function(share) {
                                    return share.GameType === bet.GameType && share.BetType === bet.BetType
                                })[0].MaxPointPerNumber;
                                bet.highlight.TotalPointPerNumber = item.TotalPointPerNumber !== $.grep($scope.backupParams, function(share) {
                                    return share.GameType === bet.GameType && share.BetType === bet.BetType
                                })[0].TotalPointPerNumber;
                                bet.MaxPointPerNumber = item.MaxPointPerNumber;
                                bet.TotalPointPerNumber = item.TotalPointPerNumber;
                                bet.warn = bet.MaxPointPerNumber > bet.TotalPointPerNumber;
                            })
                        }
                    })
                };
                $scope.lotteryUpdate = function() {
                    let errorSetting = 0;
                    let send = {
                        UserId: $scope.item.Id,
                        Settings: []
                    };
                    angular.forEach($scope.agencyParams, function(game) {
                        angular.forEach(game.group, function(bet) {
                            let backup = $.grep($scope.backupParams, function(share) {
                                return share.GameType === bet.GameType && share.BetType === bet.BetType
                            })[0];
                            let setting = {
                                GameType: bet.GameType,
                                BetType: bet.BetType,
                                Active: bet.Active,
                                MaxPointPerNumber: bet.MaxPointPerNumber,
                                TotalPointPerNumber: bet.TotalPointPerNumber
                            };
                            errorSetting += (bet.MaxPointPerNumber > bet.TotalPointPerNumber) ? 1 : 0;
                            if (bet.MaxPointPerNumber !== backup.MaxPointPerNumber || bet.TotalPointPerNumber !== backup.TotalPointPerNumber) {
                                send.Settings.push(setting)
                            }
                        })
                    });
                    if (errorSetting !== 0) {
                        message.infoMultiple('Tối đa trên 1 số phải lớn hơn hoặc bằng tối đa 1 lần cược.')
                        return;
                    }
                    if (send.Settings.length) {
                        $scope.submitting = true;
                        network.Games.Lottery.UserGameSetting.updateUserSettings(send).then(function(response) {
                            if (response) {
                                message.infoMultiple('Cập nhật thông số tài khoản thành công');
                                $scope.initLotteryBettingLimit();
                                $scope.submitting = false;
                            }
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple(error.message)
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                };
                $scope.initLegendBettingLimit = function() {
                    network.Games.Legend.UserGameSetting.getUserSettings({
                        UserId: item.Id
                    }).then(function(response) {
                        $scope.submitting = false;
                        response.sort(function(a, b) {
                            return a.GameType - b.GameType || a.BetType - b.BetType
                        });
                        $scope.agencyLegendParams = response.groupBy(function(o) {
                            return JSON.stringify({
                                a: o.GameType
                            })
                        });
                        let order = [0, 1, 29, 2, 3, 4, 5, 6, 21, 7, 8, 9, 15, 30, 16, 10, 11, 12, 17, 18, 19, 13, 14, 20, 26, 27, 28];
                        angular.forEach($scope.agencyLegendParams, function(lotShare) {
                            lotShare.group.sort(function(a, b) {
                                return order.indexOf(a.BetType) - order.indexOf(b.BetType)
                            })
                            angular.forEach(lotShare.group, function(bet) {
                                bet.warn = bet.MaxPointPerNumber > bet.TotalPointPerNumber;
                            })
                        })
                        $scope.backupParams = angular.copy(response);
                        $scope.$digest();
                    });
                }
                $scope.legendCopyRow = function(item) {
                    angular.forEach($scope.agencyLegendParams, function(game) {
                        if (game.group[0].GameType === item.GameType) {
                            angular.forEach(game.group, function(bet) {
                                bet.highlight = {};
                                bet.highlight.MaxPointPerNumber = item.MaxPointPerNumber !== $.grep($scope.backupParams, function(share) {
                                    return share.GameType === bet.GameType && share.BetType === bet.BetType
                                })[0].MaxPointPerNumber;
                                bet.highlight.TotalPointPerNumber = item.TotalPointPerNumber !== $.grep($scope.backupParams, function(share) {
                                    return share.GameType === bet.GameType && share.BetType === bet.BetType
                                })[0].TotalPointPerNumber;
                                bet.MaxPointPerNumber = item.MaxPointPerNumber;
                                bet.TotalPointPerNumber = item.TotalPointPerNumber;
                                bet.warn = bet.MaxPointPerNumber > bet.TotalPointPerNumber;
                            })
                        }
                    })
                }
                $scope.legendUpdate = function() {
                    let errorSetting = 0;
                    let send = {
                        UserId: $scope.item.Id,
                        Settings: []
                    };
                    angular.forEach($scope.agencyLegendParams, function(game) {
                        angular.forEach(game.group, function(bet) {
                            let backup = $.grep($scope.backupParams, function(share) {
                                return share.GameType === bet.GameType && share.BetType === bet.BetType
                            })[0];
                            let setting = {
                                GameType: bet.GameType,
                                BetType: bet.BetType,
                                Active: bet.Active,
                                MaxPointPerNumber: bet.MaxPointPerNumber,
                                TotalPointPerNumber: bet.TotalPointPerNumber
                            };
                            errorSetting += (bet.MaxPointPerNumber > bet.TotalPointPerNumber) ? 1 : 0;
                            if (bet.MaxPointPerNumber !== backup.MaxPointPerNumber || bet.TotalPointPerNumber !== backup.TotalPointPerNumber) {
                                send.Settings.push(setting)
                            }
                        })
                    });
                    if (errorSetting !== 0) {
                        message.infoMultiple('Tối đa trên 1 số phải lớn hơn hoặc bằng tối đa 1 lần cược.')
                        return;
                    }
                    if (send.Settings.length) {
                        $scope.submitting = true;
                        network.Games.Legend.UserGameSetting.updateUserSettings(send).then(function(response) {
                            if (response) {
                                message.infoMultiple('Cập nhật thông số tài khoản thành công');
                                $scope.initLegendBettingLimit();
                                $scope.submitting = false;
                            }
                        }).catch(function(error) {
                            $scope.submitting = false;
                            message.infoMultiple(error.message)
                        })
                    } else {
                        message.infoMultiple('Không có thông tin nào thay đổi để cập nhật')
                    }
                }
                $scope.WmCasinoPlayerGames = [{
                    Id: 101,
                    Name: "Baccarat",
                    Limits: [{
                        number: 61,
                        limit: "10K - 1M"
                    }, {
                        number: 62,
                        limit: "30K - 3M"
                    }, {
                        number: 63,
                        limit: "50K - 5M"
                    }, {
                        number: 64,
                        limit: "100K - 10M"
                    }, {
                        number: 65,
                        limit: "200K - 20M"
                    }, {
                        number: 66,
                        limit: "300K - 30M"
                    }, {
                        number: 67,
                        limit: "500K - 50M"
                    }, {
                        number: 68,
                        limit: "1M - 100M"
                    }, ]
                }, {
                    Id: 102,
                    Name: "DragonTiger",
                    Limits: [{
                        number: 73,
                        limit: "10K - 1M"
                    }, {
                        number: 74,
                        limit: "30K - 3M"
                    }, {
                        number: 75,
                        limit: "50K - 5M"
                    }, {
                        number: 76,
                        limit: "100K - 10M"
                    }, {
                        number: 77,
                        limit: "200K - 20M"
                    }, {
                        number: 78,
                        limit: "300K - 30M"
                    }, {
                        number: 79,
                        limit: "500K - 50M"
                    }, {
                        number: 80,
                        limit: "1M - 100M"
                    }, ]
                }, {
                    Id: 103,
                    Name: "Roulette",
                    Limits: [{
                        number: 85,
                        limit: "10K - 1M"
                    }, {
                        number: 86,
                        limit: "30K - 3M"
                    }, {
                        number: 87,
                        limit: "50K - 5M"
                    }, {
                        number: 88,
                        limit: "100K - 10M"
                    }, {
                        number: 89,
                        limit: "200K - 20M"
                    }, {
                        number: 90,
                        limit: "300K - 30M"
                    }, {
                        number: 91,
                        limit: "500K - 50M"
                    }, ]
                }, {
                    Id: 104,
                    Name: "Sicbo",
                    Limits: [{
                        number: 94,
                        limit: "10K - 1M"
                    }, {
                        number: 95,
                        limit: "30K - 3M"
                    }, {
                        number: 96,
                        limit: "50K - 5M"
                    }, {
                        number: 97,
                        limit: "100K - 10M"
                    }, {
                        number: 98,
                        limit: "200K - 20M"
                    }, {
                        number: 99,
                        limit: "300K - 30M"
                    }, {
                        number: 100,
                        limit: "500K - 50M"
                    }, ]
                }, {
                    Id: 105,
                    Name: "NiuNiu",
                    Limits: [{
                        number: 103,
                        limit: "10K - 1M"
                    }, {
                        number: 104,
                        limit: "30K - 3M"
                    }, {
                        number: 105,
                        limit: "50K - 5M"
                    }, {
                        number: 106,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 106,
                    Name: "SamGong",
                    Limits: [{
                        number: 116,
                        limit: "10K - 1M"
                    }, {
                        number: 117,
                        limit: "30K - 3M"
                    }, {
                        number: 118,
                        limit: "50K - 5M"
                    }, {
                        number: 119,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 107,
                    Name: "Fantan",
                    Limits: [{
                        number: 120,
                        limit: "10K - 1M"
                    }, {
                        number: 121,
                        limit: "30K - 3M"
                    }, {
                        number: 122,
                        limit: "50K - 5M"
                    }, {
                        number: 123,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 108,
                    Name: "Sedie",
                    Limits: [{
                        number: 233,
                        limit: "10K - 1M"
                    }, {
                        number: 234,
                        limit: "30K - 3M"
                    }, {
                        number: 235,
                        limit: "50K - 5M"
                    }, {
                        number: 236,
                        limit: "100K - 10M"
                    }, {
                        number: 237,
                        limit: "200K - 20M"
                    }, {
                        number: 238,
                        limit: "500K - 50M"
                    }, {
                        number: 239,
                        limit: "1M - 100M"
                    }, ]
                }, {
                    Id: 110,
                    Name: "FishShrimpCrab",
                    Limits: [{
                        number: 139,
                        limit: "10K - 1M"
                    }, {
                        number: 140,
                        limit: "30K - 3M"
                    }, {
                        number: 141,
                        limit: "50K - 5M"
                    }, {
                        number: 142,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 111,
                    Name: "GoldenFlower",
                    Limits: [{
                        number: 213,
                        limit: "10K - 1M"
                    }, {
                        number: 215,
                        limit: "50K - 5M"
                    }, {
                        number: 216,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 112,
                    Name: "WenzhouPaiGow",
                    Limits: [{
                        number: 337,
                        limit: "10K - 1M"
                    }, {
                        number: 338,
                        limit: "50K - 5M"
                    }, {
                        number: 339,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 113,
                    Name: "MahjongTiles",
                    Limits: [{
                        number: 347,
                        limit: "10K - 1M"
                    }, {
                        number: 348,
                        limit: "50K - 5M"
                    }, {
                        number: 349,
                        limit: "100K - 10M"
                    }, ]
                }, {
                    Id: 128,
                    Name: "AndarBahar",
                    Limits: [{
                        number: 591,
                        limit: "10K - 1M"
                    }, {
                        number: 592,
                        limit: "50K - 5M"
                    }, {
                        number: 593,
                        limit: "100K - 10M"
                    }, ]
                }];
                $scope.initWMCasinoBettingLimit = function() {
                    network.Games.WMCasino.UserGame.getUserGame({
                        UserId: item.Id,
                        IncludeParent: true
                    }).then(function(response) {
                        response.MaxLoseAmount = response.MaxLoseAmount / 1000;
                        response.MaxWinAmount = response.MaxWinAmount / 1000;
                        $scope.submitting = false;
                        $scope.WMCasinoBettingLimit = response;
                        $scope.WMCasinoPlayerLimit(response);
                        $scope.$digest();
                    })
                };
                $scope.WMCasinoRequired = function(number) {
                    return msUtils.exists(number, [63, 75, 87, 96, 105, 118, 122, 235, 141, 215, 338, 348, 592])
                }
                $scope.WMCasinoPlayerLimit = function(data) {
                    angular.forEach($scope.WmCasinoPlayerGames, function(game) {
                        game.Limits = $.grep(game.Limits, function(lim) {
                            return msUtils.exists(lim.number, data.Parent.PlayerBetLimits)
                        })
                        angular.forEach(game.Limits, function(limit) {
                            limit.active = msUtils.exists(limit.number, data.PlayerBetLimits)
                        })
                    });
                    $scope.WmCasinoPLayerDone = true;
                    $scope.submitting = false;
                    $scope.$digest();
                };
                $scope.WMCasinoChangePlayerLimit = function(gameId, limitNumber) {
                    if (msUtils.exists(limitNumber, [63, 75, 87, 96, 105, 118, 122, 235, 141, 215, 338, 348])) {
                        return;
                    }
                    angular.forEach($scope.WmCasinoPlayerGames, function(game) {
                        if (game.Id === gameId) {
                            angular.forEach(game.Limits, function(limit, index) {
                                if (limit.number === limitNumber) {
                                    limit.active = !limit.active
                                }
                            })
                        }
                    })
                };
                $scope.wmCasinoChangeBettingLimit = function(index) {
                    let value = index === 'Lose' ? $scope.WMCasinoBettingLimit.MaxLoseAmount : $scope.WMCasinoBettingLimit.MaxWinAmount;
                    if (index === 'Lose') {
                        if ($scope.WMCasinoBettingLimit.Parent.MaxLoseAmount !== 0 && (value * 1000 > $scope.WMCasinoBettingLimit.Parent.MaxLoseAmount || value === 0)) {
                            $scope.WMCasinoBettingLimit.MaxLoseAmount = $scope.WMCasinoBettingLimit.Parent.MaxLoseAmount / 1000;
                            message.infoMultiple('Không được cài vượt giá trị cấp trên');
                        }
                    } else {
                        if ($scope.WMCasinoBettingLimit.Parent.MaxWinAmount !== 0 && (value * 1000 > $scope.WMCasinoBettingLimit.Parent.MaxWinAmount || value === 0)) {
                            $scope.WMCasinoBettingLimit.MaxWinAmount = $scope.WMCasinoBettingLimit.Parent.MaxWinAmount / 1000;
                            message.infoMultiple('Không được cài vượt giá trị cấp trên');
                        }
                    }
                    if (value > 0 && value < 2000) {
                        if (index === 'Lose') {
                            $scope.WMCasinoBettingLimit.MaxLoseAmount = 2000;
                            message.infoMultiple('Tiền thua nhỏ nhất phải là 2 triệu');
                        } else {
                            $scope.WMCasinoBettingLimit.MaxWinAmount = 2000;
                            message.infoMultiple('Tiền thắng nhỏ nhất phải là 2 triệu');
                        }
                    }
                }
                $scope.enablePlayerBet = function(item) {
                    if (!vm.hasWritePermission) {
                        return
                    }
                    $mdDialog.show({
                        controller: enablePlayerBetCtrl,
                        templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: $event,
                        multiple: true,
                        clickOutsideToClose: true,
                        locals: {
                            item: item
                        }
                    });

                    function enablePlayerBetCtrl($rootScope, $scope, $mdDialog, item) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.title = 'Yêu cầu xác nhận';
                        $scope.textContent = 'Xác nhận Mở cược cho hội viên?';
                        $scope.done = function() {
                            $scope.submitting = true;
                            network.Games.WMCasino.UserGame.enablePlayerBet({
                                UserId: item.Id
                            }).then(function(resp) {
                                message.infoMultiple('Cập nhật khoản thành công');
                                $mdDialog.cancel();
                            }).catch(function(err) {
                                message.infoMultiple(err.message + '.<br> Quý khách vui lòng thử lại');
                            })
                        }
                    }
                };
                $scope.resetPlayerWinLoseStats = function(item) {
                    if (!vm.hasWritePermission) {
                        return
                    }
                    $mdDialog.show({
                        controller: resetPlayerWinLoseStatsCtrl,
                        templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: $event,
                        multiple: true,
                        clickOutsideToClose: true,
                        locals: {
                            item: item
                        }
                    });

                    function resetPlayerWinLoseStatsCtrl($rootScope, $scope, $mdDialog, item) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.title = 'Yêu cầu xác nhận';
                        $scope.textContent = 'Xác nhận Reset giới hạn thắng thua cho hội viên?';
                        $scope.done = function() {
                            $scope.submitting = true;
                            network.Games.WMCasino.UserGame.resetPlayerWinLoseStats({
                                UserId: item.Id
                            }).then(function(resp) {
                                message.infoMultiple('Cập nhật khoản thành công');
                                $mdDialog.cancel();
                            }).catch(function(err) {
                                message.infoMultiple(err.message + '.<br> Quý khách vui lòng thử lại');
                            })
                        }
                    }
                };
                $scope.WMCasinoUpdate = function() {
                    $scope.stopSend = false
                    for (let i = 0; i < $scope.WmCasinoPlayerGames.length; i++) {
                        let countLim = $scope.WmCasinoPlayerGames[i].Limits.filter(function(a) {
                            return a.active
                        })
                        if (countLim.length === 0) {
                            $scope.stopSend = true
                            break;
                        }
                    }
                    if ($scope.stopSend) {
                        message.infoMultiple('Mỗi game cần phải kích hoạt tối thiểu một mức cược.');
                        return;
                    }
                    if (($scope.WMCasinoBettingLimit.MaxWinAmount > 0 && $scope.WMCasinoBettingLimit.MaxWinAmount < 2000) || ($scope.WMCasinoBettingLimit.MaxLoseAmount > 0 && $scope.WMCasinoBettingLimit.MaxLoseAmount < 2000)) {
                        message.infoMultiple('Tiền thắng/thua tối đa phải cài giá trị nhỏ nhất là 2 triệu');
                        return;
                    }
                    if (($scope.WMCasinoBettingLimit.Parent.MaxWinAmount !== 0 && ($scope.WMCasinoBettingLimit.MaxWinAmount * 1000 > $scope.WMCasinoBettingLimit.Parent.MaxWinAmount || $scope.WMCasinoBettingLimit.MaxWinAmount === 0))) {
                        message.infoMultiple('Tiền thắng tối đa không được cài vượt giá trị cấp trên (' + $scope.WMCasinoBettingLimit.Parent.MaxWinAmount / 1000 + ')');
                        return;
                    }
                    if (($scope.WMCasinoBettingLimit.Parent.MaxLoseAmount !== 0 && ($scope.WMCasinoBettingLimit.MaxLoseAmount * 1000 > $scope.WMCasinoBettingLimit.Parent.MaxLoseAmount || $scope.WMCasinoBettingLimit.MaxLoseAmount === 0))) {
                        message.infoMultiple('Tiền thua tối đa không được cài vượt giá trị cấp trên (' + $scope.WMCasinoBettingLimit.Parent.MaxLoseAmount / 1000 + ')');
                        return;
                    }
                    $scope.submitting = true;
                    let data = {
                        UserId: item.Id,
                        MaxWinAmount: $scope.WMCasinoBettingLimit.MaxWinAmount * 1000,
                        MaxLoseAmount: $scope.WMCasinoBettingLimit.MaxLoseAmount * 1000
                    };
                    let param = {
                        Baccarat: [],
                        DragonTiger: [],
                        Roulette: [],
                        Sicbo: [],
                        NiuNiu: [],
                        SamGong: [],
                        Fantan: [],
                        Sedie: [],
                        FishShrimpCrab: [],
                        GoldenFlower: [],
                        WenzhouPaiGow: [],
                        MahjongTiles: [],
                        AndarBahar: [],
                    };
                    for (var key in param) {
                        if (param.hasOwnProperty(key) && key !== 'UserId') {
                            angular.forEach($scope.WmCasinoPlayerGames, function(game) {
                                if (game.Name === key) {
                                    angular.forEach(game.Limits, function(limit) {
                                        if (limit.active) {
                                            param[key].push(limit.number)
                                        }
                                    })
                                }
                            })
                        }
                    }
                    data.PlayerBetLimits = param
                    network.Games.WMCasino.UserGame.updateUserGame(data).then(function(response) {
                        $scope.submitting = false;
                        message.infoMultiple('Cập nhật khoản thành công');
                    }).catch(function(error) {
                        $scope.submitting = false;
                        message.infoMultiple(error.message)
                    })
                };
                $scope.LegendCasinoPlayersGames = [{
                    number: 1,
                    limit: "10K - 1M"
                }, {
                    number: 2,
                    limit: "20K - 2M"
                }, {
                    number: 3,
                    limit: "50K - 5M"
                }, {
                    number: 4,
                    limit: "100K - 10M"
                }, {
                    number: 5,
                    limit: "200K - 20M"
                }, {
                    number: 6,
                    limit: "500K - 50M"
                }, {
                    number: 7,
                    limit: "1M - 100M"
                }, {
                    number: 8,
                    limit: "2M - 200M"
                }, {
                    number: 9,
                    limit: "5M - 500M"
                }, {
                    number: 10,
                    limit: "10M - 1B"
                }, {
                    number: 11,
                    limit: "20M - 2B"
                }, {
                    number: 12,
                    limit: "50M - 5B"
                }, {
                    number: 13,
                    limit: "100M - 10B"
                }, ]
                $scope.initLegendCasinoBettingLimit = function() {
                    network.Games.LegendCasino.UserGame.getUserGame({
                        UserId: item.Id,
                        IncludeParent: true
                    }).then(function(response) {
                        response.MaxLoseAmount = response.MaxLoseAmount / 1000;
                        response.MaxWinAmount = response.MaxWinAmount / 1000;
                        $scope.submitting = false;
                        $scope.LegendCasinoBettingLimit = response;
                        $scope.LegendCasinoPlayerLimit(response);
                        $scope.$digest();
                    })
                }
                $scope.LegendCasinoPlayerLimit = function(data) {
                    $scope.LegendCasinoPlayersGames = $.grep($scope.LegendCasinoPlayersGames, function(lim) {
                        return msUtils.exists(lim.number, data.Parent.PlayerBetLimits)
                    })
                    angular.forEach($scope.LegendCasinoPlayersGames, function(limit) {
                        limit.active = msUtils.exists(limit.number, data.PlayerBetLimits)
                    })
                    $scope.LegendCasinoPLayerDone = true;
                    $scope.submitting = false;
                    $scope.$digest();
                }
                $scope.LegendCasinoChangePlayerLimit = function(limitNumber) {
                    angular.forEach($scope.LegendCasinoPlayersGames, function(limit, index) {
                        if (limit.number === limitNumber) {
                            limit.active = !limit.active
                        }
                    })
                }
                $scope.LegendCasinoChangeBettingLimit = function(index) {
                    let value = index === 'Lose' ? $scope.LegendCasinoBettingLimit.MaxLoseAmount : $scope.LegendCasinoBettingLimit.MaxWinAmount;
                    if (index === 'Lose') {
                        if ($scope.LegendCasinoBettingLimit.Parent.MaxLoseAmount !== 0 && (value * 1000 > $scope.LegendCasinoBettingLimit.Parent.MaxLoseAmount || value === 0)) {
                            $scope.LegendCasinoBettingLimit.MaxLoseAmount = $scope.LegendCasinoBettingLimit.Parent.MaxLoseAmount / 1000;
                            message.infoMultiple('Không được cài vượt giá trị cấp trên');
                        }
                    } else {
                        if ($scope.LegendCasinoBettingLimit.Parent.MaxWinAmount !== 0 && (value * 1000 > $scope.LegendCasinoBettingLimit.Parent.MaxWinAmount || value === 0)) {
                            $scope.LegendCasinoBettingLimit.MaxWinAmount = $scope.LegendCasinoBettingLimit.Parent.MaxWinAmount / 1000;
                            message.infoMultiple('Không được cài vượt giá trị cấp trên');
                        }
                    }
                    if (value > 0 && value < 2000) {
                        if (index === 'Lose') {
                            $scope.LegendCasinoBettingLimit.MaxLoseAmount = 2000;
                            message.infoMultiple('Tiền thua nhỏ nhất phải là 2 triệu');
                        } else {
                            $scope.LegendCasinoBettingLimit.MaxWinAmount = 2000;
                            message.infoMultiple('Tiền thắng nhỏ nhất phải là 2 triệu');
                        }
                    }
                }
                $scope.LegendCasinoResetPlayerWinLoseStats = function(item) {
                    if (!vm.hasWritePermission) {
                        return
                    }
                    $mdDialog.show({
                        controller: LegendResetPlayerWinLoseStatsCtrl,
                        templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                        parent: angular.element(document.body),
                        targetEvent: $event,
                        multiple: true,
                        clickOutsideToClose: true,
                        locals: {
                            item: item
                        }
                    });

                    function LegendResetPlayerWinLoseStatsCtrl($rootScope, $scope, $mdDialog, item) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        $scope.title = 'Yêu cầu xác nhận';
                        $scope.textContent = 'Xác nhận Reset giới hạn thắng thua cho hội viên?';
                        $scope.done = function() {
                            $scope.submitting = true;
                            network.Games.LegendCasino.UserGame.resetPlayerWinLoseStats({
                                UserId: item.Id
                            }).then(function(resp) {
                                message.infoMultiple('Cập nhật khoản thành công');
                                $mdDialog.cancel();
                            }).catch(function(err) {
                                message.infoMultiple(err.message + '.<br> Quý khách vui lòng thử lại');
                            })
                        }
                    }
                }
                $scope.LegendCasinoUpdate = function() {
                    let countLim = $scope.LegendCasinoPlayersGames.filter(function(a) {
                        return a.active
                    })
                    if (countLim.length === 0) {
                        message.infoMultiple('Cần phải kích hoạt tối thiểu một mức cược.');
                        return;
                    }
                    if (($scope.LegendCasinoBettingLimit.MaxWinAmount > 0 && $scope.LegendCasinoBettingLimit.MaxWinAmount < 2000) || ($scope.LegendCasinoBettingLimit.MaxLoseAmount > 0 && $scope.LegendCasinoBettingLimit.MaxLoseAmount < 2000)) {
                        message.infoMultiple('Tiền thắng/thua tối đa phải cài giá trị nhỏ nhất là 2 triệu');
                        return;
                    }
                    if (($scope.LegendCasinoBettingLimit.Parent.MaxWinAmount !== 0 && ($scope.LegendCasinoBettingLimit.MaxWinAmount * 1000 > $scope.LegendCasinoBettingLimit.Parent.MaxWinAmount || $scope.LegendCasinoBettingLimit.MaxWinAmount === 0))) {
                        message.infoMultiple('Tiền thắng tối đa không được cài vượt giá trị cấp trên (' + $scope.LegendCasinoBettingLimit.Parent.MaxWinAmount / 1000 + ')');
                        return;
                    }
                    if (($scope.LegendCasinoBettingLimit.Parent.MaxLoseAmount !== 0 && ($scope.LegendCasinoBettingLimit.MaxLoseAmount * 1000 > $scope.LegendCasinoBettingLimit.Parent.MaxLoseAmount || $scope.LegendCasinoBettingLimit.MaxLoseAmount === 0))) {
                        message.infoMultiple('Tiền thua tối đa không được cài vượt giá trị cấp trên (' + $scope.LegendCasinoBettingLimit.Parent.MaxLoseAmount / 1000 + ')');
                        return;
                    }
                    $scope.submitting = true;
                    let data = {
                        UserId: item.Id,
                        MaxWinAmount: $scope.LegendCasinoBettingLimit.MaxWinAmount * 1000,
                        MaxLoseAmount: $scope.LegendCasinoBettingLimit.MaxLoseAmount * 1000,
                        ResetStatsDaily: $scope.LegendCasinoBettingLimit.ResetStatsDaily
                    };
                    let param = [];
                    angular.forEach($scope.LegendCasinoPlayersGames, function(limit) {
                        if (limit.active) {
                            param.push(limit.number)
                        }
                    })
                    data.PlayerBetLimits = param
                    network.Games.LegendCasino.UserGame.updateUserGame(data).then(function(response) {
                        $scope.submitting = false;
                        message.infoMultiple('Cập nhật khoản thành công');
                    }).catch(function(error) {
                        $scope.submitting = false;
                        message.infoMultiple(error.message)
                    })
                }
                $scope.initSabaBettingLimit = function() {
                    $scope.SabaBettingLimits = [];
                    Lotus.Saba.BetLimit.getUserBetLimit({
                        UserId: item.Id,
                        IncludeParent: true
                    }).then(function(response) {
                        $scope.sabaPlayerUsername = response.PlayerUsername;
                        $scope.submitting = false;
                        Object.keys(response).forEach(function(key) {
                            if (key !== 'Parent' && key !== 'PlayerUsername') {
                                Object.keys(response[key]).forEach(function(k) {
                                    response[key][k] = response[key][k] / 1000
                                })
                                $scope.SabaBettingLimits.push({
                                    name: key,
                                    value: response[key],
                                    highlight: {},
                                    warn: {}
                                })
                            }
                        });
                        $scope.BackupSabaBettingLimits = angular.copy(response);
                        $scope.$digest();
                    })
                }
                $scope.sabaChangeValues = function(item, param) {
                    item.highlight[param] = item.value[param] !== $scope.BackupSabaBettingLimits[item.name][param]
                    item.warn.MinBet = (item.value.MinBet > item.value.MaxBet) || (item.value.MinBet * 1000 < $scope.BackupSabaBettingLimits.Parent[item.name].MinBet);
                    item.warn.MaxBet = (item.value.MaxBet > item.value.MaxBetPerMatch) || (item.value.MaxBet * 1000 > $scope.BackupSabaBettingLimits.Parent[item.name].MaxBet);
                    item.warn.MaxBetPerMatch = item.value.MaxBetPerMatch * 1000 > $scope.BackupSabaBettingLimits.Parent[item.name].MaxBetPerMatch;
                    item.warn.MaxBetPerBall = (item.value.MaxBetPerBall > item.value.MaxBetPerMatch) || (item.value.MaxBetPerBall * 1000 > $scope.BackupSabaBettingLimits.Parent[item.name].MaxBetPerBall);
                    $scope.checkError();
                }
                $scope.sabaCopyRow = function(item) {
                    $scope.SabaBettingLimits.map(function(bet) {
                        bet.value.MinBet = item.value.MinBet < $scope.BackupSabaBettingLimits.Parent[bet.name].MinBet / 1000 ? $scope.BackupSabaBettingLimits.Parent[bet.name].MinBet / 1000 : item.value.MinBet;
                        bet.value.MaxBet = item.value.MaxBet > $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBet / 1000 ? $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBet / 1000 : item.value.MaxBet;
                        bet.value.MaxBetPerMatch = (item.value.MaxBetPerMatch > $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBetPerMatch / 1000) || (item.value.MaxBetPerMatch < bet.value.MaxBetPerBall) ? $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBetPerMatch / 1000 : item.value.MaxBetPerMatch;
                        Object.keys(bet.value).forEach(function(key) {
                            bet.highlight[key] = bet.value[key] !== $scope.BackupSabaBettingLimits[bet.name][key]
                        })
                        bet.warn.MinBet = (bet.value.MinBet > bet.value.MaxBet) || (bet.value.MinBet * 1000 < $scope.BackupSabaBettingLimits.Parent[bet.name].MinBet);
                        bet.warn.MaxBet = (bet.value.MaxBet > bet.value.MaxBetPerMatch) || (bet.value.MaxBet * 1000 > $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBet);
                        bet.warn.MaxBetPerMatch = bet.value.MaxBetPerMatch * 1000 > $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBetPerMatch;
                        bet.warn.MaxBetPerBall = (bet.value.MaxBetPerBall > bet.value.MaxBetPerMatch) || (bet.value.MaxBetPerBall * 1000 > $scope.BackupSabaBettingLimits.Parent[bet.name].MaxBetPerBall);
                    })
                    $scope.checkError()
                }
                $scope.checkError = function() {
                    let check = 0;
                    $scope.SabaBettingLimits.map(function(item) {
                        Object.keys(item.warn).forEach(function(key) {
                            if (item.warn[key]) {
                                check++
                            }
                        });
                    })
                    $scope.hasError = check !== 0;
                }
                $scope.sabaUpdate = function() {
                    $scope.dataUpdate = [];
                    $scope.countError = 0;
                    for (let i = 0; i < $scope.SabaBettingLimits.length; i++) {
                        let item = $scope.SabaBettingLimits[i];
                        if (item.value.MinBet * 1000 < $scope.BackupSabaBettingLimits.Parent[item.name].MinBet) {
                            message.infoMultiple('MinBet của ' + item.name + ' không được nhỏ hơn ' + $filter('currency')($scope.BackupSabaBettingLimits.Parent[item.name].MinBet, '', 0))
                            $scope.countError++;
                            break;
                        }
                        if (item.value.MaxBet * 1000 > $scope.BackupSabaBettingLimits.Parent[item.name].MaxBet) {
                            message.infoMultiple('MaxBet của ' + item.name + ' không được lớn hơn ' + $filter('currency')($scope.BackupSabaBettingLimits.Parent[item.name].MaxBet, '', 0))
                            $scope.countError++;
                            break;
                        }
                        if (item.value.MaxBetPerMatch * 1000 > $scope.BackupSabaBettingLimits.Parent[item.name].MaxBetPerMatch) {
                            message.infoMultiple('MaxBetPerMatch của ' + item.name + ' không được lớn hơn ' + $filter('currency')($scope.BackupSabaBettingLimits.Parent[item.name].MaxBetPerMatch, '', 0))
                            $scope.countError++;
                            break;
                        }
                        if (item.value.MaxBetPerBall * 1000 > $scope.BackupSabaBettingLimits.Parent[item.name].MaxBetPerBall) {
                            message.infoMultiple('MaxBetPerBall của ' + item.name + ' không được lớn hơn ' + $filter('currency')($scope.BackupSabaBettingLimits.Parent[item.name].MaxBetPerBall, '', 0))
                            $scope.countError++;
                            break;
                        }
                        let changed = $scope.sabaIsChanged($scope.SabaBettingLimits[i])
                        if (changed) {
                            $scope.SabaBettingLimits[i].process = 'processing';
                            $scope.dataUpdate.push($scope.SabaBettingLimits[i])
                        }
                    }
                    if ($scope.countError !== 0) {
                        return
                    }
                    if ($scope.dataUpdate.length) {
                        $scope.processSettings($scope.dataUpdate)
                    } else {
                        if ($scope.countError === 0) {
                            message.infoMultiple('Không có dữ liệu thay đổi')
                        }
                    }
                }
                $scope.sabaIsChanged = function(item) {
                    return (item.value.MinBet !== $scope.BackupSabaBettingLimits[item.name].MinBet) || (item.value.MaxBet !== $scope.BackupSabaBettingLimits[item.name].MaxBet) || (item.value.MaxBetPerMatch !== $scope.BackupSabaBettingLimits[item.name].MaxBetPerMatch) || (item.value.MaxBetPerBall !== $scope.BackupSabaBettingLimits[item.name].MaxBetPerBall)
                }
                $scope.processSettings = function(settings) {
                    let cs = settings.filter(function(item) {
                        return item.process === 'processing'
                    });
                    if (cs.length === 0) {
                        $scope.submitting = false;
                        message.infoMultiple('Cập nhật thành công');
                        $scope.initSabaBettingLimit();
                    } else {
                        let send = {
                            UserId: $scope.item.Id,
                            SportType: $filter('sabaSportType')(cs[0].name),
                            Setting: {
                                MinBet: cs[0].value.MinBet * 1000,
                                MaxBet: cs[0].value.MaxBet * 1000,
                                MaxBetPerMatch: cs[0].value.MaxBetPerMatch * 1000
                            }
                        }
                        if (cs[0].name === 'NumberGame') {
                            send.Setting.MaxBetPerBall = cs[0].value.MaxBetPerBall * 1000
                        }
                        $scope.submitting = true;
                        Lotus.Saba.BetLimit.updateUserBetLimit(send).then(function(response) {
                            if (response.Result) {
                                $scope.SabaBettingLimits.map(function(item) {
                                    if (item.name === cs[0].name) {
                                        item.process = 'processed';
                                    }
                                })
                                $timeout(function() {
                                    $scope.$digest();
                                })
                                $timeout(function() {
                                    $scope.processSettings(settings)
                                }, 500)
                            }
                        }).catch(function(error) {
                            message.infoMultiple(error.message);
                            $scope.submitting = false;
                        })
                    }
                }
                $scope.update = function() {
                    if ($scope.tabIndex === 0) {
                        $scope.lotteryUpdate()
                    } else if ($scope.tabIndex === 1) {
                        $scope.legendUpdate();
                    } else if ($scope.tabIndex === 2) {
                        $scope.WMCasinoUpdate();
                    } else if ($scope.tabIndex === 3) {
                        $scope.LegendCasinoUpdate();
                    } else if ($scope.tabIndex === 4) {
                        $scope.sabaUpdate();
                    }
                }
            }
        }

        function productionManager(item, $event) {
            $mdDialog.show({
                controller: productionManagerCtrl,
                templateUrl: 'app/main/account/agency/dialog/production-manager.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                fullscreen: true,
                locals: {
                    item: item
                }
            });

            function productionManagerCtrl($rootScope, $scope, $mdDialog, msUtils, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.productAdded = [];
                $scope.productRemoved = [];
                $scope.accountInfo = item;
                network.UserProduction.getUserProducts({
                    UserId: item.Id,
                    IncludeParent: true
                }).then(function(response) {
                    if (response) {
                        response.ParentProducts = response.ParentProducts.filter(function(item) {
                            return item !== 3
                        })
                        response.Products = response.Products.filter(function(item) {
                            return item !== 3
                        })
                    }
                    $scope.originalData = angular.copy(response);
                    $scope.ParentProducts = response.ParentProducts;
                    $scope.Products = response.Products;
                    $scope.$digest();
                });
                $scope.toggle = function(item, list) {
                    var idx = list.indexOf(item);
                    if (idx > -1) {
                        list.splice(idx, 1);
                    } else {
                        list.push(item);
                    }
                    $scope.checkProductionChanged();
                };
                $scope.exists = function(item, list) {
                    return list.indexOf(item) > -1;
                };
                $scope.checkProductionChanged = function() {
                    $scope.productAdded = [];
                    $scope.productRemoved = [];
                    angular.forEach($scope.Products, function(np) {
                        if (!msUtils.exists(np, $scope.originalData.Products)) {
                            $scope.productAdded.push(np)
                        }
                    });
                    $scope.addDescendantsAvailable = $scope.productAdded.length !== 0;
                    angular.forEach($scope.originalData.Products, function(op) {
                        if (!msUtils.exists(op, $scope.Products)) {
                            $scope.productRemoved.push(op)
                        }
                    });
                    $scope.forceSignOutAvailable = $scope.productRemoved.length !== 0;
                };
                $scope.conditionUpdate = function() {
                    return ($scope.productAdded.length === 0 && $scope.productRemoved.length === 0)
                };
                $scope.submit = function() {
                    $scope.submitting = true;
                    let data = {
                        UserId: item.Id
                    };
                    if ($scope.productAdded.length) {
                        data.AddProducts = $scope.productAdded;
                        if (item.Level !== 9 && $scope.addDescendantsAvailable) {
                            data.AddProductForDescendants = $scope.AddProductForDescendants;
                        }
                    }
                    if ($scope.productRemoved.length) {
                        data.RemoveProducts = $scope.productRemoved
                    }
                    network.UserProduction.updateUserProduct(data).then(function(response) {
                        $mdDialog.cancel();
                        message.info('Cập nhật tài khoản thành công');
                        if ($scope.forceSignOutAvailable) {
                            $scope.forceSignOutDescendants();
                        }
                    }).catch(function(error) {
                        message.infoMultiple(error.message);
                        $scope.submitting = true;
                    })
                };
                $scope.forceSignOutDescendants = function() {
                    let data = {
                        UserId: item.Id
                    };
                    data.IncludedDescendants = item.Level !== 9;
                    network.User.forceSignOut(data).then(function(response) {}).catch(function(error) {
                        console.log(error)
                    })
                }
            }
        }

        function changeBiography(item, $event) {
            $mdDialog.show({
                controller: biographyCtrl,
                templateUrl: 'app/main/account/agency/dialog/biography.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function biographyCtrl($scope, $mdDialog, $mdMedia, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.$mdMedia = $mdMedia;
                $scope.accountInfo = item;
                $scope.submit = function() {
                    $scope.submitting = true;
                    let data = {
                        userId: item.Id,
                        fullName: $scope.accountInfo.FullName,
                        about: $scope.accountInfo.About
                    };
                    network.User.updateUserProfile(data).then(function(resp) {
                        $scope.cancel();
                        message.message('Cập nhật thông tin tài khoản thành công')
                    }).catch(function(err) {
                        message.alert(err.message)
                    })
                }
            }
        }

        function findMemberAccount(ArIem) {
            let countMember = 0;
            ArIem.map(function(item) {
                countMember = item.Level === 9 ? countMember + 1 : countMember;
            })
            vm.hasMember = countMember !== 0;
        }

        function getSabaBalance(item) {
            vm.inProcessing = true;
            Lotus.Saba.Wallet.getPlayerBalance({
                UserId: item.Id
            }).then(function(response) {
                item.SabaBalance = response.Balance / 1000;
                $timeout(function() {
                    vm.inProcessing = false;
                    $scope.$digest();
                }, 100);
            }).catch(function(error) {
                $timeout(function() {
                    vm.inProcessing = false;
                }, 10);
                if (error.code === 'DataNotFoundException') {
                    message.info('Tài khoản này chưa từng chuyển tiền sang Bong88')
                } else if (error.code === 'GameMaintainanceException') {
                    message.info('Bong88 đang bảo trì')
                } else {
                    message.info('Lỗi không xác định')
                    console.log(error);
                }
            })
        }

        function resetSabaBalance(item, $event) {
            $mdDialog.show({
                controller: resetSabaCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function resetSabaCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Rút toàn bộ số dư';
                $scope.textContent = 'Quý khách xác nhận sẽ toàn bộ số dư của tài khoản ' + item.Username + ' ở BONG88 về?';
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.Saba.Wallet.resetPlayerBalance({
                        UserId: item.Id
                    }).then(function(response) {
                        let resetMoney = angular.copy(response.Balance / 1000 - item.Balance);
                        item.Balance = response.Balance / 1000;
                        item.SabaBalance = item.SabaBalance - resetMoney;
                        $mdDialog.cancel();
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }

        function creditRecovery(item, $event) {
            if (!vm.hasWritePermission) {
                return
            }
            $mdDialog.show({
                controller: suspendAccountCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function suspendAccountCtrl($rootScope, $scope, $mdDialog, item) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = 'Rút tín dụng';
                $scope.textContent = 'Quý khách muốn rút tín dụng cho tài khoản ' + item.Username;
                $scope.done = function() {
                    $scope.submitting = true;
                    Lotus.User.Current.block({
                        UserId: item.Id,
                        ResetDownlineCreditLimit: true
                    }).then(function(response) {
                        if (response.Result !== 0) {
                            item.Blocked = true;
                            item.Balance = 0;
                            item.CreditLimit = 0;
                        }
                        message.info('Rút tín dụng tài khoản ' + item.Username + ' thành công')
                    }).catch(function(err) {
                        message.info(err.message)
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core', ['ngAnimate', 'ngAria', 'ngCookies', 'ngMessages', 'ngResource', 'ngSanitize', 'ngMaterial', 'pascalprecht.translate', 'ui.router', 'ngclipboard', 'ng-currency', 'ngMaterialDatePicker', 'nsPopover', 'angularMoment', 'otpInputDirective', 'ckeditor', 'drahak.hotkeys', 'angular-google-analytics', 'ja.qr', ]);
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msPasswordExpired', msPasswordExpiredDirective);

    function msPasswordExpiredDirective($document) {
        return {
            restrict: 'E',
            scope: {},
            transclude: true,
            templateUrl: 'app/core/directives/password-expired-soon/password-expired-soon.html',
            link: function(scope, iElement) {
                var body = $document.find('body'),
                    bodyClass = 'ms-password-expired-active';
                body.addClass(bodyClass);

                function removeInfoBar() {
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                scope.removeInfoBar = removeInfoBar;
            }
        }
    }
})();
(function(window, angular, undefined) {
    'use strict';
    var $el = angular.element;
    var $popovers = [];
    var globalId = 0;
    var isDef = angular.isDefined;
    var module = angular.module('nsPopover', []);
    module.provider('nsPopover', function() {
        var defaults = {
            angularEvent: null,
            container: 'body',
            hideOnButtonClick: true,
            hideOnInsideClick: false,
            hideOnOutsideClick: true,
            mouseRelative: '',
            onClose: angular.noop,
            onOpen: angular.noop,
            placement: 'bottom',
            plain: 'false',
            popupDelay: 0,
            restrictBounds: false,
            scopeEvent: null,
            template: '',
            theme: 'ns-popover-tooltip-theme',
            timeout: 300,
            trigger: 'click',
            triggerPrevent: true
        };
        this.setDefaults = function(newDefaults) {
            angular.extend(defaults, newDefaults);
        };
        this.$get = function() {
            return {
                getDefaults: function() {
                    return defaults;
                }
            };
        };
    });
    module.directive('nsPopover', ['nsPopover', '$rootScope', '$timeout', '$templateCache', '$q', '$http', '$compile', '$document', '$parse', function(nsPopover, $rootScope, $timeout, $templateCache, $q, $http, $compile, $document, $parse) {
        return {
            restrict: 'A',
            scope: true,
            link: function(scope, elm, attrs) {
                var $container;
                var $popover;
                var $triangle;
                var align_;
                var defaults = nsPopover.getDefaults();
                var displayer_;
                var hider_;
                var match;
                var options = {
                    angularEvent: attrs.nsPopoverAngularEvent || defaults.angularEvent,
                    container: attrs.nsPopoverContainer || defaults.container,
                    group: attrs.nsPopoverGroup,
                    hideOnButtonClick: toBoolean(attrs.nsPopoverHideOnButtonClick || defaults.hideOnButtonClick),
                    hideOnInsideClick: toBoolean(attrs.nsPopoverHideOnInsideClick || defaults.hideOnInsideClick),
                    hideOnOutsideClick: toBoolean(attrs.nsPopoverHideOnOutsideClick || defaults.hideOnOutsideClick),
                    mouseRelative: attrs.nsPopoverMouseRelative,
                    onClose: $parse(attrs.nsPopoverOnClose) || defaults.onClose,
                    onOpen: $parse(attrs.nsPopoverOnOpen) || defaults.onOpen,
                    placement: attrs.nsPopoverPlacement || defaults.placement,
                    plain: toBoolean(attrs.nsPopoverPlain || defaults.plain),
                    popupDelay: attrs.nsPopoverPopupDelay || defaults.popupDelay,
                    restrictBounds: Boolean(attrs.nsPopoverRestrictBounds) || defaults.restrictBounds,
                    scopeEvent: attrs.nsPopoverScopeEvent || defaults.scopeEvent,
                    template: attrs.nsPopoverTemplate || defaults.template,
                    theme: attrs.nsPopoverTheme || defaults.theme,
                    timeout: attrs.nsPopoverTimeout || defaults.timeout,
                    trigger: attrs.nsPopoverTrigger || defaults.trigger,
                    triggerPrevent: attrs.nsPopoverTriggerPrevent || defaults.triggerPrevent,
                };
                var placement_;
                var unregisterActivePopoverListeners;
                var unregisterDisplayMethod;
                if (options.mouseRelative) {
                    options.mouseRelativeX = options.mouseRelative.indexOf('x') !== -1;
                    options.mouseRelativeY = options.mouseRelative.indexOf('y') !== -1;
                }

                function addEventListeners() {
                    function cancel() {
                        hider_.cancel();
                    }

                    function hide() {
                        hider_.hide(options.timeout);
                    }
                    elm.on('mouseout', hide).on('mouseover', cancel);
                    $popover.on('mouseout', hide).on('mouseover', cancel);
                    unregisterActivePopoverListeners = function() {
                        elm.off('mouseout', hide).off('mouseover', cancel);
                        $popover.off('mouseout', hide).off('mouseover', cancel);
                    }
                }

                function adjustRect(rect, adjustX, adjustY, ev) {
                    var localRect = {
                        bottom: rect.bottom,
                        height: rect.height,
                        left: rect.left,
                        right: rect.right,
                        top: rect.top,
                        width: rect.width
                    };
                    if (adjustX) {
                        localRect.left = ev.pageX;
                        localRect.right = ev.pageX;
                        localRect.width = 0;
                    }
                    if (adjustY) {
                        localRect.top = ev.pageY;
                        localRect.bottom = ev.pageY;
                        localRect.height = 0;
                    }
                    return localRect;
                }

                function buttonClickHandler() {
                    if ($popover.isOpen) {
                        scope.hidePopover();
                    }
                }

                function display(e) {
                    if (angular.isObject(e) && false !== options.triggerPrevent) {
                        e.preventDefault();
                    }
                    hider_.cancel();
                    displayer_.display(options.popupDelay, e);
                }

                function getBoundingClientRect(elm) {
                    var w = window;
                    var doc = document.documentElement || document.body.parentNode || document.body;
                    var x = (isDef(w.pageXOffset)) ? w.pageXOffset : doc.scrollLeft;
                    var y = (isDef(w.pageYOffset)) ? w.pageYOffset : doc.scrollTop;
                    var rect = elm.getBoundingClientRect();
                    if (x || y) {
                        return {
                            bottom: rect.bottom + y,
                            left: rect.left + x,
                            right: rect.right + x,
                            top: rect.top + y,
                            height: rect.height,
                            width: rect.width
                        };
                    }
                    return rect;
                }

                function insideClickHandler() {
                    if ($popover.isOpen) {
                        scope.hidePopover();
                    }
                }

                function loadTemplate(template, plain) {
                    if (!template) {
                        return '';
                    }
                    if (angular.isString(template) && plain) {
                        return template;
                    }
                    return $templateCache.get(template) || $http.get(template, {
                        cache: true
                    });
                }

                function move(popover, placement, align, rect, triangle) {
                    var containerRect;
                    var popoverRect = getBoundingClientRect(popover[0]);
                    var popoverRight;
                    var top, left;
                    var positionX = function() {
                        if (align === 'center') {
                            return Math.round(rect.left + rect.width / 2 - popoverRect.width / 2);
                        } else if (align === 'right') {
                            return rect.right - popoverRect.width;
                        }
                        return rect.left;
                    };
                    var positionY = function() {
                        if (align === 'center') {
                            return Math.round(rect.top + rect.height / 2 - popoverRect.height / 2);
                        } else if (align === 'bottom') {
                            return rect.bottom - popoverRect.height;
                        }
                        return rect.top;
                    };
                    if (placement === 'top') {
                        top = rect.top - popoverRect.height;
                        left = positionX();
                    } else if (placement === 'right') {
                        top = positionY();
                        left = rect.right;
                    } else if (placement === 'bottom') {
                        top = rect.bottom;
                        left = positionX();
                    } else if (placement === 'left') {
                        top = positionY();
                        left = rect.left - popoverRect.width;
                    }
                    if (true === options.restrictBounds) {
                        containerRect = getBoundingClientRect($container[0]);
                        left = Math.max(containerRect.left, left);
                        popoverRight = left + popoverRect.width;
                        if (popoverRight > containerRect.width) {
                            left = left - (popoverRight - containerRect.width);
                        }
                    }
                    popover.css('top', top.toString() + 'px').css('left', left.toString() + 'px');
                    if (triangle && triangle.length) {
                        if (placement === 'top' || placement === 'bottom') {
                            left = rect.left + rect.width / 2 - left;
                            triangle.css('left', left.toString() + 'px');
                        } else {
                            top = rect.top + rect.height / 2 - top;
                            triangle.css('top', top.toString() + 'px');
                        }
                    }
                }

                function outsideClickHandler(e) {
                    function isInPopover(el) {
                        if (el.id === id) {
                            return true;
                        }
                        var parent = angular.element(el).parent()[0];
                        if (!parent) {
                            return false;
                        }
                        if (parent.id === id) {
                            return true;
                        } else {
                            return isInPopover(parent);
                        }
                    }
                    if ($popover.isOpen && e.target !== elm[0]) {
                        var id = $popover[0].id;
                        if (!isInPopover(e.target)) {
                            scope.hidePopover();
                        }
                    }
                }

                function removeEventListeners() {
                    unregisterActivePopoverListeners();
                }

                function toBoolean(value) {
                    if (value && value.length !== 0) {
                        var v = ("" + value).toLowerCase();
                        value = (v == 'true');
                    } else {
                        value = false;
                    }
                    return value;
                }
                displayer_ = {
                    id_: undefined,
                    display: function(delay, e) {
                        if ($parse(attrs.nsPopover)(scope) === false) {
                            return;
                        }
                        $timeout.cancel(displayer_.id_);
                        if (!isDef(delay)) {
                            delay = 0;
                        }
                        if (options.group) {
                            $rootScope.$broadcast('ns:popover:hide', options.group);
                        }
                        displayer_.id_ = $timeout(function() {
                            if (true === $popover.isOpen) {
                                return;
                            }
                            $popover.isOpen = true;
                            $popover.css('display', 'block');
                            var elmRect = getBoundingClientRect(elm[0]);
                            if (options.mouseRelative) {
                                elmRect = adjustRect(elmRect, options.mouseRelativeX, options.mouseRelativeY, e);
                            }
                            move($popover, placement_, align_, elmRect, $triangle);
                            addEventListeners();
                            if (true === options.hideOnInsideClick) {
                                $popover.on('click', insideClickHandler);
                            }
                            if (true === options.hideOnOutsideClick) {
                                $document.on('click', outsideClickHandler);
                            }
                            if (true === options.hideOnButtonClick) {
                                elm.on('click', buttonClickHandler);
                            }
                            options.onOpen(scope);
                        }, delay * 1000);
                    },
                    cancel: function() {
                        $timeout.cancel(displayer_.id_);
                    }
                };
                hider_ = {
                    id_: undefined,
                    hide: function(delay) {
                        $timeout.cancel(hider_.id_);
                        if (delay !== "-1") {
                            if (!isDef(delay)) {
                                delay = 1.5;
                            }
                            hider_.id_ = $timeout(function() {
                                $popover.off('click', insideClickHandler);
                                $document.off('click', outsideClickHandler);
                                elm.off('click', buttonClickHandler);
                                $popover.isOpen = false;
                                displayer_.cancel();
                                $popover.css('display', 'none');
                                removeEventListeners();
                                options.onClose(scope);
                            }, delay * 1000);
                        }
                    },
                    cancel: function() {
                        $timeout.cancel(hider_.id_);
                    }
                };
                $container = $document.find(options.container);
                if (!$container.length) {
                    $container = $document.find('body');
                }
                match = options.placement.match(/^(top|bottom|left|right)$|((top|bottom)\|(center|left|right)+)|((left|right)\|(center|top|bottom)+)/);
                if (!match) {
                    throw new Error('"' + options.placement + '" is not a valid placement or has ' +
                        'an invalid combination of placements.');
                }
                placement_ = match[6] || match[3] || match[1];
                align_ = match[7] || match[4] || match[2] || 'center';
                globalId += 1;
                $popover = $el('<div id="nspopover-' + globalId + '"></div>').addClass('ns-popover-' + placement_ + '-placement').addClass('ns-popover-' + align_ + '-align').css('position', 'absolute').css('display', 'none');
                $popovers.push($popover);
                scope.hidePopover = function() {
                    hider_.hide(0);
                };
                scope.$on('ns:popover:hide', function(ev, group) {
                    if (options.group === group) {
                        scope.hidePopover();
                    }
                });
                scope.$on('$destroy', function() {
                    $popover.remove();
                    unregisterDisplayMethod();
                });
                if (angular.isString(options.angularEvent)) {
                    unregisterDisplayMethod = $rootScope.$on(options.angularEvent, display);
                } else if (angular.isString(options.scopeEvent)) {
                    unregisterDisplayMethod = scope.$on(options.scopeEvent, display)
                } else {
                    elm.on(options.trigger, display);
                    unregisterDisplayMethod = function() {
                        elm.off(options.trigger, display);
                    }
                }
                $q.when(loadTemplate(options.template, options.plain)).then(function(template) {
                    if (angular.isObject(template)) {
                        template = angular.isString(template.data) ? template.data : '';
                    }
                    $popover.html(template);
                    if (options.theme) {
                        $popover.addClass(options.theme);
                    }
                    $compile($popover)(scope);
                    $triangle = $el($popover[0].querySelectorAll('.triangle'));
                    $container.append($popover);
                });
            }
        };
    }]);
})(window, window.angular);
(function() {
    'use strict';
    angular.module('app.core').controller('MsWidgetController', MsWidgetController).directive('msWidget', msWidgetDirective).directive('msWidgetFront', msWidgetFrontDirective).directive('msWidgetBack', msWidgetBackDirective);

    function MsWidgetController($scope, $element) {
        var vm = this;
        vm.flipped = false;
        vm.flip = flip;

        function flip() {
            if (!isFlippable()) {
                return;
            }
            vm.flipped = !vm.flipped;
            $element.toggleClass('flipped', vm.flipped);
        }

        function isFlippable() {
            return (angular.isDefined($scope.flippable) && $scope.flippable === true);
        }
    }

    function msWidgetDirective() {
        return {
            restrict: 'E',
            scope: {
                flippable: '=?'
            },
            controller: 'MsWidgetController',
            transclude: true,
            compile: function(tElement) {
                tElement.addClass('ms-widget');
                return function postLink(scope, iElement, iAttrs, MsWidgetCtrl, transcludeFn) {
                    transcludeFn(function(clone) {
                        iElement.empty();
                        iElement.append(clone);
                    });
                };
            }
        };
    }

    function msWidgetFrontDirective() {
        return {
            restrict: 'E',
            require: '^msWidget',
            transclude: true,
            compile: function(tElement) {
                tElement.addClass('ms-widget-front');
                return function postLink(scope, iElement, iAttrs, MsWidgetCtrl, transcludeFn) {
                    transcludeFn(function(clone) {
                        iElement.empty();
                        iElement.append(clone);
                    });
                    scope.flipWidget = MsWidgetCtrl.flip;
                };
            }
        };
    }

    function msWidgetBackDirective() {
        return {
            restrict: 'E',
            require: '^msWidget',
            transclude: true,
            compile: function(tElement) {
                tElement.addClass('ms-widget-back');
                return function postLink(scope, iElement, iAttrs, MsWidgetCtrl, transcludeFn) {
                    transcludeFn(function(clone) {
                        iElement.empty();
                        iElement.append(clone);
                    });
                    scope.flipWidget = MsWidgetCtrl.flip;
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('MsTimelineController', MsTimelineController).directive('msTimeline', msTimelineDirective).directive('msTimelineItem', msTimelineItemDirective);

    function MsTimelineController() {
        var vm = this;
        vm.scrollEl = undefined;
        vm.setScrollEl = setScrollEl;
        vm.getScrollEl = getScrollEl;

        function setScrollEl(scrollEl) {
            vm.scrollEl = scrollEl;
        }

        function getScrollEl() {
            return vm.scrollEl;
        }
    }

    function msTimelineDirective() {
        return {
            scope: {
                msTimeline: '=?',
                loadMore: '&?msTimelineLoadMore'
            },
            controller: 'MsTimelineController',
            compile: function(tElement) {
                tElement.addClass('ms-timeline');
                return function postLink(scope, iElement, iAttrs, MsTimelineCtrl) {
                    var loadMoreEl = angular.element('<div class="ms-timeline-loader md-accent-bg md-whiteframe-4dp"><span class="spinner animate-rotate"></span></div>');
                    iElement.append(loadMoreEl);
                    var config = {
                        scrollEl: '#content'
                    };
                    config = angular.extend(config, scope.msTimeline, {});
                    var scrollEl = angular.element(config.scrollEl);
                    MsTimelineCtrl.setScrollEl(scrollEl);
                    var threshold = 144;
                    registerOnScroll();

                    function onScroll() {
                        if (scrollEl.scrollTop() + scrollEl.height() + threshold > loadMoreEl.position().top) {
                            loadMoreEl.addClass('show');
                            unregisterOnScroll();
                            scope.loadMore().then(function() {
                                loadMoreEl.removeClass('show');
                                registerOnScroll();
                            }, function() {
                                loadMoreEl.remove();
                            });
                        }
                    }

                    function registerOnScroll() {
                        scrollEl.on('scroll', onScroll);
                    }

                    function unregisterOnScroll() {
                        scrollEl.off('scroll', onScroll);
                    }
                    scope.$on('$destroy', function() {
                        unregisterOnScroll();
                    });
                };
            }
        };
    }

    function msTimelineItemDirective($timeout, $q) {
        return {
            scope: true,
            require: '^msTimeline',
            compile: function(tElement) {
                tElement.addClass('ms-timeline-item').addClass('hidden');
                return function postLink(scope, iElement, iAttrs, MsTimelineCtrl) {
                    var threshold = 72,
                        itemLoaded = false,
                        itemInViewport = false,
                        scrollEl = MsTimelineCtrl.getScrollEl();
                    init();

                    function init() {
                        if (iElement.find('ms-card')) {
                            scope.$on('msCard::cardTemplateLoaded', function(event, args) {
                                var cardEl = angular.element(args[0]);
                                testForImage(cardEl).then(function() {
                                    $timeout(function() {
                                        itemLoaded = true;
                                    });
                                });
                            });
                        } else {
                            testForImage(iElement).then(function() {
                                $timeout(function() {
                                    itemLoaded = true;
                                });
                            });
                        }
                        scrollEl.on('scroll', testForVisibility);
                        testForVisibility();
                    }
                    var itemReadyWatcher = scope.$watch(function() {
                        return itemLoaded && itemInViewport;
                    }, function(current, old) {
                        if (angular.equals(current, old)) {
                            return;
                        }
                        if (current) {
                            iElement.removeClass('hidden').addClass('animate');
                            itemReadyWatcher();
                        }
                    }, true);

                    function testForImage(element) {
                        var deferred = $q.defer(),
                            imgEl = element.find('img');
                        if (imgEl.length > 0) {
                            imgEl.on('load', function() {
                                deferred.resolve('Image is loaded');
                            });
                        } else {
                            deferred.resolve('No images');
                        }
                        return deferred.promise;
                    }

                    function testForVisibility() {
                        if (scrollEl.scrollTop() + scrollEl.height() > iElement.position().top + threshold) {
                            $timeout(function() {
                                itemInViewport = true;
                            });
                            scrollEl.off('scroll', testForVisibility);
                        }
                    }
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('MsStepperController', MsStepperController).directive('msHorizontalStepper', msHorizontalStepperDirective).directive('msHorizontalStepperStep', msHorizontalStepperStepDirective).directive('msVerticalStepper', msVerticalStepperDirective).directive('msVerticalStepperStep', msVerticalStepperStepDirective);

    function MsStepperController($timeout) {
        var vm = this;
        vm.mainForm = undefined;
        vm.orientation = 'horizontal';
        vm.steps = [];
        vm.currentStep = undefined;
        vm.currentStepNumber = 1;
        vm.setOrientation = setOrientation;
        vm.registerMainForm = registerMainForm;
        vm.registerStep = registerStep;
        vm.setupSteps = setupSteps;
        vm.resetForm = resetForm;
        vm.setCurrentStep = setCurrentStep;
        vm.gotoStep = gotoStep;
        vm.gotoPreviousStep = gotoPreviousStep;
        vm.gotoNextStep = gotoNextStep;
        vm.gotoFirstStep = gotoFirstStep;
        vm.gotoLastStep = gotoLastStep;
        vm.isFirstStep = isFirstStep;
        vm.isLastStep = isLastStep;
        vm.isStepCurrent = isStepCurrent;
        vm.isStepDisabled = isStepDisabled;
        vm.isStepOptional = isStepOptional;
        vm.isStepHidden = isStepHidden;
        vm.filterHiddenStep = filterHiddenStep;
        vm.isStepValid = isStepValid;
        vm.isStepNumberValid = isStepNumberValid;
        vm.isFormValid = isFormValid;

        function setOrientation(orientation) {
            vm.orientation = orientation || 'horizontal';
        }

        function registerMainForm(form) {
            vm.mainForm = form;
        }

        function registerStep(element, scope, form) {
            var step = {
                element: element,
                scope: scope,
                form: form,
                stepNumber: scope.step || (vm.steps.length + 1),
                stepTitle: scope.stepTitle,
                stepTitleTranslate: scope.stepTitleTranslate
            };
            vm.steps.push(step);
            vm.steps.sort(function(a, b) {
                return a.stepNumber - b.stepNumber;
            });
            return step;
        }

        function setupSteps() {
            vm.setCurrentStep(vm.currentStepNumber);
        }

        function resetForm() {
            $timeout(function() {
                for (var x = 0; x < vm.steps.length; x++) {
                    vm.steps[x].form.$setPristine();
                    vm.steps[x].form.$setUntouched();
                }
                vm.mainForm.$setPristine();
                vm.mainForm.$setUntouched();
                gotoFirstStep();
            });
        }

        function setCurrentStep(stepNumber) {
            if (!isStepNumberValid(stepNumber)) {
                return;
            }
            vm.currentStepNumber = stepNumber;
            if (vm.orientation === 'horizontal') {
                for (var i = 0; i < vm.steps.length; i++) {
                    vm.steps[i].element.hide();
                }
                vm.steps[vm.currentStepNumber - 1].element.show();
            } else if (vm.orientation === 'vertical') {
                for (var j = 0; j < vm.steps.length; j++) {
                    vm.steps[j].element.find('.ms-stepper-step-content').hide();
                }
                vm.steps[vm.currentStepNumber - 1].element.find('.ms-stepper-step-content').show();
            }
        }

        function gotoStep(stepNumber) {
            if (isStepHidden(stepNumber)) {
                return;
            }
            vm.setCurrentStep(stepNumber);
        }

        function gotoPreviousStep() {
            var stepNumber = vm.currentStepNumber - 1;
            for (var s = stepNumber; s >= 1; s--) {
                if (!isStepHidden(s)) {
                    stepNumber = s;
                    break;
                }
            }
            vm.setCurrentStep(stepNumber);
        }

        function gotoNextStep() {
            var stepNumber = vm.currentStepNumber + 1;
            for (var s = stepNumber; s <= vm.steps.length; s++) {
                if (!isStepHidden(s)) {
                    stepNumber = s;
                    break;
                }
            }
            vm.setCurrentStep(stepNumber);
        }

        function gotoFirstStep() {
            vm.setCurrentStep(1);
        }

        function gotoLastStep() {
            vm.setCurrentStep(vm.steps.length);
        }

        function isFirstStep() {
            return vm.currentStepNumber === 1;
        }

        function isLastStep() {
            return vm.currentStepNumber === vm.steps.length;
        }

        function isStepCurrent(stepNumber) {
            if (!isStepNumberValid(stepNumber)) {
                return null;
            }
            return vm.currentStepNumber === stepNumber;
        }

        function isStepDisabled(stepNumber) {
            if (!isStepNumberValid(stepNumber)) {
                return null;
            }
            var disabled = false;
            for (var i = 1; i < stepNumber; i++) {
                if (!isStepValid(i)) {
                    disabled = true;
                    break;
                }
            }
            return disabled;
        }

        function isStepOptional(stepNumber) {
            if (!isStepNumberValid(stepNumber)) {
                return null;
            }
            return vm.steps[stepNumber - 1].scope.optionalStep;
        }

        function isStepHidden(stepNumber) {
            if (!isStepNumberValid(stepNumber)) {
                return null;
            }
            return !!vm.steps[stepNumber - 1].scope.hideStep;
        }

        function filterHiddenStep(step) {
            return !isStepHidden(step.stepNumber);
        }

        function isStepValid(stepNumber) {
            if (!isStepNumberValid(stepNumber)) {
                return null;
            }
            if (isStepOptional(stepNumber)) {
                return true;
            }
            return vm.steps[stepNumber - 1].form.$valid;
        }

        function isStepNumberValid(stepNumber) {
            return !(angular.isUndefined(stepNumber) || stepNumber < 1 || stepNumber > vm.steps.length);
        }

        function isFormValid() {
            return vm.mainForm.$valid;
        }
    }

    function msHorizontalStepperDirective() {
        return {
            restrict: 'A',
            scope: {},
            require: ['form', 'msHorizontalStepper'],
            priority: 1001,
            controller: 'MsStepperController as MsStepper',
            bindToController: {
                model: '=ngModel'
            },
            transclude: true,
            templateUrl: 'app/core/directives/ms-stepper/templates/horizontal/horizontal.html',
            compile: function(tElement) {
                tElement.addClass('ms-stepper');
                return function postLink(scope, iElement, iAttrs, ctrls) {
                    var FormCtrl = ctrls[0],
                        MsStepperCtrl = ctrls[1];
                    MsStepperCtrl.setOrientation('horizontal');
                    MsStepperCtrl.registerMainForm(FormCtrl);
                    MsStepperCtrl.setupSteps();
                };
            }
        };
    }

    function msHorizontalStepperStepDirective() {
        return {
            restrict: 'E',
            require: ['form', '^msHorizontalStepper'],
            priority: 1000,
            scope: {
                step: '=?',
                stepTitle: '=?',
                stepTitleTranslate: '=?',
                optionalStep: '=?',
                hideStep: '=?'
            },
            compile: function(tElement) {
                tElement.addClass('ms-stepper-step');
                return function postLink(scope, iElement, iAttrs, ctrls) {
                    var FormCtrl = ctrls[0],
                        MsStepperCtrl = ctrls[1];
                    scope.optionalStep = angular.isDefined(iAttrs.optionalStep);
                    MsStepperCtrl.registerStep(iElement, scope, FormCtrl);
                    iElement.hide();
                };
            }
        };
    }

    function msVerticalStepperDirective($timeout) {
        return {
            restrict: 'A',
            scope: {},
            require: ['form', 'msVerticalStepper'],
            priority: 1001,
            controller: 'MsStepperController as MsStepper',
            bindToController: {
                model: '=ngModel'
            },
            transclude: true,
            templateUrl: 'app/core/directives/ms-stepper/templates/vertical/vertical.html',
            compile: function(tElement) {
                tElement.addClass('ms-stepper');
                return function postLink(scope, iElement, iAttrs, ctrls) {
                    var FormCtrl = ctrls[0],
                        MsStepperCtrl = ctrls[1];
                    $timeout(function() {
                        MsStepperCtrl.setOrientation('vertical');
                        MsStepperCtrl.registerMainForm(FormCtrl);
                        MsStepperCtrl.setupSteps();
                    });
                };
            }
        };
    }

    function msVerticalStepperStepDirective() {
        return {
            restrict: 'E',
            require: ['form', '^msVerticalStepper'],
            priority: 1000,
            scope: {
                step: '=?',
                stepTitle: '=?',
                stepTitleTranslate: '=?',
                optionalStep: '=?',
                hideStep: '=?'
            },
            transclude: true,
            templateUrl: 'app/core/directives/ms-stepper/templates/vertical/step/vertical-step.html',
            compile: function(tElement) {
                tElement.addClass('ms-stepper-step');
                return function postLink(scope, iElement, iAttrs, ctrls) {
                    var FormCtrl = ctrls[0],
                        MsStepperCtrl = ctrls[1];
                    scope.optionalStep = angular.isDefined(iAttrs.optionalStep);
                    scope.stepInfo = MsStepperCtrl.registerStep(iElement, scope, FormCtrl);
                    scope.MsStepper = MsStepperCtrl;
                    iElement.find('.ms-stepper-step-content').hide();
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msSplashScreen', msSplashScreenDirective);

    function msSplashScreenDirective($animate) {
        return {
            restrict: 'E',
            link: function(scope, iElement) {
                var splashScreenRemoveEvent = scope.$on('msSplashScreen::remove', function() {
                    $animate.leave(iElement).then(function() {
                        splashScreenRemoveEvent();
                        scope = iElement = null;
                    })
                })
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('MsShortcutsController', MsShortcutsController).directive('msShortcuts', msShortcutsDirective);

    function MsShortcutsController($scope, $cookies, $document, $timeout, $q, msNavigationService) {
        var vm = this;
        vm.query = '';
        vm.queryOptions = {
            debounce: 300
        };
        vm.resultsLoading = false;
        vm.selectedResultIndex = 0;
        vm.ignoreMouseEvents = false;
        vm.mobileBarActive = false;
        vm.results = null;
        vm.shortcuts = [];
        vm.sortableOptions = {
            ghostClass: 'ghost',
            forceFallback: true,
            fallbackClass: 'dragging',
            onSort: function() {
                vm.saveShortcuts();
            }
        };
        vm.populateResults = populateResults;
        vm.loadShortcuts = loadShortcuts;
        vm.saveShortcuts = saveShortcuts;
        vm.addShortcut = addShortcut;
        vm.removeShortcut = removeShortcut;
        vm.handleResultClick = handleResultClick;
        vm.absorbEvent = absorbEvent;
        vm.handleKeydown = handleKeydown;
        vm.handleMouseenter = handleMouseenter;
        vm.temporarilyIgnoreMouseEvents = temporarilyIgnoreMouseEvents;
        vm.ensureSelectedResultIsVisible = ensureSelectedResultIsVisible;
        vm.toggleMobileBar = toggleMobileBar;
        init();

        function init() {
            vm.loadShortcuts().then(function(response) {
                vm.shortcuts = response;
                if (vm.shortcuts.length > 0) {
                    vm.results = response;
                }
            });
            $scope.$watch('MsShortcuts.query', function(current, old) {
                if (angular.isUndefined(current)) {
                    return;
                }
                if (angular.equals(current, old)) {
                    return;
                }
                vm.resultsLoading = true;
                vm.populateResults().then(function(response) {
                    vm.results = response;
                }, function() {
                    vm.results = [];
                }).finally(function() {
                    vm.resultsLoading = false;
                });
            });
        }

        function populateResults() {
            var results = [],
                flatNavigation = msNavigationService.getFlatNavigation(),
                deferred = $q.defer();
            for (var x = 0; x < flatNavigation.length; x++) {
                if (flatNavigation[x].uisref) {
                    results.push(flatNavigation[x]);
                }
            }
            if (vm.query) {
                results = results.filter(function(item) {
                    if (angular.lowercase(item.title).search(angular.lowercase(vm.query)) > -1) {
                        return true;
                    }
                });
                for (var i = 0; i < results.length; i++) {
                    results[i].hasShortcut = false;
                    for (var y = 0; y < vm.shortcuts.length; y++) {
                        if (vm.shortcuts[y]._id === results[i]._id) {
                            results[i].hasShortcut = true;
                            break;
                        }
                    }
                }
            } else {
                if (vm.shortcuts.length > 0) {
                    results = vm.shortcuts;
                }
            }
            vm.selectedResultIndex = 0;
            $timeout(function() {
                deferred.resolve(results);
            }, 250);
            return deferred.promise;
        }

        function loadShortcuts() {
            var deferred = $q.defer();
            var shortcuts = angular.fromJson($cookies.get('ONE.shortcuts'));
            if (angular.isUndefined(shortcuts)) {
                shortcuts = [{
                    'title': 'Bảng thao tác giá',
                    'icon': 'icon-tag-multiple',
                    'state': 'app.traditional_price_table',
                    'weight': 1,
                    'children': [],
                    '_id': 'price_table',
                    '_path': 'apps.traditional_price_table',
                    'uisref': 'app.traditional_price_table',
                    'hasShortcut': true
                }];
                $cookies.put('ONE.shortcuts', angular.toJson(shortcuts));
            }
            deferred.resolve(shortcuts);
            return deferred.promise;
        }

        function saveShortcuts() {
            var deferred = $q.defer();
            $cookies.put('ONE.shortcuts', angular.toJson(vm.shortcuts));
            $timeout(function() {
                deferred.resolve({
                    'success': true
                });
            }, 250);
            return deferred.promise;
        }

        function addShortcut(item) {
            item.hasShortcut = true;
            vm.shortcuts.push(item);
            vm.saveShortcuts();
        }

        function removeShortcut(item) {
            item.hasShortcut = false;
            for (var x = 0; x < vm.shortcuts.length; x++) {
                if (vm.shortcuts[x]._id === item._id) {
                    vm.shortcuts.splice(x, 1);
                    if (!vm.query) {
                        if (vm.shortcuts.length === 0) {
                            vm.results = null;
                        } else {
                            if (x >= vm.shortcuts.length) {
                                vm.selectedResultIndex = vm.shortcuts.length - 1;
                            }
                        }
                    }
                }
            }
            vm.saveShortcuts();
        }

        function handleResultClick(item) {
            if (item.hasShortcut) {
                vm.removeShortcut(item);
            } else {
                vm.addShortcut(item);
            }
        }

        function absorbEvent(event) {
            event.preventDefault();
        }

        function handleKeydown(event) {
            var keyCode = event.keyCode,
                keys = [38, 40];
            if (keys.indexOf(keyCode) > -1) {
                event.preventDefault();
            }
            switch (keyCode) {
                case 13:
                    vm.handleResultClick(vm.results[vm.selectedResultIndex]);
                    break;
                case 38:
                    if (vm.selectedResultIndex - 1 >= 0) {
                        vm.selectedResultIndex--;
                        vm.ensureSelectedResultIsVisible();
                    }
                    break;
                case 40:
                    if (vm.selectedResultIndex + 1 < vm.results.length) {
                        vm.selectedResultIndex++;
                        vm.ensureSelectedResultIsVisible();
                    }
                    break;
                default:
                    break;
            }
        }

        function handleMouseenter(index) {
            if (vm.ignoreMouseEvents) {
                return;
            }
            vm.selectedResultIndex = index;
        }

        function temporarilyIgnoreMouseEvents() {
            vm.ignoreMouseEvents = true;
            $timeout.cancel(vm.mouseEventIgnoreTimeout);
            vm.mouseEventIgnoreTimeout = $timeout(function() {
                vm.ignoreMouseEvents = false;
            }, 250);
        }

        function ensureSelectedResultIsVisible() {
            var resultsEl = $document.find('#ms-shortcut-add-menu').find('.results'),
                selectedItemEl = angular.element(resultsEl.find('.result')[vm.selectedResultIndex]);
            if (resultsEl && selectedItemEl) {
                var top = selectedItemEl.position().top - 8,
                    bottom = selectedItemEl.position().top + selectedItemEl.outerHeight() + 8;
                vm.temporarilyIgnoreMouseEvents();
                if (resultsEl.scrollTop() > top) {
                    resultsEl.scrollTop(top);
                }
                if (bottom > (resultsEl.height() + resultsEl.scrollTop())) {
                    resultsEl.scrollTop(bottom - resultsEl.height());
                }
            }
        }

        function toggleMobileBar() {
            vm.mobileBarActive = !vm.mobileBarActive;
        }
    }

    function msShortcutsDirective() {
        return {
            restrict: 'E',
            scope: {},
            require: 'msShortcuts',
            controller: 'MsShortcutsController as MsShortcuts',
            bindToController: {},
            templateUrl: 'app/core/directives/ms-shortcuts/ms-shortcuts.html',
            compile: function(tElement) {
                tElement.addClass('ms-shortcuts');
                return function postLink(scope, iElement) {};
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msSidenavHelper', msSidenavHelperDirective);

    function msSidenavHelperDirective() {
        return {
            restrict: 'A',
            require: '^mdSidenav',
            link: function(scope, iElement, iAttrs, MdSidenavCtrl) {
                scope.$watch(function() {
                    return MdSidenavCtrl.isOpen() && !MdSidenavCtrl.isLockedOpen();
                }, function(current) {
                    if (angular.isUndefined(current)) {
                        return;
                    }
                    iElement.parent().toggleClass('full-height', current);
                    angular.element('html').toggleClass('sidenav-open', current);
                });
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('MsSearchBarController', MsSearchBarController).directive('msSearchBar', msSearchBarDirective);

    function MsSearchBarController($scope, $element, $timeout) {
        var vm = this;
        vm.collapsed = true;
        vm.query = '';
        vm.queryOptions = {
            debounce: vm.debounce || 0
        };
        vm.resultsLoading = false;
        vm.results = null;
        vm.selectedResultIndex = 0;
        vm.ignoreMouseEvents = false;
        vm.populateResults = populateResults;
        vm.expand = expand;
        vm.collapse = collapse;
        vm.absorbEvent = absorbEvent;
        vm.handleKeydown = handleKeydown;
        vm.handleMouseenter = handleMouseenter;
        vm.temporarilyIgnoreMouseEvents = temporarilyIgnoreMouseEvents;
        vm.handleResultClick = handleResultClick;
        vm.ensureSelectedResultIsVisible = ensureSelectedResultIsVisible;
        init();

        function init() {
            $scope.$watch('MsSearchBar.query', function(current, old) {
                if (angular.isUndefined(current)) {
                    return;
                }
                if (angular.equals(current, old)) {
                    return;
                }
                if (vm.collapsed) {
                    return;
                }
                var onSearchEvaluated = $scope.$parent.$eval(vm.onSearch, {
                        query: current
                    }),
                    isArray = angular.isArray(onSearchEvaluated),
                    isPromise = (onSearchEvaluated && !!onSearchEvaluated.then);
                if (isArray) {
                    vm.populateResults(onSearchEvaluated);
                }
                if (isPromise) {
                    vm.resultsLoading = true;
                    onSearchEvaluated.then(function(response) {
                        vm.populateResults(response);
                    }, function() {
                        vm.populateResults([]);
                    }).finally(function() {
                        vm.resultsLoading = false;
                    });
                }
            });
        }

        function populateResults(results) {
            if (vm.collapsed) {
                return;
            }
            var isArray = angular.isArray(results),
                isNull = results === null;
            if (!isArray && !isNull) {
                return;
            }
            vm.selectedResultIndex = 0;
            vm.results = results;
        }

        function expand() {
            vm.collapsed = false;
            $scope.expand();
            if (vm.onExpand && angular.isFunction(vm.onExpand)) {
                vm.onExpand();
            }
        }

        function collapse() {
            vm.query = '';
            vm.populateResults(null);
            vm.collapsed = true;
            $scope.collapse();
            if (vm.onCollapse && angular.isFunction(vm.onCollapse)) {
                vm.onCollapse();
            }
        }

        function absorbEvent(event) {
            event.preventDefault();
        }

        function handleKeydown(event) {
            var keyCode = event.keyCode,
                keys = [27, 38, 40];
            if (keys.indexOf(keyCode) > -1) {
                event.preventDefault();
            }
            switch (keyCode) {
                case 13:
                    vm.handleResultClick(vm.results[vm.selectedResultIndex]);
                    break;
                case 27:
                    vm.collapse();
                    break;
                case 38:
                    if (vm.selectedResultIndex - 1 >= 0) {
                        vm.selectedResultIndex--;
                        vm.ensureSelectedResultIsVisible();
                    }
                    break;
                case 40:
                    if (!vm.results) {
                        return;
                    }
                    if (vm.selectedResultIndex + 1 < vm.results.length) {
                        vm.selectedResultIndex++;
                        vm.ensureSelectedResultIsVisible();
                    }
                    break;
                default:
                    break;
            }
        }

        function handleMouseenter(index) {
            if (vm.ignoreMouseEvents) {
                return;
            }
            vm.selectedResultIndex = index;
        }

        function temporarilyIgnoreMouseEvents() {
            vm.ignoreMouseEvents = true;
            $timeout.cancel(vm.mouseEventIgnoreTimeout);
            vm.mouseEventIgnoreTimeout = $timeout(function() {
                vm.ignoreMouseEvents = false;
            }, 250);
        }

        function handleResultClick(item) {
            if (vm.onResultClick) {
                vm.onResultClick({
                    item: item
                });
            }
            vm.collapse();
        }

        function ensureSelectedResultIsVisible() {
            var resultsEl = $element.find('.ms-search-bar-results'),
                selectedItemEl = angular.element(resultsEl.find('.result')[vm.selectedResultIndex]);
            if (resultsEl && selectedItemEl) {
                var top = selectedItemEl.position().top - 8,
                    bottom = selectedItemEl.position().top + selectedItemEl.outerHeight() + 8;
                vm.temporarilyIgnoreMouseEvents();
                if (resultsEl.scrollTop() > top) {
                    resultsEl.scrollTop(top);
                }
                if (bottom > (resultsEl.height() + resultsEl.scrollTop())) {
                    resultsEl.scrollTop(bottom - resultsEl.height());
                }
            }
        }
    }

    function msSearchBarDirective($document) {
        return {
            restrict: 'E',
            scope: {},
            require: 'msSearchBar',
            controller: 'MsSearchBarController as MsSearchBar',
            bindToController: {
                debounce: '=?',
                onSearch: '@',
                onResultClick: '&?',
                onExpand: '&?',
                onCollapse: '&?'
            },
            templateUrl: 'app/core/directives/ms-search-bar/ms-search-bar.html',
            compile: function(tElement) {
                tElement.addClass('ms-search-bar');
                return function postLink(scope, iElement) {
                    var inputEl, bodyEl = $document.find('body');
                    scope.collapse = collapse;
                    scope.expand = expand;
                    init();

                    function init() {
                        inputEl = iElement.find('#ms-search-bar-input');
                    }

                    function expand() {
                        iElement.addClass('expanded');
                        bodyEl.addClass('ms-search-bar-expanded');
                        inputEl.focus();
                    }

                    function collapse() {
                        iElement.removeClass('expanded');
                        bodyEl.removeClass('ms-search-bar-expanded');
                    }
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').provider('msScrollConfig', msScrollConfigProvider).directive('msScroll', msScrollDirective);

    function msScrollConfigProvider() {
        var defaultConfiguration = {
            wheelSpeed: 1,
            wheelPropagation: false,
            swipePropagation: true,
            minScrollbarLength: null,
            maxScrollbarLength: null,
            useBothWheelAxes: false,
            useKeyboard: true,
            suppressScrollX: false,
            suppressScrollY: false,
            scrollXMarginOffset: 0,
            scrollYMarginOffset: 0,
            stopPropagationOnClick: true
        };
        this.config = config;

        function config(configuration) {
            defaultConfiguration = angular.extend({}, defaultConfiguration, configuration);
        }
        this.$get = function() {
            var service = {
                getConfig: getConfig
            };
            return service;

            function getConfig() {
                return defaultConfiguration;
            }
        };
    }

    function msScrollDirective($timeout, msScrollConfig, msUtils, fuseConfig) {
        return {
            restrict: 'AE',
            compile: function(tElement) {
                if (fuseConfig.getConfig('disableCustomScrollbars')) {
                    return;
                }
                if (fuseConfig.getConfig('disableCustomScrollbarsOnMobile') && msUtils.isMobile()) {
                    return;
                }
                tElement.addClass('ms-scroll');
                return function postLink(scope, iElement, iAttrs) {
                    var options = {};
                    if (iAttrs.msScroll) {
                        options = scope.$eval(iAttrs.msScroll);
                    }
                    options = angular.extend({}, msScrollConfig.getConfig(), options);
                    $timeout(function() {
                        PerfectScrollbar.initialize(iElement[0], options);
                    }, 0);
                    iElement.on('mouseenter', updateScrollbar);
                    scope.$watch(function() {
                        return iElement.prop('scrollHeight');
                    }, function(current, old) {
                        if (angular.isUndefined(current) || angular.equals(current, old)) {
                            return;
                        }
                        updateScrollbar();
                    });
                    scope.$watch(function() {
                        return iElement.prop('scrollWidth');
                    }, function(current, old) {
                        if (angular.isUndefined(current) || angular.equals(current, old)) {
                            return;
                        }
                        updateScrollbar();
                    });

                    function updateScrollbar() {
                        PerfectScrollbar.update(iElement[0]);
                    }
                    scope.$on('$destroy', function() {
                        iElement.off('mouseenter');
                        PerfectScrollbar.destroy(iElement[0]);
                    });
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').provider('msNavigationService', msNavigationServiceProvider).controller('MsNavigationController', MsNavigationController).directive('msNavigation', msNavigationDirective).controller('MsNavigationNodeController', MsNavigationNodeController).directive('msNavigationNode', msNavigationNodeDirective).directive('msNavigationItem', msNavigationItemDirective).directive('msNavigationHorizontal', msNavigationHorizontalDirective).controller('MsNavigationHorizontalNodeController', MsNavigationHorizontalNodeController).directive('msNavigationHorizontalNode', msNavigationHorizontalNodeDirective).directive('msNavigationHorizontalItem', msNavigationHorizontalItemDirective);

    function msNavigationServiceProvider() {
        var $log = angular.injector(['ng']).get('$log');
        var navigation = [];
        var service = this;
        service.saveItem = saveItem;
        service.deleteItem = deleteItem;
        service.sortByWeight = sortByWeight;

        function saveItem(path, item) {
            if (!angular.isString(path)) {
                $log.error('path must be a string (eg. `dashboard.project`)');
                return;
            }
            var parts = path.split('.');
            var id = parts[parts.length - 1];
            var parent = _findOrCreateParent(parts);
            var updateItem = false;
            for (var i = 0; i < parent.length; i++) {
                if (parent[i]._id === id) {
                    updateItem = parent[i];
                    break;
                }
            }
            if (updateItem) {
                angular.extend(updateItem, item);
                updateItem.uisref = _getUiSref(updateItem);
            } else {
                item.children = [];
                if (angular.isUndefined(item.weight) || !angular.isNumber(item.weight)) {
                    item.weight = 1;
                }
                item._id = id;
                item._path = path;
                item.uisref = _getUiSref(item);
                parent.push(item);
            }
        }

        function deleteItem(path) {
            if (!angular.isString(path)) {
                $log.error('path must be a string (eg. `dashboard.project`)');
                return;
            }
            var item = navigation,
                parts = path.split('.');
            for (var p = 0; p < parts.length; p++) {
                var id = parts[p];
                for (var i = 0; i < item.length; i++) {
                    if (item[i]._id === id) {
                        if (item[i]._path === path) {
                            item.splice(i, 1);
                            return true;
                        }
                        item = item[i].children;
                        break;
                    }
                }
            }
            return false;
        }

        function sortByWeight(parent) {
            if (!parent) {
                parent = navigation;
                parent.sort(_byWeight);
            }
            for (var i = 0; i < parent.length; i++) {
                var children = parent[i].children;
                if (children.length > 1) {
                    children.sort(_byWeight);
                }
                if (children.length > 0) {
                    sortByWeight(children);
                }
            }
        }

        function _findOrCreateParent(parts) {
            var parent = navigation;
            if (parts.length === 1) {
                return parent;
            }
            parts.pop();
            for (var i = 0; i < parts.length; i++) {
                var _id = parts[i],
                    createParent = true;
                for (var p = 0; p < parent.length; p++) {
                    if (parent[p]._id === _id) {
                        parent = parent[p].children;
                        createParent = false;
                        break;
                    }
                }
                if (createParent) {
                    var item = {
                        _id: _id,
                        _path: parts.join('.'),
                        title: _id,
                        weight: 1,
                        children: []
                    };
                    parent.push(item);
                    parent = item.children;
                }
            }
            return parent;
        }

        function _byWeight(x, y) {
            return parseInt(x.weight) - parseInt(y.weight);
        }

        function _getUiSref(item) {
            var uisref = '';
            if (angular.isDefined(item.state)) {
                uisref = item.state;
                if (angular.isDefined(item.stateParams) && angular.isObject(item.stateParams)) {
                    uisref = uisref + '(' + angular.toJson(item.stateParams) + ')';
                }
            }
            return uisref;
        }
        this.$get = function() {
            var activeItem = null,
                navigationScope = null,
                folded = null,
                foldedOpen = null;
            var service = {
                saveItem: saveItem,
                deleteItem: deleteItem,
                sort: sortByWeight,
                clearNavigation: clearNavigation,
                setActiveItem: setActiveItem,
                getActiveItem: getActiveItem,
                getNavigation: getNavigation,
                getFlatNavigation: getFlatNavigation,
                setNavigationScope: setNavigationScope,
                setFolded: setFolded,
                getFolded: getFolded,
                setFoldedOpen: setFoldedOpen,
                getFoldedOpen: getFoldedOpen,
                toggleFolded: toggleFolded
            };
            return service;

            function clearNavigation() {
                navigation = [];
                if (navigationScope) {
                    navigationScope.vm.navigation = navigation;
                }
            }

            function setActiveItem(node, scope) {
                activeItem = {
                    node: node,
                    scope: scope
                };
            }

            function getActiveItem() {
                return activeItem;
            }

            function getNavigation(root) {
                if (root) {
                    for (var i = 0; i < navigation.length; i++) {
                        if (navigation[i]._id === root) {
                            return [navigation[i]];
                        }
                    }
                    return null;
                }
                return navigation;
            }

            function getFlatNavigation(root) {
                var navigation = getNavigation(root);
                return _flattenNavigation(navigation);
            }

            function setNavigationScope(scope) {
                navigationScope = scope;
            }

            function setFolded(status) {
                folded = status;
            }

            function getFolded() {
                return folded;
            }

            function setFoldedOpen(status) {
                foldedOpen = status;
            }

            function getFoldedOpen() {
                return foldedOpen;
            }

            function toggleFolded() {
                navigationScope.toggleFolded();
            }

            function _flattenNavigation(navigation) {
                var flatNav = [];
                for (var x = 0; x < navigation.length; x++) {
                    var navToPush = angular.copy(navigation[x]);
                    navToPush.children = [];
                    flatNav.push(navToPush);
                    if (navigation[x].children.length > 0) {
                        flatNav = flatNav.concat(_flattenNavigation(navigation[x].children));
                    }
                }
                return flatNav;
            }
        };
    }

    function MsNavigationController($scope, msNavigationService) {
        var vm = this;
        if ($scope.root) {
            vm.navigation = msNavigationService.getNavigation($scope.root);
        } else {
            vm.navigation = msNavigationService.getNavigation();
        }
        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;
        init();

        function init() {
            msNavigationService.sort();
        }

        function toggleHorizontalMobileMenu() {
            angular.element('body').toggleClass('ms-navigation-horizontal-mobile-menu-active');
        }
    }

    function msNavigationDirective($rootScope, $timeout, $mdSidenav, msNavigationService) {
        return {
            restrict: 'E',
            scope: {
                folded: '=',
                root: '@'
            },
            controller: 'MsNavigationController as vm',
            templateUrl: 'app/core/directives/ms-navigation/templates/vertical.html',
            transclude: true,
            compile: function(tElement) {
                tElement.addClass('ms-navigation');
                return function postLink(scope, iElement) {
                    var bodyEl = angular.element('body'),
                        foldExpanderEl = angular.element('<div id="ms-navigation-fold-expander"></div>'),
                        foldCollapserEl = angular.element('<div id="ms-navigation-fold-collapser"></div>'),
                        sidenav = $mdSidenav('navigation');
                    msNavigationService.setNavigationScope(scope);
                    init();

                    function init() {
                        if (msNavigationService.getFolded() === null) {
                            msNavigationService.setFolded(scope.folded);
                        }
                        if (msNavigationService.getFolded()) {
                            $timeout(function() {
                                $rootScope.$broadcast('msNavigation::collapse');
                            });
                            bodyEl.addClass('ms-navigation-folded');
                            setFoldExpander();
                        }
                    }
                    scope.$watch(function() {
                        return sidenav.isLockedOpen();
                    }, function(current, old) {
                        if (angular.isUndefined(current) || angular.equals(current, old)) {
                            return;
                        }
                        var folded = msNavigationService.getFolded();
                        if (folded) {
                            if (current) {
                                $rootScope.$broadcast('msNavigation::collapse');
                            } else {
                                var activeItem = msNavigationService.getActiveItem();
                                if (activeItem) {
                                    activeItem.scope.$emit('msNavigation::stateMatched');
                                }
                            }
                        }
                    });
                    scope.$watch('folded', function(current, old) {
                        if (angular.isUndefined(current) || angular.equals(current, old)) {
                            return;
                        }
                        setFolded(current);
                    });

                    function setFolded(folded) {
                        msNavigationService.setFolded(folded);
                        if (folded) {
                            $rootScope.$broadcast('msNavigation::collapse');
                            bodyEl.addClass('ms-navigation-folded');
                            setFoldExpander();
                        } else {
                            var activeItem = msNavigationService.getActiveItem();
                            if (activeItem) {
                                activeItem.scope.$emit('msNavigation::stateMatched');
                            }
                            bodyEl.removeClass('ms-navigation-folded ms-navigation-folded-open');
                            removeFoldCollapser();
                        }
                    }

                    function setFoldExpander() {
                        iElement.parent().append(foldExpanderEl);
                        $timeout(function() {
                            foldExpanderEl.on('mouseenter touchstart', onFoldExpanderHover);
                        });
                    }

                    function setFoldCollapser() {
                        bodyEl.find('#main').append(foldCollapserEl);
                        foldCollapserEl.on('mouseenter touchstart', onFoldCollapserHover);
                    }

                    function removeFoldCollapser() {
                        foldCollapserEl.remove();
                    }

                    function onFoldExpanderHover(event) {
                        if (event) {
                            event.preventDefault();
                        }
                        msNavigationService.setFoldedOpen(true);
                        var activeItem = msNavigationService.getActiveItem();
                        if (activeItem) {
                            activeItem.scope.$emit('msNavigation::stateMatched');
                        }
                        bodyEl.addClass('ms-navigation-folded-open');
                        foldExpanderEl.remove();
                        setFoldCollapser();
                    }

                    function onFoldCollapserHover(event) {
                        if (event) {
                            event.preventDefault();
                        }
                        msNavigationService.setFoldedOpen(false);
                        $rootScope.$broadcast('msNavigation::collapse');
                        bodyEl.removeClass('ms-navigation-folded-open');
                        foldCollapserEl.remove();
                        setFoldExpander();
                    }
                    scope.toggleFolded = function() {
                        var folded = msNavigationService.getFolded();
                        setFolded(!folded);
                    };
                    scope.$on('$stateChangeStart', function() {
                        sidenav.close();
                    });
                    scope.$on('$destroy', function() {
                        foldCollapserEl.off('mouseenter touchstart');
                        foldExpanderEl.off('mouseenter touchstart');
                    });
                };
            }
        };
    }

    function MsNavigationNodeController($scope, $element, $rootScope, $animate, $state, msNavigationService) {
        var vm = this;
        vm.element = $element;
        vm.node = $scope.node;
        vm.hasChildren = undefined;
        vm.collapsed = undefined;
        vm.collapsable = undefined;
        vm.group = undefined;
        vm.animateHeightClass = 'animate-height';
        vm.toggleCollapsed = toggleCollapsed;
        vm.collapse = collapse;
        vm.expand = expand;
        vm.getClass = getClass;
        vm.isHidden = isHidden;
        init();

        function init() {
            vm.hasChildren = vm.node.children.length > 0;
            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);
            if (!vm.hasChildren || vm.group) {
                vm.collapsable = false;
            } else {
                vm.collapsable = !!(angular.isUndefined(vm.node.collapsable) || typeof vm.node.collapsable !== 'boolean' || vm.node.collapsable === true);
            }
            if (!vm.collapsable) {
                vm.collapsed = false;
            } else {
                vm.collapsed = !!(angular.isUndefined(vm.node.collapsed) || typeof vm.node.collapsed !== 'boolean' || vm.node.collapsed === true);
            }
            if (vm.node.state === $state.current.name || $state.includes(vm.node.state)) {
                if (angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params)) {
                    return;
                }
                $scope.$emit('msNavigation::stateMatched');
                msNavigationService.setActiveItem(vm.node, $scope);
            }
            $scope.$on('msNavigation::stateMatched', function() {
                if (vm.collapsable && vm.collapsed) {
                    $scope.$evalAsync(function() {
                        vm.collapsed = false;
                    });
                }
            });
            $scope.$on('msNavigation::collapse', function(event, path) {
                if (vm.collapsed || !vm.collapsable) {
                    return;
                }
                if (angular.isUndefined(path)) {
                    vm.collapse();
                } else {
                    var givenPathParts = path.split('.'),
                        activePathParts = [];
                    var activeItem = msNavigationService.getActiveItem();
                    if (activeItem) {
                        activePathParts = activeItem.node._path.split('.');
                    }
                    if (givenPathParts.indexOf(vm.node._id) > -1) {
                        return;
                    }
                    if (activePathParts.indexOf(vm.node._id) > -1) {
                        return;
                    }
                    vm.collapse();
                }
            });
            $scope.$on('$stateChangeSuccess', function() {
                if (vm.node.state === $state.current.name) {
                    if (angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params)) {
                        return;
                    }
                    msNavigationService.setActiveItem(vm.node, $scope);
                    $rootScope.$broadcast('msNavigation::collapse', vm.node._path);
                }
                if ($state.includes(vm.node.state)) {
                    if (angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params)) {
                        return;
                    }
                    $scope.$emit('msNavigation::stateMatched');
                }
            });
        }

        function toggleCollapsed() {
            if (vm.collapsed) {
                vm.expand();
            } else {
                vm.collapse();
            }
        }

        function collapse() {
            var collapseEl = vm.element.children('ul');
            var height = collapseEl[0].offsetHeight;
            $scope.$evalAsync(function() {
                vm.collapsed = true;
                vm.element.addClass('collapsing');
                $animate.animate(collapseEl, {
                    'display': 'block',
                    'height': height + 'px'
                }, {
                    'height': '0px'
                }, vm.animateHeightClass).then(function() {
                    collapseEl.css({
                        'display': '',
                        'height': ''
                    });
                    vm.element.removeClass('collapsing');
                });
                $scope.$broadcast('msNavigation::collapse');
            });
        }

        function expand() {
            var expandEl = vm.element.children('ul');
            expandEl.css({
                'position': 'absolute',
                'visibility': 'hidden',
                'display': 'block',
                'height': 'auto'
            });
            var height = expandEl[0].offsetHeight;
            expandEl.css({
                'position': '',
                'visibility': '',
                'display': '',
                'height': ''
            });
            $scope.$evalAsync(function() {
                vm.collapsed = false;
                vm.element.addClass('expanding');
                $animate.animate(expandEl, {
                    'display': 'block',
                    'height': '0px'
                }, {
                    'height': height + 'px'
                }, vm.animateHeightClass).then(function() {
                    expandEl.css({
                        'height': ''
                    });
                    vm.element.removeClass('expanding');
                });
                $rootScope.$broadcast('msNavigation::collapse', vm.node._path);
            });
        }

        function getClass() {
            return vm.node.class;
        }

        function isHidden() {
            if (angular.isDefined(vm.node.hidden) && angular.isFunction(vm.node.hidden)) {
                return vm.node.hidden();
            }
            return false;
        }
    }

    function msNavigationNodeDirective() {
        return {
            restrict: 'A',
            bindToController: {
                node: '=msNavigationNode'
            },
            controller: 'MsNavigationNodeController as vm',
            compile: function(tElement) {
                tElement.addClass('ms-navigation-node');
                return function postLink(scope, iElement, iAttrs, MsNavigationNodeCtrl) {
                    iElement.addClass(MsNavigationNodeCtrl.getClass());
                    if (MsNavigationNodeCtrl.group) {
                        iElement.addClass('group');
                    }
                };
            }
        };
    }

    function msNavigationItemDirective() {
        return {
            restrict: 'A',
            require: '^msNavigationNode',
            compile: function(tElement) {
                tElement.addClass('ms-navigation-item');
                return function postLink(scope, iElement, iAttrs, MsNavigationNodeCtrl) {
                    if (MsNavigationNodeCtrl.collapsable) {
                        iElement.on('click', MsNavigationNodeCtrl.toggleCollapsed);
                    }
                    scope.$on('$destroy', function() {
                        iElement.off('click');
                    });
                };
            }
        };
    }

    function msNavigationHorizontalDirective(msNavigationService) {
        return {
            restrict: 'E',
            scope: {
                root: '@'
            },
            controller: 'MsNavigationController as vm',
            templateUrl: 'app/core/directives/ms-navigation/templates/horizontal.html',
            transclude: true,
            compile: function(tElement) {
                tElement.addClass('ms-navigation-horizontal');
                return function postLink(scope) {
                    msNavigationService.setNavigationScope(scope);
                };
            }
        };
    }

    function MsNavigationHorizontalNodeController($scope, $element, $rootScope, $state, msNavigationService) {
        var vm = this;
        vm.element = $element;
        vm.node = $scope.node;
        vm.hasChildren = undefined;
        vm.group = undefined;
        vm.getClass = getClass;
        init();

        function init() {
            vm.isActive = false;
            vm.hasChildren = vm.node.children.length > 0;
            vm.group = !!(angular.isDefined(vm.node.group) && vm.node.group === true);
            if (vm.node.state === $state.current.name || $state.includes(vm.node.state)) {
                if (angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params)) {
                    return;
                }
                $scope.$emit('msNavigation::stateMatched');
                msNavigationService.setActiveItem(vm.node, $scope);
            }
            $scope.$on('msNavigation::stateMatched', function() {
                if (vm.hasChildren) {
                    $scope.$evalAsync(function() {
                        vm.isActive = true;
                    });
                }
            });
            $scope.$on('msNavigation::clearActive', function() {
                if (!vm.hasChildren) {
                    return;
                }
                var activePathParts = [];
                var activeItem = msNavigationService.getActiveItem();
                if (activeItem) {
                    activePathParts = activeItem.node._path.split('.');
                }
                if (activePathParts.indexOf(vm.node._id) > -1) {
                    $scope.$evalAsync(function() {
                        vm.isActive = true;
                    });
                } else {
                    $scope.$evalAsync(function() {
                        vm.isActive = false;
                    });
                }
            });
            $scope.$on('$stateChangeSuccess', function() {
                if (vm.node.state === $state.current.name || $state.includes(vm.node.state)) {
                    if (angular.isDefined(vm.node.stateParams) && angular.isDefined($state.params) && !angular.equals(vm.node.stateParams, $state.params)) {
                        return;
                    }
                    msNavigationService.setActiveItem(vm.node, $scope);
                    $rootScope.$broadcast('msNavigation::clearActive');
                }
            });
        }

        function getClass() {
            return vm.node.class;
        }
    }

    function msNavigationHorizontalNodeDirective() {
        return {
            restrict: 'A',
            bindToController: {
                node: '=msNavigationHorizontalNode'
            },
            controller: 'MsNavigationHorizontalNodeController as vm',
            compile: function(tElement) {
                tElement.addClass('ms-navigation-horizontal-node');
                return function postLink(scope, iElement, iAttrs, MsNavigationHorizontalNodeCtrl) {
                    iElement.addClass(MsNavigationHorizontalNodeCtrl.getClass());
                    if (MsNavigationHorizontalNodeCtrl.group) {
                        iElement.addClass('group');
                    }
                };
            }
        };
    }

    function msNavigationHorizontalItemDirective($mdMedia) {
        return {
            restrict: 'A',
            require: '^msNavigationHorizontalNode',
            compile: function(tElement) {
                tElement.addClass('ms-navigation-horizontal-item');
                return function postLink(scope, iElement, iAttrs, MsNavigationHorizontalNodeCtrl) {
                    iElement.on('click', onClick);

                    function onClick() {
                        if (!MsNavigationHorizontalNodeCtrl.hasChildren || $mdMedia('gt-md')) {
                            return;
                        }
                        iElement.toggleClass('expanded');
                    }
                    scope.$on('$destroy', function() {
                        iElement.off('click');
                    });
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msResponsiveTable', msResponsiveTableDirective);

    function msResponsiveTableDirective() {
        return {
            restrict: 'A',
            link: function(scope, iElement) {
                var wrapper = angular.element('<div class="ms-responsive-table-wrapper"></div>');
                iElement.after(wrapper);
                wrapper.append(iElement);
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msRandomClass', msRandomClassDirective);

    function msRandomClassDirective() {
        return {
            restrict: 'A',
            scope: {
                msRandomClass: '='
            },
            link: function(scope, iElement) {
                var randomClass = scope.msRandomClass[Math.floor(Math.random() * (scope.msRandomClass.length))];
                iElement.addClass(randomClass);
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').factory('msNavFoldService', msNavFoldService).directive('msNavIsFolded', msNavIsFoldedDirective).controller('MsNavController', MsNavController).directive('msNav', msNavDirective).directive('msNavTitle', msNavTitleDirective).directive('msNavButton', msNavButtonDirective).directive('msNavToggle', msNavToggleDirective);

    function msNavFoldService() {
        var foldable = {};
        var service = {
            setFoldable: setFoldable,
            isNavFoldedOpen: isNavFoldedOpen,
            toggleFold: toggleFold,
            openFolded: openFolded,
            closeFolded: closeFolded
        };
        return service;

        function setFoldable(scope, element) {
            foldable = {
                'scope': scope,
                'element': element
            };
        }

        function isNavFoldedOpen() {
            return foldable.scope.isNavFoldedOpen();
        }

        function toggleFold() {
            foldable.scope.toggleFold();
        }

        function openFolded() {
            foldable.scope.openFolded();
        }

        function closeFolded() {
            foldable.scope.closeFolded();
        }
    }

    function msNavIsFoldedDirective($document, $rootScope, msNavFoldService) {
        return {
            restrict: 'A',
            link: function(scope, iElement, iAttrs) {
                var isFolded = (iAttrs.msNavIsFolded === 'true'),
                    isFoldedOpen = false,
                    body = angular.element($document[0].body),
                    openOverlay = angular.element('<div id="ms-nav-fold-open-overlay"></div>'),
                    closeOverlay = angular.element('<div id="ms-nav-fold-close-overlay"></div>'),
                    sidenavEl = iElement.parent();
                msNavFoldService.setFoldable(scope, iElement, isFolded);
                if (isFolded) {
                    fold();
                } else {
                    unfold();
                }

                function isNavFoldedOpen() {
                    return isFoldedOpen;
                }

                function toggleFold() {
                    isFolded = !isFolded;
                    if (isFolded) {
                        fold();
                    } else {
                        unfold();
                    }
                }

                function fold() {
                    body.addClass('ms-nav-folded');
                    $rootScope.$broadcast('msNav::forceCollapse');
                    iElement.scrollTop(0);
                    sidenavEl.append(openOverlay);
                    openOverlay.on('mouseenter touchstart', function(event) {
                        openFolded(event);
                        isFoldedOpen = true;
                    });
                }

                function openFolded(event) {
                    if (angular.isDefined(event)) {
                        event.preventDefault();
                    }
                    body.addClass('ms-nav-folded-open');
                    $rootScope.$broadcast('msNav::expandMatchingToggles');
                    sidenavEl.find(openOverlay).remove();
                    sidenavEl.parent().append(closeOverlay);
                    closeOverlay.on('mouseenter touchstart', function(event) {
                        closeFolded(event);
                        isFoldedOpen = false;
                    });
                }

                function closeFolded(event) {
                    if (angular.isDefined(event)) {
                        event.preventDefault();
                    }
                    $rootScope.$broadcast('msNav::forceCollapse');
                    iElement.scrollTop(0);
                    body.removeClass('ms-nav-folded-open');
                    sidenavEl.parent().find(closeOverlay).remove();
                    sidenavEl.append(openOverlay);
                    openOverlay.on('mouseenter touchstart', function(event) {
                        openFolded(event);
                        isFoldedOpen = true;
                    });
                }

                function unfold() {
                    body.removeClass('ms-nav-folded ms-nav-folded-open');
                    $rootScope.$broadcast('msNav::expandMatchingToggles');
                    iElement.off('mouseenter mouseleave');
                }
                scope.toggleFold = toggleFold;
                scope.openFolded = openFolded;
                scope.closeFolded = closeFolded;
                scope.isNavFoldedOpen = isNavFoldedOpen;
                scope.$on('$destroy', function() {
                    openOverlay.off('mouseenter touchstart');
                    closeOverlay.off('mouseenter touchstart');
                    iElement.off('mouseenter mouseleave');
                });
            }
        };
    }

    function MsNavController() {
        var vm = this,
            disabled = false,
            toggleItems = [],
            lockedItems = [];
        vm.isDisabled = isDisabled;
        vm.enable = enable;
        vm.disable = disable;
        vm.setToggleItem = setToggleItem;
        vm.getLockedItems = getLockedItems;
        vm.setLockedItem = setLockedItem;
        vm.clearLockedItems = clearLockedItems;

        function isDisabled() {
            return disabled;
        }

        function disable() {
            disabled = true;
        }

        function enable() {
            disabled = false;
        }

        function setToggleItem(element, scope) {
            toggleItems.push({
                'element': element,
                'scope': scope
            });
        }

        function getLockedItems() {
            return lockedItems;
        }

        function setLockedItem(element, scope) {
            lockedItems.push({
                'element': element,
                'scope': scope
            });
        }

        function clearLockedItems() {
            lockedItems = [];
        }
    }

    function msNavDirective($rootScope, $mdComponentRegistry, msNavFoldService) {
        return {
            restrict: 'E',
            scope: {},
            controller: 'MsNavController',
            compile: function(tElement) {
                tElement.addClass('ms-nav');
                return function postLink(scope) {
                    $rootScope.$broadcast('msNav::expandMatchingToggles');
                    var stateChangeSuccessEvent = $rootScope.$on('$stateChangeSuccess', function() {
                        $rootScope.$broadcast('msNav::expandMatchingToggles');
                        $mdComponentRegistry.when('navigation').then(function(navigation) {
                            navigation.close();
                            if (msNavFoldService.isNavFoldedOpen()) {
                                msNavFoldService.closeFolded();
                            }
                        });
                    });
                    scope.$on('$destroy', function() {
                        stateChangeSuccessEvent();
                    });
                };
            }
        };
    }

    function msNavTitleDirective() {
        return {
            restrict: 'A',
            compile: function(tElement) {
                tElement.addClass('ms-nav-title');
                return function postLink() {};
            }
        };
    }

    function msNavButtonDirective() {
        return {
            restrict: 'AE',
            compile: function(tElement) {
                tElement.addClass('ms-nav-button');
                return function postLink() {};
            }
        };
    }

    function msNavToggleDirective($rootScope, $q, $animate, $state) {
        return {
            restrict: 'A',
            require: '^msNav',
            scope: true,
            compile: function(tElement, tAttrs) {
                tElement.addClass('ms-nav-toggle');
                if (angular.isUndefined(tAttrs.collapsed)) {
                    tAttrs.collapsed = true;
                }
                tElement.attr('collapsed', tAttrs.collapsed);
                return function postLink(scope, iElement, iAttrs, MsNavCtrl) {
                    var classes = {
                        expanded: 'expanded',
                        expandAnimation: 'expand-animation',
                        collapseAnimation: 'collapse-animation'
                    };
                    var links = iElement.find('a');
                    var states = [];
                    var regExp = /\(.*\)/g;
                    angular.forEach(links, function(link) {
                        var state = angular.element(link).attr('ui-sref');
                        if (angular.isUndefined(state)) {
                            return;
                        }
                        state = state.replace(regExp, '');
                        states.push(state);
                    });
                    MsNavCtrl.setToggleItem(iElement, scope);
                    iElement.children('.ms-nav-button').on('click', toggle);

                    function toggle() {
                        if (MsNavCtrl.isDisabled()) {
                            return;
                        }
                        MsNavCtrl.disable();
                        if (isCollapsed()) {
                            MsNavCtrl.clearLockedItems();
                            scope.$emit('msNav::pushToLockedList');
                            $rootScope.$broadcast('msNav::collapse');
                            expand().then(function() {
                                MsNavCtrl.enable();
                            });
                        } else {
                            scope.$broadcast('msNav::forceCollapse');
                        }
                    }
                    scope.$on('$destroy', function() {
                        iElement.children('.ms-nav-button').off('click');
                    });
                    scope.$on('msNav::collapse', function() {
                        var lockedItems = MsNavCtrl.getLockedItems();
                        var locked = false;
                        angular.forEach(lockedItems, function(lockedItem) {
                            if (angular.equals(lockedItem.scope, scope)) {
                                locked = true;
                            }
                        });
                        if (locked) {
                            return;
                        }
                        collapse().then(function() {
                            MsNavCtrl.enable();
                        });
                    });
                    scope.$on('msNav::forceCollapse', function() {
                        collapse().then(function() {
                            MsNavCtrl.enable();
                        });
                    });
                    scope.$on('msNav::expandMatchingToggles', function() {
                        var currentState = $state.current.name;
                        var shouldExpand = false;
                        angular.forEach(states, function(state) {
                            if (currentState === state) {
                                shouldExpand = true;
                            }
                        });
                        if (shouldExpand) {
                            expand();
                        } else {
                            collapse();
                        }
                    });
                    scope.$on('msNav::pushToLockedList', function() {
                        MsNavCtrl.setLockedItem(iElement, scope);
                    });

                    function isCollapsed() {
                        return iElement.attr('collapsed') === 'true';
                    }

                    function isExpanded() {
                        return !isCollapsed();
                    }

                    function expand() {
                        var deferred = $q.defer();
                        if (isExpanded()) {
                            deferred.reject({
                                'error': true
                            });
                            return deferred.promise;
                        }
                        iElement.attr('collapsed', false);
                        var elementToExpand = angular.element(iElement.find('ms-nav-toggle-items')[0]);
                        elementToExpand.css({
                            'position': 'absolute',
                            'visibility': 'hidden',
                            'display': 'block',
                            'height': 'auto'
                        });
                        var height = elementToExpand[0].offsetHeight;
                        elementToExpand.css({
                            'position': '',
                            'visibility': '',
                            'display': '',
                            'height': ''
                        });
                        scope.$evalAsync(function() {
                            $animate.animate(elementToExpand, {
                                'display': 'block',
                                'height': '0px'
                            }, {
                                'height': height + 'px'
                            }, classes.expandAnimation).then(function() {
                                elementToExpand.addClass(classes.expanded);
                                elementToExpand.css({
                                    'height': ''
                                });
                                deferred.resolve({
                                    'success': true
                                });
                            });
                        });
                        return deferred.promise;
                    }

                    function collapse() {
                        var deferred = $q.defer();
                        if (isCollapsed()) {
                            deferred.reject({
                                'error': true
                            });
                            return deferred.promise;
                        }
                        iElement.attr('collapsed', true);
                        var elementToCollapse = angular.element(iElement.find('ms-nav-toggle-items')[0]);
                        var height = elementToCollapse[0].offsetHeight;
                        scope.$evalAsync(function() {
                            $animate.animate(elementToCollapse, {
                                'height': height + 'px'
                            }, {
                                'height': '0px'
                            }, classes.collapseAnimation).then(function() {
                                elementToCollapse.removeClass(classes.expanded);
                                elementToCollapse.css({
                                    'display': '',
                                    'height': ''
                                });
                                deferred.resolve({
                                    'success': true
                                });
                            });
                        });
                        return deferred.promise;
                    }
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('msMasonryController', msMasonryController).directive('msMasonry', msMasonry).directive('msMasonryItem', msMasonryItem);

    function msMasonryController($scope, $window, $mdMedia, $timeout) {
        var vm = this,
            defaultOpts = {
                columnCount: 5,
                respectItemOrder: false,
                reLayoutDebounce: 400,
                responsive: {
                    md: 3,
                    sm: 2,
                    xs: 1
                }
            },
            reLayoutTimeout = true;
        vm.options = null;
        vm.container = [];
        vm.containerPos = '';
        vm.columnWidth = '';
        vm.items = [];
        vm.reLayout = reLayout;
        vm.initialize = initialize;
        vm.waitImagesLoaded = waitImagesLoaded;

        function initialize() {
            vm.options = !vm.options ? defaultOpts : angular.extend(defaultOpts, vm.options);
            watchContainerResize();
        }
        $scope.$on('msMasonry:relayout', function() {
            reLayout();
        });

        function waitImagesLoaded(element, callback) {
            if (typeof imagesLoaded !== 'undefined') {
                var imgLoad = $window.imagesLoaded(element);
                imgLoad.on('done', function() {
                    callback();
                });
            } else {
                callback();
            }
        }

        function watchContainerResize() {
            $scope.$watch(function() {
                return vm.container.width();
            }, function(newValue, oldValue) {
                if (newValue !== oldValue) {
                    reLayout();
                }
            });
        }

        function reLayout() {
            if (reLayoutTimeout) {
                $timeout.cancel(reLayoutTimeout);
            }
            reLayoutTimeout = $timeout(function() {
                start();
                $scope.$broadcast('msMasonry:relayoutFinished');
            }, vm.options.reLayoutDebounce);

            function start() {
                vm.containerPos = vm.container[0].getBoundingClientRect();
                updateColumnOptions();
                $scope.$broadcast('msMasonry:relayoutStarted');
                vm.items = vm.container.find('ms-masonry-item');
                var referenceArr = Array.apply(null, new Array(vm.columnCount)).map(function() {
                    return 0;
                });
                for (var i = 0; i < vm.items.length; i++) {
                    var item = vm.items[i],
                        xPos, yPos, column, refTop;
                    item = angular.element(item);
                    if (item.scope()) {
                        item.scope().$broadcast('msMasonryItem:startReLayout');
                    }
                    item.css({
                        'width': vm.columnWidth
                    });
                    if (vm.options.respectItemOrder) {
                        column = i % vm.columnCount;
                        refTop = referenceArr[column];
                    } else {
                        refTop = Math.min.apply(Math, referenceArr);
                        column = referenceArr.indexOf(refTop);
                    }
                    referenceArr[column] = refTop + item[0].getBoundingClientRect().height;
                    xPos = Math.round(column * vm.columnWidth);
                    yPos = refTop;
                    item.css({
                        'transform': 'translate3d(' + xPos + 'px,' + yPos + 'px,0px)'
                    });
                    item.addClass('placed');
                    if (item.scope()) {
                        item.scope().$broadcast('msMasonryItem:finishReLayout');
                    }
                }
            }
        }

        function updateColumnOptions() {
            vm.columnCount = vm.options.columnCount;
            if ($mdMedia('gt-md')) {
                vm.columnCount = vm.options.columnCount;
            } else if ($mdMedia('md')) {
                vm.columnCount = (vm.columnCount > vm.options.responsive.md ? vm.options.responsive.md : vm.columnCount);
            } else if ($mdMedia('sm')) {
                vm.columnCount = (vm.columnCount > vm.options.responsive.sm ? vm.options.responsive.sm : vm.columnCount);
            } else {
                vm.columnCount = vm.options.responsive.xs;
            }
            vm.columnWidth = vm.containerPos.width / vm.columnCount;
        }
    }

    function msMasonry($timeout) {
        return {
            restrict: 'AEC',
            controller: 'msMasonryController',
            compile: compile
        };

        function compile(element, attributes) {
            return {
                pre: function preLink(scope, iElement, iAttrs, controller) {
                    controller.options = angular.fromJson(attributes.options || '{}');
                    controller.container = element;
                },
                post: function postLink(scope, iElement, iAttrs, controller) {
                    $timeout(function() {
                        controller.initialize();
                    });
                }
            };
        }
    }

    function msMasonryItem() {
        return {
            restrict: 'AEC',
            require: '^msMasonry',
            priority: 1,
            link: link
        };

        function link(scope, element, attributes, controller) {
            controller.waitImagesLoaded(element, function() {
                controller.reLayout();
            });
            scope.$on('msMasonryItem:finishReLayout', function() {
                scope.$watch(function() {
                    return element.height();
                }, function(newVal, oldVal) {
                    if (newVal !== oldVal) {
                        controller.reLayout();
                    }
                });
            });
            element.on('$destroy', function() {
                controller.reLayout();
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('msMaterialColorPickerController', msMaterialColorPickerController).directive('msMaterialColorPicker', msMaterialColorPicker);

    function msMaterialColorPickerController($scope, $mdColorPalette, $mdMenu, fuseGenerator) {
        var vm = this;
        vm.palettes = $mdColorPalette;
        vm.selectedPalette = false;
        vm.selectedHues = false;
        $scope.$selectedColor = {};
        vm.activateHueSelection = activateHueSelection;
        vm.selectColor = selectColor;
        vm.removeColor = removeColor;
        $scope.$watch('ngModel', setSelectedColor);

        function activateHueSelection(palette, hues) {
            vm.selectedPalette = palette;
            vm.selectedHues = hues;
        }

        function selectColor(palette, hue) {
            updateSelectedColor(palette, hue);
            updateModel();
            $mdMenu.hide();
        }

        function removeColor() {
            vm.selectedColor = {
                palette: '',
                hue: '',
                class: ''
            };
            activateHueSelection(false, false);
            updateModel();
        }

        function setSelectedColor() {
            if (!vm.modelCtrl.$viewValue || vm.modelCtrl.$viewValue === '') {
                removeColor();
                return;
            }
            var palette, hue;
            if (vm.msModelType === 'class') {
                var color = vm.modelCtrl.$viewValue.split('-');
                if (color.length >= 5) {
                    palette = color[1] + '-' + color[2];
                    hue = color[3];
                } else {
                    palette = color[1];
                    hue = color[2];
                }
            } else if (vm.msModelType === 'obj') {
                palette = vm.modelCtrl.$viewValue.palette;
                hue = vm.modelCtrl.$viewValue.hue || 500;
            }
            updateSelectedColor(palette, hue);
        }

        function updateSelectedColor(palette, hue) {
            vm.selectedColor = {
                palette: palette,
                hue: hue,
                class: 'md-' + palette + '-' + hue + '-bg',
                bgColorValue: fuseGenerator.rgba(vm.palettes[palette][hue].value),
                fgColorValue: fuseGenerator.rgba(vm.palettes[palette][hue].contrast)
            };
            if (vm.msModelType === 'obj' && !angular.equals(vm.selectedColor, vm.modelCtrl.$viewValue)) {
                updateModel();
            }
            activateHueSelection(palette, vm.palettes[palette]);
            $scope.$selectedColor = vm.selectedColor;
        }

        function updateModel() {
            if (vm.msModelType === 'class') {
                vm.modelCtrl.$setViewValue(vm.selectedColor.class);
            } else if (vm.msModelType === 'obj') {
                vm.modelCtrl.$setViewValue(vm.selectedColor);
            }
        }
    }

    function msMaterialColorPicker() {
        return {
            require: ['msMaterialColorPicker', 'ngModel'],
            restrict: 'E',
            scope: {
                ngModel: '=',
                msModelType: '@?'
            },
            controller: 'msMaterialColorPickerController as vm',
            transclude: true,
            templateUrl: 'app/core/directives/ms-material-color-picker/ms-material-color-picker.html',
            link: function(scope, element, attrs, controllers, transclude) {
                var ctrl = controllers[0];
                ctrl.modelCtrl = controllers[1];
                ctrl.msModelType = scope.msModelType || 'class';
                transclude(scope, function(clone) {
                    clone = clone.filter(function(i, el) {
                        return (el.nodeType === 1) ? true : false;
                    });
                    if (clone.length) {
                        element.find('ms-color-picker-button').replaceWith(clone);
                    }
                });
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msInfoBar', msInfoBarDirective);

    function msInfoBarDirective($document) {
        return {
            restrict: 'E',
            scope: {},
            transclude: true,
            templateUrl: 'app/core/directives/ms-info-bar/ms-info-bar.html',
            link: function(scope, iElement) {
                var body = $document.find('body'),
                    bodyClass = 'ms-info-bar-active';
                body.addClass(bodyClass);

                function removeInfoBar() {
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                scope.removeInfoBar = removeInfoBar;
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msCrucialMessage', msCrucialMessageDirective);

    function msCrucialMessageDirective($document) {
        return {
            restrict: 'E',
            scope: {},
            transclude: true,
            templateUrl: 'app/core/directives/ms-crucial-message/crucial-message.html',
            link: function(scope, iElement) {
                var body = $document.find('body'),
                    bodyClass = 'ms-crucial-message-active';
                body.addClass(bodyClass);

                function removeInfoBar() {
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                scope.removeInfoBar = removeInfoBar;
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('MsFormWizardController', MsFormWizardController).directive('msFormWizard', msFormWizardDirective).directive('msFormWizardForm', msFormWizardFormDirective);

    function MsFormWizardController() {
        var vm = this;
        vm.forms = [];
        vm.selectedIndex = 0;
        vm.registerForm = registerForm;
        vm.previousStep = previousStep;
        vm.nextStep = nextStep;
        vm.firstStep = firstStep;
        vm.lastStep = lastStep;
        vm.totalSteps = totalSteps;
        vm.isFirstStep = isFirstStep;
        vm.isLastStep = isLastStep;
        vm.currentStepInvalid = currentStepInvalid;
        vm.previousStepInvalid = previousStepInvalid;
        vm.formsIncomplete = formsIncomplete;
        vm.resetForm = resetForm;

        function registerForm(form) {
            vm.forms.push(form);
        }

        function previousStep() {
            if (isFirstStep()) {
                return;
            }
            vm.selectedIndex--;
        }

        function nextStep() {
            if (isLastStep()) {
                return;
            }
            vm.selectedIndex++;
        }

        function firstStep() {
            vm.selectedIndex = 0;
        }

        function lastStep() {
            vm.selectedIndex = totalSteps() - 1;
        }

        function totalSteps() {
            return vm.forms.length;
        }

        function isFirstStep() {
            return vm.selectedIndex === 0;
        }

        function isLastStep() {
            return vm.selectedIndex === totalSteps() - 1;
        }

        function currentStepInvalid() {
            return angular.isDefined(vm.forms[vm.selectedIndex]) && vm.forms[vm.selectedIndex].$invalid;
        }

        function previousStepInvalid() {
            return vm.selectedIndex > 0 && angular.isDefined(vm.forms[vm.selectedIndex - 1]) && vm.forms[vm.selectedIndex - 1].$invalid;
        }

        function formsIncomplete() {
            for (var x = 0; x < vm.forms.length; x++) {
                if (vm.forms[x].$invalid) {
                    return true;
                }
            }
            return false;
        }

        function resetForm() {
            vm.selectedIndex = 0;
            for (var x = 0; x < vm.forms.length; x++) {
                vm.forms[x].$setPristine();
                vm.forms[x].$setUntouched();
            }
        }
    }

    function msFormWizardDirective() {
        return {
            restrict: 'E',
            scope: true,
            controller: 'MsFormWizardController as msWizard',
            compile: function(tElement) {
                tElement.addClass('ms-form-wizard');
                return function postLink() {};
            }
        };
    }

    function msFormWizardFormDirective() {
        return {
            restrict: 'A',
            require: ['form', '^msFormWizard'],
            compile: function(tElement) {
                tElement.addClass('ms-form-wizard-form');
                return function postLink(scope, iElement, iAttrs, ctrls) {
                    var formCtrl = ctrls[0],
                        MsFormWizardCtrl = ctrls[1];
                    MsFormWizardCtrl.registerForm(formCtrl);
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').provider('msDatepickerFixConfig', msDatepickerFixConfigProvider).directive('msDatepickerFix', msDatepickerFix);

    function msDatepickerFixConfigProvider() {
        var service = this;
        var defaultConfig = {
            formatter: function(val) {
                if (!val) {
                    return '';
                }
                return val === '' ? val : new Date(val);
            },
            parser: function(val) {
                if (!val) {
                    return '';
                }
                return moment(val).add(moment(val).utcOffset(), 'm').toDate();
            }
        };
        service.config = config;

        function config(configuration) {
            defaultConfig = angular.extend({}, defaultConfig, configuration);
        }
        service.$get = function() {
            return defaultConfig;
        };
    }

    function msDatepickerFix(msDatepickerFixConfig) {
        return {
            require: 'ngModel',
            priority: 1,
            link: function(scope, elem, attrs, ngModel) {
                ngModel.$formatters.push(msDatepickerFixConfig.formatter);
                ngModel.$parsers.push(msDatepickerFixConfig.parser);
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msCard', msCardDirective);

    function msCardDirective() {
        return {
            restrict: 'E',
            scope: {
                templatePath: '=template',
                card: '=ngModel',
                vm: '=viewModel'
            },
            template: '<div class="ms-card-content-wrapper" ng-include="templatePath" onload="cardTemplateLoaded()"></div>',
            compile: function(tElement) {
                tElement.addClass('ms-card');
                return function postLink(scope, iElement) {
                    scope.cardTemplateLoaded = cardTemplateLoaded;

                    function cardTemplateLoaded() {
                        scope.$emit('msCard::cardTemplateLoaded', iElement);
                    }
                };
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msAds', msAdsDirective);

    function msAdsDirective($rootScope, $document, $window) {
        return {
            restrict: 'E',
            scope: {},
            transclude: true,
            templateUrl: 'app/core/directives/ms-ads/ms-ads.html',
            link: function(scope, iElement) {
                let body = $document.find('body'),
                    bodyClass = 'ms-ads-active';
                body.addClass(bodyClass);
                let localAds = localStorage.getItem('Ads') === null ? 0 : parseInt(localStorage.getItem('Ads'));

                function removeAds() {
                    localStorage.setItem('Ads', localAds + 1);
                    $rootScope.showAds = false;
                    setTimeout(function() {
                        body.removeClass(bodyClass);
                        iElement.remove();
                        scope.$destroy();
                    }, 3000)
                }
                scope.removeAds = removeAds;
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').directive('msDangerousBrowser', msDangerousBrowserDirective);

    function msDangerousBrowserDirective($document) {
        return {
            restrict: 'E',
            scope: {},
            transclude: true,
            templateUrl: 'app/core/directives/dangerous-browser/dangerous-browser.html',
            link: function(scope, iElement) {
                let body = $document.find('body'),
                    bodyClass = 'ms-dangerous-browser-active';
                body.addClass(bodyClass);

                function removeInfoBar() {
                    body.removeClass(bodyClass);
                    iElement.remove();
                    scope.$destroy();
                }
                scope.removeInfoBar = removeInfoBar;
            }
        }
    }
})();
(function() {
    'use strict';
    if (typeof CKEDITOR === 'undefined') {
        var ckEditorSrc = '//cdn.ckeditor.com/4.9.2/basic/ckeditor.js';
        var scriptTag = document.createElement('script');
        scriptTag.setAttribute('src', ckEditorSrc);
        document.body.appendChild(scriptTag);
    }
    angular.module('app.notification').controller('notificationCtrl', notificationCtrl);

    function notificationCtrl($rootScope, $scope, $mdDialog, $timeout, $location, $state, $window, network) {
        var vm = this;
        $scope.$on('$stateChangeSuccess', function(event, toState, toParams, fromState, fromParams) {
            $scope.currentTab = toState.data.tab;
        });
        $rootScope.createPrivateNotification = createPrivateNotification;
        $rootScope.createNotification = createNotification;
        $rootScope.deleteNotification = deleteNotification;

        function createNotification($event, item) {
            $mdDialog.show({
                controller: createNotificationCtrl,
                templateUrl: 'app/main/notification/dialog/create.notification.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    currentTab: $scope.currentTab
                }
            });

            function createNotificationCtrl($scope, $q, msUtils, message, item, currentTab) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.options = {
                    language: 'en',
                    allowedContent: true,
                    entities: false,
                };
                $scope.newItems = item === undefined;
                $scope.categories = [{
                    id: 0,
                    name: 'Hệ thống'
                }, {
                    id: 1,
                    name: 'Bình thường'
                }, {
                    id: 2,
                    name: 'Quan trọng'
                }];
                $scope.displayPages = [{
                    id: 0,
                    name: 'Agent'
                }, {
                    id: 1,
                    name: 'Member'
                }, {
                    id: 2,
                    name: 'Public'
                }];
                $scope.displaySections = [{
                    id: 0,
                    name: 'Pop-up'
                }, {
                    id: 1,
                    name: 'Top Header'
                }];
                $scope.Category = item !== undefined ? item.Category : '';
                $scope.Message = item !== undefined ? item.Message : '';
                $scope.PublishedAt = item !== undefined ? item.PublishedAt : moment().subtract(1, 'day');
                $scope.ExpiredAt = item !== undefined ? item.ExpiredAt : moment().add(7, 'day');
                $scope.DisplayPages = item !== undefined ? item.DisplayPages : [];
                $scope.DisplaySections = item !== undefined ? item.DisplaySections : [];
                $scope.onReady = function() {};
                $scope.update = function() {
                    let data = {
                        Category: $scope.Category,
                        Message: $scope.Message,
                        PublishedAt: moment($scope.PublishedAt).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                        ExpiredAt: moment($scope.ExpiredAt).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                        DisplayPages: $scope.DisplayPages,
                        DisplaySections: $scope.DisplaySections,
                        PushNotification: $scope.PushNotification,
                    };
                    data.DisplaySections.push(2);
                    data.DisplaySections = data.DisplaySections.filter(function(item, index, inputArray) {
                        return inputArray.indexOf(item) === index;
                    });
                    if (data.PushNotification === undefined) {
                        delete data.PushNotification
                    }
                    if (data.Category === '') {
                        message.infoMultiple('Vui lòng chọn trang danh mục');
                        return;
                    }
                    if (data.DisplayPages.length === 0) {
                        message.infoMultiple('Vui lòng chọn trang thông báo');
                        return;
                    }
                    if (item === undefined) {
                        network.Communication.Notification.Admin.createNotification(data).then(function(response) {
                            $scope.onDone();
                        })
                    } else {
                        data.Id = item.Id;
                        network.Communication.Notification.Admin.updateNotification(data).then(function(response) {
                            $scope.onDone();
                        })
                    }
                };
                $scope.onDone = function() {
                    message.message('Cập nhật thành công');
                    $mdDialog.cancel();
                    if ($scope.Category === 0) {
                        $state.go('app.notification.system')
                    } else if ($scope.Category === 1) {
                        $state.go('app.notification.normal')
                    } else if ($scope.Category === 2) {
                        $state.go('app.notification.special')
                    } else {
                        $state.go('app.notification.personal')
                    }
                    $timeout(function() {
                        $rootScope.$emit('updateNotification', {
                            Category: $scope.Category
                        });
                    }, 200)
                }
            }
        }

        function createPrivateNotification($event, item) {
            $mdDialog.show({
                controller: createPrivateNotificationCtrl,
                templateUrl: 'app/main/notification/dialog/create.private.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item,
                    tab: $scope.currentTab
                }
            });

            function createPrivateNotificationCtrl($scope, $q, msUtils, message, item, tab) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.editMode = item !== undefined;
                $scope.RecipientModel = '';
                $scope.LastRecipients = [];
                $scope.displaySections = [{
                    id: 0,
                    name: 'Pop-up'
                }, {
                    id: 1,
                    name: 'Top Header'
                }, {
                    id: 2,
                    name: 'Bell'
                }];
                $scope.Message = item !== undefined ? item.Message : '';
                $scope.PublishedAt = item !== undefined ? item.PublishedAt : moment().subtract(1, 'day');
                $scope.ExpiredAt = item !== undefined ? item.ExpiredAt : moment().add(7, 'day');
                $scope.DisplaySections = item !== undefined ? item.DisplaySections : [];
                $scope.Recipients = item !== undefined ? angular.copy(item.Recipients) : [];
                angular.forEach($scope.Recipients, function(re) {
                    $scope.LastRecipients.push(re.Username);
                });
                if (item !== undefined) {
                    $scope.RecipientModel = $scope.LastRecipients.toString()
                }
                $scope.sendMultiple = function() {
                    $scope.Multiple = true;
                }
                $scope.uploadExcel = function() {
                    let selectedFile = document.getElementById('fileUpload').files[0],
                        fileReader = new FileReader();
                    fileReader.onload = function(event) {
                        let data = event.target.result;
                        let workbook = XLSX.read(data, {
                            type: "binary"
                        });
                        workbook.SheetNames.forEach(sheet => {
                            $scope.rowObject = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheet]);
                            $scope.rowObject = $scope.rowObject.filter(function(item) {
                                return item.Member !== null && item.Member !== undefined && item.Content !== null && item.Content !== undefined
                            })
                            let jsonObject = JSON.stringify($scope.rowObject);
                            $scope.$digest();
                        });
                    };
                    fileReader.readAsBinaryString(selectedFile);
                }
                $scope.sendMultipleMessage = function() {
                    if ($scope.rowObject === undefined) {
                        message.infoMultiple('Danh sách rỗng')
                    } else {
                        let unSend = $scope.rowObject.filter(function(item) {
                            return !item.succeeded
                        })
                        if (unSend.length === 0) {
                            $scope.onDone();
                        } else {
                            let sendingContent = unSend[0]
                            let data = {
                                Message: sendingContent.Content,
                                PublishedAt: moment($scope.PublishedAt).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                                ExpiredAt: moment($scope.ExpiredAt).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                                Recipients: [],
                                DisplaySections: $scope.DisplaySections,
                                PushNotification: $scope.PushNotification,
                            };
                            data.Recipients = sendingContent.Member.replace(/\s+/g, '').replace(/ /g, '').replace(/\r/g, '').split(',')
                            if (data.PushNotification === undefined) {
                                delete data.PushNotification
                            }
                            if (data.DisplaySections.length === 0) {
                                message.infoMultiple('Lựa chọn ít nhất 1 khu vực hiển thị')
                                return;
                            }
                            $scope.processing = true;
                            network.Communication.Notification.Admin.createPrivateNotification(data).then(function(response) {
                                sendingContent.succeeded = true;
                                $scope.$digest();
                                $timeout(function() {
                                    $scope.sendMultipleMessage();
                                }, 1000)
                            }).catch(function(error) {
                                message.infoMultiple(error.message);
                                $scope.processing = false;
                            })
                        }
                    }
                }
                $scope.sendMessage = function() {
                    let data = {
                        Message: $scope.Message,
                        PublishedAt: moment($scope.PublishedAt).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                        ExpiredAt: moment($scope.ExpiredAt).format('YYYY-MM-DDTHH:mm:ss+07:00'),
                        Recipients: [],
                        DisplaySections: $scope.DisplaySections,
                        PushNotification: $scope.PushNotification,
                    };
                    data.Recipients = $scope.RecipientModel.replace(/\s+/g, '').replace(/ /g, '').replace(/\r/g, '').split(',')
                    if (data.PushNotification === undefined) {
                        delete data.PushNotification
                    }
                    if (data.DisplaySections.length === 0) {
                        message.infoMultiple('Lựa chọn ít nhất 1 khu vực hiển thị')
                        return;
                    }
                    if (item === undefined) {
                        network.Communication.Notification.Admin.createPrivateNotification(data).then(function(response) {
                            $scope.onDone();
                        }).catch(function(error) {
                            message.infoMultiple(error.message)
                        })
                    } else {
                        data.Id = item.Id;
                        network.Communication.Notification.Admin.updatePrivateNotification(data).then(function(response) {
                            $scope.onDone();
                        }).catch(function(error) {
                            message.infoMultiple(error.message)
                        })
                    }
                };
                $scope.onDone = function() {
                    $mdDialog.cancel();
                    message.info('Cập nhật thành công');
                    if (tab !== 3) {
                        $state.go('app.notification.personal')
                    }
                    $timeout(function() {
                        $rootScope.$emit('updateNotification', {
                            Category: 3
                        });
                    }, 200)
                }
            }
        }

        function deleteNotification($event, item) {
            $mdDialog.show({
                controller: deleteNotificationCtrl,
                templateUrl: 'app/main/account/agency/dialog/prompt.dialog.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    item: item
                }
            });

            function deleteNotificationCtrl($rootScope, $scope, $mdDialog, item, message) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.title = '';
                $scope.textContent = 'Xác nhận xoá bản tin!';
                $scope.done = function() {
                    $scope.submitting = true;
                    network.Communication.Notification.Admin.deleteNotificationById({
                        Id: item.Id
                    }).then(function(resp) {
                        $mdDialog.cancel();
                        message.info('Xoá bản tin thành công');
                        $timeout(function() {
                            $rootScope.$emit('updateNotification', {
                                Category: item.Category,
                                fresh: true
                            });
                        }, 200)
                    }).catch(function(err) {
                        console.log(err)
                    })
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('fuse').controller('mustChangeCtrl', mustChangeCtrl);

    function mustChangeCtrl() {
        let vm = this;
    }
})();
(function() {
    'use strict';
    angular.module('app.history').controller('historyCtrl', historyCtrl);

    function historyCtrl($scope, $mdDialog, $timeout, $location, $state, $window, $http) {
        var vm = this;
    }
})();
(function() {
    'use strict';
    angular.module('app.dashboard', []).config(config);

    function config($stateProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.dashboard', {
            url: '/dashboard',
            views: {
                'content@app': {
                    templateUrl: 'app/main/dashboard/dashboard.html',
                    controller: 'dashboardController as vm'
                }
            }
        });
        msNavigationServiceProvider.saveItem('fuse', {
            title: '',
            group: true,
            weight: 1
        });
        msNavigationServiceProvider.saveItem('fuse.dashboards', {
            title: 'Tổng quan',
            icon: 'icon-tile-four',
            state: 'app.dashboard',
            weight: 1
        });
    }
})();
(function(delta) {
    'use strict';
    angular.module('app.dashboard').controller('dashboardController', dashboardController);

    function dashboardController($rootScope, $scope, $mdDialog, $timeout, $location, $state, network, $http) {
        let vm = this;
        vm.getAncestors = getAncestors;
        vm.date = {
            today: moment().subtract(11, 'hour').format('YYYY-MM-DD'),
            yesterday: moment().subtract(1, 'day').subtract(11, 'hour').format('YYYY-MM-DD'),
            earlyThisWeek: moment().startOf('isoWeek').format('YYYY-MM-DD'),
            thisWeekend: moment().endOf('isoWeek').format('YYYY-MM-DD')
        }
        vm.viewOutstanding = function(production) {
            switch (production) {
                case 0:
                    $state.go("app.traditional.statement.outstanding.general", {
                        game: '0,1,2,3,4,5'
                    })
                    break;
                case 1:
                    $state.go("app.legendary.statement.outstanding.general", {
                        game: '0,1'
                    })
                    break;
                case 101:
                    $state.go("app.saba.statement.outstanding.general")
                    break;
                default:
            }
        }
        Lotus.Reporting.Dashboard.overview().then(function(response) {
            response.UserLevelStatusStats = response.UserLevelStatusStats.sort(function(a, b) {
                return a.Level - b.Level
            });
            vm.dashboard = response
            $scope.$digest();
        }).catch(function() {})
        $scope.$on('UserOnline::update', function($event, data) {
            if (data !== undefined && vm.dashboard !== undefined) {
                vm.dashboard.UserOnline = data;
                $scope.$digest();
            }
        })
        vm.checkOnline = function($event) {
            if ($rootScope.User.Level !== 1) {
                return;
            }
            $mdDialog.show({
                controller: OnlineCtrl,
                templateUrl: 'app/main/dashboard/dialog/online.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                clickOutsideToClose: true,
                locals: {
                    online: vm.dashboard.UserOnline
                },
                fullscreen: true
            });

            function OnlineCtrl($scope, online) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };
                $scope.TotalOnline = online;
                Lotus.User.UserOnline.counterGroupByLevel().then(function(response) {
                    $scope.counterGroupByLevel = response.sort(function(a, b) {
                        return a.Level - b.Level
                    });
                    $scope.$digest();
                })
                $scope.CustomerOnline = [];
                $scope.listDownline = function(Level, Page) {
                    if ($scope.currentLevel !== Level) {
                        $scope.CustomerOnline = [];
                    }
                    let data = {
                        Size: 100
                    }
                    if (Level !== undefined) {
                        data.Level = Level
                    }
                    data.Page = Page !== undefined ? Page : 1;
                    $scope.currentLevel = Level;
                    $scope.currentPage = data.Page;
                    $scope.submitting = true;
                    Lotus.User.UserOnline.listDownline(data).then(function(response) {
                        $scope.hasData = response.length === data.Size;
                        response.map(function(item) {
                            item.UserAgentHelper = Lotus.Helper.UserAgent.parser(item.UserAgent);
                        })
                        $scope.CustomerOnline = $scope.CustomerOnline.concat(response);
                        $scope.submitting = false;
                        $scope.$digest();
                    })
                }
                $scope.listDownline();
                $scope.viewIp = function(ip) {
                    $mdDialog.show({
                        controller: viewIpCtrl,
                        templateUrl: 'app/main/dashboard/dialog/ip.html',
                        clickOutsideToClose: true,
                        multiple: true,
                        fullscreen: true,
                        locals: {
                            ip: ip
                        }
                    });

                    function viewIpCtrl($scope, $mdDialog, $timeout, ip) {
                        $scope.cancel = function() {
                            $mdDialog.cancel();
                        };
                        Lotus.IpLookup.lookup(ip).then(function(response) {
                            $scope.ipLookup = response;
                            $scope.$digest();
                        });
                    }
                }
            }
        }

        function getAncestors(item) {
            vm.parents = [];
            network.User.getAncestors({
                userId: item.UserId
            }).then(function(response) {
                vm.parents = response;
                vm.parents.push({
                    Username: $rootScope.User.Username,
                    Level: $rootScope.User.Level
                });
                vm.parents.push({
                    Username: item.Username,
                    Level: 9
                });
                vm.parents.sort(function(a, b) {
                    return a.Level - b.Level
                });
                $scope.$digest();
            })
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.forbidden', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.forbidden', {
            url: '/forbidden',
            views: {
                'main@': {
                    templateUrl: 'app/core/layouts/content-only.html',
                    controller: 'MainController as vm'
                },
                'content@app.forbidden': {
                    templateUrl: 'app/main/forbidden/forbidden.html',
                    controller: 'forbiddenCtrl as vm'
                }
            },
            bodyClass: 'forbidden'
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.forbidden').controller('forbiddenCtrl', forbiddenCtrl);

    function forbiddenCtrl($scope) {
        var vm = this;
        var str = document.getElementsByClassName('error-403')[0].innerHTML.toString();
        var i = 0;
        setTimeout(function() {
            var se = setInterval(function() {
                i++;
                document.getElementsByClassName('error-403')[0].innerHTML = str.slice(0, i) + "|";
                if (i === str.length) {
                    clearInterval(se);
                    document.getElementsByClassName('error-403')[0].innerHTML = str;
                }
            }, 10);
        }, 0);
        $scope.$on('$destroy', function() {
            clearInterval(se);
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.announcements', []).config(config);

    function config($stateProvider, msNavigationServiceProvider) {
        $stateProvider.state('app.announcements', {
            abstract: true,
            url: '/announcements'
        }).state('app.announcements.threads', {
            url: '/:filter',
            views: {
                'content@app': {
                    templateUrl: 'app/main/announcements/announcements.html',
                    controller: 'announcementsCtrl as vm'
                }
            },
            params: {
                type: {
                    value: null,
                    squash: true
                }
            },
            bodyClass: 'announcements'
        }).state('app.announcements.threads.thread', {
            url: '/:threadId',
            bodyClass: 'announcements'
        });
        msNavigationServiceProvider.saveItem('fuse.announcements', {
            title: 'Thông báo',
            icon: 'icon-bell',
            weight: 2,
            hidden: function() {
                return false
            }
        });
        msNavigationServiceProvider.saveItem('fuse.announcements.normal', {
            title: 'Thông thường',
            state: 'app.announcements.threads',
            stateParams: {
                filter: 'normal'
            },
        });
        msNavigationServiceProvider.saveItem('fuse.announcements.special', {
            title: 'Quan trọng',
            state: 'app.announcements.threads',
            stateParams: {
                filter: 'special'
            }
        });
        msNavigationServiceProvider.saveItem('fuse.announcements.system', {
            title: 'Hệ thống',
            state: 'app.announcements.threads',
            stateParams: {
                filter: 'system'
            }
        });
        msNavigationServiceProvider.saveItem('fuse.announcements.personal', {
            title: 'Thông báo cá nhân',
            state: 'app.announcements.threads',
            stateParams: {
                filter: 'personal'
            },
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.announcements').controller('announcementsCtrl', announcementsCtrl);

    function announcementsCtrl($scope, $rootScope, $document, $mdDialog, $mdMedia, $mdSidenav, $state, $timeout, msApi, network) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.loadAnnouncements = loadAnnouncements;
        vm.openThread = openThread;
        vm.closeThread = closeThread;
        vm.changeView = changeView;
        vm.readDefaultThread = readDefaultThread;
        vm.views = {
            classic: 'app/main/announcements/views/classic/classic-view.html',
            outlook: 'app/main/announcements/views/outlook/outlook-view.html'
        };
        vm.defaultView = 'outlook';
        vm.currentView = 'outlook';
        vm.colors = ['blue-bg', 'blue-grey-bg', 'orange-bg', 'pink-bg', 'purple-bg'];
        vm.currentFilter = {
            type: $state.params.type,
            filter: $state.params.filter
        };
        $scope.$watch(function() {
            return $mdMedia('xs');
        }, function(current, old) {
            if (current) {
                vm.currentView = 'classic';
            }
        });
        $scope.$watch(function() {
            return $mdMedia('gt-xs');
        }, function(current, old) {
            if (current) {
                if (vm.defaultView === 'outlook') {
                    vm.currentView = 'outlook';
                }
            }
        });
        if ($state.params.filter === 'normal') {
            vm.category = 1
        } else if ($state.params.filter === 'special') {
            vm.category = 2
        } else if ($state.params.filter === 'system') {
            vm.category = 0
        } else if ($state.params.filter === 'personal') {
            vm.category = 3
        }
        vm.From = moment().subtract(1, 'year');
        vm.To = moment().add(1, 'day');
        vm.threads = [];
        vm.loadAnnouncements();

        function loadAnnouncements() {
            vm.loadingThreads = true;
            let data = {
                From: moment(vm.From).format('YYYY-MM-DD'),
                To: moment(vm.To).format('YYYY-MM-DD'),
                Limit: 100,
                Category: vm.category,
                LastId: ''
            };
            network.Communication.Notification.getNotificationsByCategory(data).then(function(response) {
                vm.threads = response;
                $timeout(function() {
                    vm.loadingThreads = false
                }, 1000);
                $scope.$digest();
                vm.readDefaultThread();
            })
        }

        function readDefaultThread() {
            if ($state.params.threadId) {
                for (var i = 0; i < vm.threads.length; i++) {
                    if (vm.threads[i].Id === $state.params.threadId) {
                        vm.openThread(vm.threads[i]);
                        break;
                    }
                }
            }
        }

        function changeView(view) {
            if (vm.views[view]) {
                vm.defaultView = view;
                vm.currentView = view;
            }
        }

        function openThread(thread) {
            network.Communication.Notification.read({
                Id: thread.Id
            }).then(function(response) {
                thread.Read = true;
                $scope.$digest();
            });
            vm.currentThread = thread;
            $state.go('app.announcements.threads.thread', {
                threadId: thread.Id
            }, {
                notify: false
            });
        }

        function closeThread() {
            vm.currentThread = null;
            $state.go('app.announcements.threads', {
                type: vm.currentFilter.type,
                filter: vm.currentFilter.filter
            }, {
                notify: false
            });
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.dashboard').controller('authController', authController);

    function authController($rootScope, $scope, $state, $window, $location, $timeout, msUtils, network, message) {
        let vm = this;
        vm.inProcessing = false;
        vm.accountLogin = accountLogin;
        vm.validateOTP = validateOTP;
        vm.requiredOTP = false;
        if ($location.host() === 'localhost') {
            vm.form = {
                username: 'company1sub5',
                password: 'Qaz3456789-'
            };
        }

        function accountLogin() {
            sessionStorage.removeItem('lastClick')
            vm.inProcessing = true;
            network.User.authenticate(vm.form).then(function(response) {
                vm.inProcessing = false;
                if (Object.keys(response).length === 0) {
                    $rootScope.$broadcast('userAccount::update');
                } else if (response.RequireAction === 'NEW_PASSWORD_REQUIRED') {
                    $state.go('app.auth.set-password', {
                        force: 'reload'
                    })
                } else if (response.RequireAction === 'SOFTWARE_TOKEN_MFA') {
                    vm.requiredOTP = true;
                    $timeout(function() {
                        document.getElementsByClassName('requiredOTP')[0].focus();
                    }, 100)
                    $scope.$digest();
                }
            }).catch(function(error) {
                console.log(error)
                vm.inProcessing = false;
                if (error.code === 'UserLambdaValidationException') {
                    message.alert('Tài khoản của quý khách đang tạm ngừng phục vụ.')
                } else if (error.code === 'NotAuthorizedException') {
                    message.alert('Tên người dùng hoặc mật khẩu không chính xác');
                    vm.form.password = '';
                } else {
                    message.alert(error.message);
                }
            })
        }

        function validateOTP() {
            vm.inProcessing = true;
            network.User.confirmSignIn(vm.otp).then(function(resp) {
                $rootScope.$broadcast('userAccount::update');
            }).catch(function(err) {
                if (err.code === 'CodeMismatchException') {
                    vm.otp = '';
                    vm.inProcessing = false;
                    message.alert('OTP không hợp lệ');
                    $scope.$digest();
                } else {
                    vm.otp = '';
                    vm.inProcessing = false;
                    message.alert(err.message);
                    $scope.$digest();
                }
            })
        }
        vm.otpInput = {
            size: 6,
            type: 'tel',
            onDone: function(value) {
                vm.otp = value;
            },
            onChange: function(value) {
                vm.otpOk = value.length === 6
            }
        };
    }
})();
(function() {
    angular.module('app.core').service('AuthService', function($rootScope) {
        this.isCompany = function() {
            return $rootScope.User.Level === 1
        };
        this.isSecondary = function() {
            return $rootScope.User.Acl !== undefined
        };
        this.hasPermission = function(per) {
            if ($rootScope.User.Acl === undefined) {
                return true;
            } else {
                return ($rootScope.User.Acl & per) === per;
            }
        }
    }).service('network', function($rootScope, $http, message) {
        let ns = this;
        this.User = {
            authenticate: function(data) {
                return Lotus.User.authenticate(data).then(function(response) {
                    return response;
                })
            },
            confirmSignIn: function(data) {
                return Lotus.User.confirmSignIn({
                    code: data
                }).then(function(resp) {
                    return resp;
                })
            },
            checkDisplayName: function(name) {
                return Lotus.User.Current.checkDisplayName({
                    name: name
                }).then(function(resp) {
                    return resp
                })
            },
            changeDisplayName: function(name) {
                return Lotus.User.Current.changeDisplayName({
                    name: name
                }).then(function(resp) {
                    return resp
                })
            },
            changePassword: function(data) {
                return Lotus.User.Current.changePassword(data).then(function(resp) {
                    return resp;
                })
            },
            changeSignInName: function(name) {},
            checkUsername: function(name) {
                return Lotus.User.Current.checkUsername({
                    name: name
                }).then(function(resp) {
                    return resp
                })
            },
            completeNewPassword: function(password) {
                return Lotus.User.completeNewPassword({
                    newPassword: password
                }).then(function(resp) {
                    return resp
                })
            },
            create: function(data) {
                return Lotus.User.Current.create(data).then(function(resp) {
                    return resp
                })
            },
            me: function(data) {
                return Lotus.User.Current.profile(data).then(function(resp) {
                    return resp
                })
            },
            setUserPassword: function(data) {
                return Lotus.User.Current.setUserPassword(data).then(function(response) {
                    return response
                })
            },
            updateCreditLimit: function(data) {
                return Lotus.User.Current.updateCreditLimit(data).then(function(resp) {
                    return resp
                })
            },
            getChildren: function(data) {
                data.Size = data.Size === undefined ? 20 : data.Size;
                return Lotus.User.Current.getChildren(data).then(function(resp) {
                    return resp
                })
            },
            searchChildren: function(data) {
                data.Size = data.size === undefined ? 20 : data.size;
                return Lotus.User.Current.searchPaging(data).then(function(resp) {
                    return resp
                })
            },
            getDescendantsByLevel: function(data) {
                data.Size = data.size === undefined ? 20 : data.size;
                return Lotus.User.Current.getDescendantsByLevel(data).then(function(response) {
                    return response
                })
            },
            searchLite: function(data) {
                return Lotus.User.Current.searchLite(data).then(function(resp) {
                    return resp
                })
            },
            enableUser: function(data) {
                return Lotus.User.Current.enableUser(data).then(function(response) {
                    return response;
                })
            },
            disableUser: function(data) {
                return Lotus.User.Current.disableUser(data).then(function(response) {
                    return response
                })
            },
            generateTOTPSecretCode: function() {
                return Lotus.User.Current.generateTOTPSecretCode().then(function(resp) {
                    return resp;
                })
            },
            enableMFA: function(sharedKey) {
                return Lotus.User.Current.enableMFA({
                    code: sharedKey
                }).then(function(resp) {
                    return resp;
                })
            },
            disableMFA: function(sharedKey) {
                return Lotus.User.Current.disableMFA({
                    code: sharedKey
                }).then(function(resp) {
                    return resp;
                })
            },
            setUserRequiredMFA: function(data) {
                return Lotus.User.Current.setUserRequiredMFA(data).then(function(resp) {
                    return resp;
                })
            },
            disableUserMFA: function(data) {
                return Lotus.User.Current.disableUserMFA({
                    userId: data
                }).then(function(resp) {
                    return resp;
                })
            },
            manualResetPlayerBalance: function(data) {
                return Lotus.User.Current.manualResetPlayerBalance({
                    userId: data
                }).then(function(resp) {
                    return resp;
                })
            },
            updateUserProfile: function(data) {
                return Lotus.User.Current.updateUserProfile(data).then(function(resp) {
                    return resp;
                })
            },
            getAncestors: function(data) {
                return Lotus.User.Current.getAncestors(data).then(function(response) {
                    return response
                })
            },
            block: function(data) {
                return Lotus.User.Current.block(data).then(function(response) {
                    return response
                })
            },
            unblock: function(data) {
                return Lotus.User.Current.unblock(data).then(function(response) {
                    return response
                })
            },
            suspend: function(data) {
                return Lotus.User.Current.suspend(data).then(function(response) {
                    return response
                })
            },
            unsuspend: function(data) {
                return Lotus.User.Current.unsuspend(data).then(function(response) {
                    return response
                })
            },
            forceSignOut: function(data) {
                return Lotus.User.Current.forceSignOut(data).then(function(response) {
                    return response
                })
            }
        };
        this.UserProduction = {
            getUserProducts: function(data) {
                return Lotus.User.UserProduction.getUserProducts(data).then(function(response) {
                    return response
                })
            },
            updateUserProduct: function(data) {
                return Lotus.User.UserProduction.updateUserProduct(data).then(function(response) {
                    return response
                })
            }
        };
        this.UserTag = {
            getChildrenTags: function() {
                return Lotus.User.UserTag.getChildrenTags().then(function(response) {
                    return response
                })
            },
            getTagged: function() {
                return Lotus.User.UserTag.getTagged().then(function(response) {
                    return response
                })
            },
            tag: function(data) {
                return Lotus.User.UserTag.tag(data).then(function(response) {
                    return response
                })
            },
            deleteChildTag: function(data) {
                return Lotus.User.UserTag.deleteChildTag(data).then(function(response) {
                    return response
                })
            }
        };
        this.Wallet = {
            getWallet: function(data) {
                return Lotus.User.Wallet.getWallet(data).then(function(response) {
                    return response
                })
            },
            updateCreditLimit: function(data) {
                return Lotus.User.Wallet.updateCreditLimit(data).then(function(response) {
                    return response
                })
            },
            settle: function(data) {
                return Lotus.User.Wallet.settle(data).then(function(response) {
                    return response
                })
            },
            updatePaymentMethod: function(data) {
                return Lotus.User.Wallet.updatePaymentMethod(data).then(function(response) {
                    return response
                })
            },
        };
        this.SubUser = {
            create: function(data) {
                return Lotus.User.SubUser.create(data).then(function(response) {
                    return response
                })
            },
            getAll: function() {
                return Lotus.User.SubUser.getAll().then(function(response) {
                    return response
                })
            },
            disable: function(data) {
                return Lotus.User.SubUser.disable(data).then(function(response) {
                    return response
                })
            },
            enable: function(data) {
                return Lotus.User.SubUser.enable(data).then(function(response) {
                    return response
                })
            },
            setPassword: function(data) {
                return Lotus.User.SubUser.setPassword(data).then(function(response) {
                    return response
                })
            },
            setAcl: function(data) {
                return Lotus.User.SubUser.setAcl(data).then(function(response) {
                    return response
                })
            },
            disableMfa: function(data) {
                return Lotus.User.SubUser.disableMfa(data).then(function(response) {
                    return response
                })
            },
            setRequiredMFA: function(data) {
                return Lotus.User.SubUser.setRequiredMFA(data).then(function(response) {
                    return response
                })
            },
            updateProfile: function(data) {
                return Lotus.User.SubUser.updateProfile(data).then(function(response) {
                    return response
                })
            }
        };
        this.Reporting = {
            Statements: {
                getUserReportGroupByProduction: function(data) {
                    return Lotus.Reporting.Statement.getUserReportGroupByProduction(data).then(function(response) {
                        return response
                    })
                },
                getChildrenReportGroupByUser: function(data) {
                    return Lotus.Reporting.Statement.getChildrenReportGroupByUser(data).then(function(response) {
                        return response
                    })
                },
                getPlayerReportGroupByProduction: function(data) {
                    return Lotus.Reporting.Statement.getPlayerReportGroupByProduction(data).then(function(response) {
                        return response
                    })
                }
            },
            Consolidation: {
                getReportGroupByUser: function(data) {
                    return Lotus.Reporting.Consolidation.getReportGroupByUser(data).then(function(response) {
                        return response
                    })
                },
                getReportGroupByProduction: function(data) {
                    return Lotus.Reporting.Consolidation.getReportGroupByProduction(data).then(function(response) {
                        return response
                    })
                }
            },
            Traditional: {
                Statement: {
                    getUserReportGroupByBetType: function(data) {
                        return Lotus.Lottery.Report.Statement.getUserReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.Lottery.Report.Statement.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByBetType: function(data) {
                        return Lotus.Lottery.Report.Statement.getPlayerReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItems: function(data) {
                        return Lotus.Lottery.Report.Statement.getTicketItems(data).then(function(response) {
                            return response
                        })
                    },
                },
                Outstanding: {
                    getUserReportGroupByBetType: function(data) {
                        return Lotus.Lottery.Report.Outstanding.getUserReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.Lottery.Report.Outstanding.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByBetType: function(data) {
                        return Lotus.Lottery.Report.Outstanding.getPlayerReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItems: function(data) {
                        return Lotus.Lottery.Report.Outstanding.getTicketItems(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItemsByNumber: function(data) {
                        return Lotus.Lottery.Report.Outstanding.getTicketItemsByNumber(data).then(function(response) {
                            return response
                        })
                    },
                    getHighestPointTicketItemsByNumber: function(data) {
                        return Lotus.Lottery.Report.Outstanding.getHighestPointTicketItemsByNumber(data).then(function(response) {
                            return response
                        })
                    }
                },
                PlayerWinLose: {
                    getMyPlayersReportGroupByUser: function(data) {
                        return Lotus.Lottery.Report.PlayerWinLose.getMyPlayersReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByUserTerm: function(data) {
                        return Lotus.Lottery.Report.PlayerWinLose.getPlayerReportGroupByUserTerm(data).then(function(response) {
                            return response
                        })
                    }
                },
                Cancelation: {
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.Lottery.Report.Cancelation.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByBetType: function(data) {
                        return Lotus.Lottery.Report.Cancelation.getPlayerReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItems: function(data) {
                        return Lotus.Lottery.Report.Cancelation.getTicketItems(data).then(function(response) {
                            return response
                        })
                    },
                    getReportGroupByBetType: function(data) {
                        return Lotus.Lottery.Report.Cancelation.getReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                }
            },
            Legend: {
                Statement: {
                    getUserReportGroupByBetType: function(data) {
                        return Lotus.Lottery789.Report.Statement.getUserReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.Lottery789.Report.Statement.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByBetType: function(data) {
                        return Lotus.Lottery789.Report.Statement.getPlayerReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItems: function(data) {
                        return Lotus.Lottery789.Report.Statement.getTicketItems(data).then(function(response) {
                            return response
                        })
                    },
                    getUserReportGroupByTerm: function(data) {
                        return Lotus.Lottery789.Report.Statement.getUserReportGroupByTerm(data).then(function(response) {
                            return response
                        })
                    },
                },
                Outstanding: {
                    getUserReportGroupByBetType: function(data) {
                        return Lotus.Lottery789.Report.Outstanding.getUserReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.Lottery789.Report.Outstanding.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByBetType: function(data) {
                        return Lotus.Lottery789.Report.Outstanding.getPlayerReportGroupByBetType(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItems: function(data) {
                        return Lotus.Lottery789.Report.Outstanding.getTicketItems(data).then(function(response) {
                            return response
                        })
                    },
                    getTicketItemsByNumber: function(data) {
                        return Lotus.Lottery789.Report.Outstanding.getTicketItemsByNumber(data).then(function(response) {
                            return response
                        })
                    },
                    getHighestPointTicketItemsByNumber: function(data) {
                        return Lotus.Lottery789.Report.Outstanding.getHighestPointTicketItemsByNumber(data).then(function(response) {
                            return response
                        })
                    }
                },
                PlayerWinLose: {
                    getMyPlayersReportGroupByUser: function(data) {
                        return Lotus.Lottery789.Report.PlayerWinLose.getMyPlayersReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    getPlayerReportGroupByUserTerm: function(data) {
                        return Lotus.Lottery789.Report.PlayerWinLose.getPlayerReportGroupByUserTerm(data).then(function(response) {
                            return response
                        })
                    }
                }
            },
            WMCasino: {
                Statement: {
                    getPlayerReportGroupByGameType: function(data) {
                        return Lotus.WMCasino.Report.Statement.getPlayerReportGroupByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    getBetItems: function(data) {
                        return Lotus.WMCasino.Report.Statement.getBetItems(data).then(function(response) {
                            return response
                        })
                    },
                    getUserReportGroupByGameType: function(data) {
                        return Lotus.WMCasino.Report.Statement.getUserReportGroupByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.WMCasino.Report.Statement.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    }
                }
            },
            LegendCasino: {
                Statement: {
                    getPlayerReportGroupByGameType: function(data) {
                        return Lotus.SenCasino.Report.Statement.getPlayerReportGroupByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    getBetItems: function(data) {
                        return Lotus.SenCasino.Games.Sedie.Report.getBetItems(data).then(function(response) {
                            return response
                        })
                    },
                    getUserReportGroupByGameType: function(data) {
                        return Lotus.SenCasino.Report.Statement.getUserReportGroupByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    getChildrenReportGroupByUser: function(data) {
                        return Lotus.SenCasino.Report.Statement.getChildrenReportGroupByUser(data).then(function(response) {
                            return response
                        })
                    },
                    Player: {
                        getPlayerReportGroupByGameType: function(data) {
                            return Lotus.SenCasino.Report.PlayerWinLose.getPlayerReportGroupByGameType(data).then(function(response) {
                                return response
                            })
                        },
                        getMyPlayersReportGroupByUser: function(data) {
                            return Lotus.SenCasino.Report.PlayerWinLose.getMyPlayersReportGroupByUser(data).then(function(response) {
                                return response
                            })
                        },
                    }
                }
            }
        };
        this.Games = {
            Lottery: {
                PriceChangeTask: {
                    list: function(data) {
                        return Lotus.Lottery.PriceChangeTask.list(data).then(function(response) {
                            return response
                        })
                    },
                    create: function(data) {
                        return Lotus.Lottery.PriceChangeTask.create(data).then(function(response) {
                            return response
                        })
                    }
                },
                NumberShare: {
                    getAll: function(data) {
                        return Lotus.Lottery.NumberShare.getAll(data).then(function(response) {
                            return response
                        })
                    },
                    update: function(data) {
                        return Lotus.Lottery.NumberShare.update(data).then(function(response) {
                            return response
                        })
                    },
                    delete: function(data) {
                        return Lotus.Lottery.NumberShare.delete(data).then(function(response) {
                            return response
                        })
                    }
                },
                Term: {
                    getTermsByDate: function(data) {
                        return Lotus.Lottery.Term.getTermsByDate(data).then(function(response) {
                            return response;
                        })
                    },
                    updateGameStatus: function(data) {
                        console.log(data)
                        return Lotus.Lottery.Term.updateGameStatus(data).then(function(response) {
                            return response
                        })
                    },
                    updateGameAutoClose: function(data) {
                        return Lotus.Lottery.Term.updateGameAutoClose(data).then(function(response) {
                            return response
                        })
                    },
                    create: function(data) {
                        return Lotus.Lottery.Term.create(data).then(function(response) {
                            return response
                        })
                    }
                },
                LotteryResult: {
                    getNorthernResultByTerm: function(data) {
                        return Lotus.Lottery.LotteryResult.getNorthernResultByTerm(data).then(function(response) {
                            return response
                        })
                    },
                    updateNorthernResult: function(data) {
                        return Lotus.Lottery.LotteryResult.updateNorthernResult(data).then(function(response) {
                            return response
                        })
                    },
                    updateNorthernResultLive: function(data) {
                        return Lotus.Lottery.LotteryResult.updateNorthernResultLive(data).then(function(response) {
                            return response
                        })
                    },
                    updateSouthernResultLive: function(data) {
                        return Lotus.Lottery.LotteryResult.updateSouthernResultLive(data).then(function(response) {
                            return response
                        })
                    },
                    getSouthernResultByTerm: function(data) {
                        return Lotus.Lottery.LotteryResult.getSouthernResultByTerm(data).then(function(response) {
                            return response
                        })
                    },
                    updateSouthernResult: function(data) {
                        return Lotus.Lottery.LotteryResult.updateSouthernResult(data).then(function(response) {
                            return response
                        })
                    },
                    getCaishen4ResultByTerm: function(data) {
                        return Lotus.Lottery.LotteryResult.getCaishen4ResultByTerm(data).then(function(response) {
                            return response
                        })
                    },
                    updateCaishen4Result: function(data) {
                        return Lotus.Lottery.LotteryResult.updateCaishen4Result(data).then(function(response) {
                            return response
                        })
                    }
                },
                PriceTable: {
                    getOdds: function(data) {
                        return Lotus.Lottery.PriceTable.getOdds(data).then(function(response) {
                            return response
                        })
                    },
                    updatePrices: function(data) {
                        return Lotus.Lottery.PriceTable.updatePrices(data).then(function(response) {
                            return response
                        })
                    },
                    closeNumbers: function(data) {
                        return Lotus.Lottery.PriceTable.closeNumbers(data).then(function(response) {
                            return response
                        })
                    },
                    openNumbers: function(data) {
                        return Lotus.Lottery.PriceTable.openNumbers(data).then(function(response) {
                            return response
                        })
                    }
                },
                Parameter: {
                    getParametersByGameType: function(data) {
                        return Lotus.Lottery.Parameter.getParametersByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    updateParameter: function(data) {
                        return Lotus.Lottery.Parameter.updateParameter(data).then(function(response) {
                            return response
                        })
                    }
                },
                PriceAutoManagement: {
                    getSettingsByGameType: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.getSettingsByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    updateAutoChangePriceType: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.updateAutoChangePriceType(data).then(function(response) {
                            return response
                        })
                    },
                    updatePoints: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.updatePoints(data).then(function(response) {
                            return response
                        })
                    },
                    updateRisks: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.updateRisks(data).then(function(response) {
                            return response
                        })
                    },
                    updatePointAvg: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.updatePointAvg(data).then(function(response) {
                            return response
                        })
                    },
                    updateNumberPriceException: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.updateNumberPriceException(data).then(function(response) {
                            return response
                        })
                    },
                    getNumberPriceExceptions: function(data) {
                        return Lotus.Lottery.PriceAutoManagement.getNumberPriceExceptions(data).then(function(response) {
                            return response
                        })
                    }
                },
                Live: {
                    makeOdds: function(data) {
                        console.log(data)
                        return Lotus.Lottery.Live.makeOdds(data).then(function(response) {
                            return response
                        })
                    },
                    getBasePrices: function(data) {
                        return Lotus.Lottery.Live.getBasePrices(data).then(function(response) {
                            return response
                        })
                    },
                    updateBasePrice: function(data) {
                        return Lotus.Lottery.Live.updateBasePrice(data).then(function(response) {
                            return response
                        })
                    },
                    calculateBasePrice: function(data) {
                        return Lotus.Lottery.Live.calculateBasePrice(data).then(function(response) {
                            return response
                        })
                    },
                    current: function(data) {
                        return Lotus.Lottery.Live.current(data).then(function(response) {
                            return response
                        })
                    },
                    ping: function(data) {
                        return Lotus.Lottery.Live.ping(data).then(function(response) {
                            return response
                        })
                    },
                    open: function(data) {
                        return Lotus.Lottery.Live.open(data).then(function(response) {
                            return response
                        })
                    },
                    close: function(data) {
                        return Lotus.Lottery.Live.close(data).then(function(response) {
                            return response
                        })
                    },
                    closePrize: function(data) {
                        return Lotus.Lottery.Live.closePrize(data).then(function(response) {
                            return response
                        })
                    }
                },
                BookKeeping: {
                    startExecution: function(data) {
                        return Lotus.Lottery.BookKeeping.startExecution(data).then(function(response) {
                            return response
                        })
                    }
                },
                ShareHolder: {
                    getShareHolders: function() {
                        return Lotus.Lottery.ShareHolder.getShareHolders().then(function(response) {
                            return response
                        })
                    },
                    getAncestorsShareHolderOverview: function(data) {
                        return Lotus.Lottery.ShareHolder.getAncestorsShareHolderOverview(data).then(function(response) {
                            return response
                        })
                    },
                    getUserShareHolders: function(data) {
                        return Lotus.Lottery.ShareHolder.getUserShareHolders(data).then(function(response) {
                            return response
                        })
                    },
                    updateUserShareHolders: function(data) {
                        return Lotus.Lottery.ShareHolder.updateUserShareHolders(data).then(function(response) {
                            return response
                        })
                    }
                },
                UserGameSetting: {
                    getSettings: function() {
                        return Lotus.Lottery.UserGameSetting.getSettings().then(function(response) {
                            return response
                        })
                    },
                    getUserSettings: function(data) {
                        return Lotus.Lottery.UserGameSetting.getUserSettings(data).then(function(response) {
                            return response
                        })
                    },
                    updateUserSettings: function(data) {
                        return Lotus.Lottery.UserGameSetting.updateUserSettings(data).then(function(response) {
                            return response
                        })
                    }
                },
                PayoutsType: {
                    create: function(data) {
                        return Lotus.Lottery.PayoutsType.create(data).then(function(response) {
                            return response
                        })
                    },
                    getAll: function() {
                        return Lotus.Lottery.PayoutsType.getAll().then(function(response) {
                            return response
                        })
                    },
                    getById: function(data) {
                        return Lotus.Lottery.PayoutsType.getById(data).then(function(response) {
                            return response
                        })
                    },
                    updateById: function(data) {
                        return Lotus.Lottery.PayoutsType.updateById(data).then(function(response) {
                            return response
                        })
                    },
                    updatePlayerPayoutsType: function(data) {
                        return Lotus.Lottery.PayoutsType.updatePlayerPayoutsType(data).then(function(response) {
                            return response
                        })
                    },
                    getUserPayoutsType: function(data) {
                        return Lotus.Lottery.PayoutsType.getUserPayoutsType(data).then(function(response) {
                            return response
                        })
                    }
                },
                ReportTicket: {
                    getTicketsByNumbers: function(data) {
                        return Lotus.Lottery.Report.Ticket.getTicketsByNumbers(data).then(function(response) {
                            return response
                        })
                    },
                    getItemsByTicket: function(data) {
                        return Lotus.Lottery.Report.TicketItem.getItemsByTicket(data).then(function(response) {
                            return response
                        })
                    },
                    createTask: function(data) {
                        return Lotus.Lottery.TicketCancelTask.createTask(data).then(function(response) {
                            return response
                        })
                    },
                    getTasks: function(data) {
                        return Lotus.Lottery.TicketCancelTask.getTasks(data).then(function(response) {
                            return response
                        })
                    }
                },
                PublicOdds: {
                    getSettings: function() {
                        return Lotus.Lottery.PublicOdds.getSettings().then(function(response) {
                            return response
                        })
                    },
                    updateUserPublicOdds: function(data) {
                        return Lotus.Lottery.PublicOdds.updateUserPublicOdds(data).then(function(response) {
                            return response
                        })
                    }
                }
            },
            Legend: {
                Term: {
                    create: function(data) {
                        return Lotus.Lottery789.Term.create(data).then(function(response) {
                            return response
                        })
                    },
                    latest: function(data) {
                        return Lotus.Lottery789.Term.latest(data).then(function(response) {
                            return response
                        })
                    },
                    getTermsByDateGameType: function(data) {
                        return Lotus.Lottery789.Term.getTermsByDateGameType(data).then(function(response) {
                            return response
                        })
                    },
                    updateDrawResult: function(data) {
                        return Lotus.Lottery789.Term.updateDrawResult(data).then(function(response) {
                            return response
                        })
                    },
                    updateGameAutoClose: function(data) {
                        return Lotus.Lottery789.Term.updateGameAutoClose(data).then(function(response) {
                            return response
                        })
                    },
                    updateGameStatus: function(data) {
                        return Lotus.Lottery789.Term.updateGameStatus(data).then(function(response) {
                            return response
                        })
                    }
                },
                LotteryResult: {
                    getNorthernResultByTerm: function(data) {
                        return Lotus.Lottery789.LotteryResult.getNorthernResultByTerm(data).then(function(response) {
                            return response
                        })
                    },
                    updateNorthernResult: function(data) {
                        return Lotus.Lottery789.LotteryResult.updateNorthernResult(data).then(function(response) {
                            return response
                        })
                    },
                    getSouthernResultByTerm: function(data) {
                        return Lotus.Lottery789.LotteryResult.getSouthernResultByTerm(data).then(function(response) {
                            return response
                        })
                    },
                    updateSouthernResult: function(data) {
                        return Lotus.Lottery789.LotteryResult.updateSouthernResult(data).then(function(response) {
                            return response
                        })
                    },
                    updateNorthernResultLive: function(data) {
                        return Lotus.Lottery789.LotteryResult.updateNorthernResultLive(data).then(function(response) {
                            return response
                        })
                    },
                    updateSouthernResultLive: function(data) {
                        return Lotus.Lottery789.LotteryResult.updateSouthernResultLive(data).then(function(response) {
                            return response
                        })
                    },
                },
                Parameter: {
                    getParametersByGameType: function(data) {
                        return Lotus.Lottery789.Parameter.getParametersByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    updateParameter: function(data) {
                        return Lotus.Lottery789.Parameter.updateParameter(data).then(function(response) {
                            return response
                        })
                    }
                },
                PriceAutoManagement: {
                    getSettingsByGameType: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.getSettingsByGameType(data).then(function(response) {
                            return response
                        })
                    },
                    updateAutoChangePriceType: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.updateAutoChangePriceType(data).then(function(response) {
                            return response
                        })
                    },
                    updatePoints: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.updatePoints(data).then(function(response) {
                            return response
                        })
                    },
                    updateRisks: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.updateRisks(data).then(function(response) {
                            return response
                        })
                    },
                    updatePointAvg: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.updatePointAvg(data).then(function(response) {
                            return response
                        })
                    },
                    updateNumberPriceException: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.updateNumberPriceException(data).then(function(response) {
                            return response
                        })
                    },
                    getNumberPriceExceptions: function(data) {
                        return Lotus.Lottery789.PriceAutoManagement.getNumberPriceExceptions(data).then(function(response) {
                            return response
                        })
                    }
                },
                PayoutsType: {
                    create: function(data) {
                        return Lotus.Lottery789.PayoutsType.create(data).then(function(response) {
                            return response
                        })
                    },
                    getAll: function() {
                        return Lotus.Lottery789.PayoutsType.getAll().then(function(response) {
                            return response
                        })
                    },
                    getById: function(data) {
                        return Lotus.Lottery789.PayoutsType.getById(data).then(function(response) {
                            return response
                        })
                    },
                    updateById: function(data) {
                        return Lotus.Lottery789.PayoutsType.updateById(data).then(function(response) {
                            return response
                        })
                    },
                    updatePlayerPayoutsType: function(data) {
                        return Lotus.Lottery789.PayoutsType.updatePlayerPayoutsType(data).then(function(response) {
                            return response
                        })
                    },
                    getUserPayoutsType: function(data) {
                        return Lotus.Lottery789.PayoutsType.getUserPayoutsType(data).then(function(response) {
                            return response
                        })
                    }
                },
                PriceChangeTask: {
                    list: function(data) {
                        return Lotus.Lottery789.PriceChangeTask.list(data).then(function(response) {
                            return response
                        })
                    },
                    create: function(data) {
                        return Lotus.Lottery789.PriceChangeTask.create(data).then(function(response) {
                            return response
                        })
                    }
                },
                NumberShare: {
                    getAll: function(data) {
                        return Lotus.Lottery789.NumberShare.getAll(data).then(function(response) {
                            return response
                        })
                    },
                    update: function(data) {
                        return Lotus.Lottery789.NumberShare.update(data).then(function(response) {
                            return response
                        })
                    },
                    delete: function(data) {
                        return Lotus.Lottery789.NumberShare.delete(data).then(function(response) {
                            return response
                        })
                    }
                },
                PriceTable: {
                    getOdds: function(data) {
                        return Lotus.Lottery789.PriceTable.getOdds(data).then(function(response) {
                            return response
                        })
                    },
                    updatePrices: function(data) {
                        return Lotus.Lottery789.PriceTable.updatePrices(data).then(function(response) {
                            return response
                        })
                    },
                    closeNumbers: function(data) {
                        return Lotus.Lottery789.PriceTable.closeNumbers(data).then(function(response) {
                            return response
                        })
                    },
                    openNumbers: function(data) {
                        return Lotus.Lottery789.PriceTable.openNumbers(data).then(function(response) {
                            return response
                        })
                    }
                },
                ShareHolder: {
                    getShareHolders: function() {
                        return Lotus.Lottery789.ShareHolder.getShareHolders().then(function(response) {
                            return response
                        })
                    },
                    getAncestorsShareHolderOverview: function(data) {
                        return Lotus.Lottery789.ShareHolder.getAncestorsShareHolderOverview(data).then(function(response) {
                            return response
                        })
                    },
                    getUserShareHolders: function(data) {
                        return Lotus.Lottery789.ShareHolder.getUserShareHolders(data).then(function(response) {
                            return response
                        })
                    },
                    updateUserShareHolders: function(data) {
                        return Lotus.Lottery789.ShareHolder.updateUserShareHolders(data).then(function(response) {
                            return response
                        })
                    }
                },
                UserGameSetting: {
                    getSettings: function() {
                        return Lotus.Lottery789.UserGameSetting.getSettings().then(function(response) {
                            return response
                        })
                    },
                    getUserSettings: function(data) {
                        return Lotus.Lottery789.UserGameSetting.getUserSettings(data).then(function(response) {
                            return response
                        })
                    },
                    updateUserSettings: function(data) {
                        return Lotus.Lottery789.UserGameSetting.updateUserSettings(data).then(function(response) {
                            return response
                        })
                    }
                },
                PublicOdds: {
                    getSettings: function() {
                        return Lotus.Lottery789.PublicOdds.getSettings().then(function(response) {
                            return response
                        })
                    },
                    updateUserPublicOdds: function(data) {
                        return Lotus.Lottery789.PublicOdds.updateUserPublicOdds(data).then(function(response) {
                            return response
                        })
                    }
                },
                LoLive: {
                    getPrizePrices: function(data) {
                        return Lotus.Lottery789.Live.getPrizePrices(data).then(function(response) {
                            return response
                        })
                    },
                    updatePrizePrice: function(data) {
                        return Lotus.Lottery789.Live.updatePrizePrice(data).then(function(response) {
                            return response
                        })
                    },
                    calculatePrizePrice: function(data) {
                        return Lotus.Lottery789.Live.calculatePrizePrice(data).then(function(response) {
                            return response
                        })
                    },
                    latest: function(data) {
                        return Lotus.Lottery789.Live.latest(data).then(function(response) {
                            return response
                        })
                    },
                    ping: function(data) {
                        return Lotus.Lottery789.Live.ping(data).then(function(response) {
                            return response
                        })
                    },
                    open: function(data) {
                        return Lotus.Lottery789.Live.open(data).then(function(response) {
                            return response
                        })
                    },
                    close: function(data) {
                        return Lotus.Lottery789.Live.close(data).then(function(response) {
                            return response
                        })
                    },
                    closePrize: function(data) {
                        return Lotus.Lottery789.Live.closePrize(data).then(function(response) {
                            return response
                        })
                    },
                    openMany: function(data) {
                        return Lotus.Lottery789.Live.openMany(data).then(function(response) {
                            return response
                        })
                    },
                    closeMany: function(data) {
                        return Lotus.Lottery789.Live.closeMany(data).then(function(response) {
                            return response
                        })
                    },
                    closePrizeMany: function(data) {
                        return Lotus.Lottery789.Live.closePrizeMany(data).then(function(response) {
                            return response
                        })
                    },
                    notify: function(data) {
                        return Lotus.Lottery789.Live.notify(data).then(function(response) {
                            return response
                        })
                    }
                },
                BookKeeping: {
                    startExecution: function(data) {
                        return Lotus.Lottery789.BookKeeping.startExecution(data).then(function(response) {
                            return response
                        })
                    }
                },
            },
            WMCasino: {
                ShareHolder: {
                    getUserShareHolder: function(data) {
                        return Lotus.WMCasino.ShareHolder.getUserShareHolder(data).then(function(response) {
                            return response;
                        })
                    },
                    updateUserShareHolder: function(data) {
                        return Lotus.WMCasino.ShareHolder.updateUserShareHolder(data).then(function(response) {
                            return response;
                        })
                    },
                    getAncestorsShareHolderOverview: function(data) {
                        return Lotus.WMCasino.ShareHolder.getAncestorsShareHolderOverview(data).then(function(response) {
                            return response;
                        })
                    }
                },
                UserGame: {
                    getUserGame: function(data) {
                        return Lotus.WMCasino.UserGame.getUserGame(data).then(function(response) {
                            return response
                        })
                    },
                    updateUserGame: function(data) {
                        return Lotus.WMCasino.UserGame.updateUserGame(data).then(function(response) {
                            return response
                        })
                    },
                    enablePlayerBet: function(data) {
                        return Lotus.WMCasino.UserGame.enablePlayerBet(data).then(function(response) {
                            return response
                        })
                    },
                    resetPlayerWinLoseStats: function(data) {
                        return Lotus.WMCasino.UserGame.resetPlayerWinLoseStats(data).then(function(response) {
                            return response
                        })
                    }
                }
            },
            LegendCasino: {
                ShareHolder: {
                    getUserShareHolder: function(data) {
                        return Lotus.SenCasino.ShareHolder.getUserShareHolder(data).then(function(response) {
                            return response;
                        })
                    },
                    updateUserShareHolder: function(data) {
                        return Lotus.SenCasino.ShareHolder.updateUserShareHolder(data).then(function(response) {
                            return response;
                        })
                    },
                    getAncestorsShareHolderOverview: function(data) {
                        return Lotus.SenCasino.ShareHolder.getAncestorsShareHolderOverview(data).then(function(response) {
                            return response;
                        })
                    }
                },
                UserGame: {
                    getUserGame: function(data) {
                        return Lotus.SenCasino.UserGame.getUserGame(data).then(function(response) {
                            return response
                        })
                    },
                    updateUserGame: function(data) {
                        return Lotus.SenCasino.UserGame.updateUserGame(data).then(function(response) {
                            return response
                        })
                    },
                    enablePlayerBet: function(data) {
                        return Lotus.SenCasino.UserGame.enablePlayerBet(data).then(function(response) {
                            return response
                        })
                    },
                    resetPlayerWinLoseStats: function(data) {
                        return Lotus.SenCasino.UserGame.resetPlayerWinLoseStats(data).then(function(response) {
                            return response
                        })
                    }
                },
                Dealer: {
                    create: function(data) {
                        return Lotus.SenCasino.Dealer.create(data).then(function(response) {
                            return response
                        })
                    },
                    list: function(data) {
                        return Lotus.SenCasino.Dealer.list(data).then(function(response) {
                            return response
                        })
                    },
                    update: function(data) {
                        return Lotus.SenCasino.Dealer.update(data).then(function(response) {
                            return response
                        })
                    },
                },
                Sedie: {
                    Area: {
                        getAreas: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Area.getAreas(data).then(function(response) {
                                return response
                            })
                        },
                        updateProperties: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Area.updateProperties(data).then(function(response) {
                                return response
                            })
                        },
                        updateStatus: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Area.updateStatus(data).then(function(response) {
                                return response
                            })
                        },
                    },
                    Game: {
                        getGamesByAreaNumberDate: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Game.getGamesByAreaNumberDate(data).then(function(response) {
                                return response
                            })
                        },
                        updateGameResult: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Game.updateGameResult(data).then(function(response) {
                                return response
                            })
                        },
                    },
                    Parameter: {
                        getParameters: function() {
                            return Lotus.SenCasino.Games.Sedie.Parameter.getParameters().then(function(response) {
                                return response
                            })
                        },
                        updateProperties: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Parameter.updateProperties(data).then(function(response) {
                                return response
                            })
                        },
                    },
                    BookKeeping: {
                        redo: function(data) {
                            return Lotus.SenCasino.Games.Sedie.BookKeeping.redo(data).then(function(response) {
                                return response
                            })
                        },
                        cancelGame: function(data) {
                            return Lotus.SenCasino.Games.Sedie.BookKeeping.cancelGame(data).then(function(response) {
                                return response
                            })
                        }
                    },
                    Report: {
                        getBetItemsByGame: function(data) {
                            return Lotus.SenCasino.Games.Sedie.Report.getBetItemsByGame(data).then(function(response) {
                                return response
                            })
                        }
                    },
                    GameStats: {
                        getStatsByRound: function(data) {
                            return Lotus.SenCasino.Games.Sedie.GameStats.getStatsByRound(data).then(function(response) {
                                return response
                            })
                        }
                    }
                },
            }
        };
        this.Logging = {
            ActivityIdentity: {
                searchIdentityActivity: function(data) {
                    return Lotus.Logging.Activity.Identity.searchIdentityActivity(data).then(function(response) {
                        return response
                    })
                },
                searchAuthActivity: function(data) {
                    return Lotus.Logging.Activity.Identity.searchAuthActivity(data).then(function(response) {
                        return response
                    })
                },
                searchAccountBalanceTx: function(data) {
                    return Lotus.Logging.Activity.Identity.searchAccountBalanceTx(data).then(function(response) {
                        return response
                    })
                },
            },
            ActivityLottery: {
                searchLoLiveActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery.searchLoLiveActivity(data).then(function(response) {
                        return response
                    })
                },
                searchHandleNumberActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery.searchHandleNumberActivity(data).then(function(response) {
                        return response
                    })
                },
                searchShareHolderActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery.searchShareHolderActivity(data).then(function(response) {
                        return response
                    })
                },
                searchUserGameSettingActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery.searchUserGameSettingActivity(data).then(function(response) {
                        return response
                    })
                },
                searchTermActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery.searchTermActivity(data).then(function(response) {
                        return response
                    })
                }
            },
            WMCasino: {
                searchShareHolderActivity: function(data) {
                    return Lotus.Logging.Activity.WMCasino.searchShareHolderActivity(data).then(function(response) {
                        return response
                    })
                },
                searchUserGameActivity: function(data) {
                    return Lotus.Logging.Activity.WMCasino.searchUserGameActivity(data).then(function(response) {
                        return response
                    })
                }
            },
            Legend: {
                searchShareHolderActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery789.searchShareHolderActivity(data).then(function(response) {
                        return response
                    })
                },
                searchUserGameSettingActivity: function(data) {
                    return Lotus.Logging.Activity.Lottery789.searchUserGameSettingActivity(data).then(function(response) {
                        return response
                    })
                },
                searchLiveActivity: function(data) {
                    return Lotus.Lottery789.Logging.searchLiveActivity(data).then(function(response) {
                        return response
                    })
                },
                searchTermActivity: function(data) {
                    return Lotus.Lottery789.Logging.searchTermActivity(data).then(function(response) {
                        return response
                    })
                }
            },
            LegendCasino: {
                searchShareHolderActivity: function(data) {
                    return Lotus.SenCasino.Logging.searchShareHolderActivity(data).then(function(response) {
                        return response
                    })
                },
                searchUserGameActivity: function(data) {
                    return Lotus.SenCasino.Logging.searchUserGameActivity(data).then(function(response) {
                        return response
                    })
                },
                Sedie: {
                    searchGameActivity: function(data) {
                        return Lotus.SenCasino.Games.Sedie.Logging.searchGameActivity(data).then(function(response) {
                            return response
                        })
                    },
                    searchGameActivityByUser: function(data) {
                        return Lotus.SenCasino.Games.Sedie.Logging.searchGameActivityByUser(data).then(function(response) {
                            return response
                        })
                    },
                }
            }
        };
        this.Communication = {
            Notification: {
                Admin: {
                    getNotificationsByCategory: function(data) {
                        return Lotus.Communication.Notification.Admin.getNotificationsByCategory(data).then(function(response) {
                            return response;
                        })
                    },
                    createPrivateNotification: function(data) {
                        return Lotus.Communication.Notification.Admin.createPrivateNotification(data).then(function(response) {
                            return response;
                        })
                    },
                    updatePrivateNotification: function(data) {
                        return Lotus.Communication.Notification.Admin.updatePrivateNotification(data).then(function(response) {
                            return response;
                        })
                    },
                    createNotification: function(data) {
                        return Lotus.Communication.Notification.Admin.createNotification(data).then(function(response) {
                            return response;
                        })
                    },
                    updateNotification: function(data) {
                        return Lotus.Communication.Notification.Admin.updateNotification(data).then(function(response) {
                            return response;
                        })
                    },
                    deleteNotificationById: function(data) {
                        return Lotus.Communication.Notification.Admin.deleteNotificationById(data).then(function(response) {
                            return response;
                        })
                    }
                },
                getNotificationsByCategory: function(data) {
                    return Lotus.Communication.Notification.getNotificationsByCategory(data).then(function(response) {
                        return response;
                    })
                },
                getNotificationsOnSection: function(data) {
                    return Lotus.Communication.Notification.getNotificationsOnSection(data).then(function(response) {
                        return response;
                    })
                },
                read: function(data) {
                    return Lotus.Communication.Notification.read(data).then(function(response) {
                        return response;
                    })
                }
            }
        };
    })
})();
(function() {
    'use strict';
    angular.module('app.core').factory('msUtils', msUtils);

    function msUtils($window) {
        let mobileDetect = new MobileDetect($window.navigator.userAgent),
            browserInfo = null;
        let service = {
            exists: exists,
            detectBrowser: detectBrowser,
            guidGenerator: guidGenerator,
            generatorPassword: generatorPassword,
            isMobile: isMobile,
            toggleInArray: toggleInArray,
            generatorNumber: generatorNumber,
            groupBy: groupBy,
            dangerousBrowser: dangerousBrowser,
        };
        return service;

        function groupBy(array, f) {
            let groups = {};
            array.forEach(function(o) {
                let group = JSON.stringify(f(o));
                groups[group] = groups[group] || [];
                groups[group].push(o);
            });
            return Object.keys(groups).map(function(group) {
                return groups[group];
            })
        }

        function dangerousBrowser() {
            return $window.navigator.userAgent.indexOf("coc_coc_browser") !== -1
        }

        function exists(item, list) {
            return list.indexOf(item) > -1;
        }

        function detectBrowser() {
            if (browserInfo) {
                return browserInfo;
            }
            let browserData = [{
                string: $window.navigator.userAgent,
                subString: 'Edge',
                versionSearch: 'Edge',
                identity: 'Edge'
            }, {
                string: $window.navigator.userAgent,
                subString: 'Chrome',
                identity: 'Chrome'
            }, {
                string: $window.navigator.userAgent,
                subString: 'OmniWeb',
                versionSearch: 'OmniWeb/',
                identity: 'OmniWeb'
            }, {
                string: $window.navigator.vendor,
                subString: 'Apple',
                versionSearch: 'Version',
                identity: 'Safari'
            }, {
                prop: $window.opera,
                identity: 'Opera'
            }, {
                string: $window.navigator.vendor,
                subString: 'iCab',
                identity: 'iCab'
            }, {
                string: $window.navigator.vendor,
                subString: 'KDE',
                identity: 'Konqueror'
            }, {
                string: $window.navigator.userAgent,
                subString: 'Firefox',
                identity: 'Firefox'
            }, {
                string: $window.navigator.vendor,
                subString: 'Camino',
                identity: 'Camino'
            }, {
                string: $window.navigator.userAgent,
                subString: 'Netscape',
                identity: 'Netscape'
            }, {
                string: $window.navigator.userAgent,
                subString: 'MSIE',
                identity: 'Explorer',
                versionSearch: 'MSIE'
            }, {
                string: $window.navigator.userAgent,
                subString: 'Trident/7',
                identity: 'Explorer',
                versionSearch: 'rv'
            }, {
                string: $window.navigator.userAgent,
                subString: 'Gecko',
                identity: 'Mozilla',
                versionSearch: 'rv'
            }, {
                string: $window.navigator.userAgent,
                subString: 'Mozilla',
                identity: 'Netscape',
                versionSearch: 'Mozilla'
            }];
            let osData = [{
                string: $window.navigator.platform,
                subString: 'Win',
                identity: 'Windows'
            }, {
                string: $window.navigator.platform,
                subString: 'Mac',
                identity: 'Mac'
            }, {
                string: $window.navigator.platform,
                subString: 'Linux',
                identity: 'Linux'
            }, {
                string: $window.navigator.platform,
                subString: 'iPhone',
                identity: 'iPhone'
            }, {
                string: $window.navigator.platform,
                subString: 'iPod',
                identity: 'iPod'
            }, {
                string: $window.navigator.platform,
                subString: 'iPad',
                identity: 'iPad'
            }, {
                string: $window.navigator.platform,
                subString: 'Android',
                identity: 'Android'
            }];
            let versionSearchString = '';

            function searchString(data) {
                for (let i = 0; i < data.length; i++) {
                    let dataString = data[i].string;
                    let dataProp = data[i].prop;
                    versionSearchString = data[i].versionSearch || data[i].identity;
                    if (dataString) {
                        if (dataString.indexOf(data[i].subString) !== -1) {
                            return data[i].identity;
                        }
                    } else if (dataProp) {
                        return data[i].identity;
                    }
                }
            }

            function searchVersion(dataString) {
                let index = dataString.indexOf(versionSearchString);
                if (index === -1) {
                    return;
                }
                return parseInt(dataString.substring(index + versionSearchString.length + 1));
            }
            let browser = searchString(browserData) || 'unknown-browser';
            let version = searchVersion($window.navigator.userAgent) || searchVersion($window.navigator.appVersion) || 'unknown-version';
            let os = searchString(osData) || 'unknown-os';
            browser = browser.toLowerCase();
            version = browser + '-' + version;
            os = os.toLowerCase();
            browserInfo = {
                browser: browser,
                version: version,
                os: os
            };
            return browserInfo;
        }

        function guidGenerator() {
            let S4 = function() {
                return (((1 + Math.random()) * 0x10000) || 0).toString(16).substring(1);
            };
            return (S4() + S4() + S4() + S4() + S4() + S4());
        }

        function generatorPassword() {
            let result = '';
            let characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
            let charactersLength = characters.length;
            for (let i = 0; i < 10; i++) {
                result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return result;
        }

        function generatorNumber(length) {
            let result = '';
            let characters = '0123456789';
            let charactersLength = characters.length;
            for (let i = 0; i < length; i++) {
                result += characters.charAt(Math.floor(Math.random() * charactersLength));
            }
            return result;
        }

        function isMobile() {
            return mobileDetect.mobile();
        }

        function toggleInArray(item, array) {
            if (array.indexOf(item) === -1) {
                array.push(item);
            } else {
                array.splice(array.indexOf(item), 1);
            }
        }
    }
}());
(function() {
    'use strict';
    angular.module('app.core').provider('msApi', msApiProvider);

    function msApiProvider() {
        var provider = this;
        var $log = angular.injector(['ng']).get('$log');
        var baseUrl = '';
        var api = [];
        provider.setBaseUrl = setBaseUrl;
        provider.getBaseUrl = getBaseUrl;
        provider.getApiObject = getApiObject;
        provider.register = register;

        function setBaseUrl(url) {
            baseUrl = url;
        }

        function getBaseUrl() {
            return baseUrl;
        }

        function getApiObject() {
            return api;
        }

        function register(key, resource) {
            if (!angular.isString(key)) {
                $log.error('"path" must be a string (eg. `dashboard.project`)');
                return;
            }
            if (!angular.isArray(resource)) {
                $log.error('"resource" must be an array and it must follow $resource definition');
                return;
            }
            api[key] = {
                url: baseUrl + (resource[0] || ''),
                paramDefaults: resource[1] || [],
                actions: resource[2] || [],
                options: resource[3] || {}
            };
        }
        this.$get = function($log, $q, $resource, $rootScope) {
            var service = {
                setBaseUrl: setBaseUrl,
                getBaseUrl: getBaseUrl,
                register: register,
                resolve: resolve,
                request: request
            };
            return service;

            function resolve(action, parameters) {
                $rootScope.$broadcast('msApi::resolveStart');
                var actionParts = action.split('@'),
                    resource = actionParts[0],
                    method = actionParts[1],
                    params = parameters || {};
                if (!resource || !method) {
                    $log.error('msApi.resolve requires correct action parameter (resourceName@methodName)');
                    return false;
                }
                var deferred = $q.defer();
                var apiObject = api[resource];
                if (!apiObject) {
                    $log.error('Resource "' + resource + '" is not defined in the api service!');
                    deferred.reject('Resource "' + resource + '" is not defined in the api service!');
                } else {
                    var resourceObject = $resource(apiObject.url, apiObject.paramDefaults, apiObject.actions, apiObject.options);
                    resourceObject[method](params, function(response) {
                        deferred.resolve(response);
                        $rootScope.$broadcast('msApi::resolveSuccess');
                    }, function(response) {
                        deferred.reject(response);
                        $rootScope.$broadcast('msApi::resolveError');
                    });
                }
                return deferred.promise;
            }

            function request(action, parameters, success, error) {
                $rootScope.$broadcast('msApi::requestStart');
                var actionParts = action.split('@'),
                    resource = actionParts[0],
                    method = actionParts[1],
                    params = parameters || {};
                if (!resource || !method) {
                    $log.error('msApi.resolve requires correct action parameter (resourceName@methodName)');
                    return false;
                }
                var deferred = $q.defer();
                var apiObject = api[resource];
                if (!apiObject) {
                    $log.error('Resource "' + resource + '" is not defined in the api service!');
                    deferred.reject('Resource "' + resource + '" is not defined in the api service!');
                } else {
                    var resourceObject = $resource(apiObject.url, apiObject.paramDefaults, apiObject.actions, apiObject.options);
                    resourceObject[method](params, function(response) {
                        $rootScope.$broadcast('msApi::requestSuccess');
                        deferred.resolve(response);
                        if (angular.isDefined(success) && angular.isFunction(success)) {
                            success(response);
                        }
                    }, function(response) {
                        $rootScope.$broadcast('msApi::requestError');
                        deferred.reject(response);
                        if (angular.isDefined(error) && angular.isFunction(error)) {
                            error(response);
                        }
                    });
                }
                return deferred.promise;
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').service('message', function($mdDialog, $mdToast) {
        this.alert = function(msg) {
            $mdDialog.show({
                parent: angular.element(document.body),
                template: '<md-dialog aria-label="List dialog">' +
                    '<md-toolbar class="md-warn">' +
                    '<div class="md-toolbar-tools">Thông báo</div>' +
                    '</md-toolbar>' +
                    '  <md-dialog-content style="min-width: 400px">' +
                    '   <div class="md-dialog-content">' +
                    '       <p>' + msg + '</p>' +
                    '   </div>' +
                    '</md-dialog-content>' +
                    '  <md-dialog-actions>' +
                    '    <md-button ng-click="closeDialog()" class="md-warn">OK</md-button>' +
                    '  </md-dialog-actions>' +
                    '</md-dialog>',
                controller: function dialogCtrl($scope) {
                    $scope.closeDialog = function() {
                        $mdDialog.hide();
                    }
                }
            });
        };
        this.show = function(msg) {
            $mdDialog.show({
                parent: angular.element(document.body),
                template: '<md-dialog class="message" aria-label="message dialog">' +
                    '  <md-dialog-content style="min-width: 400px">' +
                    '   <div class="md-dialog-content">' +
                    '       <p>' + msg + '</p>' +
                    '   </div>' +
                    '</md-dialog-content>' +
                    '  <md-dialog-actions>' +
                    '    <md-button ng-click="closeDialog()" class="md-warn">OK</md-button>' +
                    '  </md-dialog-actions>' +
                    '</md-dialog>',
                controller: function dialogCtrl($scope) {
                    $scope.closeDialog = function() {
                        $mdDialog.hide();
                    }
                }
            });
        };
        this.info = function(msg) {
            $mdDialog.show($mdDialog.alert().clickOutsideToClose(true).parent(angular.element(document.body)).textContent(msg).ariaLabel('Alert Dialog').ok('OK'))
        };
        this.infoMultiple = function(msg) {
            $mdDialog.show($mdDialog.alert().clickOutsideToClose(true).multiple(true).parent(angular.element(document.body)).textContent(msg).ariaLabel('Alert Dialog').ok('OK'))
        };
        this.message = function(message) {
            $mdToast.show({
                template: '<md-toast id="language-message" layout="column" layout-align="center start"><div class="md-toast-content">' + message + '</div></md-toast>',
                hideDelay: 7000,
                position: 'top right',
                parent: '#content'
            });
        }
        this.popup = function(msg) {
            $mdDialog.show({
                controller: popupDialogCtrl,
                templateUrl: 'app/main/announcements/views/dialog.html',
                locals: {
                    msg: msg
                }
            })

            function popupDialogCtrl($scope, $mdDialog, msg) {
                $scope.cancel = function() {
                    $mdDialog.cancel();
                };

                function htmlDecode(input) {
                    var e = document.createElement('textarea');
                    e.innerHTML = input;
                    return e.childNodes.length === 0 ? "" : e.childNodes[0].nodeValue;
                }
                $scope.message = htmlDecode(msg);
            }
        }
    })
})();
(function() {
    'use strict';
    angular.module('app.core').factory('apiResolver', apiResolverService);

    function apiResolverService($q, $log, api) {
        var service = {
            resolve: resolve
        };
        return service;

        function resolve(action, parameters) {
            var actionParts = action.split('@'),
                resource = actionParts[0],
                method = actionParts[1],
                params = parameters || {};
            if (!resource || !method) {
                $log.error('apiResolver.resolve requires correct action parameter (ResourceName@methodName)');
                return false;
            }
            var deferred = $q.defer();
            var apiObject = getApiObject(resource);
            if (!apiObject) {
                $log.error('Resource "' + resource + '" is not defined in the api service!');
                deferred.reject('Resource "' + resource + '" is not defined in the api service!');
            } else {
                apiObject[method](params, function(response) {
                    deferred.resolve(response);
                }, function(response) {
                    deferred.reject(response);
                });
            }
            return deferred.promise;
        }

        function getApiObject(resource) {
            var resourceParts = resource.split('.'),
                apiObject = api;
            for (var l = 0; l < resourceParts.length; l++) {
                if (angular.isUndefined(apiObject[resourceParts[l]])) {
                    $log.error('Resource part "' + resourceParts[l] + '" is not defined!');
                    apiObject = false;
                    break;
                }
                apiObject = apiObject[resourceParts[l]];
            }
            if (!apiObject) {
                return false;
            }
            return apiObject;
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').service('fuseTheming', fuseThemingService);

    function fuseThemingService($cookies, $log, $mdTheming) {
        var service = {
            getRegisteredPalettes: getRegisteredPalettes,
            getRegisteredThemes: getRegisteredThemes,
            setActiveTheme: setActiveTheme,
            setThemesList: setThemesList,
            themes: {
                list: {},
                active: {
                    'name': '',
                    'theme': {}
                }
            }
        };
        return service;

        function getRegisteredPalettes() {
            return $mdTheming.PALETTES;
        }

        function getRegisteredThemes() {
            return $mdTheming.THEMES;
        }

        function setActiveTheme(themeName) {
            if (angular.isUndefined(service.themes.list[themeName])) {
                if (angular.isUndefined(service.themes.list.default)) {
                    $log.error('You must have at least one theme named "default"');
                    return;
                }
                $log.warn('The theme "' + themeName + '" does not exist! Falling back to the "default" theme.');
                service.themes.active.name = 'default';
                service.themes.active.theme = service.themes.list.default;
                $cookies.put('selectedTheme', service.themes.active.name);
                return;
            }
            service.themes.active.name = themeName;
            service.themes.active.theme = service.themes.list[themeName];
            $cookies.put('selectedTheme', themeName);
        }

        function setThemesList(themeList) {
            service.themes.list = themeList;
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').config(config);

    function config($mdThemingProvider, fusePalettes, fuseThemes) {
        var $cookies;
        angular.injector(['ngCookies']).invoke(['$cookies', function(_$cookies) {
            $cookies = _$cookies;
        }]);
        var customTheme = $cookies.getObject('customTheme');
        if (customTheme) {
            fuseThemes['custom'] = customTheme;
        }
        $mdThemingProvider.alwaysWatchTheme(true);
        angular.forEach(fusePalettes, function(palette) {
            $mdThemingProvider.definePalette(palette.name, palette.options);
        });
        angular.forEach(fuseThemes, function(theme, themeName) {
            $mdThemingProvider.theme(themeName).primaryPalette(theme.primary.name, theme.primary.hues).accentPalette(theme.accent.name, theme.accent.hues).warnPalette(theme.warn.name, theme.warn.hues).backgroundPalette(theme.background.name, theme.background.hues);
        });
    }
})();
(function() {
    'use strict';
    var fuseThemes = {
        default: {
            primary: {
                name: 'fuse-paleblue',
                hues: {
                    'default': '700',
                    'hue-1': '500',
                    'hue-2': '600',
                    'hue-3': '400'
                }
            },
            accent: {
                name: 'light-blue',
                hues: {
                    'default': '600',
                    'hue-1': '400',
                    'hue-2': '700',
                    'hue-3': 'A100'
                }
            },
            warn: {
                name: 'red'
            },
            background: {
                name: 'grey',
                hues: {
                    'default': 'A100',
                    'hue-1': 'A100',
                    'hue-2': '100',
                    'hue-3': '300'
                }
            }
        },
        'pinkTheme': {
            primary: {
                name: 'blue-grey',
                hues: {
                    'default': '800',
                    'hue-1': '600',
                    'hue-2': '400',
                    'hue-3': 'A100'
                }
            },
            accent: {
                name: 'pink',
                hues: {
                    'default': '400',
                    'hue-1': '300',
                    'hue-2': '600',
                    'hue-3': 'A100'
                }
            },
            warn: {
                name: 'blue'
            },
            background: {
                name: 'grey',
                hues: {
                    'default': 'A100',
                    'hue-1': 'A100',
                    'hue-2': '100',
                    'hue-3': '300'
                }
            }
        },
        'tealTheme': {
            primary: {
                name: 'fuse-blue',
                hues: {
                    'default': '900',
                    'hue-1': '600',
                    'hue-2': '500',
                    'hue-3': 'A100'
                }
            },
            accent: {
                name: 'teal',
                hues: {
                    'default': '500',
                    'hue-1': '400',
                    'hue-2': '600',
                    'hue-3': 'A100'
                }
            },
            warn: {
                name: 'deep-orange'
            },
            background: {
                name: 'grey',
                hues: {
                    'default': 'A100',
                    'hue-1': 'A100',
                    'hue-2': '100',
                    'hue-3': '300'
                }
            }
        }
    };
    angular.module('app.core').constant('fuseThemes', fuseThemes);
})();
(function() {
    'use strict';
    var fusePalettes = [{
        name: 'fuse-blue',
        options: {
            '50': '#ebf1fa',
            '100': '#c2d4ef',
            '200': '#9ab8e5',
            '300': '#78a0dc',
            '400': '#5688d3',
            '500': '#3470ca',
            '600': '#2e62b1',
            '700': '#275498',
            '800': '#21467e',
            '900': '#1a3865',
            'A100': '#c2d4ef',
            'A200': '#9ab8e5',
            'A400': '#5688d3',
            'A700': '#275498',
            'contrastDefaultColor': 'light',
            'contrastDarkColors': '50 100 200 A100',
            'contrastStrongLightColors': '300 400'
        }
    }, {
        name: 'fuse-paleblue',
        options: {
            '50': '#ececee',
            '100': '#c5c6cb',
            '200': '#9ea1a9',
            '300': '#7d818c',
            '400': '#5c616f',
            '500': '#3c4252',
            '600': '#353a48',
            '700': '#2d323e',
            '800': '#262933',
            '900': '#1e2129',
            'A100': '#c5c6cb',
            'A200': '#9ea1a9',
            'A400': '#5c616f',
            'A700': '#2d323e',
            'contrastDefaultColor': 'light',
            'contrastDarkColors': '50 100 200 A100',
            'contrastStrongLightColors': '300 400'
        }
    }];
    angular.module('app.core').constant('fusePalettes', fusePalettes);
})();
(function() {
    'use strict';
    angular.module('app.core').factory('fuseGenerator', fuseGeneratorService);

    function fuseGeneratorService($cookies, $log, fuseTheming) {
        var themes = {};
        var service = {
            generate: generate,
            rgba: rgba
        };
        return service;

        function generate() {
            var registeredThemes = angular.copy(fuseTheming.getRegisteredThemes());
            var registeredPalettes = angular.copy(fuseTheming.getRegisteredPalettes());
            angular.forEach(registeredThemes, function(registeredTheme) {
                themes[registeredTheme.name] = {};
                angular.forEach(registeredTheme.colors, function(colorType, colorTypeName) {
                    themes[registeredTheme.name][colorTypeName] = {
                        'name': colorType.name,
                        'levels': {
                            'default': {
                                'color': rgba(registeredPalettes[colorType.name][colorType.hues.default].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues.default].contrast, 4)
                            },
                            'hue1': {
                                'color': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-1']].contrast, 4)
                            },
                            'hue2': {
                                'color': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-2']].contrast, 4)
                            },
                            'hue3': {
                                'color': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].value),
                                'contrast1': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 1),
                                'contrast2': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 2),
                                'contrast3': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 3),
                                'contrast4': rgba(registeredPalettes[colorType.name][colorType.hues['hue-3']].contrast, 4)
                            }
                        }
                    };
                });
            });
            processAndStoreThemes(themes);
            var styleVars = {};
            angular.forEach(themes, function(theme, themeName) {
                styleVars = {};
                styleVars['@themeName'] = themeName;
                angular.forEach(theme, function(colorTypes, colorTypeName) {
                    angular.forEach(colorTypes.levels, function(colors, colorLevelName) {
                        angular.forEach(colors, function(color, colorName) {
                            styleVars['@' + colorTypeName + ucfirst(colorLevelName) + ucfirst(colorName)] = color;
                        });
                    });
                });
                render(styleVars);
            });
        }

        function processAndStoreThemes(_themes) {
            var themes = angular.copy(_themes);
            angular.forEach(themes, function(theme) {
                angular.forEach(theme, function(colorType, colorTypeName) {
                    theme[colorTypeName] = colorType.levels;
                    theme[colorTypeName].color = colorType.levels.default.color;
                    theme[colorTypeName].contrast1 = colorType.levels.default.contrast1;
                    theme[colorTypeName].contrast2 = colorType.levels.default.contrast2;
                    theme[colorTypeName].contrast3 = colorType.levels.default.contrast3;
                    theme[colorTypeName].contrast4 = colorType.levels.default.contrast4;
                    delete theme[colorTypeName].default;
                });
            });
            fuseTheming.setThemesList(themes);
            var selectedTheme = $cookies.get('selectedTheme');
            if (selectedTheme) {
                fuseTheming.setActiveTheme(selectedTheme);
            } else {
                fuseTheming.setActiveTheme('default');
            }
        }

        function render(styleVars) {
            var cssTemplate = '/* Content hack because they wont fix */\n/* https://github.com/angular/material/pull/8067 */\n[md-theme="@themeName"] md-content.md-hue-1,\nmd-content.md-@themeName-theme.md-hue-1 {\n    color: @backgroundHue1Contrast1;\n    background-color: @backgroundHue1Color;\n}\n\n[md-theme="@themeName"] md-content.md-hue-2,\nmd-content.md-@themeName-theme.md-hue-2 {\n    color: @backgroundHue2Contrast1;\n    background-color: @backgroundHue2Color;\n}\n\n[md-theme="@themeName"] md-content.md-hue-3,\n md-content.md-@themeName-theme.md-hue-3 {\n    color: @backgroundHue3Contrast1;\n    background-color: @backgroundHue3Color;\n}\n\n/* Text Colors */\n[md-theme="@themeName"] a {\n    color: @accentDefaultColor;\n}\n\n[md-theme="@themeName"] .secondary-text,\n[md-theme="@themeName"] .icon {\n    color: @backgroundDefaultContrast2;\n}\n\n[md-theme="@themeName"] .hint-text,\n[md-theme="@themeName"] .disabled-text {\n    color: @backgroundDefaultContrast3;\n}\n\n[md-theme="@themeName"] .fade-text,\n[md-theme="@themeName"] .divider {\n    color: @backgroundDefaultContrast4;\n}\n\n/* Primary */\n[md-theme="@themeName"] .md-primary-bg {\n    background-color: @primaryDefaultColor;\n    color: @primaryDefaultContrast1;\n}\n\n[md-theme="@themeName"] .md-primary-bg .secondary-text,\n[md-theme="@themeName"] .md-primary-bg .icon {\n    color: @primaryDefaultContrast2;\n}\n\n[md-theme="@themeName"] .md-primary-bg .hint-text,\n[md-theme="@themeName"] .md-primary-bg .disabled-text {\n    color: @primaryDefaultContrast3;\n}\n\n[md-theme="@themeName"] .md-primary-bg .fade-text,\n[md-theme="@themeName"] .md-primary-bg .divider {\n    color: @primaryDefaultContrast4;\n}\n\n/* Primary, Hue-1 */\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 {\n    background-color: @primaryHue1Color;\n    color: @primaryHue1Contrast1;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 .secondary-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 .icon {\n    color: @primaryHue1Contrast2;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 .hint-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 .disabled-text {\n    color: @primaryHue1Contrast3;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 .fade-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-1 .divider {\n    color: @primaryHue1Contrast4;\n}\n\n/* Primary, Hue-2 */\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 {\n    background-color: @primaryHue2Color;\n    color: @primaryHue2Contrast1;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 .secondary-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 .icon {\n    color: @primaryHue2Contrast2;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 .hint-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 .disabled-text {\n    color: @primaryHue2Contrast3;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 .fade-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-2 .divider {\n    color: @primaryHue2Contrast4;\n}\n\n/* Primary, Hue-3 */\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 {\n    background-color: @primaryHue3Color;\n    color: @primaryHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 .secondary-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 .icon {\n    color: @primaryHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 .hint-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 .disabled-text {\n    color: @primaryHue3Contrast3;\n}\n\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 .fade-text,\n[md-theme="@themeName"] .md-primary-bg.md-hue-3 .divider {\n    color: @primaryHue3Contrast4;\n}\n\n/* Primary foreground */\n[md-theme="@themeName"] .md-primary-fg {\n    color: @primaryDefaultColor !important;\n}\n\n/* Primary foreground, Hue-1 */\n[md-theme="@themeName"] .md-primary-fg.md-hue-1 {\n    color: @primaryHue1Color !important;\n}\n\n/* Primary foreground, Hue-2 */\n[md-theme="@themeName"] .md-primary-fg.md-hue-2 {\n    color: @primaryHue2Color !important;\n}\n\n/* Primary foreground, Hue-3 */\n[md-theme="@themeName"] .md-primary-fg.md-hue-3 {\n    color: @primaryHue3Color !important;\n}\n\n/* Accent */\n[md-theme="@themeName"] .md-accent-bg {\n    background-color: @accentDefaultColor;\n    color: @accentDefaultContrast1;\n}\n\n[md-theme="@themeName"] .md-accent-bg .secondary-text,\n[md-theme="@themeName"] .md-accent-bg .icon {\n    color: @accentDefaultContrast2;\n}\n\n[md-theme="@themeName"] .md-accent-bg .hint-text,\n[md-theme="@themeName"] .md-accent-bg .disabled-text {\n    color: @accentDefaultContrast3;\n}\n\n[md-theme="@themeName"] .md-accent-bg .fade-text,\n[md-theme="@themeName"] .md-accent-bg .divider {\n    color: @accentDefaultContrast4;\n}\n\n/* Accent, Hue-1 */\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 {\n    background-color: @accentHue1Color;\n    color: @accentHue1Contrast1;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 .secondary-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 .icon {\n    color: @accentHue1Contrast2;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 .hint-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 .disabled-text {\n    color: @accentHue1Contrast3;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 .fade-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-1 .divider {\n    color: @accentHue1Contrast4;\n}\n\n/* Accent, Hue-2 */\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 {\n    background-color: @accentHue2Color;\n    color: @accentHue2Contrast1;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 .secondary-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 .icon {\n    color: @accentHue2Contrast2;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 .hint-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 .disabled-text {\n    color: @accentHue2Contrast3;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 .fade-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-2 .divider {\n    color: @accentHue2Contrast4;\n}\n\n/* Accent, Hue-3 */\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 {\n    background-color: @accentHue3Color;\n    color: @accentHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 .secondary-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 .icon {\n    color: @accentHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 .hint-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 .disabled-text {\n    color: @accentHue3Contrast3;\n}\n\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 .fade-text,\n[md-theme="@themeName"] .md-accent-bg.md-hue-3 .divider {\n    color: @accentHue3Contrast4;\n}\n\n/* Accent foreground */\n[md-theme="@themeName"] .md-accent-fg {\n    color: @accentDefaultColor !important;\n}\n\n/* Accent foreground, Hue-1 */\n[md-theme="@themeName"] .md-accent-fg.md-hue-1 {\n    color: @accentHue1Color !important;\n}\n\n/* Accent foreground, Hue-2 */\n[md-theme="@themeName"] .md-accent-fg.md-hue-2 {\n    color: @accentHue2Color !important;\n}\n\n/* Accent foreground, Hue-3 */\n[md-theme="@themeName"] .md-accent-fg.md-hue-3 {\n    color: @accentHue3Color !important;\n}\n\n/* Warn */\n[md-theme="@themeName"] .md-warn-bg {\n    background-color: @warnDefaultColor;\n    color: @warnDefaultContrast1;\n}\n\n[md-theme="@themeName"] .md-warn-bg .secondary-text,\n[md-theme="@themeName"] .md-warn-bg .icon {\n    color: @warnDefaultContrast2;\n}\n\n[md-theme="@themeName"] .md-warn-bg .hint-text,\n[md-theme="@themeName"] .md-warn-bg .disabled-text {\n    color: @warnDefaultContrast3;\n}\n\n[md-theme="@themeName"] .md-warn-bg .fade-text,\n[md-theme="@themeName"] .md-warn-bg .divider {\n    color: @warnDefaultContrast4;\n}\n\n/* Warn, Hue-1 */\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 {\n    background-color: @warnHue1Color;\n    color: @warnHue1Contrast1;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 .secondary-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 .icon {\n    color: @warnHue1Contrast2;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 .hint-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 .disabled-text {\n    color: @warnHue1Contrast3;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 .fade-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-1 .divider {\n    color: @warnHue1Contrast4;\n}\n\n/* Warn, Hue-2 */\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 {\n    background-color: @warnHue2Color;\n    color: @warnHue2Contrast1;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 .secondary-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 .icon {\n    color: @warnHue2Contrast2;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 .hint-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 .disabled-text {\n    color: @warnHue2Contrast3;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 .fade-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-2 .divider {\n    color: @warnHue2Contrast4;\n}\n\n/* Warn, Hue-3 */\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 {\n    background-color: @warnHue3Color;\n    color: @warnHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 .secondary-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 .icon {\n    color: @warnHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 .hint-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 .disabled-text {\n    color: @warnHue3Contrast3;\n}\n\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 .fade-text,\n[md-theme="@themeName"] .md-warn-bg.md-hue-3 .divider {\n    color: @warnHue3Contrast4;\n}\n\n/* Warn foreground */\n[md-theme="@themeName"] .md-warn-fg {\n    color: @warnDefaultColor !important;\n}\n\n/* Warn foreground, Hue-1 */\n[md-theme="@themeName"] .md-warn-fg.md-hue-1 {\n    color: @warnHue1Color !important;\n}\n\n/* Warn foreground, Hue-2 */\n[md-theme="@themeName"] .md-warn-fg.md-hue-2 {\n    color: @warnHue2Color !important;\n}\n\n/* Warn foreground, Hue-3 */\n[md-theme="@themeName"] .md-warn-fg.md-hue-3 {\n    color: @warnHue3Color !important;\n}\n\n/* Background */\n[md-theme="@themeName"] .md-background-bg {\n    background-color: @backgroundDefaultColor;\n    color: @backgroundDefaultContrast1;\n}\n\n[md-theme="@themeName"] .md-background-bg .secondary-text,\n[md-theme="@themeName"] .md-background-bg .icon {\n    color: @backgroundDefaultContrast2;\n}\n\n[md-theme="@themeName"] .md-background-bg .hint-text,\n[md-theme="@themeName"] .md-background-bg .disabled-text {\n    color: @backgroundDefaultContrast3;\n}\n\n[md-theme="@themeName"] .md-background-bg .fade-text,\n[md-theme="@themeName"] .md-background-bg .divider {\n    color: @backgroundDefaultContrast4;\n}\n\n/* Background, Hue-1 */\n[md-theme="@themeName"] .md-background-bg.md-hue-1 {\n    background-color: @backgroundHue1Color;\n    color: @backgroundHue1Contrast1;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-1 .secondary-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-1 .icon {\n    color: @backgroundHue1Contrast2;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-1 .hint-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-1 .disabled-text {\n    color: @backgroundHue1Contrast3;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-1 .fade-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-1 .divider {\n    color: @backgroundHue1Contrast4;\n}\n\n/* Background, Hue-2 */\n[md-theme="@themeName"] .md-background-bg.md-hue-2 {\n    background-color: @backgroundHue2Color;\n    color: @backgroundHue2Contrast1;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-2 .secondary-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-2 .icon {\n    color: @backgroundHue2Contrast2;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-2 .hint-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-2 .disabled-text {\n    color: @backgroundHue2Contrast3;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-2 .fade-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-2 .divider {\n    color: @backgroundHue2Contrast4;\n}\n\n/* Background, Hue-3 */\n[md-theme="@themeName"] .md-background-bg.md-hue-3 {\n    background-color: @backgroundHue3Color;\n    color: @backgroundHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-3 .secondary-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-3 .icon {\n    color: @backgroundHue3Contrast1;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-3 .hint-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-3 .disabled-text {\n    color: @backgroundHue3Contrast3;\n}\n\n[md-theme="@themeName"] .md-background-bg.md-hue-3 .fade-text,\n[md-theme="@themeName"] .md-background-bg.md-hue-3 .divider {\n    color: @backgroundHue3Contrast4;\n}\n\n/* Background foreground */\n[md-theme="@themeName"] .md-background-fg {\n    color: @backgroundDefaultColor !important;\n}\n\n/* Background foreground, Hue-1 */\n[md-theme="@themeName"] .md-background-fg.md-hue-1 {\n    color: @backgroundHue1Color !important;\n}\n\n/* Background foreground, Hue-2 */\n[md-theme="@themeName"] .md-background-fg.md-hue-2 {\n    color: @backgroundHue2Color !important;\n}\n\n/* Background foreground, Hue-3 */\n[md-theme="@themeName"] .md-background-fg.md-hue-3 {\n    color: @backgroundHue3Color !important;\n}';
            var regex = new RegExp(Object.keys(styleVars).join('|'), 'gi');
            var css = cssTemplate.replace(regex, function(matched) {
                return styleVars[matched];
            });
            var headEl = angular.element('head');
            var styleEl = angular.element('<style type="text/css"></style>');
            styleEl.html(css);
            headEl.append(styleEl);
        }

        function rgba(color, _contrastLevel) {
            var contrastLevel = _contrastLevel || false;
            if (color.length === 4 && color[0] === 255 && color[1] === 255 && color[2] === 255) {
                color.splice(3, 4);
            }
            if (contrastLevel) {
                color = applyContrast(color, contrastLevel);
            }
            if (color.length === 3) {
                return 'rgb(' + color.join(',') + ')';
            } else if (color.length === 4) {
                return 'rgba(' + color.join(',') + ')';
            } else {
                $log.error('Invalid number of arguments supplied in the color array: ' + color.length + '\n' + 'The array must have 3 or 4 colors.');
            }
        }

        function applyContrast(color, contrastLevel) {
            var contrastLevels = {
                'white': {
                    '1': '1',
                    '2': '0.7',
                    '3': '0.3',
                    '4': '0.12'
                },
                'black': {
                    '1': '0.87',
                    '2': '0.54',
                    '3': '0.26',
                    '4': '0.12'
                }
            };
            if (color[0] === 255 && color[1] === 255 && color[2] === 255) {
                color[3] = contrastLevels.white[contrastLevel];
            } else if (color[0] === 0 && color[1] === 0 && color[2] === 0) {
                color[3] = contrastLevels.black[contrastLevel];
            }
            return color;
        }

        function ucfirst(string) {
            return string.charAt(0).toUpperCase() + string.slice(1);
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').controller('MsThemeOptionsController', MsThemeOptionsController).directive('msThemeOptions', msThemeOptions);

    function MsThemeOptionsController($cookies, fuseTheming) {
        var vm = this;
        vm.themes = fuseTheming.themes;
        vm.layoutModes = [{
            label: 'Boxed',
            value: 'boxed'
        }, {
            label: 'Wide',
            value: 'wide'
        }];
        vm.layoutStyles = [{
            label: 'Vertical Navigation',
            value: 'verticalNavigation',
            figure: '/assets/images/theme-options/vertical-nav.jpg'
        }, {
            label: 'Vertical Navigation with Fullwidth Toolbar',
            value: 'verticalNavigationFullwidthToolbar',
            figure: '/assets/images/theme-options/vertical-nav-with-full-toolbar.jpg'
        }, {
            label: 'Vertical Navigation with Fullwidth Toolbar 2',
            value: 'verticalNavigationFullwidthToolbar2',
            figure: '/assets/images/theme-options/vertical-nav-with-full-toolbar-2.jpg'
        }, {
            label: 'Horizontal Navigation',
            value: 'horizontalNavigation',
            figure: '/assets/images/theme-options/horizontal-nav.jpg'
        }, {
            label: 'Content with Toolbar',
            value: 'contentWithToolbar',
            figure: '/assets/images/theme-options/content-with-toolbar.jpg'
        }, {
            label: 'Content Only',
            value: 'contentOnly',
            figure: '/assets/images/theme-options/content-only.jpg'
        }, ];
        vm.layoutMode = 'wide';
        vm.layoutStyle = $cookies.get('layoutStyle') || 'verticalNavigation';
        vm.setActiveTheme = setActiveTheme;
        vm.getActiveTheme = getActiveTheme;
        vm.updateLayoutMode = updateLayoutMode;
        vm.updateLayoutStyle = updateLayoutStyle;

        function setActiveTheme(themeName) {
            fuseTheming.setActiveTheme(themeName);
        }

        function getActiveTheme() {
            return fuseTheming.themes.active;
        }

        function updateLayoutMode() {
            var bodyEl = angular.element('body');
            bodyEl.toggleClass('boxed', (vm.layoutMode === 'boxed'));
        }

        function updateLayoutStyle() {
            $cookies.put('layoutStyle', vm.layoutStyle);
            location.reload();
        }
    }

    function msThemeOptions($mdSidenav) {
        return {
            restrict: 'E',
            scope: {},
            controller: 'MsThemeOptionsController as vm',
            templateUrl: 'app/core/theme-options/theme-options.html',
            compile: function(tElement) {
                tElement.addClass('ms-theme-options');
                return function postLink(scope) {
                    function toggleOptionsSidenav() {
                        $mdSidenav('fuse-theme-options').toggle();
                    }
                    scope.toggleOptionsSidenav = toggleOptionsSidenav;
                };
            }
        };
    }
})();

function QR8bitByte(data) {
    this.mode = QRMode.MODE_8BIT_BYTE;
    this.data = data;
}
QR8bitByte.prototype = {
    getLength: function(buffer) {
        return this.data.length;
    },
    write: function(buffer) {
        for (var i = 0; i < this.data.length; i++) {
            buffer.put(this.data.charCodeAt(i), 8);
        }
    }
};

function ALPHA_NUM(data) {
    this.mode = QRMode.MODE_ALPHA_NUM;
    this.data = data;
}
ALPHA_NUM.prototype = {
    getCode: function(code) {
        var codes = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:';
        return codes.indexOf(code);
    },
    getLength: function(buffer) {
        return this.data.length;
    },
    write: function(buffer) {
        for (var i = 0; i < this.data.length; i++) {
            if (this.data[i + 1]) {
                buffer.put((45 * this.getCode(this.data[i])) + this.getCode(this.data[i + 1]), 11);
            } else {
                buffer.put(this.getCode(this.data[i]), 6);
            }
            i++;
        }
    }
};

function NUMBER(data) {
    this.mode = QRMode.MODE_NUMBER;
    this.data = data;
}
NUMBER.prototype = {
    getBitLen: function(length) {
        var NUMBER_LENGTH = {
            3: 10,
            2: 7,
            1: 4
        };
        return NUMBER_LENGTH[length];
    },
    getLength: function(buffer) {
        return this.data.length;
    },
    write: function(buffer) {
        for (var i = 0; i < this.data.length; i++) {
            var chars = this.data[i];
            if (this.data[i + 1]) {
                chars += this.data[i + 1];
            }
            if (this.data[i + 2]) {
                chars += this.data[i + 2];
            }
            var bitLength = this.getBitLen(chars.length);
            buffer.put(parseInt(chars, 10), bitLength);
            i++;
            i++;
        }
    }
};

function QRCode(typeNumber, errorCorrectLevel, inputMode) {
    this.typeNumber = typeNumber;
    this.errorCorrectLevel = errorCorrectLevel;
    this.inputMode = inputMode;
    this.modules = null;
    this.moduleCount = 0;
    this.dataCache = null;
    this.dataList = new Array();
}
QRCode.prototype = {
    addData: function(data) {
        var newData;
        if (this.inputMode === 'NUMBER') {
            newData = new NUMBER(data);
        } else if (this.inputMode === 'ALPHA_NUM') {
            newData = new ALPHA_NUM(data);
        } else {
            newData = new QR8bitByte(data);
        }
        this.dataList.push(newData);
        this.dataCache = null;
    },
    isDark: function(row, col) {
        if (row < 0 || this.moduleCount <= row || col < 0 || this.moduleCount <= col) {
            throw new Error(row + "," + col);
        }
        return this.modules[row][col];
    },
    getModuleCount: function() {
        return this.moduleCount;
    },
    make: function() {
        if (this.typeNumber < 1) {
            var typeNumber = 1;
            for (typeNumber = 1; typeNumber < 40; typeNumber++) {
                var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, this.errorCorrectLevel);
                var buffer = new QRBitBuffer();
                var totalDataCount = 0;
                for (var i = 0; i < rsBlocks.length; i++) {
                    totalDataCount += rsBlocks[i].dataCount;
                }
                for (var i = 0; i < this.dataList.length; i++) {
                    var data = this.dataList[i];
                    buffer.put(data.mode, 4);
                    buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
                    data.write(buffer);
                }
                if (buffer.getLengthInBits() <= totalDataCount * 8)
                    break;
            }
            this.typeNumber = typeNumber;
        }
        this.makeImpl(false, this.getBestMaskPattern());
    },
    makeImpl: function(test, maskPattern) {
        this.moduleCount = this.typeNumber * 4 + 17;
        this.modules = new Array(this.moduleCount);
        for (var row = 0; row < this.moduleCount; row++) {
            this.modules[row] = new Array(this.moduleCount);
            for (var col = 0; col < this.moduleCount; col++) {
                this.modules[row][col] = null;
            }
        }
        this.setupPositionProbePattern(0, 0);
        this.setupPositionProbePattern(this.moduleCount - 7, 0);
        this.setupPositionProbePattern(0, this.moduleCount - 7);
        this.setupPositionAdjustPattern();
        this.setupTimingPattern();
        this.setupTypeInfo(test, maskPattern);
        if (this.typeNumber >= 7) {
            this.setupTypeNumber(test);
        }
        if (this.dataCache == null) {
            this.dataCache = QRCode.createData(this.typeNumber, this.errorCorrectLevel, this.dataList);
        }
        this.mapData(this.dataCache, maskPattern);
    },
    setupPositionProbePattern: function(row, col) {
        for (var r = -1; r <= 7; r++) {
            if (row + r <= -1 || this.moduleCount <= row + r) continue;
            for (var c = -1; c <= 7; c++) {
                if (col + c <= -1 || this.moduleCount <= col + c) continue;
                if ((0 <= r && r <= 6 && (c == 0 || c == 6)) || (0 <= c && c <= 6 && (r == 0 || r == 6)) || (2 <= r && r <= 4 && 2 <= c && c <= 4)) {
                    this.modules[row + r][col + c] = true;
                } else {
                    this.modules[row + r][col + c] = false;
                }
            }
        }
    },
    getBestMaskPattern: function() {
        var minLostPoint = 0;
        var pattern = 0;
        for (var i = 0; i < 8; i++) {
            this.makeImpl(true, i);
            var lostPoint = QRUtil.getLostPoint(this);
            if (i == 0 || minLostPoint > lostPoint) {
                minLostPoint = lostPoint;
                pattern = i;
            }
        }
        return pattern;
    },
    createMovieClip: function(target_mc, instance_name, depth) {
        var qr_mc = target_mc.createEmptyMovieClip(instance_name, depth);
        var cs = 1;
        this.make();
        for (var row = 0; row < this.modules.length; row++) {
            var y = row * cs;
            for (var col = 0; col < this.modules[row].length; col++) {
                var x = col * cs;
                var dark = this.modules[row][col];
                if (dark) {
                    qr_mc.beginFill(0, 100);
                    qr_mc.moveTo(x, y);
                    qr_mc.lineTo(x + cs, y);
                    qr_mc.lineTo(x + cs, y + cs);
                    qr_mc.lineTo(x, y + cs);
                    qr_mc.endFill();
                }
            }
        }
        return qr_mc;
    },
    setupTimingPattern: function() {
        for (var r = 8; r < this.moduleCount - 8; r++) {
            if (this.modules[r][6] != null) {
                continue;
            }
            this.modules[r][6] = (r % 2 == 0);
        }
        for (var c = 8; c < this.moduleCount - 8; c++) {
            if (this.modules[6][c] != null) {
                continue;
            }
            this.modules[6][c] = (c % 2 == 0);
        }
    },
    setupPositionAdjustPattern: function() {
        var pos = QRUtil.getPatternPosition(this.typeNumber);
        for (var i = 0; i < pos.length; i++) {
            for (var j = 0; j < pos.length; j++) {
                var row = pos[i];
                var col = pos[j];
                if (this.modules[row][col] != null) {
                    continue;
                }
                for (var r = -2; r <= 2; r++) {
                    for (var c = -2; c <= 2; c++) {
                        if (r == -2 || r == 2 || c == -2 || c == 2 || (r == 0 && c == 0)) {
                            this.modules[row + r][col + c] = true;
                        } else {
                            this.modules[row + r][col + c] = false;
                        }
                    }
                }
            }
        }
    },
    setupTypeNumber: function(test) {
        var bits = QRUtil.getBCHTypeNumber(this.typeNumber);
        for (var i = 0; i < 18; i++) {
            var mod = (!test && ((bits >> i) & 1) == 1);
            this.modules[Math.floor(i / 3)][i % 3 + this.moduleCount - 8 - 3] = mod;
        }
        for (var i = 0; i < 18; i++) {
            var mod = (!test && ((bits >> i) & 1) == 1);
            this.modules[i % 3 + this.moduleCount - 8 - 3][Math.floor(i / 3)] = mod;
        }
    },
    setupTypeInfo: function(test, maskPattern) {
        var data = (this.errorCorrectLevel << 3) | maskPattern;
        var bits = QRUtil.getBCHTypeInfo(data);
        for (var i = 0; i < 15; i++) {
            var mod = (!test && ((bits >> i) & 1) == 1);
            if (i < 6) {
                this.modules[i][8] = mod;
            } else if (i < 8) {
                this.modules[i + 1][8] = mod;
            } else {
                this.modules[this.moduleCount - 15 + i][8] = mod;
            }
        }
        for (var i = 0; i < 15; i++) {
            var mod = (!test && ((bits >> i) & 1) == 1);
            if (i < 8) {
                this.modules[8][this.moduleCount - i - 1] = mod;
            } else if (i < 9) {
                this.modules[8][15 - i - 1 + 1] = mod;
            } else {
                this.modules[8][15 - i - 1] = mod;
            }
        }
        this.modules[this.moduleCount - 8][8] = (!test);
    },
    mapData: function(data, maskPattern) {
        var inc = -1;
        var row = this.moduleCount - 1;
        var bitIndex = 7;
        var byteIndex = 0;
        for (var col = this.moduleCount - 1; col > 0; col -= 2) {
            if (col == 6) col--;
            while (true) {
                for (var c = 0; c < 2; c++) {
                    if (this.modules[row][col - c] == null) {
                        var dark = false;
                        if (byteIndex < data.length) {
                            dark = (((data[byteIndex] >>> bitIndex) & 1) == 1);
                        }
                        var mask = QRUtil.getMask(maskPattern, row, col - c);
                        if (mask) {
                            dark = !dark;
                        }
                        this.modules[row][col - c] = dark;
                        bitIndex--;
                        if (bitIndex == -1) {
                            byteIndex++;
                            bitIndex = 7;
                        }
                    }
                }
                row += inc;
                if (row < 0 || this.moduleCount <= row) {
                    row -= inc;
                    inc = -inc;
                    break;
                }
            }
        }
    }
};
QRCode.PAD0 = 0xEC;
QRCode.PAD1 = 0x11;
QRCode.createData = function(typeNumber, errorCorrectLevel, dataList) {
    var rsBlocks = QRRSBlock.getRSBlocks(typeNumber, errorCorrectLevel);
    var buffer = new QRBitBuffer();
    for (var i = 0; i < dataList.length; i++) {
        var data = dataList[i];
        buffer.put(data.mode, 4);
        buffer.put(data.getLength(), QRUtil.getLengthInBits(data.mode, typeNumber));
        data.write(buffer);
    }
    var totalDataCount = 0;
    for (var i = 0; i < rsBlocks.length; i++) {
        totalDataCount += rsBlocks[i].dataCount;
    }
    if (buffer.getLengthInBits() > totalDataCount * 8) {
        throw new Error("code length overflow. (" +
            buffer.getLengthInBits() +
            ">" +
            totalDataCount * 8 +
            ")");
    }
    if (buffer.getLengthInBits() + 4 <= totalDataCount * 8) {
        buffer.put(0, 4);
    }
    while (buffer.getLengthInBits() % 8 != 0) {
        buffer.putBit(false);
    }
    while (true) {
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
            break;
        }
        buffer.put(QRCode.PAD0, 8);
        if (buffer.getLengthInBits() >= totalDataCount * 8) {
            break;
        }
        buffer.put(QRCode.PAD1, 8);
    }
    return QRCode.createBytes(buffer, rsBlocks);
}
QRCode.createBytes = function(buffer, rsBlocks) {
    var offset = 0;
    var maxDcCount = 0;
    var maxEcCount = 0;
    var dcdata = new Array(rsBlocks.length);
    var ecdata = new Array(rsBlocks.length);
    for (var r = 0; r < rsBlocks.length; r++) {
        var dcCount = rsBlocks[r].dataCount;
        var ecCount = rsBlocks[r].totalCount - dcCount;
        maxDcCount = Math.max(maxDcCount, dcCount);
        maxEcCount = Math.max(maxEcCount, ecCount);
        dcdata[r] = new Array(dcCount);
        for (var i = 0; i < dcdata[r].length; i++) {
            dcdata[r][i] = 0xff & buffer.buffer[i + offset];
        }
        offset += dcCount;
        var rsPoly = QRUtil.getErrorCorrectPolynomial(ecCount);
        var rawPoly = new QRPolynomial(dcdata[r], rsPoly.getLength() - 1);
        var modPoly = rawPoly.mod(rsPoly);
        ecdata[r] = new Array(rsPoly.getLength() - 1);
        for (var i = 0; i < ecdata[r].length; i++) {
            var modIndex = i + modPoly.getLength() - ecdata[r].length;
            ecdata[r][i] = (modIndex >= 0) ? modPoly.get(modIndex) : 0;
        }
    }
    var totalCodeCount = 0;
    for (var i = 0; i < rsBlocks.length; i++) {
        totalCodeCount += rsBlocks[i].totalCount;
    }
    var data = new Array(totalCodeCount);
    var index = 0;
    for (var i = 0; i < maxDcCount; i++) {
        for (var r = 0; r < rsBlocks.length; r++) {
            if (i < dcdata[r].length) {
                data[index++] = dcdata[r][i];
            }
        }
    }
    for (var i = 0; i < maxEcCount; i++) {
        for (var r = 0; r < rsBlocks.length; r++) {
            if (i < ecdata[r].length) {
                data[index++] = ecdata[r][i];
            }
        }
    }
    return data;
}
var QRMode = {
    MODE_NUMBER: 1 << 0,
    MODE_ALPHA_NUM: 1 << 1,
    MODE_8BIT_BYTE: 1 << 2,
    MODE_KANJI: 1 << 3
};
var QRErrorCorrectLevel = {
    L: 1,
    M: 0,
    Q: 3,
    H: 2
};
var QRMaskPattern = {
    PATTERN000: 0,
    PATTERN001: 1,
    PATTERN010: 2,
    PATTERN011: 3,
    PATTERN100: 4,
    PATTERN101: 5,
    PATTERN110: 6,
    PATTERN111: 7
};
var QRUtil = {
    PATTERN_POSITION_TABLE: [
        [],
        [6, 18],
        [6, 22],
        [6, 26],
        [6, 30],
        [6, 34],
        [6, 22, 38],
        [6, 24, 42],
        [6, 26, 46],
        [6, 28, 50],
        [6, 30, 54],
        [6, 32, 58],
        [6, 34, 62],
        [6, 26, 46, 66],
        [6, 26, 48, 70],
        [6, 26, 50, 74],
        [6, 30, 54, 78],
        [6, 30, 56, 82],
        [6, 30, 58, 86],
        [6, 34, 62, 90],
        [6, 28, 50, 72, 94],
        [6, 26, 50, 74, 98],
        [6, 30, 54, 78, 102],
        [6, 28, 54, 80, 106],
        [6, 32, 58, 84, 110],
        [6, 30, 58, 86, 114],
        [6, 34, 62, 90, 118],
        [6, 26, 50, 74, 98, 122],
        [6, 30, 54, 78, 102, 126],
        [6, 26, 52, 78, 104, 130],
        [6, 30, 56, 82, 108, 134],
        [6, 34, 60, 86, 112, 138],
        [6, 30, 58, 86, 114, 142],
        [6, 34, 62, 90, 118, 146],
        [6, 30, 54, 78, 102, 126, 150],
        [6, 24, 50, 76, 102, 128, 154],
        [6, 28, 54, 80, 106, 132, 158],
        [6, 32, 58, 84, 110, 136, 162],
        [6, 26, 54, 82, 110, 138, 166],
        [6, 30, 58, 86, 114, 142, 170]
    ],
    G15: (1 << 10) | (1 << 8) | (1 << 5) | (1 << 4) | (1 << 2) | (1 << 1) | (1 << 0),
    G18: (1 << 12) | (1 << 11) | (1 << 10) | (1 << 9) | (1 << 8) | (1 << 5) | (1 << 2) | (1 << 0),
    G15_MASK: (1 << 14) | (1 << 12) | (1 << 10) | (1 << 4) | (1 << 1),
    getBCHTypeInfo: function(data) {
        var d = data << 10;
        while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15) >= 0) {
            d ^= (QRUtil.G15 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G15)));
        }
        return ((data << 10) | d) ^ QRUtil.G15_MASK;
    },
    getBCHTypeNumber: function(data) {
        var d = data << 12;
        while (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18) >= 0) {
            d ^= (QRUtil.G18 << (QRUtil.getBCHDigit(d) - QRUtil.getBCHDigit(QRUtil.G18)));
        }
        return (data << 12) | d;
    },
    getBCHDigit: function(data) {
        var digit = 0;
        while (data != 0) {
            digit++;
            data >>>= 1;
        }
        return digit;
    },
    getPatternPosition: function(typeNumber) {
        return QRUtil.PATTERN_POSITION_TABLE[typeNumber - 1];
    },
    getMask: function(maskPattern, i, j) {
        switch (maskPattern) {
            case QRMaskPattern.PATTERN000:
                return (i + j) % 2 == 0;
            case QRMaskPattern.PATTERN001:
                return i % 2 == 0;
            case QRMaskPattern.PATTERN010:
                return j % 3 == 0;
            case QRMaskPattern.PATTERN011:
                return (i + j) % 3 == 0;
            case QRMaskPattern.PATTERN100:
                return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 == 0;
            case QRMaskPattern.PATTERN101:
                return (i * j) % 2 + (i * j) % 3 == 0;
            case QRMaskPattern.PATTERN110:
                return ((i * j) % 2 + (i * j) % 3) % 2 == 0;
            case QRMaskPattern.PATTERN111:
                return ((i * j) % 3 + (i + j) % 2) % 2 == 0;
            default:
                throw new Error("bad maskPattern:" + maskPattern);
        }
    },
    getErrorCorrectPolynomial: function(errorCorrectLength) {
        var a = new QRPolynomial([1], 0);
        for (var i = 0; i < errorCorrectLength; i++) {
            a = a.multiply(new QRPolynomial([1, QRMath.gexp(i)], 0));
        }
        return a;
    },
    getLengthInBits: function(mode, type) {
        if (1 <= type && type < 10) {
            switch (mode) {
                case QRMode.MODE_NUMBER:
                    return 10;
                case QRMode.MODE_ALPHA_NUM:
                    return 9;
                case QRMode.MODE_8BIT_BYTE:
                    return 8;
                case QRMode.MODE_KANJI:
                    return 8;
                default:
                    throw new Error("mode:" + mode);
            }
        } else if (type < 27) {
            switch (mode) {
                case QRMode.MODE_NUMBER:
                    return 12;
                case QRMode.MODE_ALPHA_NUM:
                    return 11;
                case QRMode.MODE_8BIT_BYTE:
                    return 16;
                case QRMode.MODE_KANJI:
                    return 10;
                default:
                    throw new Error("mode:" + mode);
            }
        } else if (type < 41) {
            switch (mode) {
                case QRMode.MODE_NUMBER:
                    return 14;
                case QRMode.MODE_ALPHA_NUM:
                    return 13;
                case QRMode.MODE_8BIT_BYTE:
                    return 16;
                case QRMode.MODE_KANJI:
                    return 12;
                default:
                    throw new Error("mode:" + mode);
            }
        } else {
            throw new Error("type:" + type);
        }
    },
    getLostPoint: function(qrCode) {
        var moduleCount = qrCode.getModuleCount();
        var lostPoint = 0;
        for (var row = 0; row < moduleCount; row++) {
            for (var col = 0; col < moduleCount; col++) {
                var sameCount = 0;
                var dark = qrCode.isDark(row, col);
                for (var r = -1; r <= 1; r++) {
                    if (row + r < 0 || moduleCount <= row + r) {
                        continue;
                    }
                    for (var c = -1; c <= 1; c++) {
                        if (col + c < 0 || moduleCount <= col + c) {
                            continue;
                        }
                        if (r == 0 && c == 0) {
                            continue;
                        }
                        if (dark == qrCode.isDark(row + r, col + c)) {
                            sameCount++;
                        }
                    }
                }
                if (sameCount > 5) {
                    lostPoint += (3 + sameCount - 5);
                }
            }
        }
        for (var row = 0; row < moduleCount - 1; row++) {
            for (var col = 0; col < moduleCount - 1; col++) {
                var count = 0;
                if (qrCode.isDark(row, col)) count++;
                if (qrCode.isDark(row + 1, col)) count++;
                if (qrCode.isDark(row, col + 1)) count++;
                if (qrCode.isDark(row + 1, col + 1)) count++;
                if (count == 0 || count == 4) {
                    lostPoint += 3;
                }
            }
        }
        for (var row = 0; row < moduleCount; row++) {
            for (var col = 0; col < moduleCount - 6; col++) {
                if (qrCode.isDark(row, col) && !qrCode.isDark(row, col + 1) && qrCode.isDark(row, col + 2) && qrCode.isDark(row, col + 3) && qrCode.isDark(row, col + 4) && !qrCode.isDark(row, col + 5) && qrCode.isDark(row, col + 6)) {
                    lostPoint += 40;
                }
            }
        }
        for (var col = 0; col < moduleCount; col++) {
            for (var row = 0; row < moduleCount - 6; row++) {
                if (qrCode.isDark(row, col) && !qrCode.isDark(row + 1, col) && qrCode.isDark(row + 2, col) && qrCode.isDark(row + 3, col) && qrCode.isDark(row + 4, col) && !qrCode.isDark(row + 5, col) && qrCode.isDark(row + 6, col)) {
                    lostPoint += 40;
                }
            }
        }
        var darkCount = 0;
        for (var col = 0; col < moduleCount; col++) {
            for (var row = 0; row < moduleCount; row++) {
                if (qrCode.isDark(row, col)) {
                    darkCount++;
                }
            }
        }
        var ratio = Math.abs(100 * darkCount / moduleCount / moduleCount - 50) / 5;
        lostPoint += ratio * 10;
        return lostPoint;
    }
};
var QRMath = {
    glog: function(n) {
        if (n < 1) {
            throw new Error("glog(" + n + ")");
        }
        return QRMath.LOG_TABLE[n];
    },
    gexp: function(n) {
        while (n < 0) {
            n += 255;
        }
        while (n >= 256) {
            n -= 255;
        }
        return QRMath.EXP_TABLE[n];
    },
    EXP_TABLE: new Array(256),
    LOG_TABLE: new Array(256)
};
for (var i = 0; i < 8; i++) {
    QRMath.EXP_TABLE[i] = 1 << i;
}
for (var i = 8; i < 256; i++) {
    QRMath.EXP_TABLE[i] = QRMath.EXP_TABLE[i - 4] ^ QRMath.EXP_TABLE[i - 5] ^ QRMath.EXP_TABLE[i - 6] ^ QRMath.EXP_TABLE[i - 8];
}
for (var i = 0; i < 255; i++) {
    QRMath.LOG_TABLE[QRMath.EXP_TABLE[i]] = i;
}

function QRPolynomial(num, shift) {
    if (num.length == undefined) {
        throw new Error(num.length + "/" + shift);
    }
    var offset = 0;
    while (offset < num.length && num[offset] == 0) {
        offset++;
    }
    this.num = new Array(num.length - offset + shift);
    for (var i = 0; i < num.length - offset; i++) {
        this.num[i] = num[i + offset];
    }
}
QRPolynomial.prototype = {
    get: function(index) {
        return this.num[index];
    },
    getLength: function() {
        return this.num.length;
    },
    multiply: function(e) {
        var num = new Array(this.getLength() + e.getLength() - 1);
        for (var i = 0; i < this.getLength(); i++) {
            for (var j = 0; j < e.getLength(); j++) {
                num[i + j] ^= QRMath.gexp(QRMath.glog(this.get(i)) + QRMath.glog(e.get(j)));
            }
        }
        return new QRPolynomial(num, 0);
    },
    mod: function(e) {
        if (this.getLength() - e.getLength() < 0) {
            return this;
        }
        var ratio = QRMath.glog(this.get(0)) - QRMath.glog(e.get(0));
        var num = new Array(this.getLength());
        for (var i = 0; i < this.getLength(); i++) {
            num[i] = this.get(i);
        }
        for (var i = 0; i < e.getLength(); i++) {
            num[i] ^= QRMath.gexp(QRMath.glog(e.get(i)) + ratio);
        }
        return new QRPolynomial(num, 0).mod(e);
    }
};

function QRRSBlock(totalCount, dataCount) {
    this.totalCount = totalCount;
    this.dataCount = dataCount;
}
QRRSBlock.RS_BLOCK_TABLE = [
    [1, 26, 19],
    [1, 26, 16],
    [1, 26, 13],
    [1, 26, 9],
    [1, 44, 34],
    [1, 44, 28],
    [1, 44, 22],
    [1, 44, 16],
    [1, 70, 55],
    [1, 70, 44],
    [2, 35, 17],
    [2, 35, 13],
    [1, 100, 80],
    [2, 50, 32],
    [2, 50, 24],
    [4, 25, 9],
    [1, 134, 108],
    [2, 67, 43],
    [2, 33, 15, 2, 34, 16],
    [2, 33, 11, 2, 34, 12],
    [2, 86, 68],
    [4, 43, 27],
    [4, 43, 19],
    [4, 43, 15],
    [2, 98, 78],
    [4, 49, 31],
    [2, 32, 14, 4, 33, 15],
    [4, 39, 13, 1, 40, 14],
    [2, 121, 97],
    [2, 60, 38, 2, 61, 39],
    [4, 40, 18, 2, 41, 19],
    [4, 40, 14, 2, 41, 15],
    [2, 146, 116],
    [3, 58, 36, 2, 59, 37],
    [4, 36, 16, 4, 37, 17],
    [4, 36, 12, 4, 37, 13],
    [2, 86, 68, 2, 87, 69],
    [4, 69, 43, 1, 70, 44],
    [6, 43, 19, 2, 44, 20],
    [6, 43, 15, 2, 44, 16],
    [4, 101, 81],
    [1, 80, 50, 4, 81, 51],
    [4, 50, 22, 4, 51, 23],
    [3, 36, 12, 8, 37, 13],
    [2, 116, 92, 2, 117, 93],
    [6, 58, 36, 2, 59, 37],
    [4, 46, 20, 6, 47, 21],
    [7, 42, 14, 4, 43, 15],
    [4, 133, 107],
    [8, 59, 37, 1, 60, 38],
    [8, 44, 20, 4, 45, 21],
    [12, 33, 11, 4, 34, 12],
    [3, 145, 115, 1, 146, 116],
    [4, 64, 40, 5, 65, 41],
    [11, 36, 16, 5, 37, 17],
    [11, 36, 12, 5, 37, 13],
    [5, 109, 87, 1, 110, 88],
    [5, 65, 41, 5, 66, 42],
    [5, 54, 24, 7, 55, 25],
    [11, 36, 12],
    [5, 122, 98, 1, 123, 99],
    [7, 73, 45, 3, 74, 46],
    [15, 43, 19, 2, 44, 20],
    [3, 45, 15, 13, 46, 16],
    [1, 135, 107, 5, 136, 108],
    [10, 74, 46, 1, 75, 47],
    [1, 50, 22, 15, 51, 23],
    [2, 42, 14, 17, 43, 15],
    [5, 150, 120, 1, 151, 121],
    [9, 69, 43, 4, 70, 44],
    [17, 50, 22, 1, 51, 23],
    [2, 42, 14, 19, 43, 15],
    [3, 141, 113, 4, 142, 114],
    [3, 70, 44, 11, 71, 45],
    [17, 47, 21, 4, 48, 22],
    [9, 39, 13, 16, 40, 14],
    [3, 135, 107, 5, 136, 108],
    [3, 67, 41, 13, 68, 42],
    [15, 54, 24, 5, 55, 25],
    [15, 43, 15, 10, 44, 16],
    [4, 144, 116, 4, 145, 117],
    [17, 68, 42],
    [17, 50, 22, 6, 51, 23],
    [19, 46, 16, 6, 47, 17],
    [2, 139, 111, 7, 140, 112],
    [17, 74, 46],
    [7, 54, 24, 16, 55, 25],
    [34, 37, 13],
    [4, 151, 121, 5, 152, 122],
    [4, 75, 47, 14, 76, 48],
    [11, 54, 24, 14, 55, 25],
    [16, 45, 15, 14, 46, 16],
    [6, 147, 117, 4, 148, 118],
    [6, 73, 45, 14, 74, 46],
    [11, 54, 24, 16, 55, 25],
    [30, 46, 16, 2, 47, 17],
    [8, 132, 106, 4, 133, 107],
    [8, 75, 47, 13, 76, 48],
    [7, 54, 24, 22, 55, 25],
    [22, 45, 15, 13, 46, 16],
    [10, 142, 114, 2, 143, 115],
    [19, 74, 46, 4, 75, 47],
    [28, 50, 22, 6, 51, 23],
    [33, 46, 16, 4, 47, 17],
    [8, 152, 122, 4, 153, 123],
    [22, 73, 45, 3, 74, 46],
    [8, 53, 23, 26, 54, 24],
    [12, 45, 15, 28, 46, 16],
    [3, 147, 117, 10, 148, 118],
    [3, 73, 45, 23, 74, 46],
    [4, 54, 24, 31, 55, 25],
    [11, 45, 15, 31, 46, 16],
    [7, 146, 116, 7, 147, 117],
    [21, 73, 45, 7, 74, 46],
    [1, 53, 23, 37, 54, 24],
    [19, 45, 15, 26, 46, 16],
    [5, 145, 115, 10, 146, 116],
    [19, 75, 47, 10, 76, 48],
    [15, 54, 24, 25, 55, 25],
    [23, 45, 15, 25, 46, 16],
    [13, 145, 115, 3, 146, 116],
    [2, 74, 46, 29, 75, 47],
    [42, 54, 24, 1, 55, 25],
    [23, 45, 15, 28, 46, 16],
    [17, 145, 115],
    [10, 74, 46, 23, 75, 47],
    [10, 54, 24, 35, 55, 25],
    [19, 45, 15, 35, 46, 16],
    [17, 145, 115, 1, 146, 116],
    [14, 74, 46, 21, 75, 47],
    [29, 54, 24, 19, 55, 25],
    [11, 45, 15, 46, 46, 16],
    [13, 145, 115, 6, 146, 116],
    [14, 74, 46, 23, 75, 47],
    [44, 54, 24, 7, 55, 25],
    [59, 46, 16, 1, 47, 17],
    [12, 151, 121, 7, 152, 122],
    [12, 75, 47, 26, 76, 48],
    [39, 54, 24, 14, 55, 25],
    [22, 45, 15, 41, 46, 16],
    [6, 151, 121, 14, 152, 122],
    [6, 75, 47, 34, 76, 48],
    [46, 54, 24, 10, 55, 25],
    [2, 45, 15, 64, 46, 16],
    [17, 152, 122, 4, 153, 123],
    [29, 74, 46, 14, 75, 47],
    [49, 54, 24, 10, 55, 25],
    [24, 45, 15, 46, 46, 16],
    [4, 152, 122, 18, 153, 123],
    [13, 74, 46, 32, 75, 47],
    [48, 54, 24, 14, 55, 25],
    [42, 45, 15, 32, 46, 16],
    [20, 147, 117, 4, 148, 118],
    [40, 75, 47, 7, 76, 48],
    [43, 54, 24, 22, 55, 25],
    [10, 45, 15, 67, 46, 16],
    [19, 148, 118, 6, 149, 119],
    [18, 75, 47, 31, 76, 48],
    [34, 54, 24, 34, 55, 25],
    [20, 45, 15, 61, 46, 16]
];
QRRSBlock.getRSBlocks = function(typeNumber, errorCorrectLevel) {
    var rsBlock = QRRSBlock.getRsBlockTable(typeNumber, errorCorrectLevel);
    if (rsBlock == undefined) {
        throw new Error("bad rs block @ typeNumber:" + typeNumber + "/errorCorrectLevel:" + errorCorrectLevel);
    }
    var length = rsBlock.length / 3;
    var list = new Array();
    for (var i = 0; i < length; i++) {
        var count = rsBlock[i * 3 + 0];
        var totalCount = rsBlock[i * 3 + 1];
        var dataCount = rsBlock[i * 3 + 2];
        for (var j = 0; j < count; j++) {
            list.push(new QRRSBlock(totalCount, dataCount));
        }
    }
    return list;
}
QRRSBlock.getRsBlockTable = function(typeNumber, errorCorrectLevel) {
    switch (errorCorrectLevel) {
        case QRErrorCorrectLevel.L:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 0];
        case QRErrorCorrectLevel.M:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 1];
        case QRErrorCorrectLevel.Q:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 2];
        case QRErrorCorrectLevel.H:
            return QRRSBlock.RS_BLOCK_TABLE[(typeNumber - 1) * 4 + 3];
        default:
            return undefined;
    }
}

function QRBitBuffer() {
    this.buffer = new Array();
    this.length = 0;
}
QRBitBuffer.prototype = {
    get: function(index) {
        var bufIndex = Math.floor(index / 8);
        return ((this.buffer[bufIndex] >>> (7 - index % 8)) & 1) == 1;
    },
    put: function(num, length) {
        for (var i = 0; i < length; i++) {
            this.putBit(((num >>> (length - i - 1)) & 1) == 1);
        }
    },
    getLengthInBits: function() {
        return this.length;
    },
    putBit: function(bit) {
        var bufIndex = Math.floor(this.length / 8);
        if (this.buffer.length <= bufIndex) {
            this.buffer.push(0);
        }
        if (bit) {
            this.buffer[bufIndex] |= (0x80 >>> (this.length % 8));
        }
        this.length++;
    }
};
angular.module("otpInputDirective", []).directive('otpInputDirective', ['$timeout', function($timeout) {
    return {
        restrict: 'A',
        scope: {
            options: "="
        },
        template: "<div>" +
            "<input type='{{type}}' ng-repeat=\"c in characters\" autocomplete='off' ng-keyup='onKeyUp($index,$event)' ng-keydown='onKeyDown($index,$event)' ng-model='c.value' id='otpInput{{c.index}}' name='otpInput{{c.index}}' ng-style=\"style\" placeholder=\"{{placeholder}}\" maxlength=\"1\"  />\n" +
            "</div>",
        link: function($scope, elem) {
            var size = parseInt($scope.options.size) || 6;
            var width = 100 / (size + 1);
            var margin = width / size;
            var tmp = [],
                elementArr = [];
            var DEFAULT_COLOR = "#6f6d6d";
            var randomNumber = Math.floor(Math.random() * 10000) + 100;
            $scope.style = {
                "margin-right": margin + "%",
                "border": "none",
                "border-bottom": "2px solid",
                "border-radius": "0",
                "display": "inline-block",
                "width": width + "%",
                "text-align": "center",
                "padding": "5px 0px",
                "outline": "none",
                "box-shadow": "none",
                "background": "transparent",
                "border-color": $scope.options.style && $scope.options.style.lineColor ? $scope.options.style.lineColor : DEFAULT_COLOR,
                "color": $scope.options.style && $scope.options.style.color ? $scope.options.style.color : DEFAULT_COLOR,
                "font-size": $scope.options.style && $scope.options.style.fontSize ? scope.options.style.fontSize : "20px"
            };
            $scope.type = $scope.options.type ? $scope.options.type : "text";
            $scope.placeholder = $scope.options.placeholder && $scope.options.placeholder.length === 1 ? $scope.options.placeholder : "";
            $scope.setOtpValue = function() {
                $scope.options.value = "";
                var done = true;
                angular.forEach($scope.characters, function(v, k) {
                    if (v.value.length !== 1) {
                        done = false;
                        return false;
                    }
                    $scope.options.value = $scope.options.value + v.value;
                });
                if (done) {
                    if (typeof($scope.options.onDone) === "function") {
                        $scope.options.onDone($scope.options.value);
                    }
                }
            };
            $scope.onKeyUp = function(index, e) {
                var key = e.keyCode || e.which;
                var old = $scope.options.value;
                $scope.setOtpValue();
                if ($scope.characters[index].value.length > 0 && key !== 8 && index !== size - 1) {
                    $timeout(function() {
                        elementArr[index + 1][0].focus();
                    });
                }
                if (typeof($scope.options.onChange) === "function" && old !== $scope.options.value) {
                    $scope.options.onChange($scope.options.value);
                }
            };
            $scope.onKeyDown = function(index, e) {
                var key = e.keyCode || e.which;
                if (key === 8 && $scope.characters[index].value === "" && index !== 0) {
                    $timeout(function() {
                        elementArr[index - 1][0].focus();
                    });
                }
            };
            for (var i = 0; i < size; i++) {
                tmp.push({
                    index: randomNumber + "-" + i,
                    value: ""
                });
            }
            $scope.characters = tmp;
            $timeout(function() {
                for (var i = 0; i < size; i++) {
                    elementArr.push(angular.element(document.querySelector("#otpInput" + randomNumber + "-" + i)));
                }
                elementArr[0][0].focus();
            });
        }
    }
}]);
(function() {
    'use strict';
    angular.module('app.core').directive('numericOnly', numericOnlyDirective).directive('selectOnClick', selectOnClick);

    function selectOnClick($window, $timeout) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                element.on('focus', function() {
                    if (parseInt(this.value) === 0) {
                        this.value = ''
                    } else {
                        this.select()
                    }
                })
            }
        };
    }

    function numericOnlyDirective() {
        return {
            require: 'ngModel',
            link: function(scope, element, attrs, modelCtrl) {
                modelCtrl.$parsers.push(function(inputValue) {
                    var transformedInput = inputValue ? inputValue.replace(/[^\d.-]/g, '') : null;
                    if (transformedInput !== inputValue) {
                        modelCtrl.$setViewValue(transformedInput);
                        modelCtrl.$render();
                    }
                    return transformedInput;
                });
            }
        };
    }
})();
(function webpackUniversalModuleDefinition(root, factory) {
    if (typeof exports === 'object' && typeof module === 'object')
        module.exports = factory(require("angular"));
    else if (typeof define === 'function' && define.amd)
        define("ng-currency", ["angular"], factory);
    else if (typeof exports === 'object')
        exports["ng-currency"] = factory(require("angular"));
    else
        root["ng-currency"] = factory(root["angular"]);
})(window, function(__WEBPACK_EXTERNAL_MODULE_angular__) {
    return (function(modules) {
            var installedModules = {};

            function __webpack_require__(moduleId) {
                if (installedModules[moduleId]) {
                    return installedModules[moduleId].exports;
                }
                var module = installedModules[moduleId] = {
                    i: moduleId,
                    l: false,
                    exports: {}
                };
                modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
                module.l = true;
                return module.exports;
            }
            __webpack_require__.m = modules;
            __webpack_require__.c = installedModules;
            __webpack_require__.d = function(exports, name, getter) {
                if (!__webpack_require__.o(exports, name)) {
                    Object.defineProperty(exports, name, {
                        configurable: false,
                        enumerable: true,
                        get: getter
                    });
                }
            };
            __webpack_require__.r = function(exports) {
                Object.defineProperty(exports, '__esModule', {
                    value: true
                });
            };
            __webpack_require__.n = function(module) {
                var getter = module && module.__esModule ? function getDefault() {
                    return module['default'];
                } : function getModuleExports() {
                    return module;
                };
                __webpack_require__.d(getter, 'a', getter);
                return getter;
            };
            __webpack_require__.o = function(object, property) {
                return Object.prototype.hasOwnProperty.call(object, property);
            };
            __webpack_require__.p = "";
            return __webpack_require__(__webpack_require__.s = 0);
        })
        ({
            "./ng-currency-settings.provider.js":
                /*!******************************************!*\
                !*** ./ng-currency-settings.provider.js ***!
                \******************************************/
                /*!no static exports found*/ (function(module, exports, __webpack_require__) {
                    "use strict";
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    var _createClass = function() {
                        function defineProperties(target, props) {
                            for (var i = 0; i < props.length; i++) {
                                var descriptor = props[i];
                                descriptor.enumerable = descriptor.enumerable || false;
                                descriptor.configurable = true;
                                if ("value" in descriptor) descriptor.writable = true;
                                Object.defineProperty(target, descriptor.key, descriptor);
                            }
                        }
                        return function(Constructor, protoProps, staticProps) {
                            if (protoProps) defineProperties(Constructor.prototype, protoProps);
                            if (staticProps) defineProperties(Constructor, staticProps);
                            return Constructor;
                        };
                    }();

                    function _classCallCheck(instance, Constructor) {
                        if (!(instance instanceof Constructor)) {
                            throw new TypeError("Cannot call a class as a function");
                        }
                    }
                    var ngCurrencySettings = function() {
                        function ngCurrencySettings() {
                            _classCallCheck(this, ngCurrencySettings);
                            this._defaults = {
                                fraction: 0,
                                hardCap: false,
                                min: undefined,
                                max: undefined,
                                currencySymbol: ''
                            };
                        }
                        _createClass(ngCurrencySettings, [{
                            key: "$get",
                            value: function $get() {
                                var provider = this;
                                return {
                                    get defaults() {
                                        return provider.defaults;
                                    }
                                };
                            }
                        }, {
                            key: "defaults",
                            get: function get() {
                                return this._defaults;
                            },
                            set: function set(defaults) {
                                this._defaults = defaults;
                            }
                        }]);
                        return ngCurrencySettings;
                    }();
                    exports.default = ngCurrencySettings;
                }),
            "./ng-currency.directive.js":
                /*!**********************************!*\
                !*** ./ng-currency.directive.js ***!
                \**********************************/
                /*!no static exports found*/ (function(module, exports, __webpack_require__) {
                    "use strict";
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    exports.default = ngCurrency;

                    function ngCurrency($filter, $locale, $timeout, ngCurrencySettings) {
                        return {
                            require: 'ngModel',
                            link: function link(scope, element, attrs, controller) {
                                var _ngCurrencySettings$d = ngCurrencySettings.defaults,
                                    hardCap = _ngCurrencySettings$d.hardCap,
                                    min = _ngCurrencySettings$d.min,
                                    max = _ngCurrencySettings$d.max,
                                    currencySymbol = _ngCurrencySettings$d.currencySymbol,
                                    fraction = _ngCurrencySettings$d.fraction;
                                var ngRequired = attrs.required;
                                var active = true;
                                attrs.$observe('ngCurrency', function(value) {
                                    active = value !== 'false';
                                    if (active) {
                                        reformat();
                                    } else {
                                        controller.$viewValue = controller.$$rawModelValue;
                                        controller.$render();
                                    }
                                });
                                attrs.$observe('hardCap', function(value) {
                                    hardCap = value === 'true';
                                    revalidate();
                                });
                                attrs.$observe('min', function(value) {
                                    min = value ? Number(value) : undefined;
                                    revalidate();
                                });
                                attrs.$observe('max', function(value) {
                                    max = value ? Number(value) : undefined;
                                    revalidate();
                                });
                                attrs.$observe('currencySymbol', function(value) {
                                    currencySymbol = value;
                                    reformat();
                                });
                                attrs.$observe('required', function(value) {
                                    ngRequired = value;
                                    revalidate();
                                });
                                attrs.$observe('fraction', function(value) {
                                    fraction = value || 2;
                                    reformat();
                                    revalidate();
                                });
                                $timeout(function() {
                                    scope.$emit('currencyRedraw');
                                });
                                controller.$parsers.push(function(value) {
                                    if (active && [undefined, null, ''].indexOf(value) === -1) {
                                        value = clearValue(value);
                                        value = keepInRange(Number(value));
                                        return value;
                                    }
                                    return value;
                                });
                                controller.$formatters.push(function(value) {
                                    if (active && [undefined, null, ''].indexOf(value) === -1) {
                                        return $filter('currency')(value, getCurrencySymbol(), fraction);
                                    }
                                    return value;
                                });
                                controller.$validators.min = function(value) {
                                    if (!ngRequired && ([undefined, null, ''].indexOf(value) !== -1 || isNaN(value))) {
                                        return true;
                                    }
                                    return !active || [undefined, null].indexOf(min) !== -1 || isNaN(min) || value >= min;
                                };
                                controller.$validators.max = function(value) {
                                    if (!ngRequired && ([undefined, null, ''].indexOf(value) !== -1 || isNaN(value))) {
                                        return true;
                                    }
                                    return !active || [undefined, null].indexOf(max) !== -1 || isNaN(max) || value <= max;
                                };
                                controller.$validators.fraction = function(value) {
                                    return !active || !value || !isNaN(value);
                                };

                                function reformat() {
                                    if (active) {
                                        var value = void 0;
                                        var updateOn = void 0,
                                            debounce = void 0;
                                        if (controller.$options) {
                                            if (controller.$options.getOption) {
                                                updateOn = controller.$options.getOption('updateOn');
                                                debounce = controller.$options.getOption('debounce');
                                            } else {
                                                updateOn = controller.$options.updateOn;
                                                debounce = controller.$options.debounce;
                                            }
                                        }
                                        if (updateOn === 'blur' || debounce) {
                                            value = controller.$viewValue;
                                            for (var i = controller.$parsers.length - 1; i >= 0; i--) {
                                                value = controller.$parsers[i](value);
                                            }
                                        } else {
                                            value = controller.$$rawModelValue;
                                        }
                                        for (var _i = controller.$formatters.length - 1; _i >= 0; _i--) {
                                            value = controller.$formatters[_i](value);
                                        }
                                        controller.$viewValue = value;
                                        controller.$render();
                                    }
                                }

                                function revalidate() {
                                    controller.$validate();
                                    if (active) {
                                        var value = keepInRange(controller.$$rawModelValue);
                                        if (value !== controller.$$rawModelValue) {
                                            controller.$setViewValue(value.toFixed(fraction));
                                            controller.$commitViewValue();
                                            reformat();
                                        }
                                    }
                                }

                                function keepInRange(value) {
                                    if (hardCap) {
                                        if (max !== undefined && value > max) {
                                            value = max;
                                        } else if (min !== undefined && value < min) {
                                            value = min;
                                        }
                                    }
                                    return value;
                                }
                                scope.$on('currencyRedraw', function() {
                                    revalidate();
                                    reformat();
                                });
                                element.bind('focus', function() {
                                    if (active) {
                                        var value = clearValue(controller.$viewValue, false);
                                        if (controller.$viewValue !== value) {
                                            controller.$viewValue = value;
                                            controller.$render();
                                            element.triggerHandler('focus');
                                        }
                                    }
                                });
                                element.bind('blur', reformat);

                                function decimalRex(dChar) {
                                    return RegExp('\\d|\\-|\\' + dChar, 'g');
                                }

                                function clearRex(dChar) {
                                    return RegExp('\\-{0,1}((\\' + dChar + ')|([0-9]{1,}\\' + dChar + '?))&?[0-9]{0,' + fraction + '}', 'g');
                                }

                                function clearValue(value) {
                                    var replaceSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
                                    value = String(value);
                                    var decimalSeparator = $locale.NUMBER_FORMATS.DECIMAL_SEP;
                                    var cleared = null;
                                    var neg_dummy = $filter('currency')('-1', getCurrencySymbol(), fraction);
                                    var neg_regexp = RegExp('[0-9.' + decimalSeparator + $locale.NUMBER_FORMATS.GROUP_SEP + ']+');
                                    var neg_dummy_txt = neg_dummy.replace(neg_regexp.exec(neg_dummy), '');
                                    var value_dummy_txt = value.replace(neg_regexp.exec(value), '');
                                    if (neg_dummy_txt === value_dummy_txt) {
                                        value = '-' + neg_regexp.exec(value);
                                    }
                                    if (RegExp('^-[\\s]*$', 'g').test(value)) {
                                        value = '-0';
                                    }
                                    if (decimalRex(decimalSeparator).test(value)) {
                                        cleared = value.match(decimalRex(decimalSeparator)).join('').match(clearRex(decimalSeparator)) || [''];
                                        cleared = cleared[0];
                                        cleared = replaceSeparator ? cleared.replace(decimalSeparator, '.') : cleared;
                                    }
                                    return cleared || null;
                                }

                                function getCurrencySymbol() {
                                    return currencySymbol === undefined ? $locale.NUMBER_FORMATS.CURRENCY_SYM : currencySymbol;
                                }
                            }
                        };
                    }
                    ngCurrency.$inject = ['$filter', '$locale', '$timeout', 'ngCurrencySettings'];
                }),
            "./ng-currency.module.js":
                /*!*******************************!*\
                !*** ./ng-currency.module.js ***!
                \*******************************/
                /*!no static exports found*/ (function(module, exports, __webpack_require__) {
                    "use strict";
                    Object.defineProperty(exports, "__esModule", {
                        value: true
                    });
                    var _angular = __webpack_require__( /*!angular*/ "angular");
                    var _angular2 = _interopRequireDefault(_angular);
                    var _ngCurrencySettingsProvider = __webpack_require__( /*!./ng-currency-settings.provider.js*/ "./ng-currency-settings.provider.js");
                    var _ngCurrencySettingsProvider2 = _interopRequireDefault(_ngCurrencySettingsProvider);
                    var _ngCurrencyDirective = __webpack_require__( /*!./ng-currency.directive.js*/ "./ng-currency.directive.js");
                    var _ngCurrencyDirective2 = _interopRequireDefault(_ngCurrencyDirective);

                    function _interopRequireDefault(obj) {
                        return obj && obj.__esModule ? obj : {
                            default: obj
                        };
                    }
                    var _module = _angular2.default.module('ng-currency', []);
                    _module.provider('ngCurrencySettings', _ngCurrencySettingsProvider2.default);
                    _module.directive('ngCurrency', _ngCurrencyDirective2.default);
                    exports.default = _module.name;
                }),
            0:
                /*!*************************************!*\
                !*** multi ./ng-currency.module.js ***!
                \*************************************/
                /*!no static exports found*/ (function(module, exports, __webpack_require__) {
                    module.exports = __webpack_require__( /*!./ng-currency.module.js*/ "./ng-currency.module.js");
                }),
            "angular":
                /*!**************************!*\
                !*** external "angular" ***!
                \**************************/
                /*!no static exports found*/ (function(module, exports) {
                    module.exports = __WEBPACK_EXTERNAL_MODULE_angular__;
                })
        });
});
(function() {
    'use strict';
    angular.module('app.core').directive('hljs', hljsDirective).directive('selectOnClick', selectOnClick);

    function selectOnClick($window, $timeout) {
        return {
            restrict: 'A',
            link: function(scope, element, attrs) {
                element.on('focus', function() {
                    this.select()
                })
            }
        };
    }

    function hljsDirective($timeout, $q, $interpolate) {
        return {
            restrict: 'E',
            compile: function(element, attr) {
                var code;
                if (!attr.code) {
                    code = element.html();
                    element.empty();
                }
                return function(scope, element, attr) {
                    if (attr.code) {
                        code = scope.$eval(attr.code);
                    }
                    var shouldInterpolate = scope.$eval(attr.shouldInterpolate);
                    $q.when(code).then(function(code) {
                        if (code) {
                            if (shouldInterpolate) {
                                code = $interpolate(code)(scope);
                            }
                            var contentParent = angular.element('<pre><code class="highlight" ng-non-bindable></code></pre>');
                            element.append(contentParent);
                            $timeout(function() {
                                render(code, contentParent);
                            }, 34, false);
                        }
                    });

                    function render(contents, parent) {
                        var codeElement = parent.find('code');
                        var lines = contents.split('\n');
                        lines = lines.filter(function(line) {
                            return line.trim().length;
                        });
                        var firstLineWhitespace = lines[0].match(/^\s*/)[0];
                        var startingWhitespaceRegex = new RegExp('^' + firstLineWhitespace);
                        lines = lines.map(function(line) {
                            return line.replace(startingWhitespaceRegex, '').replace(/\s+$/, '');
                        });
                        var highlightedCode = hljs.highlight(attr.language || attr.lang, lines.join('\n'), true);
                        highlightedCode.value = highlightedCode.value.replace(/=<span class="hljs-value">""<\/span>/gi, '').replace('<head>', '').replace('<head/>', '');
                        codeElement.append(highlightedCode.value).addClass('highlight');
                    }
                };
            }
        };
    }
})();
angular.module('app.core').directive('compareTo', compareTo);
compareTo.$inject = [];

function compareTo() {
    return {
        require: "ngModel",
        scope: {
            compareTolValue: "=compareTo"
        },
        link: function(scope, element, attributes, ngModel) {
            ngModel.$validators.compareTo = function(modelValue) {
                return modelValue === scope.compareTolValue;
            };
            scope.$watch("compareTolValue", function() {
                ngModel.$validate();
            });
        }
    };
}
angular.module('app.core').directive('selectOn', function() {
    return {
        restrict: 'A',
        link: function(scope, element) {
            var focusedElement;
            element.on('click', function() {
                if (focusedElement !== this) {
                    this.select();
                    focusedElement = this;
                }
            });
            element.on('blur', function() {
                focusedElement = null;
            })
        }
    }
});
(function(QRCode) {
    'use strict';
    angular.module('ja.qr', []).controller('QrCtrl', ['$scope', function($scope) {
        $scope.getTypeNumeber = function() {
            return $scope.typeNumber || 0;
        };
        $scope.getCorrection = function() {
            var levels = {
                'L': 1,
                'M': 0,
                'Q': 3,
                'H': 2
            };
            var correctionLevel = $scope.correctionLevel || 0;
            return levels[correctionLevel] || 0;
        };
        $scope.getText = function() {
            return $scope.text || '';
        };
        $scope.getSize = function() {
            return $scope.size || 250;
        };
        $scope.isNUMBER = function(text) {
            var ALLOWEDCHARS = /^[0-9]*$/;
            return ALLOWEDCHARS.test(text);
        };
        $scope.isALPHA_NUM = function(text) {
            var ALLOWEDCHARS = /^[0-9A-Z $%*+\-./:]*$/;
            return ALLOWEDCHARS.test(text);
        };
        $scope.is8bit = function(text) {
            for (var i = 0; i < text.length; i++) {
                var code = text.charCodeAt(i);
                if (code > 255) {
                    return false;
                }
            }
            return true;
        };
        $scope.checkInputMode = function(inputMode, text) {
            if (inputMode === 'NUMBER' && !$scope.isNUMBER(text)) {
                throw new Error('The `NUMBER` input mode is invalid for text.');
            } else if (inputMode === 'ALPHA_NUM' && !$scope.isALPHA_NUM(text)) {
                throw new Error('The `ALPHA_NUM` input mode is invalid for text.');
            } else if (inputMode === '8bit' && !$scope.is8bit(text)) {
                throw new Error('The `8bit` input mode is invalid for text.');
            } else if (!$scope.is8bit(text)) {
                throw new Error('Input mode is invalid for text.');
            }
            return true;
        };
        $scope.getInputMode = function(text) {
            var inputMode = $scope.inputMode;
            inputMode = inputMode || ($scope.isNUMBER(text) ? 'NUMBER' : undefined);
            inputMode = inputMode || ($scope.isALPHA_NUM(text) ? 'ALPHA_NUM' : undefined);
            inputMode = inputMode || ($scope.is8bit(text) ? '8bit' : '');
            return $scope.checkInputMode(inputMode, text) ? inputMode : '';
        };
    }]).directive('qr', ['$timeout', '$window', function($timeout, $window) {
        return {
            restrict: 'E',
            template: '<canvas ng-hide="image"></canvas><img ng-if="image" ng-src="{{canvasImage}}"/>',
            scope: {
                typeNumber: '=',
                correctionLevel: '=',
                inputMode: '=',
                size: '=',
                text: '=',
                image: '='
            },
            controller: 'QrCtrl',
            link: function postlink(scope, element, attrs) {
                if (scope.text === undefined) {
                    throw new Error('The `text` attribute is required.');
                }
                var canvas = element.find('canvas')[0];
                var canvas2D = !!$window.CanvasRenderingContext2D;
                scope.TYPE_NUMBER = scope.getTypeNumeber();
                scope.TEXT = scope.getText();
                scope.CORRECTION = scope.getCorrection();
                scope.SIZE = scope.getSize();
                scope.INPUT_MODE = scope.getInputMode(scope.TEXT);
                scope.canvasImage = '';
                var draw = function(context, qr, modules, tile) {
                    for (var row = 0; row < modules; row++) {
                        for (var col = 0; col < modules; col++) {
                            var w = (Math.ceil((col + 1) * tile) - Math.floor(col * tile)),
                                h = (Math.ceil((row + 1) * tile) - Math.floor(row * tile));
                            context.fillStyle = qr.isDark(row, col) ? '#000' : '#fff';
                            context.fillRect(Math.round(col * tile), Math.round(row * tile), w, h);
                        }
                    }
                };
                var render = function(canvas, value, typeNumber, correction, size, inputMode) {
                    var trim = /^\s+|\s+$/g;
                    var text = value.replace(trim, '');
                    var qr = new QRCode(typeNumber, correction, inputMode);
                    qr.addData(text);
                    qr.make();
                    var context = canvas.getContext('2d');
                    var modules = qr.getModuleCount();
                    var tile = size / modules;
                    canvas.width = canvas.height = size;
                    if (canvas2D) {
                        draw(context, qr, modules, tile);
                        scope.canvasImage = canvas.toDataURL() || '';
                    }
                };
                render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
                $timeout(function() {
                    scope.$watch('text', function(value, old) {
                        if (value !== old) {
                            scope.TEXT = scope.getText();
                            scope.INPUT_MODE = scope.getInputMode(scope.TEXT);
                            render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
                        }
                    });
                    scope.$watch('correctionLevel', function(value, old) {
                        if (value !== old) {
                            scope.CORRECTION = scope.getCorrection();
                            render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
                        }
                    });
                    scope.$watch('typeNumber', function(value, old) {
                        if (value !== old) {
                            scope.TYPE_NUMBER = scope.getTypeNumeber();
                            render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
                        }
                    });
                    scope.$watch('size', function(value, old) {
                        if (value !== old) {
                            scope.SIZE = scope.getSize();
                            render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
                        }
                    });
                    scope.$watch('inputMode', function(value, old) {
                        if (value !== old) {
                            scope.INPUT_MODE = scope.getInputMode(scope.TEXT);
                            render(canvas, scope.TEXT, scope.TYPE_NUMBER, scope.CORRECTION, scope.SIZE, scope.INPUT_MODE);
                        }
                    });
                });
            }
        };
    }]);
})(window.QRCode);
(function() {
    'use strict';
    angular.module('app.core').filter('filterByTags', filterByTags).filter('filterSingleByTags', filterSingleByTags);

    function filterByTags() {
        return function(items, tags) {
            if (items.length === 0 || tags.length === 0) {
                return items;
            }
            var filtered = [];
            items.forEach(function(item) {
                var match = tags.every(function(tag) {
                    var tagExists = false;
                    item.tags.forEach(function(itemTag) {
                        if (itemTag.name === tag.name) {
                            tagExists = true;
                            return;
                        }
                    });
                    return tagExists;
                });
                if (match) {
                    filtered.push(item);
                }
            });
            return filtered;
        };
    }

    function filterSingleByTags() {
        return function(itemTags, tags) {
            if (itemTags.length === 0 || tags.length === 0) {
                return;
            }
            if (itemTags.length < tags.length) {
                return [];
            }
            var filtered = [];
            var match = tags.every(function(tag) {
                var tagExists = false;
                itemTags.forEach(function(itemTag) {
                    if (itemTag.name === tag.name) {
                        tagExists = true;
                        return;
                    }
                });
                return tagExists;
            });
            if (match) {
                filtered.push(itemTags);
            }
            return filtered;
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').filter('SportGroup', function() {
        let SportList = [{
            SportType: 0,
            en: 'SportsBook',
            vn: 'Thể Thao'
        }, {
            SportType: 1,
            en: 'NumberGame',
            vn: 'Trò chơi Số'
        }, {
            SportType: 2,
            en: 'VirtualSports',
            vn: 'Thể Thao Ảo'
        }, {
            SportType: 3,
            en: 'Arcadia Gaming',
            vn: 'Arcadia Gaming'
        }, {
            SportType: 4,
            en: 'Saba.Club',
            vn: 'Saba.Club'
        }, {
            SportType: 5,
            en: 'Keno',
            vn: 'Keno'
        }, {
            SportType: 6,
            en: 'Lottery',
            vn: 'Lottery'
        }, {
            SportType: 7,
            en: 'RNG Casino',
            vn: 'RNG Casino'
        }, {
            SportType: 8,
            en: 'VGaming',
            vn: 'VGaming'
        }, {
            SportType: 99,
            en: 'Others',
            vn: 'Trò chơi khác'
        }, ];
        return function(input, cond) {
            let Sport = $.grep(SportList, function(value, i) {
                return value.SportType === parseInt(input)
            });
            if (Sport.length) {
                return cond === 'en' ? Sport[0].en : Sport[0].vn;
            } else {
                return 'Undefined'
            }
        }
    }).filter('sabaSportType', function() {
        let SportList = [{
            SportType: '1',
            name: 'Soccer',
            vn: 'Bóng Đá'
        }, {
            SportType: '1MP',
            name: 'SoccerParlay',
            vn: 'Xiên Bóng Đá'
        }, {
            SportType: '2',
            name: 'Basketball',
            vn: 'Bóng Rổ'
        }, {
            SportType: '3',
            name: 'Football',
            vn: 'Bóng Bầu Dục Mỹ'
        }, {
            SportType: '5',
            name: 'Tennis',
            vn: 'Quần Vợt'
        }, {
            SportType: '8',
            name: 'Baseball',
            vn: 'Bóng Chày'
        }, {
            SportType: '10',
            name: 'Golf',
            vn: 'Đánh Golf'
        }, {
            SportType: '11',
            name: 'Motorsports',
            vn: 'Đua xe Mô Tô'
        }, {
            SportType: '43',
            name: 'E_Sports',
            vn: 'Thể Thao Điện Tử'
        }, {
            SportType: '99',
            name: 'OtherSports',
            vn: 'Môn Thể Thao khác'
        }, {
            SportType: '99MP',
            name: 'MixSportsParlay',
            vn: 'Xiên Thể Thao'
        }, {
            SportType: '161',
            name: 'NumberGame',
            vn: 'Number Game'
        }, {
            SportType: '180',
            name: 'VirtualSports',
            vn: 'Thể Thao Ảo'
        }, ];
        return function(input, cond) {
            let Sport = $.grep(SportList, function(value, i) {
                return value.name === input
            });
            if (Sport.length) {
                return cond === 'vn' ? Sport[0].vn : Sport[0].SportType;
            } else {
                return 'Undefined'
            }
        }
    }).filter('SabaTicketStatus', function() {
        let Languages = [{
            en: "won",
            vn: 'Thắng'
        }, {
            en: "lose",
            vn: 'Thua'
        }, {
            en: "half won",
            vn: 'Thắng nửa'
        }, {
            en: "half lose",
            vn: 'Thua nửa'
        }, {
            en: "void",
            vn: 'Huỷ'
        }, {
            en: "running",
            vn: 'Đang chạy'
        }, {
            en: "draw",
            vn: 'Hoà'
        }, {
            en: "reject",
            vn: 'Từ chối'
        }, {
            en: "refund",
            vn: 'Hoàn tiền'
        }, {
            en: "waiting",
            vn: 'Đang chờ'
        }, ];
        return function(input) {
            let lang = $.grep(Languages, function(value, i) {
                return value.en === input
            });
            if (lang.length) {
                return lang[0].vn;
            } else {
                return input
            }
        }
    }).filter('SabaOddsType', function() {
        let OddsType = [{
            id: 0,
            name: 'SP'
        }, {
            id: 1,
            name: 'MY'
        }, {
            id: 2,
            name: 'CN'
        }, {
            id: 3,
            name: 'DEC'
        }, {
            id: 4,
            name: 'IN'
        }, {
            id: 5,
            name: 'AM'
        }, ];
        return function(input) {
            let odd = $.grep(OddsType, function(value, i) {
                return value.id === parseInt(input)
            });
            if (odd.length) {
                return odd[0].name;
            } else {
                return input
            }
        }
    }).filter('sabaSportsBet', function() {
        let SportTypes = [{
            "SportID": 1,
            "Sport": "Bóng đá"
        }, {
            "SportID": 2,
            "Sport": "Bóng rổ"
        }, {
            "SportID": 3,
            "Sport": "Bóng bầu dục Mỹ"
        }, {
            "SportID": 4,
            "Sport": "Khúc côn cầu trên băng"
        }, {
            "SportID": 5,
            "Sport": "Quần vợt"
        }, {
            "SportID": 6,
            "Sport": "Bóng chuyền"
        }, {
            "SportID": 7,
            "Sport": "Snooker/Pool"
        }, {
            "SportID": 8,
            "Sport": "Bóng chày"
        }, {
            "SportID": 9,
            "Sport": "Cầu lông"
        }, {
            "SportID": 10,
            "Sport": "Đánh Golf"
        }, {
            "SportID": 11,
            "Sport": "Thể Thao Môtô"
        }, {
            "SportID": 12,
            "Sport": "Bơi lội"
        }, {
            "SportID": 13,
            "Sport": "Chính trị"
        }, {
            "SportID": 14,
            "Sport": "Bóng nước"
        }, {
            "SportID": 15,
            "Sport": "Lặn"
        }, {
            "SportID": 16,
            "Sport": "Quyền anh"
        }, {
            "SportID": 17,
            "Sport": "Bắn cung"
        }, {
            "SportID": 18,
            "Sport": "Bóng bàn"
        }, {
            "SportID": 19,
            "Sport": "Cử tạ"
        }, {
            "SportID": 20,
            "Sport": "Canoeing"
        }, {
            "SportID": 21,
            "Sport": "Thể dục"
        }, {
            "SportID": 22,
            "Sport": "Điền kinh"
        }, {
            "SportID": 23,
            "Sport": "Cưỡi ngựa"
        }, {
            "SportID": 24,
            "Sport": "Bóng ném"
        }, {
            "SportID": 25,
            "Sport": "Ném phi tiêu"
        }, {
            "SportID": 26,
            "Sport": "Bóng bầu dục"
        }, {
            "SportID": 27,
            "Sport": "Cricket"
        }, {
            "SportID": 28,
            "Sport": "Khúc côn cầu trên cỏ"
        }, {
            "SportID": 29,
            "Sport": "Winter Sports"
        }, {
            "SportID": 30,
            "Sport": "Squash"
        }, {
            "SportID": 31,
            "Sport": "Giải Trí"
        }, {
            "SportID": 32,
            "Sport": "Netball"
        }, {
            "SportID": 33,
            "Sport": "Đua xe đạp"
        }, {
            "SportID": 34,
            "Sport": "Đấu kiếm"
        }, {
            "SportID": 35,
            "Sport": "Judo"
        }, {
            "SportID": 36,
            "Sport": "M. Pentathlon"
        }, {
            "SportID": 37,
            "Sport": "Rowing"
        }, {
            "SportID": 38,
            "Sport": "Đua thuyền buồm"
        }, {
            "SportID": 39,
            "Sport": "Bắn súng"
        }, {
            "SportID": 40,
            "Sport": "Taekwondo"
        }, {
            "SportID": 41,
            "Sport": "Triathlon"
        }, {
            "SportID": 42,
            "Sport": "Đấu vật"
        }, {
            "SportID": 43,
            "Sport": "Thể Thao Điện Tử"
        }, {
            "SportID": 44,
            "Sport": "Quyền Thái"
        }, {
            "SportID": 45,
            "Sport": "Beach Volleyball"
        }, {
            "SportID": 47,
            "Sport": "Kabaddi"
        }, {
            "SportID": 48,
            "Sport": "Cầu mây"
        }, {
            "SportID": 49,
            "Sport": "Bóng đá trong nhà"
        }, {
            "SportID": 50,
            "Sport": "Cricket"
        }, {
            "SportID": 51,
            "Sport": "Bóng đá bãi biển"
        }, {
            "SportID": 52,
            "Sport": "Poker"
        }, {
            "SportID": 53,
            "Sport": "Cờ vua"
        }, {
            "SportID": 54,
            "Sport": "Olympics"
        }, {
            "SportID": 55,
            "Sport": "Tài chính"
        }, {
            "SportID": 56,
            "Sport": "Lô tô"
        }, {
            "SportID": 99,
            "Sport": "Môn thể thao khác"
        }, {
            "SportID": 161,
            "Sport": "Number Game"
        }, {
            "SportID": 164,
            "Sport": "Happy 5"
        }, {
            "SportID": 168,
            "Sport": "Các trò chơi liên kết Happy 5"
        }, {
            "SportID": 169,
            "Sport": "Sports Lottery"
        }, {
            "SportID": 171,
            "Sport": "VGaming"
        }, {
            "SportID": 165,
            "Sport": "Arcadia Gaming"
        }, {
            "SportID": 180,
            "Sport": "Bóng đá Ảo"
        }, {
            "SportID": 181,
            "Sport": "Đua Ngựa Ảo"
        }, {
            "SportID": 182,
            "Sport": "Đua Chó Ảo"
        }, {
            "SportID": 183,
            "Sport": "Đua xe mô tô ảo"
        }, {
            "SportID": 184,
            "Sport": "Đua xe Ảo"
        }, {
            "SportID": 185,
            "Sport": "Đua xe đạp ảo"
        }, {
            "SportID": 186,
            "Sport": "Quần Vợt Ảo"
        }, {
            "SportID": 190,
            "Sport": "Giải đấu Bóng đá Ảo"
        }, {
            "SportID": 191,
            "Sport": "Quốc gia Bóng đá Ảo"
        }, {
            "SportID": 192,
            "Sport": "Giải vô địch bóng đá thế giới ảo"
        }, {
            "SportID": 193,
            "Sport": "Bóng rổ Ảo"
        }, {
            "SportID": 194,
            "Sport": "Cúp bóng đá ảo Châu Á"
        }, {
            "SportID": 195,
            "Sport": "Virtual Soccer English Premier"
        }, {
            "SportID": 196,
            "Sport": "Cúp bóng đá ảo"
        }, {
            "SportID": 197,
            "Sport": "Cúp Bóng Đá Euro Ảo"
        }, {
            "SportID": 199,
            "Sport": "Virtual Sports Parlay"
        }, {
            "SportID": 200,
            "Sport": "Saba.Club"
        }, {
            "SportID": 202,
            "Sport": "RNG Keno"
        }, {
            "SportID": 220,
            "Sport": "Lottery"
        }, {
            "SportID": 208,
            "Sport": "RNG Game"
        }, {
            "SportID": 210,
            "Sport": "RNG Mobile"
        }, ];
        return function(input) {
            let SportType = $.grep(SportTypes, function(value, i) {
                return value.SportID === parseInt(input)
            });
            if (SportType.length) {
                return SportType[0].Sport;
            } else {
                return 'SportType [' + input + ']'
            }
        }
    }).filter('BetTag', function() {
        return function(input, tag) {
            if (tag === undefined) {
                return input
            } else {
                let arTag = tag.split('-')
                if (arTag[0] !== undefined) {
                    arTag[0] = arTag[0].replace(new RegExp("0", "g"), '')
                }
                input = input.replace("{X}", arTag[0]);
                input = input.replace("{Y}", arTag[1]);
                return input
            }
        }
    }).filter('sabaCurrency', function() {
        return function(input) {
            if (!isNaN(input)) {
                return new Intl.NumberFormat({
                    maximumSignificantDigits: 1
                }).format(input)
            } else {
                return input
            }
        }
    }).filter('SabaInCompleted', function() {
        return function(input) {
            if (input === 0) {
                return 'Pending'
            } else {
                return 'Completed'
            }
        }
    })
})();
(function() {
    'use strict';
    angular.module('app.core').filter('legendGame', function() {
        let gameList = [{
            id: 0,
            name: 'Miền Bắc'
        }, {
            id: 1,
            name: 'Miền Nam'
        }];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('casinoGame', function() {
        let gameList = [{
            id: 0,
            name: 'Xóc Đĩa'
        }, {
            id: 100,
            name: 'Bầu cử TT'
        }];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('term', function() {
        return function(input) {
            if (input !== undefined) {
                return input.substring(2).replace(/-/g, '')
            }
        }
    })
})();
(function() {
    'use strict';
    angular.module('app.core').filter('roundPam', function() {
        return function(input) {
            if (Math.abs(input) > 1000000000) {
                return (input / 1000000000).toFixed(2) + ' tỷ'
            } else if (Math.abs(input) > 1000000) {
                return (input / 1000000).toFixed(2) + ' triệu'
            } else if (Math.abs(input) > 1000) {
                return input.toFixed(2) / 1000 + ' nghìn'
            } else {
                return input
            }
        }
    }).filter('result', function() {
        return function(result, GameType) {
            switch (parseInt(GameType)) {
                case 0:
                    var output = '';
                    angular.forEach(result, function(item) {
                        if (item === 0) {
                            output = output + '<span class="white"></span>'
                        } else {
                            output = output + '<span class="red"></span>'
                        }
                    });
                    return output;
                    break;
                case 1:
                    return '<span class="card card_' + result + '"> </span>';
                    break;
                case 2:
                    var output = '';
                    angular.forEach(result, function(item) {
                        output = output + '<span class="cherry_' + item + '"></span>'
                    });
                    return output;
                    break;
                case 3:
                    var output = '';
                    angular.forEach(result, function(item) {
                        output = output + '<span class="dice_' + item + '"></span>'
                    });
                    return output;
                    break;
                case 4:
                    if ([1, 2, 5, 7, 9, 12, 14, 13, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36].indexOf(result) !== -1) {
                        return '<span class="result red">' + result + '</span>'
                    } else {
                        return '<span class="result black">' + result + '</span>'
                    }
                    break;
                default:
                    break;
            }
        }
    }).filter('BetType', function() {
        return function(BetType, GameType) {
            let betLists = [];
            switch (parseInt(GameType)) {
                case 0:
                    betLists = [{
                        id: 0,
                        name: 'Chẵn'
                    }, {
                        id: 1,
                        name: 'Lẻ'
                    }, {
                        id: 2,
                        name: '<img src="assets/images/report/avocado/4_red.png">'
                    }, {
                        id: 3,
                        name: '<img src="assets/images/report/avocado/0_red.png">'
                    }, {
                        id: 4,
                        name: '<img src="assets/images/report/avocado/3_red.png">'
                    }, {
                        id: 5,
                        name: '<img src="assets/images/report/avocado/1_red.png">'
                    }];
                    break;
                case 1:
                    betLists = [{
                        id: 0,
                        name: 'Rồng'
                    }, {
                        id: 1,
                        name: 'Hòa'
                    }, {
                        id: 2,
                        name: 'Hổ'
                    }, {
                        id: 3,
                        name: 'Rồng - Xỉu'
                    }, {
                        id: 4,
                        name: 'Rồng - Tài'
                    }, {
                        id: 5,
                        name: 'Rồng - Lẻ'
                    }, {
                        id: 6,
                        name: 'Rồng - Chẵn'
                    }, {
                        id: 7,
                        name: 'Rồng - <span>♠</span>'
                    }, {
                        id: 8,
                        name: 'Rồng - <span>♣</span>'
                    }, {
                        id: 9,
                        name: 'Rồng - <span class="red">♦</span>'
                    }, {
                        id: 10,
                        name: 'Rồng - <span class="red">♥</span>'
                    }, {
                        id: 11,
                        name: 'Hổ - Xỉu'
                    }, {
                        id: 12,
                        name: 'Hổ - Tài'
                    }, {
                        id: 13,
                        name: 'Hổ - Lẻ'
                    }, {
                        id: 14,
                        name: 'Hổ - Chẵn'
                    }, {
                        id: 15,
                        name: 'Hổ - <span>♠</span>'
                    }, {
                        id: 16,
                        name: 'Hổ - <span>♣</span>'
                    }, {
                        id: 17,
                        name: 'Hổ - <span class="red">♦</span>'
                    }, {
                        id: 18,
                        name: 'Hổ - <span class="red">♥</span>'
                    }, ];
                    break;
                case 2:
                    betLists = [{
                        id: 0,
                        name: 'Bầu'
                    }, {
                        id: 1,
                        name: 'Tôm'
                    }, {
                        id: 2,
                        name: 'Cua'
                    }, {
                        id: 3,
                        name: 'Cá'
                    }, {
                        id: 4,
                        name: 'Gà'
                    }, {
                        id: 5,
                        name: 'Hươu'
                    }];
                    break;
                case 3:
                    betLists = [{
                        id: 0,
                        name: 'Tài'
                    }, {
                        id: 1,
                        name: 'Xỉu'
                    }, {
                        id: 2,
                        name: 'Lẻ'
                    }, {
                        id: 3,
                        name: 'Chẵn'
                    }, {
                        id: 4,
                        name: 'Bộ 3-1'
                    }, {
                        id: 5,
                        name: 'Bộ 3-2'
                    }, {
                        id: 6,
                        name: 'Bộ 3-3'
                    }, {
                        id: 7,
                        name: 'Bộ 3-4'
                    }, {
                        id: 8,
                        name: 'Bộ 3-5'
                    }, {
                        id: 9,
                        name: 'Bộ 3-6'
                    }, {
                        id: 10,
                        name: 'Bộ 3 bất kỳ'
                    }, {
                        id: 11,
                        name: 'Cặp 1-1'
                    }, {
                        id: 12,
                        name: 'Cặp 2-2'
                    }, {
                        id: 13,
                        name: 'Cặp 3-3'
                    }, {
                        id: 14,
                        name: 'Cặp 4-4'
                    }, {
                        id: 15,
                        name: 'Cặp 5-5'
                    }, {
                        id: 16,
                        name: 'Cặp 6-6'
                    }, {
                        id: 17,
                        name: 'Tổng 4'
                    }, {
                        id: 18,
                        name: 'Tổng 5'
                    }, {
                        id: 19,
                        name: 'Tổng 6'
                    }, {
                        id: 20,
                        name: 'Tổng 7'
                    }, {
                        id: 21,
                        name: 'Tổng 8'
                    }, {
                        id: 22,
                        name: 'Tổng 9'
                    }, {
                        id: 23,
                        name: 'Tổng 10'
                    }, {
                        id: 24,
                        name: 'Tổng 11'
                    }, {
                        id: 25,
                        name: 'Tổng 12'
                    }, {
                        id: 26,
                        name: 'Tổng 13'
                    }, {
                        id: 27,
                        name: 'Tổng 14'
                    }, {
                        id: 28,
                        name: 'Tổng 15'
                    }, {
                        id: 29,
                        name: 'Tổng 16'
                    }, {
                        id: 30,
                        name: 'Tổng 17'
                    }, {
                        id: 31,
                        name: 'Cặp 1-2'
                    }, {
                        id: 32,
                        name: 'Cặp 1-3'
                    }, {
                        id: 33,
                        name: 'Cặp 1-4'
                    }, {
                        id: 34,
                        name: 'Cặp 1-5'
                    }, {
                        id: 35,
                        name: 'Cặp 1-6'
                    }, {
                        id: 36,
                        name: 'Cặp 2-3'
                    }, {
                        id: 37,
                        name: 'Cặp 2-4'
                    }, {
                        id: 38,
                        name: 'Cặp 2-5'
                    }, {
                        id: 39,
                        name: 'Cặp 2-6'
                    }, {
                        id: 40,
                        name: 'Cặp 3-4'
                    }, {
                        id: 41,
                        name: 'Cặp 3-5'
                    }, {
                        id: 42,
                        name: 'Cặp 3-6'
                    }, {
                        id: 43,
                        name: 'Cặp 4-5'
                    }, {
                        id: 44,
                        name: 'Cặp 4-6'
                    }, {
                        id: 45,
                        name: 'Cặp 5-6'
                    }, {
                        id: 46,
                        name: 'Có 1'
                    }, {
                        id: 47,
                        name: 'Có 2'
                    }, {
                        id: 48,
                        name: 'Có 3'
                    }, {
                        id: 49,
                        name: 'Có 4'
                    }, {
                        id: 50,
                        name: 'Có 5'
                    }, {
                        id: 51,
                        name: 'Có 6'
                    }, ];
                    break;
                case 4:
                    betLists = [{
                        id: 0,
                        name: 'StraightUp'
                    }, {
                        id: 1,
                        name: 'Split'
                    }, {
                        id: 2,
                        name: 'Street'
                    }, {
                        id: 3,
                        name: 'Corner'
                    }, {
                        id: 4,
                        name: 'Line'
                    }, {
                        id: 5,
                        name: 'Trio'
                    }, {
                        id: 6,
                        name: 'Basket'
                    }, {
                        id: 7,
                        name: 'Column Left'
                    }, {
                        id: 8,
                        name: 'ColumnMiddle'
                    }, {
                        id: 9,
                        name: 'ColumnRight'
                    }, {
                        id: 10,
                        name: 'Even'
                    }, {
                        id: 11,
                        name: 'Odd'
                    }, {
                        id: 12,
                        name: 'Red'
                    }, {
                        id: 13,
                        name: 'Black'
                    }, {
                        id: 14,
                        name: 'Low'
                    }, {
                        id: 15,
                        name: 'High'
                    }, {
                        id: 16,
                        name: 'DozenFirst'
                    }, {
                        id: 17,
                        name: 'DozenSecond'
                    }, {
                        id: 18,
                        name: 'DozenThird'
                    }, ];
                    break;
                default:
                    return 'Unknow';
            }
            let finding = $.grep(betLists, function(value, i) {
                return value.id === parseInt(BetType)
            });
            if (finding.length) {
                return finding[0].name
            } else {
                return 'Unknow'
            }
        }
    }).filter('game', function() {
        var gameList = [{
            id: 0,
            name: 'Xóc đĩa'
        }, {
            id: 1,
            name: 'Long Hổ'
        }, {
            id: 2,
            name: 'Tôm cua cá'
        }, {
            id: 3,
            name: 'Tài xỉu'
        }, {
            id: 4,
            name: 'European Roulette'
        }, {
            id: 5,
            name: 'Ba Cây'
        }];
        return function(input) {
            return $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            })[0].name;
        }
    }).filter('Production', function() {
        let gameList = [{
            id: 0,
            name: 'Xổ số truyền thống'
        }, {
            id: 1,
            name: 'Xổ số 789'
        }, {
            id: 2,
            name: '789 Casino'
        }, {
            id: 3,
            name: 'One Game'
        }, {
            id: 100,
            name: 'WM Casino'
        }, {
            id: 101,
            name: 'Bong88'
        }, ];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('prod', function() {
        let gameList = [{
            id: 0,
            name: 'XSTT'
        }, {
            id: 1,
            name: 'XS789'
        }, {
            id: 2,
            name: '789 Casino'
        }, {
            id: 100,
            name: 'WM Casino'
        }, {
            id: 101,
            name: 'Bong88'
        }, ];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('WMGame', function() {
        let gameList = [{
            id: 101,
            name: 'Baccarat'
        }, {
            id: 102,
            name: 'Rồng Hổ'
        }, {
            id: 103,
            name: 'Roulette'
        }, {
            id: 104,
            name: 'Tài Xỉu'
        }, {
            id: 105,
            name: 'Ngưu Ngưu'
        }, {
            id: 106,
            name: 'Ba Cây'
        }, {
            id: 107,
            name: 'Fan Tan'
        }, {
            id: 108,
            name: 'Xóc Đĩa'
        }, {
            id: 110,
            name: 'Tôm Cua Cá'
        }, {
            id: 111,
            name: 'Trác Kim Hoa'
        }, {
            id: 112,
            name: 'Bài cửu Ôn Châu'
        }, {
            id: 113,
            name: 'Mạt Chược'
        }, {
            id: 128,
            name: 'Andar Bahar'
        }, ];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('LegendGame', function() {
        let gameList = [{
            id: 0,
            name: 'Xóc Đĩa'
        }, {
            id: 100,
            name: 'Bầu cử TT'
        }, ];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('LegendBet', function() {
        let betLists = [{
            id: 0,
            name: 'Chẵn'
        }, {
            id: 1,
            name: 'Lẻ'
        }, {
            id: 2,
            name: '4 Đỏ'
        }, {
            id: 3,
            name: '4 Trắng'
        }, {
            id: 4,
            name: '1 Đỏ'
        }, {
            id: 5,
            name: '3 Đỏ'
        }, ];
        return function(input) {
            let bet = $.grep(betLists, function(value, i) {
                return value.id === parseInt(input)
            });
            if (bet.length) {
                return bet[0].name;
            }
        }
    }).filter('WMBet', function() {
        return function(BetType, GameType) {
            let betLists = [];
            switch (parseInt(GameType)) {
                case 108:
                    betLists = [{
                        id: 'Even',
                        name: 'Chẵn'
                    }, {
                        id: 'Odd',
                        name: 'Lẻ'
                    }, {
                        id: '4Red',
                        name: '<img src="assets/images/report/avocado/4_red.png">'
                    }, {
                        id: '4White',
                        name: '<img src="assets/images/report/avocado/0_red.png">'
                    }, {
                        id: '3Red1White',
                        name: '<img src="assets/images/report/avocado/3_red.png">'
                    }, {
                        id: '3White1Red',
                        name: '<img src="assets/images/report/avocado/1_red.png">'
                    }];
                    break;
                default:
                    return BetType;
            }
            let finding = $.grep(betLists, function(value, i) {
                return value.id === BetType
            });
            if (finding.length) {
                return finding[0].name
            } else {
                return BetType
            }
        }
    }).filter('gameXs', function() {
        let gameList = [{
            id: 0,
            name: 'Miền Bắc 1'
        }, {
            id: 1,
            name: 'Miền Bắc 2'
        }, {
            id: 2,
            name: 'Miền Nam 18A'
        }, {
            id: 3,
            name: 'Miền Nam 18B'
        }, {
            id: 4,
            name: 'Miền Nam 18C'
        }, {
            id: 5,
            name: 'Miền Nam 18A + 18B'
        }];
        return function(input) {
            let game = $.grep(gameList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (game.length) {
                return game[0].name;
            }
        }
    }).filter('bet', function() {
        let betList = [{
            id: 0,
            name: 'Đề'
        }, {
            id: 1,
            name: 'Lô'
        }, {
            id: 2,
            name: 'Xiên 2'
        }, {
            id: 3,
            name: 'Xiên 3'
        }, {
            id: 4,
            name: 'Xiên 4'
        }, {
            id: 5,
            name: 'Đề Trượt'
        }, {
            id: 6,
            name: 'Lô Trượt'
        }, {
            id: 7,
            name: '2D Đầu'
        }, {
            id: 8,
            name: '2D Đuôi'
        }, {
            id: 9,
            name: '2D 27Lô'
        }, {
            id: 10,
            name: '3D Đầu'
        }, {
            id: 11,
            name: '3D Đuôi',
            mb: 'Đề 3 Càng'
        }, {
            id: 12,
            name: '3D 23Lô',
            mb: 'Lô 3 Càng'
        }, {
            id: 13,
            name: '4D Đuôi',
            mb: 'Đề 4 Càng'
        }, {
            id: 14,
            name: '4D 20Lô',
            mb: 'Lô 4 Càng'
        }, {
            id: 15,
            name: '2D 18Lô'
        }, {
            id: 16,
            name: '2D 7Lô'
        }, {
            id: 17,
            name: '3D 17Lô'
        }, {
            id: 18,
            name: '3D 7Lô'
        }, {
            id: 19,
            name: '4D 16Lô'
        }, {
            id: 20,
            name: 'Lô Live'
        }, {
            id: 21,
            name: 'Đề Đầu'
        }, {
            id: 22,
            name: 'Đề Giải 1'
        }, {
            id: 23,
            name: 'Đề Đầu Giải 1',
            short: 'Đề Đầu G1'
        }, {
            id: 24,
            name: 'Đề Thần Tài',
            short: 'Đề TT'
        }, {
            id: 25,
            name: 'Đề Đầu Thần Tài',
            short: 'Đề Đầu TT'
        }, {
            id: 26,
            name: 'Lô Live 3D'
        }, {
            id: 27,
            name: '2D 18Lô Live'
        }, {
            id: 28,
            name: 'Lô Live 3D'
        }, {
            id: 29,
            name: 'Lô Đầu'
        }, {
            id: 30,
            name: '2D 18Lô Đầu'
        }, ];
        return function(input, short, GameType) {
            GameType = parseInt(GameType);
            let bet = $.grep(betList, function(value, i) {
                return value.id === parseInt(input)
            });
            if (bet.length) {
                if (GameType === 0) {
                    if (bet[0].mb !== undefined) {
                        return bet[0].mb
                    } else {
                        return bet[0].name
                    }
                }
                if (short && bet[0].short !== undefined) {
                    return bet[0].short;
                } else {
                    return bet[0].name;
                }
            }
        }
    }).filter('group', function() {
        let groups = [{
            id: 0,
            name: 'Administrator'
        }, {
            id: 1,
            name: 'Công ty'
        }, {
            id: 2,
            name: 'Quản trị'
        }, {
            id: 3,
            name: 'Cổ đông'
        }, {
            id: 4,
            name: 'Tổng đại lý'
        }, {
            id: 5,
            name: 'Đại lý'
        }, {
            id: 9,
            name: 'Hội viên'
        }];

        function localization(input) {
            let group = $.grep(groups, function(value) {
                return value.id === parseInt(input)
            });
            if (group.length) {
                return group[0].name;
            }
        }
        localization.$stateful = true;
        return localization;
    }).filter('termStatus', function() {
        return function(input) {
            switch (input) {
                case 1:
                    return 'Đang mở';
                    break;
                case 2:
                    return 'Đang kết sổ';
                    break;
                case 3:
                    return 'Đang build báo biểu';
                    break;
                case 9:
                    return 'Đã kết sổ';
                    break;
                case 10:
                    return 'Đang kết sổ lại';
                    break;
                case -1:
                    return 'Kết sổ lỗi';
                    break;
                case -2:
                    return 'Làm sổ sách lỗi';
                    break;
                default:
                    return 'Ngoại lệ'
            }
        }
    }).filter('TemporaryBookingStatus', function() {
        return function(input) {
            switch (input) {
                case 0:
                    return 'Đang kết sổ thử lại';
                    break;
                case 1:
                    return 'Đang kết sổ thử';
                    break;
                case 9:
                    return 'Đã có sổ';
                    break;
                default:
                    return ''
            }
        }
    }).filter('GameBookKeeping', function() {
        return function(input) {
            switch (input) {
                case -9:
                    return 'Ván chơi game bị huỷ';
                    break;
                case -1:
                    return 'Đang thực hiện huỷ ván chơi';
                    break;
                case 0:
                    return 'Idle';
                    break;
                case 1:
                    return 'Đang làm sổ';
                    break;
                case 2:
                    return 'Đang kết sổ lại';
                    break;
                case 9:
                    return 'Đã kết sổ';
                    break;
                default:
                    return 'Ngoại lệ'
            }
        }
    }).filter('status', function() {
        return function(input) {
            switch (input) {
                case 1:
                    return 'Processing';
                    break;
                case 0:
                    return 'Pending';
                    break;
                case 9:
                    return 'Completed';
                    break;
                case -9:
                    return 'Failed';
                    break;
                default:
                    return 'Unknow'
            }
        }
    }).filter('liveAction', function() {
        return function(input) {
            switch (input) {
                case 0:
                    return 'Chuyển giá lô';
                    break;
                case 1:
                    return 'Mở cược';
                    break;
                case 2:
                    return 'Đóng cược';
                    break;
                default:
                    return 'Đóng giải'
            }
        }
    }).filter('bid', function() {
        return function(input) {
            if (input) {
                return 'Cứng'
            } else {
                return 'Mềm'
            }
        }
    }).filter('login', function() {
        return function(input) {
            if (input === 0) {
                return 'Success'
            } else {
                return 'Fail'
            }
        }
    }).filter('stopbetting', function() {
        return function(input) {
            if (input === 1) {
                return 'Open'
            } else {
                return 'Close'
            }
        }
    }).filter('riskType', function() {
        return function(input) {
            if (input === 1) {
                return 'Point'
            } else if (input === 2) {
                return 'Risk'
            } else if (input === 3) {
                return 'Point Avg'
            } else {
                return 'Không tăng giá'
            }
        }
    }).filter('betfilter', function() {
        return function(input) {
            if (input === undefined) {
                return 'Tất cả'
            } else {
                var output = [];
                var outbet = [];
                $.each(input, function(index, value) {
                    if (value.gameType === 0) {
                        outbet = [];
                        if (value.betTypes === undefined) {
                            outbet.push('Tất cả')
                        } else {
                            $.each(value.betTypes, function(i, bet) {
                                if (bet === 0) {
                                    outbet.push('Đề')
                                }
                                if (bet === 1) {
                                    outbet.push('Lô')
                                }
                                if (bet === 2) {
                                    outbet.push('Xiên 2')
                                }
                                if (bet === 3) {
                                    outbet.push('Xiên 3')
                                }
                                if (bet === 4) {
                                    outbet.push('Xiên 4')
                                }
                                if (bet === 5) {
                                    outbet.push('Đề Trượt')
                                }
                                if (bet === 6) {
                                    outbet.push('Lô Trượt')
                                }
                                if (bet === 21) {
                                    outbet.push('Đề Đầu')
                                }
                                if (bet === 22) {
                                    outbet.push('Đề Giải 1')
                                }
                                if (bet === 23) {
                                    outbet.push('Đề Đầu Giải 1')
                                }
                                if (bet === 24) {
                                    outbet.push('Đề Thần Tài')
                                }
                                if (bet === 25) {
                                    outbet.push('Đề Đầu Thần Tài')
                                }
                            });
                        }
                        output.push('MB 1 (' + outbet.toString() + ')')
                    }
                    if (value.gameType === 1) {
                        outbet = [];
                        if (value.betTypes === undefined) {
                            outbet.push('Tất cả')
                        } else {
                            $.each(value.betTypes, function(i, bet) {
                                if (bet === 2) {
                                    outbet.push('Xiên 2')
                                }
                                if (bet === 3) {
                                    outbet.push('Xiên 3')
                                }
                                if (bet === 4) {
                                    outbet.push('Xiên 4')
                                }
                                if (bet === 7) {
                                    outbet.push('2D Đầu')
                                }
                                if (bet === 8) {
                                    outbet.push('2D Đuôi')
                                }
                                if (bet === 9) {
                                    outbet.push('2D 27Lô')
                                }
                                if (bet === 10) {
                                    outbet.push('3D Đầu')
                                }
                                if (bet === 11) {
                                    outbet.push('3D Đuôi')
                                }
                                if (bet === 12) {
                                    outbet.push('3D 23Lô')
                                }
                                if (bet === 13) {
                                    outbet.push('4D Đuôi')
                                }
                                if (bet === 14) {
                                    outbet.push('4D 20Lô')
                                }
                            });
                        }
                        output.push('MB 2 (' + outbet.toString() + ')')
                    }
                    if (value.gameType === 2) {
                        outbet = [];
                        if (value.betTypes === undefined) {
                            outbet.push('Tất cả')
                        } else {
                            $.each(value.betTypes, function(i, bet) {
                                if (bet === 2) {
                                    outbet.push('Xiên 2')
                                }
                                if (bet === 3) {
                                    outbet.push('Xiên 3')
                                }
                                if (bet === 4) {
                                    outbet.push('Xiên 4')
                                }
                                if (bet === 7) {
                                    outbet.push('2D Đầu')
                                }
                                if (bet === 8) {
                                    outbet.push('2D Đuôi')
                                }
                                if (bet === 15) {
                                    outbet.push('2D 18Lô')
                                }
                                if (bet === 16) {
                                    outbet.push('2D 7Lô')
                                }
                                if (bet === 10) {
                                    outbet.push('3D Đầu')
                                }
                                if (bet === 11) {
                                    outbet.push('3D Đuôi')
                                }
                                if (bet === 17) {
                                    outbet.push('3D 17Lô')
                                }
                                if (bet === 18) {
                                    outbet.push('3D 7Lô')
                                }
                                if (bet === 13) {
                                    outbet.push('4D Đuôi')
                                }
                                if (bet === 19) {
                                    outbet.push('4D 16Lô')
                                }
                            });
                        }
                        output.push('MN A (' + outbet.toString() + ')')
                    }
                    if (value.gameType === 3) {
                        outbet = [];
                        if (value.betTypes === undefined) {
                            outbet.push('Tất cả')
                        } else {
                            $.each(value.betTypes, function(i, bet) {
                                if (bet === 2) {
                                    outbet.push('Xiên 2')
                                }
                                if (bet === 3) {
                                    outbet.push('Xiên 3')
                                }
                                if (bet === 4) {
                                    outbet.push('Xiên 4')
                                }
                                if (bet === 7) {
                                    outbet.push('2D Đầu')
                                }
                                if (bet === 8) {
                                    outbet.push('2D Đuôi')
                                }
                                if (bet === 15) {
                                    outbet.push('2D 18Lô')
                                }
                                if (bet === 16) {
                                    outbet.push('2D 7Lô')
                                }
                                if (bet === 10) {
                                    outbet.push('3D Đầu')
                                }
                                if (bet === 11) {
                                    outbet.push('3D Đuôi')
                                }
                                if (bet === 17) {
                                    outbet.push('3D 17Lô')
                                }
                                if (bet === 18) {
                                    outbet.push('3D 7Lô')
                                }
                                if (bet === 13) {
                                    outbet.push('4D Đuôi')
                                }
                                if (bet === 19) {
                                    outbet.push('4D 16Lô')
                                }
                            });
                        }
                        output.push('MN B (' + outbet.toString() + ')')
                    }
                    if (value.gameType === 4) {
                        outbet = [];
                        if (value.betTypes === undefined) {
                            outbet.push('Tất cả')
                        } else {
                            $.each(value.betTypes, function(i, bet) {
                                if (bet === 2) {
                                    outbet.push('Xiên 2')
                                }
                                if (bet === 3) {
                                    outbet.push('Xiên 3')
                                }
                                if (bet === 4) {
                                    outbet.push('Xiên 4')
                                }
                                if (bet === 7) {
                                    outbet.push('2D Đầu')
                                }
                                if (bet === 8) {
                                    outbet.push('2D Đuôi')
                                }
                                if (bet === 15) {
                                    outbet.push('2D 18Lô')
                                }
                                if (bet === 16) {
                                    outbet.push('2D 7Lô')
                                }
                                if (bet === 10) {
                                    outbet.push('3D Đầu')
                                }
                                if (bet === 11) {
                                    outbet.push('3D Đuôi')
                                }
                                if (bet === 17) {
                                    outbet.push('3D 17Lô')
                                }
                                if (bet === 18) {
                                    outbet.push('3D 7Lô')
                                }
                                if (bet === 13) {
                                    outbet.push('4D Đuôi')
                                }
                                if (bet === 19) {
                                    outbet.push('4D 16Lô')
                                }
                            });
                        }
                        output.push('MN C (' + outbet.toString() + ')')
                    }
                    if (value.gameType === 5) {
                        outbet = [];
                        if (value.betTypes === undefined) {
                            outbet.push('Tất cả')
                        } else {
                            $.each(value.betTypes, function(i, bet) {
                                if (bet === 2) {
                                    outbet.push('Xiên 2')
                                }
                                if (bet === 3) {
                                    outbet.push('Xiên 3')
                                }
                                if (bet === 4) {
                                    outbet.push('Xiên 4')
                                }
                            });
                        }
                        output.push('MN AB (' + outbet.toString() + ')')
                    }
                });
                return output.toString()
            }
        }
    }).filter('sumByKey', function() {
        return function(data, key) {
            if (typeof(data) === 'undefined' || typeof(key) === 'undefined') {
                return 0;
            }
            var sum = 0;
            for (var i = data.length - 1; i >= 0; i--) {
                sum += parseInt(data[i][key]);
            }
            return sum;
        };
    }).filter('announcements', function() {
        return function(input) {
            if (input === 'normal') {
                return 'Thông thường'
            } else if (input === 'special') {
                return 'Quan Trọng'
            } else if (input === 'system') {
                return 'Hệ thống'
            } else {
                return 'Cá nhân'
            }
        };
    }).filter('cancelType', function() {
        return function(input) {
            if (input === 0) {
                return ''
            } else {
                return 'Company'
            }
        };
    }).filter('paymentMethod', function() {
        return function(input) {
            if (input === 0) {
                return 'Tự động'
            } else {
                return 'Thủ công'
            }
        };
    }).filter('Activity', function() {
        return function(input) {
            switch (input) {
                case 0:
                    return 'Cập nhật chung';
                    break;
                case 1:
                    return 'Kết sổ';
                    break;
                case 2:
                    return 'Kết sổ lại';
                    break;
                case 3:
                    return 'Huỷ ván sau khi kết sổ';
                    break;
                case 4:
                    return 'Dealer huỷ ván chơi game';
                    break;
                case 5:
                    return 'Thay đổi kết quả của ván chơi sau khi ván chơi đã kết thúc ở AG';
                    break;
                default:
                    return 'Chưa định nghĩa'
            }
        };
    }).filter('transaction', function() {
        return function(input) {
            switch (input) {
                case 0:
                    return 'Cập nhật tín dụng';
                    break;
                case 1:
                    return 'Kết toán tài khoản bằng tay';
                    break;
                case 100:
                    return 'Cược xổ số truyền thống';
                    break;
                case 101:
                    return 'Huỷ đơn cược trả lại tiền';
                    break;
                case 102:
                    return 'Kết quả cược xổ số truyền thống';
                    break;
                case 103:
                    return 'Huỷ kết quả cược xổ số truyền thống';
                    break;
                case 120:
                    return 'Tiền cược WM CASINO';
                    break;
                case 121:
                    return 'Tiền thắng thua WM Casino';
                    break;
                case 122:
                    return 'Tiền COM chơi WM Casino';
                    break;
                case 123:
                    return 'Hoàn trả lại tiền cược WM Casino';
                    break;
                case 140:
                    return 'Cược xổ số 789';
                    break;
                case 141:
                    return 'Huỷ đơn cược xổ số 789 trả lại tiền';
                    break;
                case 142:
                    return ' Kết quả cược xổ số 789';
                    break;
                case 160:
                    return 'Cược 789 Casino';
                    break;
                case 161:
                    return 'Huỷ cược 789 Casino';
                    break;
                case 162:
                    return 'Trả thưởng kết quả cược 789 Casino';
                    break;
                case 163:
                    return 'Huỷ kết quả trả thưởng 789 Casino';
                    break;
                case 180:
                    return 'Chuyển tiền ví Bong88';
                    break;
                case 181:
                    return 'Tiền COM chơi SABA';
                    break;
                case 182:
                    return 'Lấy lại tiền COM SABA do huỷ đơn cược';
                    break;
                default:
                    return 'Chưa định nghĩa'
            }
        };
    }).filter('percentage', ['$filter', function($filter) {
        return function(input, decimals) {
            return $filter('number')(input * 100, decimals) + '%';
        };
    }]).filter('sumOfValue', function() {
        return function(data, key) {
            if (angular.isUndefined(data) || angular.isUndefined(key))
                return 0;
            let sum = 0;
            angular.forEach(data, function(value) {
                let val = value[key] === undefined ? 0 : value[key];
                sum = sum + val;
            });
            return sum;
        }
    }).filter('sumOfTwoKey', function() {
        return function(data, key, subKey) {
            if (angular.isUndefined(data) || angular.isUndefined(key) || angular.isUndefined(subKey))
                return 0;
            let sum = 0;
            angular.forEach(data, function(value) {
                let val;
                if (value[key] === undefined) {
                    sum = 0
                } else {
                    val = value[key][subKey] === undefined ? 0 : value[key][subKey];
                }
                sum = sum + val;
            });
            return sum;
        }
    }).filter('words', function() {
        function isInteger(x) {
            return x % 1 === 0;
        }
        return function(value) {
            if (value && isInteger(value))
                return docso(value * 1000);
            return value;
        };
    });
    let mangso = ['không', 'một', 'hai', 'ba', 'bốn', 'năm', 'sáu', 'bảy', 'tám', 'chín'];

    function dochangchuc(so, daydu) {
        var chuoi = "",
            chuc = Math.floor(so / 10),
            donvi = so % 10;
        if (chuc > 1) {
            chuoi = " " + mangso[chuc] + " mươi";
            if (donvi === 1) {
                chuoi += " mốt";
            }
        } else if (chuc === 1) {
            chuoi = " mười";
            if (donvi === 1) {
                chuoi += " một";
            }
        } else if (daydu && donvi > 0) {
            chuoi = " lẻ";
        }
        if (donvi === 5 && chuc >= 1) {
            chuoi += " lăm";
        } else if (donvi > 1 || (donvi === 1 && chuc === 0)) {
            chuoi += " " + mangso[donvi];
        }
        return chuoi;
    }

    function docblock(so, daydu) {
        var chuoi = "",
            tram = Math.floor(so / 100);
        so = so % 100;
        if (daydu || tram > 0) {
            chuoi = " " + mangso[tram] + " trăm";
            chuoi += dochangchuc(so, true);
        } else {
            chuoi = dochangchuc(so, false);
        }
        return chuoi;
    }

    function dochangtrieu(so, daydu) {
        var chuoi = "",
            trieu = Math.floor(so / 1000000);
        so = so % 1000000;
        if (trieu > 0) {
            chuoi = docblock(trieu, daydu) + " triệu";
            daydu = true;
        }
        var nghin = Math.floor(so / 1000);
        so = so % 1000;
        if (nghin > 0) {
            chuoi += docblock(nghin, daydu) + " nghìn";
            daydu = true;
        }
        if (so > 0) {
            chuoi += docblock(so, daydu);
        }
        return chuoi;
    }

    function docso(so) {
        if (so === 0) return ' ' + mangso[0];
        var chuoi = "",
            hauto = "";
        do {
            var ty = so % 1000000000;
            so = Math.floor(so / 1000000000);
            if (so > 0) {
                chuoi = dochangtrieu(ty, true) + hauto + chuoi;
            } else {
                chuoi = dochangtrieu(ty, false) + hauto + chuoi;
            }
            hauto = " tỷ";
        } while (so > 0);
        return chuoi;
    }
})();
(function() {
    'use strict';
    angular.module('app.core').filter('filterByPropIds', filterByPropIds);

    function filterByPropIds() {
        return function(items, parameter, ids) {
            if (items.length === 0 || !ids || ids.length === 0) {
                return items;
            }
            var filtered = [];
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                var match = false;
                for (var j = 0; j < ids.length; j++) {
                    var id = ids[j];
                    if (item[parameter].indexOf(id) > -1) {
                        match = true;
                        break;
                    }
                }
                if (match) {
                    filtered.push(item);
                }
            }
            return filtered;
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').filter('filterByIds', filterByIds);

    function filterByIds() {
        return function(items, ids) {
            if (items.length === 0 || !ids) {
                return items;
            }
            if (ids.length === 0) {
                return [];
            }
            var filtered = [];
            for (var i = 0; i < items.length; i++) {
                var item = items[i];
                var match = false;
                for (var j = 0; j < ids.length; j++) {
                    var id = ids[j];
                    if (item.id === id) {
                        match = true;
                        break;
                    }
                }
                if (match) {
                    filtered.push(item);
                }
            }
            return filtered;
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').filter('toTrusted', toTrustedFilter).filter('htmlToPlaintext', htmlToPlainTextFilter).filter('nospace', nospaceFilter).filter('humanizeDoc', humanizeDocFilter);

    function toTrustedFilter($sce) {
        return function(value) {
            return $sce.trustAsHtml(value);
        };
    }

    function htmlToPlainTextFilter() {
        return function(text) {
            return String(text).replace(/<[^>]+>/gm, '').replace(/&nbsp;/g, ' ');
        };
    }

    function nospaceFilter() {
        return function(value) {
            return (!value) ? '' : value.replace(/ /g, '');
        };
    }

    function humanizeDocFilter() {
        return function(doc) {
            if (!doc) {
                return;
            }
            if (doc.type === 'directive') {
                return doc.name.replace(/([A-Z])/g, function($1) {
                    return '-' + $1.toLowerCase();
                });
            }
            return doc.label || doc.name;
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').filter('altDate', altDate);

    function altDate() {
        return function(value) {
            var diff = Date.now() - new Date(value);
            if (diff < (60 * 60 * 1000)) {
                return moment(value).fromNow();
            } else if (diff < (60 * 60 * 24 * 1000)) {
                return moment(value).format('HH:mm');
            } else if (diff < (60 * 60 * 24 * 7 * 1000)) {
                return moment(value).format('dddd');
            } else {
                return moment(value).calendar();
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.core').provider('fuseConfig', fuseConfigProvider);

    function fuseConfigProvider() {
        var fuseConfiguration = {
            'disableCustomScrollbars': false,
            'disableMdInkRippleOnMobile': true,
            'disableCustomScrollbarsOnMobile': true
        };
        this.config = config;

        function config(configuration) {
            fuseConfiguration = angular.extend({}, fuseConfiguration, configuration);
        }
        this.$get = function() {
            var service = {
                getConfig: getConfig,
                setConfig: setConfig
            };
            return service;

            function getConfig(configName) {
                if (angular.isUndefined(fuseConfiguration[configName])) {
                    return false;
                }
                return fuseConfiguration[configName];
            }

            function setConfig(configName, configValue) {
                fuseConfiguration[configName] = configValue;
            }
        };
    }
})();
(function() {
    'use strict';
    angular.module('app.quick-panel').controller('QuickPanelController', QuickPanelController);

    function QuickPanelController(msApi) {
        var vm = this;
        vm.date = new Date();
        vm.settings = {
            notify: true,
            cloud: false,
            retro: true
        };
        msApi.request('quickPanel.activities@get', {}, function(response) {
            vm.activities = response.data;
        });
        msApi.request('quickPanel.events@get', {}, function(response) {
            vm.events = response.data;
        });
        msApi.request('quickPanel.notes@get', {}, function(response) {
            vm.notes = response.data;
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.toolbar', []).config(config);

    function config() {}
})();
(function() {
    'use strict';
    angular.module('app.toolbar').controller('ToolbarController', ToolbarController);

    function ToolbarController($rootScope, $scope, $q, $state, $timeout, $interval, $mdSidenav, $translate, $mdMedia, $mdToast, msNavigationService, network) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.signOut = signOut;

        function signOut() {
            $rootScope.$broadcast('userAccount::signOut');
        }
        $rootScope.global = {
            search: ''
        };
        vm.bodyEl = angular.element('body');
        vm.toggleSidenav = toggleSidenav;
        vm.logout = logout;
        vm.toggleHorizontalMobileMenu = toggleHorizontalMobileMenu;
        vm.toggleMsNavigationFolded = toggleMsNavigationFolded;
        vm.search = search;
        vm.searchResultClick = searchResultClick;
        vm.viewNotification = viewNotification;

        function viewNotification(item) {
            if (!item.Read) {
                network.Communication.Notification.read({
                    Id: item.Id
                }).then(function(response) {
                    item.Read = true;
                    $scope.$digest();
                });
            }
            if (item.Category === 0) {
                $state.go('app.announcements.threads', {
                    filter: 'system'
                }).then(function() {
                    $state.go('app.announcements.threads.thread', {
                        threadId: item.Id
                    });
                });
            } else if (item.Category === 1) {
                $state.go('app.announcements.threads', {
                    filter: 'normal'
                }).then(function() {
                    $state.go('app.announcements.threads.thread', {
                        threadId: item.Id
                    });
                });
            } else if (item.Category === 2) {
                $state.go('app.announcements.threads', {
                    filter: 'special'
                }).then(function() {
                    $state.go('app.announcements.threads.thread', {
                        threadId: item.Id
                    });
                });
            } else if (item.Category === 3) {
                $state.go('app.announcements.threads', {
                    filter: 'personal'
                }).then(function() {
                    $state.go('app.announcements.threads.thread', {
                        threadId: item.Id
                    });
                });
            }
        }

        function toggleSidenav(sidenavId) {
            $mdSidenav(sidenavId).toggle();
        }

        function logout() {}

        function toggleHorizontalMobileMenu() {
            vm.bodyEl.toggleClass('ms-navigation-horizontal-mobile-menu-active');
        }

        function toggleMsNavigationFolded() {
            msNavigationService.toggleFolded();
        }

        function search(query) {
            var navigation = [],
                flatNavigation = msNavigationService.getFlatNavigation(),
                deferred = $q.defer();
            for (var x = 0; x < flatNavigation.length; x++) {
                if (flatNavigation[x].uisref) {
                    navigation.push(flatNavigation[x]);
                }
            }
            if (query) {
                navigation = navigation.filter(function(item) {
                    if (angular.lowercase(item.title).search(angular.lowercase(query)) > -1) {
                        return true;
                    }
                });
            }
            $timeout(function() {
                deferred.resolve(navigation);
            }, 1000);
            return deferred.promise;
        }

        function searchResultClick(item) {
            if (item.uisref) {
                if (item.stateParams) {
                    $state.go(item.state, item.stateParams);
                } else {
                    $state.go(item.state);
                }
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.navigation', []).config(config);

    function config() {}
})();
(function() {
    'use strict';
    angular.module('app.navigation').controller('NavigationController', NavigationController);

    function NavigationController($scope) {
        var vm = this;
        vm.bodyEl = angular.element('body');
        vm.folded = false;
        vm.msScrollOptions = {
            suppressScrollX: true
        };
        vm.toggleMsNavigationFolded = toggleMsNavigationFolded;

        function toggleMsNavigationFolded() {
            vm.folded = !vm.folded;
        }
        $scope.$on('$stateChangeSuccess', function() {
            vm.bodyEl.removeClass('ms-navigation-horizontal-mobile-menu-active');
        });
    }
})();
(function() {
    'use strict';
    angular.module('fuse').controller('MainController', MainController);

    function MainController($scope, $rootScope, $timeout, msUtils) {
        $scope.$on('$viewContentAnimationEnded', function(event) {
            if (event.targetScope.$id === $scope.$id) {
                $rootScope.$broadcast('msSplashScreen::remove');
            }
        });
        $timeout(function() {
            $rootScope.dangerousBrowser = msUtils.dangerousBrowser();
        }, 1000)
    }
})();
(function() {
    'use strict';
    angular.module('app.core').run(runBlock);

    function runBlock(msUtils, fuseGenerator, fuseConfig) {
        fuseGenerator.generate();
        if (fuseConfig.getConfig('disableMdInkRippleOnMobile') && msUtils.isMobile()) {
            var bodyEl = angular.element('body');
            bodyEl.attr('md-no-ink', true);
        }
        if (msUtils.isMobile()) {
            angular.element('html').addClass('is-mobile');
        }
        var browserInfo = msUtils.detectBrowser();
        if (browserInfo) {
            var htmlClass = browserInfo.browser + ' ' + browserInfo.version + ' ' + browserInfo.os;
            angular.element('html').addClass(htmlClass);
        }
    }
})();
(function() {
    'use strict';
    angular.module('app.core').config(config);

    function config($ariaProvider, $logProvider, msScrollConfigProvider, fuseConfigProvider) {
        $logProvider.debugEnabled(true);
        $ariaProvider.config({
            tabindex: false
        });
        fuseConfigProvider.config({
            'disableCustomScrollbars': false,
            'disableCustomScrollbarsOnMobile': true,
            'disableMdInkRippleOnMobile': true
        });
        msScrollConfigProvider.config({
            wheelPropagation: true
        });
    }
})();
(function() {
    'use strict';
    angular.module('fuse').run(runBlock);

    function runBlock($rootScope, $timeout, $state, $location, $window, msUtils) {
        var stateChangeStartEvent = $rootScope.$on('$stateChangeStart', function() {
            $rootScope.loadingProgress = true;
            Lotus.User.isAuthenticated().then(function(authenticated) {
                $rootScope.loggedIn = authenticated;
            })
        });
        var stateChangeSuccessEvent = $rootScope.$on('$stateChangeSuccess', function() {
            $timeout(function() {
                let authPage = msUtils.exists($location.path(), ['/auth', '/auth/set-password']);
                $rootScope.loadingProgress = false;
                if (!$rootScope.loggedIn && !authPage) {
                    $window.location.href = '/auth';
                }
            }, 500)
        });
        $rootScope.state = $state;
        $rootScope.$on('$destroy', function() {
            stateChangeStartEvent();
            stateChangeSuccessEvent();
        });
        let urls, UserPoolId, UserPoolClientId;
        if ($location.host() === 'ag.nothing88.net' || $location.host() === 'localhost' || $location.host() === 'beh.mwaygmzgay.net') {
            urls = {
                Lottery: "https://lotto.rst9.net",
                Identity: "https://id.rst9.net",
                Common: "https://common.rst9.net",
                Chart: "https://analytics.rst9.net/chart",
                WMCasino: "https://wm.rst9.net",
                Reporting: "https://reporting.rst9.net",
                Logging: "https://logging.rst9.net",
                Communication: "https://comm.rst9.net",
                Lottery789: "https://lotto789.rst9.net",
                TelegramChatApp: "https://common.rst9.net/telegram-agent",
                Saba: "https://sb.rst9.net",
                SenCasino: {
                    Base: "https://sen.rst9.net",
                    Games: {
                        Sedie: "https://sen-sedie.rst9.net",
                        Politics: "https://sen-politics.rst9.net",
                    },
                },
            };
            UserPoolId = 'ap-southeast-1_7qZOytT0i';
            UserPoolClientId = '67s4egt2pqcotjdt0hg3h95fll';
        } else {
            urls = _CONFIG_;
            UserPoolId = 'ap-southeast-1_rz3gbsuS3';
            UserPoolClientId = '29js9qodnnghp3n09589nbu7bb';
        }
        Lotus.configure({
            Urls: urls,
            UserPoolId: UserPoolId,
            UserPoolClientId: UserPoolClientId,
            AdvancedSecurityDataCollectionFlag: true,
        });
    }
})();
(function() {
    'use strict';
    angular.module('fuse').config(routeConfig);

    function routeConfig($stateProvider, $urlRouterProvider, $locationProvider, msApiProvider) {
        $locationProvider.html5Mode(true);
        $urlRouterProvider.otherwise('/auth');
        var $cookies;
        angular.injector(['ngCookies']).invoke(['$cookies', function(_$cookies) {
            $cookies = _$cookies;
        }]);
        var layoutStyle = $cookies.get('layoutStyle') || 'verticalNavigation';
        var layouts = {
            verticalNavigation: {
                main: 'app/core/layouts/vertical-navigation.html',
                toolbar: 'app/toolbar/layouts/vertical-navigation/toolbar.html',
                navigation: 'app/navigation/layouts/vertical-navigation/navigation.html'
            },
            verticalNavigationFullwidthToolbar: {
                main: 'app/core/layouts/vertical-navigation-fullwidth-toolbar.html',
                toolbar: 'app/toolbar/layouts/vertical-navigation-fullwidth-toolbar/toolbar.html',
                navigation: 'app/navigation/layouts/vertical-navigation/navigation.html'
            },
            verticalNavigationFullwidthToolbar2: {
                main: 'app/core/layouts/vertical-navigation-fullwidth-toolbar-2.html',
                toolbar: 'app/toolbar/layouts/vertical-navigation-fullwidth-toolbar-2/toolbar.html',
                navigation: 'app/navigation/layouts/vertical-navigation-fullwidth-toolbar-2/navigation.html'
            },
            horizontalNavigation: {
                main: 'app/core/layouts/horizontal-navigation.html',
                toolbar: 'app/toolbar/layouts/horizontal-navigation/toolbar.html',
                navigation: 'app/navigation/layouts/horizontal-navigation/navigation.html'
            },
            contentOnly: {
                main: 'app/core/layouts/content-only.html',
                toolbar: '',
                navigation: ''
            },
            contentWithToolbar: {
                main: 'app/core/layouts/content-with-toolbar.html',
                toolbar: 'app/toolbar/layouts/content-with-toolbar/toolbar.html',
                navigation: ''
            }
        };
        $stateProvider.state('app', {
            abstract: true,
            views: {
                'main@': {
                    templateUrl: layouts[layoutStyle].main,
                    controller: 'MainController as vm'
                },
                'toolbar@app': {
                    templateUrl: layouts[layoutStyle].toolbar,
                    controller: 'ToolbarController as vm'
                },
                'navigation@app': {
                    templateUrl: layouts[layoutStyle].navigation,
                    controller: 'NavigationController as vm'
                },
            },
        });
    }
})();
(function() {
    'use strict';
    angular.module('fuse').controller('IndexController', IndexController);

    function IndexController($rootScope, $scope, $state, $timeout, $interval, $location, $window, $mdDialog, $filter, $mdMedia, fuseTheming, network, msNavigationService, AuthService, msUtils, message) {
        var vm = this;
        $scope.$mdMedia = $mdMedia;
        vm.lastActivity = 0;
        vm.countDown = 0;
        vm.themes = fuseTheming.themes;
        vm.userInfo = userInfo;
        vm.ConnectServer = ConnectServer;
        vm.reInitNavigation = reInitNavigation;
        vm.getNotificationsOnSection = getNotificationsOnSection;
        vm.serverTimer = serverTimer;
        vm.mustChangePassword = mustChangePassword;
        vm.setNotify = setNotify;
        vm.Authenticated = Authenticated;
        vm.getOnline = getOnline;
        vm.Authenticated();
        vm.showAds = showAds;
        $rootScope.countUnRead = countUnRead;

        function serverTimer() {
            vm.countDown++;
            vm.lastActivity++;
            if (vm.lastActivity === 20) {
                $mdDialog.show({
                    clickOutsideToClose: false,
                    escapeToClose: false,
                    controllerAs: 'ctrl',
                    templateUrl: 'app/toolbar/dialog/activities_popup.html',
                    controller: function($scope, $mdDialog) {
                        $scope.cancel = function() {
                            $mdDialog.hide();
                        };
                    }
                })
            }
            if (vm.lastActivity > 630) {
                $rootScope.$broadcast('userAccount::signOut')
            }
            if (vm.countDown > 15) {
                vm.countDown = 0;
                localStorage.setItem('last', moment().unix())
            }
            $timeout(function() {}, 1000)
        }

        function mustChangePassword() {
            if (!msUtils.exists($location.path(), ['/my/otp', '/my/password', '/auth'])) {
                console.log('mustChangePassword')
            }
            $timeout(function() {
                if ($rootScope.User.MustChangePassword) {
                    vm.mustChangePassword();
                }
            }, 1000)
        }

        function setNotify() {
            if (!msUtils.exists($location.path(), ['/my/otp', '/my/password', '/auth'])) {
                $rootScope.passwordExpired = $rootScope.User.MustChangePasswordNotify
            }
        }
        $window.addEventListener('click', function(e) {
            vm.lastActivity = 0;
        });

        function Authenticated() {
            Lotus.User.isAuthenticated().then(function(authenticated) {
                if (authenticated) {
                    vm.userInfo();
                }
            })
        }

        function getOnline() {
            Lotus.User.UserOnline.counter().then(function(response) {
                $rootScope.UserOnline = response.UserOnline;
                $rootScope.$broadcast('UserOnline::update', response.UserOnline);
            });
        }

        function userInfo() {
            network.User.me({
                bypassCache: false
            }).then(function(resp) {
                //heap.identify(resp.Username);
                $rootScope.User = resp;
                $rootScope.$digest();
                vm.ConnectServer();
                $timeout(function() {
                    vm.reInitNavigation();
                    vm.getNotificationsOnSection();
                    if ($rootScope.User.MustChangePassword) {
                        vm.mustChangePassword();
                    }
                    if ($rootScope.User.MustChangePasswordNotify !== undefined) {
                        vm.setNotify();
                    }
                    if ($rootScope.User.Level === 1) {
                        vm.getOnline();
                        vm.promise = $interval(function() {
                            vm.getOnline()
                        }, 180000);
                    }
                }, 500)
            });
            $timeout(function() {
                $rootScope.$broadcast('userAccount::update');
            })
        }
        $scope.$on('userAccount::update', function() {
            network.User.me({
                bypassCache: true
            }).then(function(resp) {
                $rootScope.User = resp;
                $rootScope.$digest();
                $rootScope.$broadcast('userAccount::updateComplete');
            })
        });
        $scope.$on('userAccount::updateComplete', function() {
            if ($rootScope.User.MfaRequired && $rootScope.User.MfaType !== 1) {
                $state.go('app.auth.enable-otp')
            } else if ($location.path() === '/auth/set-password' || $location.path() === '/auth' || $location.path() === '/auth/enable-otp') {
                $window.location.href = '/dashboard';
            }
            if ($rootScope.User.Suspended) {
                $timeout(function() {
                    $rootScope.crucialMessage = 'Tài khoản của quý khách đang không được phép đặt cược.'
                }, 1000)
            }
        });
        $scope.$on('userAccount::signOut', function() {
            Lotus.User.Current.signOut();
            $rootScope.User = {};
            $window.location.href = '/auth';
        });

        function getNotificationsOnSection() {
            $rootScope.bellNotifications = [];
            $rootScope.infoBars = [];
            network.Communication.Notification.getNotificationsOnSection().then(function(response) {
                angular.forEach(response, function(no) {
                    if (msUtils.exists(2, no.DisplaySections)) {
                        $rootScope.bellNotifications.push(no);
                    }
                    if (msUtils.exists(1, no.DisplaySections)) {
                        $rootScope.infoBars.push(no);
                    }
                });
                $rootScope.countUnRead();
                vm.popupMessages = response.filter(function(res) {
                    return msUtils.exists(0, res.DisplaySections)
                });
                if (vm.popupMessages.length) {
                    message.show($filter('toTrusted')(vm.popupMessages[0].Message));
                }
            })
        }

        function countUnRead() {
            $rootScope.bellUnRead = 0;
            angular.forEach($rootScope.bellNotifications, function(no) {
                if (!no.Read) {
                    $rootScope.bellUnRead++
                }
            });
            if ($rootScope.bellUnRead !== 0) {}
        }

        function reInitNavigation() {
            msNavigationService.saveItem('fuse.statistical', {
                title: 'Thống kê',
                icon: 'icon-chart-line',
                weight: 2
            });
            msNavigationService.saveItem('fuse.statistical.general', {
                title: 'Tổng hợp',
                state: 'app.statistical.general',
                weight: 1,
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.statistical.win-lose', {
                title: 'Sản phẩm',
                state: 'app.statistical.production',
                weight: 2,
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.statistical.lottery', {
                title: 'Tiền cược/Thắng thua XSTT',
                state: 'app.statistical.lottery',
                weight: 3,
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.statistical.agency', {
                title: 'Đại lý XSTT',
                state: 'app.statistical.agency',
                weight: 4,
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.statistical.member', {
                title: 'Hội viên',
                state: 'app.statistical.member',
                weight: 5,
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.statistical.agent_production', {
                title: 'Sản phẩm',
                state: 'app.statistical.agent_production',
                weight: 1,
                hidden: function() {
                    return AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.statistical.agent_lottery', {
                title: 'Tiền cược/Thắng thua XSTT',
                state: 'app.statistical.agent_lottery',
                weight: 2,
                hidden: function() {
                    return AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.notification', {
                title: 'Quản lý thông báo',
                icon: 'icon-bell',
                weight: 2,
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.notification.normal', {
                title: 'Thông thường',
                state: 'app.notification.normal',
            });
            msNavigationService.saveItem('fuse.notification.special', {
                title: 'Quan trọng',
                state: 'app.notification.special'
            });
            msNavigationService.saveItem('fuse.notification.system', {
                title: 'Hệ thống',
                state: 'app.notification.system'
            });
            msNavigationService.saveItem('fuse.notification.personal', {
                title: 'Thông báo cá nhân',
                state: 'app.notification.personal'
            });
            msNavigationService.saveItem('fuse.account', {
                title: 'Tài khoản',
                icon: 'icon-account-multiple',
                weight: 3,
                hidden: function() {
                    return !AuthService.hasPermission(4)
                }
            });
            msNavigationService.saveItem('fuse.account.agency', {
                title: 'Danh sách tài khoản',
                state: 'app.account.agency'
            });
            msNavigationService.saveItem('fuse.account.sub-account', {
                title: 'Tài khoản phụ',
                state: 'app.account.sub-account',
                hidden: function() {
                    return AuthService.isSecondary()
                }
            });
            msNavigationService.saveItem('fuse.account.tag-account', {
                title: 'Nhóm tài khoản',
                state: 'app.account.tag-account',
                hidden: function() {
                    return $rootScope.User.Level === 5
                }
            });
            msNavigationService.saveItem('fuse.account.parameter', {
                title: 'Thông tin tài khoản',
                state: 'app.account.parameter'
            });
            msNavigationService.saveItem('fuse.account.template', {
                title: 'Mẫu cấu hình',
                state: 'app.account.template',
                hidden: function() {
                    return !AuthService.isCompany() || AuthService.isSecondary()
                }
            });
            msNavigationService.saveItem('fuse.my', {
                title: 'Bảo mật',
                icon: 'icon-security',
                weight: 4,
                hidden: function() {
                    return true
                }
            });
            msNavigationService.saveItem('fuse.my.password', {
                title: 'Đổi mật khẩu',
                state: 'app.my.password'
            });
            msNavigationService.saveItem('fuse.my.otp', {
                title: 'Cài đặt OTP',
                state: 'app.my.otp'
            });
            msNavigationService.saveItem('fuse.history', {
                title: 'Nhật ký',
                icon: 'icon-history',
                hidden: function() {
                    return !AuthService.isCompany()
                },
                weight: 4
            });
            msNavigationService.saveItem('fuse.history.account', {
                title: 'Tài khoản',
                state: 'app.history.account'
            });
            msNavigationService.saveItem('fuse.history.price', {
                title: 'Thay đổi giá',
                state: 'app.history.price'
            });
            msNavigationService.saveItem('fuse.history.loLive', {
                title: 'Lô Live',
            });
            msNavigationService.saveItem('fuse.history.loLive.traditional', {
                title: 'Xổ số truyền thống',
                state: 'app.history.loLive.traditional'
            });
            msNavigationService.saveItem('fuse.history.balance', {
                title: 'Biến động số dư',
                state: 'app.history.balance'
            });
            msNavigationService.saveItem('fuse.history.casino', {
                title: 'Hoạt động Casino',
            });
            msNavigationService.saveItem('fuse.history.casino.activity', {
                title: 'Game Activity',
                state: 'app.history.casino.activity',
            });
            msNavigationService.saveItem('fuse.history.casino.activity-user', {
                title: 'Game Activity By User',
                state: 'app.history.casino.activity-user',
            });
            msNavigationService.saveItem('fuse.accounting', {
                title: 'Báo biểu',
                icon: 'icon-book-open',
                weight: 5,
                hidden: function() {
                    return !AuthService.hasPermission(1)
                }
            });
            msNavigationService.saveItem('fuse.accounting.winLose', {
                title: 'Thắng thua tổng hợp',
                state: 'app.accounting.combination.winLose'
            });
            msNavigationService.saveItem('fuse.accounting.group', {
                title: 'Báo biểu nhóm',
                state: 'app.accounting.combination.group'
            });
            msNavigationService.saveItem('fuse.accounting.traditional', {
                title: 'Xổ số truyền thống',
                weight: 3
            });
            msNavigationService.saveItem('fuse.accounting.traditional.win-lose', {
                title: 'Thắng thua chi tiết',
                state: 'app.traditional.statement.win-lose',
                hidden: function() {
                    return !AuthService.isCompany()
                },
            });
            msNavigationService.saveItem('fuse.accounting.traditional.outstanding', {
                title: 'Tiền chưa xử lý',
                state: 'app.traditional.statement.outstanding'
            });
            msNavigationService.saveItem('fuse.accounting.traditional.member', {
                title: 'Hội viên thắng thua',
                state: 'app.traditional.statement.member'
            });
            msNavigationService.saveItem('fuse.accounting.traditional.canceled', {
                title: 'Đơn hàng đã huỷ',
                state: 'app.traditional.statement.canceled'
            });
            msNavigationService.saveItem('fuse.accounting.casino789', {
                title: '789 Casino',
                weight: 5
            });
            msNavigationService.saveItem('fuse.accounting.casino789.win-lose', {
                title: 'Thắng thua chi tiết',
                state: 'app.casino789.statement.win-lose',
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.accounting.casino789.member', {
                title: 'Hội viên thắng thua',
                state: 'app.casino789.statement.member'
            });
            msNavigationService.saveItem('fuse.accounting.saba', {
                title: 'Bong88',
                weight: 6
            });
            msNavigationService.saveItem('fuse.accounting.saba.win-lose', {
                title: 'Thắng thua chi tiết',
                state: 'app.saba.statement.win-lose',
                hidden: function() {
                    return !AuthService.isCompany()
                }
            });
            msNavigationService.saveItem('fuse.accounting.saba.member', {
                title: 'Hội viên thắng thua',
                state: 'app.saba.statement.member'
            });
            msNavigationService.saveItem('fuse.accounting.saba.outstanding', {
                title: 'Tiền chưa xử lý',
                state: 'app.saba.statement.outstanding'
            });
            msNavigationService.saveItem('fuse.accounting.saba.risk-control', {
                title: 'Thống kê trận đấu',
                weight: 4
            });
            msNavigationService.saveItem('fuse.accounting.saba.risk-control.handicap-over-under', {
                title: 'Cược chấp / Tài Xỉu',
                state: 'app.saba.statement.risk-control.handicap-over-under'
            });
            msNavigationService.saveItem('fuse.accounting.saba.risk-control.1x2', {
                title: '1X2',
                state: 'app.saba.statement.risk-control.1x2'
            });
            msNavigationService.saveItem('traditional', {
                title: 'Xổ số truyền thống',
                icon: 'icon-legendary-lottery',
                weight: 2
            });
            msNavigationService.saveItem('traditional.term', {
                title: 'Quản lý kỳ',
                icon: 'icon-timelapse',
                state: 'app.traditional_term',
                weight: 1,
                hidden: function() {
                    return !AuthService.isCompany() || !AuthService.hasPermission(64)
                }
            });
            msNavigationService.saveItem('traditional.price_table', {
                title: 'Bảng thao tác giá',
                icon: 'icon-tag-multiple',
                state: 'app.traditional_price_table',
                hidden: function() {
                    return !AuthService.hasPermission(16)
                },
                weight: 2
            });
            msNavigationService.saveItem('traditional.live', {
                title: 'Thao tác Lô Live',
                icon: 'icon-timer-sand',
                hidden: function() {
                    return !AuthService.isCompany() || !AuthService.hasPermission(256)
                },
                weight: 3
            });
            msNavigationService.saveItem('traditional.live.northern', {
                title: 'Miền Bắc',
                state: 'app.traditional_live.northern',
                weight: 1
            });
            msNavigationService.saveItem('traditional.live.southern', {
                title: 'Miền Nam',
                state: 'app.traditional_live.southern',
                weight: 2
            });
            msNavigationService.saveItem('traditional.cancellation', {
                title: 'Hủy cược',
                icon: 'icon-cancel',
                hidden: function() {
                    return !AuthService.isCompany()
                },
                weight: 5
            });
            msNavigationService.saveItem('traditional.cancellation.tickets', {
                title: 'Huỷ theo phiếu',
                icon: 'icon-ticket',
                state: 'app.traditional_cancellation.tickets'
            });
            msNavigationService.saveItem('traditional.cancellation.numbers', {
                title: 'Huỷ theo số',
                icon: 'icon-numeric',
                state: 'app.traditional_cancellation.numbers',
            });
            msNavigationService.saveItem('traditional.settings', {
                title: 'Cài đặt',
                icon: 'icon-cog',
                hidden: function() {
                    return !AuthService.isCompany() || !AuthService.hasPermission(64)
                },
                weight: 5
            });
            msNavigationService.saveItem('traditional.settings.parameter', {
                title: 'Tham số và rủi ro',
                state: 'app.traditional_settings_parameter'
            });
            msNavigationService.saveItem('traditional.settings.loLive', {
                title: 'Tính giá lô Live',
                state: 'app.traditional_settings_livePrice'
            });
            msNavigationService.saveItem('traditional.settings.public-odds', {
                title: 'Public Odds',
                state: 'app.traditional_settings_public-odds'
            });
            msNavigationService.saveItem('traditional.risk-management', {
                title: 'Quản lý rủi ro',
                icon: 'icon-flag-checkered',
                hidden: function() {
                    return !AuthService.isCompany()
                },
                weight: 6
            });
            msNavigationService.saveItem('traditional.risk-management.members', {
                title: 'Bảng giá hội viên',
                state: 'app.traditional_risk_management.members',
                weight: 1
            });
            msNavigationService.saveItem('traditional.risk-management.agency', {
                title: 'Bảng giá đại lý',
                state: 'app.traditional_risk_management.agency',
                weight: 2
            });
            msNavigationService.saveItem('traditional.risk-management.duplicate-ip', {
                title: 'Trùng lặp IP',
                state: 'app.traditional_risk_management.duplicate_ip',
                weight: 3
            });
            msNavigationService.saveItem('traditional.risk-management.lookup-ip', {
                title: 'IP Lookup',
                state: 'app.traditional_risk_management.lookup_ip',
                weight: 4
            });
            msNavigationService.saveItem('traditional.risk-management.max-betting', {
                title: 'Giới hạn cược',
                weight: 5
            });
            msNavigationService.saveItem('traditional.risk-management.max-betting.parameter', {
                title: 'Cấu hình',
                state: 'app.traditional_risk_management.max_betting.parameter',
                weight: 1
            });
            msNavigationService.saveItem('traditional.risk-management.max-betting.member', {
                title: 'Tài khoản',
                state: 'app.traditional_risk_management.max_betting.member',
                weight: 2
            });
            msNavigationService.saveItem('traditional.data-lake', {
                title: 'Dữ liệu',
                icon: 'icon-note-text',
                hidden: function() {
                    return !AuthService.isCompany()
                },
                weight: 7
            });
            msNavigationService.saveItem('traditional.data-lake.members', {
                title: 'Tổng cược Hội Viên',
                state: 'app.traditional_data_lake.members',
                weight: 1
            });
            msNavigationService.saveItem('traditional.data-lake.tickets', {
                title: 'Tổng cược theo phiếu',
                state: 'app.traditional_data_lake.tickets',
                weight: 2
            });
            msNavigationService.saveItem('traditional.data-lake.history', {
                title: 'Thống kê lịch sử cược',
                state: 'app.traditional_data_lake.history',
                weight: 3
            });
            msNavigationService.saveItem('traditional.risk-management.temporary-statement', {
                title: 'Sổ tạm',
                state: 'app.traditional_risk_management.temporary.statement',
                weight: 6
            });
            msNavigationService.saveItem('casino789', {
                title: '789 Casino',
                weight: 4,
                icon: 'icon-sedie-789',
                hidden: function() {
                    return !AuthService.isCompany();
                }
            });
            msNavigationService.saveItem('casino789.dealer', {
                title: 'Quản lý dealer',
                icon: 'icon-account-multiple',
                state: 'app.casino789.dealer',
                weight: 1
            });
            msNavigationService.saveItem('casino789.area', {
                title: 'Quản lý bàn',
                icon: 'icon-gamepad-variant',
                state: 'app.casino789.area',
                weight: 2
            });
            msNavigationService.saveItem('casino789.parameter', {
                title: 'Tham số',
                icon: 'icon-cog',
                state: 'app.casino789.parameter',
                weight: 3
            });
            msNavigationService.saveItem('wm', {
                title: 'WM Casino',
                weight: 6,
                icon: 'icon-wm-casino',
                hidden: function() {
                    return !AuthService.isCompany();
                }
            });
            msNavigationService.saveItem('wm.maintenance', {
                title: 'Bảo trì',
                state: 'app.wm.maintenance',
                weight: 1
            });
            msNavigationService.saveItem('saba', {
                title: 'BONG88',
                weight: 6,
                icon: 'icon-saba',
                hidden: function() {
                    return !AuthService.isCompany();
                }
            });
            msNavigationService.saveItem('saba.maintenance', {
                title: 'Bảo trì',
                state: 'app.saba.maintenance',
                weight: 1
            });
            network.UserTag.getTagged().then(function(response) {
                if (response.length === 0) {
                    msNavigationService.deleteItem('fuse.accounting.group');
                }
            })
        }
        let countConnected = 0;

        function ConnectServer() {
            Lotus.Realtime.connect().then(function() {
                Lotus.Realtime.Connection.on("connecting", function() {
                    console.log("connecting");
                });
                Lotus.Realtime.Connection.on("disconnected", function() {
                    console.log("disconnected");
                });
                Lotus.Realtime.Connection.on("closed", function() {
                    console.log("closed");
                });
                Lotus.Realtime.Connection.on("closing", function() {
                    console.log("closing");
                });
                Lotus.Realtime.Connection.on("connected", function() {
                    console.log("Connected");
                    countConnected++;
                    $rootScope.$broadcast('Realtime:connected');
                    $rootScope.RealTime = 'connected';
                    if (countConnected === 1) {
                        Lotus.User.Realtime.subcribe().then(function() {
                            Lotus.User.Realtime.on("self:event:0", function(data) {
                                Lotus.User.Current.getSession().then(function(session) {
                                    let authTime = session.getIdToken().getAuthTime();
                                    if (authTime !== data.AuthTime) {
                                        message.info(data.Message);
                                        Lotus.User.Current.signOut();
                                        $rootScope.User = {};
                                        $state.go('app.auth');
                                    }
                                })
                            })
                            Lotus.User.Realtime.on("ancestor:event:0", function(data) {
                                message.info('Quý khách vui lòng đăng nhập lại để tiếp tục');
                                $timeout(function() {
                                    $rootScope.$broadcast('userAccount::signOut');
                                }, 2000)
                            })
                            console.log('Realtime')
                            Lotus.User.Realtime.on("general:event:3001", function(data) {
                                message.popup(data.Message);
                            })
                        })
                    }
                })
            })
        }
        vm.showAds();

        function showAds() {
            let currentPosition = $location.path().split('/')[1];
            let allowedPosition = ['dashboard', 'accounting', 'traditional'];
            vm.localAds = localStorage.getItem('Ads') === null ? 0 : parseInt(localStorage.getItem('Ads'));
            if (currentPosition === 'my') {
                localStorage.setItem('Ads', vm.localAds + 1);
            }
            if (msUtils.exists(currentPosition, allowedPosition) && vm.localAds < 3) {
                $timeout(function() {
                    $rootScope.showAds = true;
                }, 1000)
            } else {
                $rootScope.showAds = false;
            }
        }
    }
})();
(function() {
    'use strict';
    angular.module('fuse');
})();
(function() {
    'use strict';
    angular.module('fuse').config(config).config(['AnalyticsProvider', function(AnalyticsProvider) {
        AnalyticsProvider.setAccount('UA-167864324-2');
        AnalyticsProvider.trackPages(true);
        AnalyticsProvider.trackUrlParams(true);
        AnalyticsProvider.setPageEvent('$stateChangeSuccess');
    }]).run(['Analytics', function(Analytics) {}]);

    function config($translateProvider, $mdDateLocaleProvider) {
        $translateProvider.useLoader('$translatePartialLoader', {
            urlTemplate: '{part}/i18n/{lang}.json'
        });
        $translateProvider.preferredLanguage('en');
        $translateProvider.useSanitizeValueStrategy('sanitize');
        $mdDateLocaleProvider.firstDayOfWeek = 1;
        $mdDateLocaleProvider.formatDate = function(date) {
            return moment(date).format('DD-MM-YYYY');
        };
    }
})();
(function() {
    'use strict';
    angular.module('fuse').factory('api', apiService);

    function apiService($resource) {
        var api = {};
        api.baseUrl = 'app/data/';
        return api;
    }
})();
(function() {
    'use strict';
    angular.module('app.traditional', ['app.traditional.statement', 'app.traditional.price_table', 'app.traditional.live', 'app.traditional.cancellation', 'app.traditional.term', 'app.traditional.settings', 'app.traditional.risk_management', 'app.traditional.data_lake', ]).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.traditional', {
            abstract: true,
            url: '/traditional'
        })
    }
})();
(function() {
    'use strict';
    angular.module('app.must-change-password', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.must-change-password', {
            url: '/must-change-password',
            views: {
                'main@': {
                    templateUrl: 'app/core/layouts/content-only.html',
                    controller: 'MainController as vm'
                },
                'content@app.must-change-password': {
                    templateUrl: 'app/main/must-change-password/must-change-password.html',
                    controller: 'mustChangeCtrl as vm'
                }
            },
            bodyClass: 'must-change-password'
        });
    }
})();
(function() {
    'use strict';
    angular.module('app.auth', []).config(config);

    function config($stateProvider) {
        $stateProvider.state('app.auth', {
            url: '/auth',
            views: {
                'main@': {
                    templateUrl: 'app/core/layouts/content-only.html',
                    controller: 'MainController as vm'
                },
                'content@app.auth': {
                    templateUrl: 'app/main/auth/auth.html',
                    controller: 'authController as vm'
                }
            },
            bodyClass: 'login'
        }).state('app.auth.set-password', {
            url: '/set-password',
            views: {
                'content@app.auth': {
                    templateUrl: 'app/main/my/password/password.template.html',
                    controller: 'passwordController as vm'
                }
            },
            bodyClass: 'set-password'
        }).state('app.auth.enable-otp', {
            url: '/enable-otp',
            views: {
                'content@app.auth': {
                    templateUrl: 'app/main/my/otp/otp.template.html',
                    controller: 'otpController as vm'
                }
            },
            bodyClass: 'enable-otp'
        });
    }
})();
angular.module('fuse').run(['$templateCache', function($templateCache) {
    $templateCache.put('app/quick-panel/quick-panel.html', '<md-content><md-tabs md-no-pagination md-swipe-content md-stretch-tabs="always"><md-tab><md-tab-label><span \ntranslate="QUICKPANEL.TODAY">TODAY</span></md-tab-label><md-tab-body><md-content class="today-tab scrollable" ms-scroll \nng-include="\'app/quick-panel/tabs/today/today-tab.html\'"></md-content></md-tab-body></md-tab><md-tab><md-tab-label><span\n translate="QUICKPANEL.CHAT">CHAT</span></md-tab-label><md-tab-body><md-content class="chat-tab scrollable" ms-scroll \nng-include="\'app/quick-panel/tabs/chat/chat-tab.html\'" ng-controller="ChatTabController as vm"></md-content>\n</md-tab-body></md-tab><md-tab><md-tab-label><span translate="QUICKPANEL.ACTIVITY">ACTIVITY</span></md-tab-label>\n<md-tab-body><md-content class="activity-tab scrollable" ms-scroll \nng-include="\'app/quick-panel/tabs/activity/activity-tab.html\'"></md-content></md-tab-body></md-tab></md-tabs>\n</md-content>');
    $templateCache.put('app/core/layouts/content-only.html', '<div id="layout-content-only" class="template-layout" layout="column" flex><md-content id="content" \nclass="animate-slide-up md-hue-2" ui-view="content" flex></md-content></div>');
    $templateCache.put('app/core/layouts/content-with-toolbar.html', '<div id="layout-content-with-toolbar" class="template-layout" layout="column" flex><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><md-content id="content" \nclass="animate-slide-up md-hue-2" ui-view="content" flex></md-content><md-sidenav id="quick-panel" \nclass="md-sidenav-right md-whiteframe-4dp" md-component-id="quick-panel" ms-scroll ui-view="quickPanel"></md-sidenav>\n</div>');
    $templateCache.put('app/core/layouts/horizontal-navigation.html', '<div id="layout-horizontal-navigation" class="template-layout" layout="column" flex><div \nid="toolbar-navigation-container" class="md-whiteframe-1dp" layout="column" layout-align="space-between start">\n<md-toolbar id="toolbar" class="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><div \nid="horizontal-navigation" ui-view="navigation" layout="row" layout-align="start end" flex></div></div><div \nid="content-container" flex layout="column"><md-content id="content" class="animate-slide-up md-hue-2" ms-scroll \nui-view="content" flex></md-content></div><md-sidenav id="quick-panel" class="md-sidenav-right md-whiteframe-4dp" \nmd-component-id="quick-panel" ms-scroll ui-view="quickPanel"></md-sidenav></div>');
    $templateCache.put('app/core/layouts/vertical-navigation-fullwidth-toolbar-2.html', '<div id="layout-vertical-navigation-fullwidth-toolbar-2" class="template-layout" layout="column" flex><md-toolbar \nid="toolbar" class="md-menu-toolbar md-whiteframe-1dp md-accent" ui-view="toolbar"></md-toolbar><div \nid="main-container" layout="row" flex><md-sidenav id="vertical-navigation" class="md-primary-bg" \nmd-is-locked-open="$mdMedia(\'gt-sm\')" md-component-id="navigation" ms-scroll ui-view="navigation"></md-sidenav><div \nid="content-container" flex layout="column"><md-content id="content" class="animate-slide-up md-hue-2" ms-scroll \nui-view="content" flex></md-content></div><md-sidenav id="quick-panel" class="md-sidenav-right md-whiteframe-4dp" \nmd-component-id="quick-panel" ms-scroll ui-view="quickPanel"></md-sidenav></div></div>');
    $templateCache.put('app/core/layouts/vertical-navigation-fullwidth-toolbar.html', '<div id="layout-vertical-navigation-fullwidth-toolbar" class="template-layout" layout="column" flex><md-toolbar \nid="toolbar" class="md-menu-toolbar md-whiteframe-1dp md-accent" ui-view="toolbar"></md-toolbar><div \nid="main-container" layout="row" flex><md-sidenav id="vertical-navigation" class="md-primary-bg" \nmd-is-locked-open="$mdMedia(\'gt-sm\')" md-component-id="navigation" ms-scroll ui-view="navigation"></md-sidenav><div \nid="content-container" flex layout="column"><md-content id="content" class="animate-slide-up md-hue-2" ms-scroll \nui-view="content" flex></md-content></div><md-sidenav id="quick-panel" class="md-sidenav-right md-whiteframe-4dp" \nmd-component-id="quick-panel" ms-scroll ui-view="quickPanel"></md-sidenav></div></div>');
    $templateCache.put('app/core/layouts/vertical-navigation.html', '<div id="layout-vertical-navigation" class="template-layout" layout="row" flex><md-sidenav id="vertical-navigation" \nclass="md-primary-bg" md-is-locked-open="$mdMedia(\'gt-sm\')" md-component-id="navigation" ms-scroll ui-view="navigation">\n</md-sidenav><div id="content-container" flex layout="column"><md-toolbar id="toolbar" \nclass="md-menu-toolbar md-whiteframe-1dp" ui-view="toolbar"></md-toolbar><md-content id="content" class="md-hue-2" \nms-scroll ui-view="content" flex></md-content></div><md-sidenav id="quick-panel" \nclass="md-sidenav-right md-whiteframe-4dp" md-component-id="quick-panel" ms-scroll ui-view="quickPanel"></md-sidenav>\n</div>');
    $templateCache.put('app/core/theme-options/theme-options.html', '<div class="ms-theme-options-button md-primary-bg" ng-click="toggleOptionsSidenav()"><md-icon md-font-icon="icon-cog" \nclass="white-text"></md-icon></div><md-sidenav md-component-id="fuse-theme-options" class="md-sidenav-right"><div \nclass="ms-theme-options-list" layout="column"><div class="theme-option layout-options"><div class="option-title">\nLayout Style:</div><md-radio-group layout="row" layout-align="start start" layout-wrap ng-model="vm.layoutStyle" \nng-change="vm.updateLayoutStyle()"><md-radio-button ng-repeat="layoutStyle in vm.layoutStyles" \nng-value="layoutStyle.value"><div layout="column" layout-align="center center"><img ng-src="{{layoutStyle.figure}}"> \n<span class="text-center font-size-12 mt-8">{{layoutStyle.label}}</span></div></md-radio-button></md-radio-group></div>\n<md-divider></md-divider><div class="theme-option"><div class="option-title">Layout Mode:</div><md-radio-group \nlayout="row" layout-align="start center" ng-model="vm.layoutMode" ng-change="vm.updateLayoutMode()"><md-radio-button \nng-repeat="layoutMode in vm.layoutModes" ng-value="layoutMode.value">{{layoutMode.label}}</md-radio-button>\n</md-radio-group></div><md-divider></md-divider><div class="theme-option color-palettes"><div class="option-title">\nColor Palette:</div><div layout="row" layout-align="start start" layout-wrap><md-button \nng-repeat="(themeName, theme) in vm.themes.list" class="md-raised theme-button" layout="row" \nlayout-align="center center" aria-label="{{themeName}}" ng-click="vm.setActiveTheme(themeName)" \nng-style="{\'background-color\': theme.primary.color,\'border-color\': theme.accent.color,\'color\': theme.primary.contrast1}" \nng-class="{active: vm.getActiveTheme().name === themeName}"><md-icon ng-style="{\'color\': theme.primary.contrast1}" \nmd-font-icon="icon-palette" class="icon s32"></md-icon></md-button></div></div></div></md-sidenav>');
    $templateCache.put('app/main/auth/auth.html', '<div id="login" class="flex-scrollable" layout="column" ms-scroll><div id="login-form-wrapper" layout="column" \nlayout-align="center center"><div id="login-form" class="md-whiteframe-8dp"><div class="login-form-wrapper" \nng-if="!vm.requiredOTP"><div class="logo"><img src="/assets/images/logos/login-one-logo.png"></div><div class="title">\n\u0110\u0103ng nh\u1EADp qu\u1EA3n l\xFD</div><form name="loginForm" novalidate ng-submit="vm.accountLogin()"><md-input-container \nclass="md-block" md-no-float><input type="text" name="username" ng-model="vm.form.username" placeholder="T\xE0i kho\u1EA3n" \nminlength="4" required autocomplete="off"><div ng-messages="loginForm.username.$error" role="alert" multiple="multiple">\n<div ng-message="minlength"><span>T\xE0i kho\u1EA3n ph\u1EA3i c\xF3 \xEDt nh\u1EA5t 4 k\xFD t\u1EF1</span></div></div></md-input-container>\n<md-input-container class="md-block md-password-auth" md-no-float><input \nng-attr-type="{{ vm.show ? \'text\' : \'password\' }}" name="password" class="password-focus" ng-model="vm.form.password" \nplaceholder="M\u1EADt kh\u1EA9u" minlength="5" required autocomplete="off"><md-icon md-font-icon="icon-eye" class="s20" \nng-click="vm.show = !vm.show" ng-if="vm.show"></md-icon><md-icon md-font-icon="icon-eye-off" class="s20" \nng-click="vm.show = !vm.show" ng-if="!vm.show"></md-icon><div ng-messages="loginForm.password.$error" role="alert"><div \nng-message="minlength"><span>M\u1EADt kh\u1EA9u ph\u1EA3i c\xF3 \xEDt nh\u1EA5t 5 k\xFD t\u1EF1</span></div></div></md-input-container><md-button \ntype="submit" class="md-raised md-accent submit-button" aria-label="\u0110\u0103ng nh\u1EADp" \nng-disabled="loginForm.$invalid || loginForm.$pristine || vm.inProcessing">\u0110\u0103ng nh\u1EADp</md-button></form></div><div \nclass="login-form-wrapper" ng-if="vm.requiredOTP"><div class="nsbjKc"></div><div class="title">X\xE1c nh\u1EADn OTP</div><form \nname="loginForm" novalidate ng-submit="vm.validateOTP()"><div class="PQ3dUd"><div id="divOuter"><div id="divInner">\n<input id="partitioned" class="requiredOTP" type="text" name="otp" ng-model="vm.otp" maxlength="6" \noninput="this.value = this.value.replace(/[^0-9.]/g, \'\').replace(/(\\..*)\\./g, \'$1\');"></div></div></div><md-button \ntype="submit" class="md-raised md-accent submit-button" aria-label="X\xE1c nh\u1EADn" \nng-disabled="vm.otp.length !== 6 || vm.inProcessing">X\xE1c nh\u1EADn</md-button></form></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.inProcessing}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/dashboard/dashboard.html', '<div class="page-layout simple fullwidth dashboard" layout="column"><div class="content" layout="column"><div \nclass="widget-group" layout="row" flex="100" layout-wrap><ms-widget layout="column" flex="100" flex-gt-xs="50" \nflex-gt-md="25"><ms-widget-front class="green-200-bg cursor-pointer" \nui-sref="app.accounting.combination.winLose.general({from: vm.date.today, to: vm.date.today, product: \'0,1,2,100,101\'})">\n<div class="p-16 border-bottom green-300-bg" layout="row" layout-align="start center"><span class="h2 ml-4">\nTh\u1EAFng thua h\xF4m nay</span></div><div class="pt-32 pb-32" layout="column" layout-align="center center"><div \nclass="font-size-48 line-height-48" ng-class="{\'red-600-fg\' : vm.dashboard.TodayWinLoseAmount < 0 }">\n{{ vm.dashboard.TodayWinLoseAmount | roundPam }}</div></div></ms-widget-front></ms-widget><ms-widget layout="column" \nflex="100" flex-gt-xs="50" flex-gt-md="25"><ms-widget-front class="light-blue-200-bg cursor-pointer" \nui-sref="app.accounting.combination.winLose.general({from: vm.date.yesterday, to: vm.date.yesterday, product: \'0,1,2,100,101\'})">\n<div class="p-16 border-bottom light-blue-300-bg" layout="row" layout-align="start center"><span class="h2 ml-4">\nTh\u1EAFng thua h\xF4m qua</span></div><div class="pt-32 pb-32" layout="column" layout-align="center center"><div \nclass="font-size-48 line-height-48" ng-class="{\'red-600-fg\' : vm.dashboard.YesterdayWinLoseAmount < 0 }">\n{{ vm.dashboard.YesterdayWinLoseAmount | roundPam }}</div></div></ms-widget-front></ms-widget><ms-widget \nflippable="true" layout="column" flex="100" flex-gt-xs="50" flex-gt-md="25"><ms-widget-front class="yellow-300-bg"><div \nclass="pt-10 pb-10 pr-16 pl-16 yellow-400-bg border-bottom" layout="row" layout-align="space-between center"><span \nclass="h2 ml-4">T\u1ED5ng ti\u1EC1n ch\u01B0a x\u1EED l\xFD</span><md-button class="md-icon-button" ng-click="flipWidget()" \naria-label="Flip widget"><md-icon md-font-icon="icon-details"></md-icon></md-button></div><div class="pt-32 pb-32" \nlayout="column" layout-align="center center"><div class="font-size-48 line-height-48">\n{{ vm.dashboard.Outstanding.BookieTotalAmount | roundPam }}</div></div><div \nclass="p-8 yellow-200-bg border-top outstanding" layout="row" layout-align="end center"><div layout="row" class="game">\n<div class="h4 secondary-text text-truncate">H\u1ED9i vi\xEAn:</div><div class="h4 ml-8 currency">\n{{ vm.dashboard.Outstanding.PlayerTotalAmount | roundPam }}</div></div></div></ms-widget-front><ms-widget-back \nclass="p-16 yellow-100-bg"><div class="flip-to-front"><md-button class="md-icon-button" ng-click="flipWidget()" \naria-label="Flip widget"><md-icon md-font-icon="icon-close" class="s20"></md-icon></md-button></div><div \nlayout="column" class="outstanding"><div ng-repeat="item in vm.dashboard.Outstanding.Productions"><div \nclass="h3 secondary-text text-truncate text-bold">{{ item.Production | Production }}:</div><div layout="column" \nclass="ml-32"><div><span class="label">{{ $root.User.Level | group }}</span>: <span class="money">\n{{ item.BookieTotalAmount | roundPam }}</span></div><div><span class="label">H\u1ED9i vi\xEAn</span>: <span \nclass="cursor-pointer money" ng-click="vm.viewOutstanding(item.Production)">{{ item.PlayerTotalAmount | roundPam }}\n</span></div></div></div></div></ms-widget-back></ms-widget><ms-widget layout="column" flex="100" flex-gt-xs="50" \nflex-gt-md="25"><ms-widget-front class="red-100-bg cursor-pointer" ng-class="{\'active\': $root.User.Level === 1}" \nng-click="vm.checkOnline();"><div class="p-16 red-200-bg border-bottom" layout="row" layout-align="start center"><span \nclass="h2 ml-4">Kh\xE1ch h\xE0ng tr\u1EF1c tuy\u1EBFn</span></div><div class="pt-32 pb-32" layout="column" layout-align="center center">\n<div class="font-size-48 line-height-48">{{ vm.dashboard.UserOnline | currency : \'\' : 0 }}</div></div></ms-widget-front>\n</ms-widget></div><div class="widget-group" layout="row" flex="100" layout-wrap><ms-widget layout="column" flex="100" \nflex-gt-xs="50" flex-gt-md="25"><ms-widget-front class="white-bg"><div \nclass="ph-16 pv-16 blue-grey-200-bg border-bottom" layout="row" layout-align="space-between center"><div class="h2">\nH\u1ED9i vi\xEAn th\u1EAFng trong tu\u1EA7n</div></div><div class="simple-table-container"><table class="simple" ms-responsive-table>\n<thead class="grey-200-bg"><tr><th class="w-60 border-right">#</th><th class="border-right">H\u1ED9i vi\xEAn</th><th \nclass="text-right border-right">S\u1ED1 ti\u1EC1n</th><th class="text-right">{{ $root.User.Level | group }}</th></tr></thead>\n<tbody><tr ng-repeat="item in vm.dashboard.TopPlayerStats.TopWin"><td class="border-right" \nng-class="{\'has-button\': $root.User.Level === 1}"><span ng-if="$root.User.Level !== 1">{{ $index + 1 }}</span><md-button\n class="md-icon-button" ng-if="$root.User.Level === 1" aria-label="icon-account-network" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="vm.getAncestors(item)"><md-icon \nmd-font-icon="icon-account-network"></md-icon></md-button></td><td class="border-right"><span class="member" \nui-sref="app.accounting.combination.winLose.general({from: vm.date.earlyThisWeek, to: vm.date.thisWeekend, uid: item.UserId, level: 9, name: item.Username, product: \'0,1,2,100,101\'})">\n{{ item.Username }}</span></td><td class="text-right border-right" ng-class="{\'red-600-fg\': item.WinLose < 0}">\n{{ item.WinLose | currency : \'\' : 0 }}</td><td class="text-right" ng-class="{\'red-600-fg\': item.BookieWinLose < 0}">\n{{ item.BookieWinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.dashboard.TopPlayerStats.TopWin.length === 0"><tr><td colspan="4" class="padding-16 text-center red-400-fg">\nKh\xF4ng c\xF3 d\u1EEF li\u1EC7u</td></tr></tfoot></table></div></ms-widget-front></ms-widget><ms-widget layout="column" flex="100" \nflex-gt-xs="50" flex-gt-md="25"><ms-widget-front class="white-bg"><div \nclass="ph-16 pv-16 blue-grey-200-bg border-bottom" layout="row" layout-align="space-between center"><div class="h2">\nH\u1ED9i vi\xEAn thua trong tu\u1EA7n</div></div><div class="simple-table-container"><table class="simple" ms-responsive-table><thead\n class="grey-200-bg"><tr><th class="w-60 border-right">#</th><th class="border-right">H\u1ED9i vi\xEAn</th><th \nclass="text-right border-right">S\u1ED1 ti\u1EC1n</th><th class="text-right">{{ $root.User.Level | group }}</th></tr></thead>\n<tbody><tr ng-repeat="item in vm.dashboard.TopPlayerStats.TopLose"><td class="border-right" \nng-class="{\'has-button\': $root.User.Level === 1}"><span ng-if="$root.User.Level !== 1">{{ $index + 1 }}</span><md-button\n class="md-icon-button" ng-if="$root.User.Level === 1" aria-label="icon-account-network" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="vm.getAncestors(item)"><md-icon \nmd-font-icon="icon-account-network"></md-icon></md-button></td><td class="border-right"><span class="member" \nui-sref="app.accounting.combination.winLose.general({from: vm.date.earlyThisWeek, to: vm.date.thisWeekend, uid: item.UserId, level: 9, name: item.Username, product: \'0,1,2,100,101\'})">\n{{ item.Username }}</span></td><td class="text-right border-right" ng-class="{\'red-600-fg\': item.WinLose < 0}">\n{{ item.WinLose | currency : \'\' : 0 }}</td><td class="text-right" ng-class="{\'red-600-fg\': item.BookieWinLose < 0}">\n{{ item.BookieWinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.dashboard.TopPlayerStats.TopLose.length === 0"><tr><td colspan="4" class="padding-16 text-center red-400-fg">\nKh\xF4ng c\xF3 d\u1EEF li\u1EC7u</td></tr></tfoot></table></div></ms-widget-front></ms-widget><ms-widget layout="column" flex="100" \nflex-gt-xs="50" flex-gt-md="25"><ms-widget-front class="white-bg"><div \nclass="ph-16 pv-16 blue-grey-200-bg border-bottom" layout="row" layout-align="space-between center"><div class="h2">\nH\u1ED9i vi\xEAn c\u01B0\u1EE3c trong tu\u1EA7n</div></div><div class="simple-table-container"><table class="simple" ms-responsive-table><thead\n class="grey-200-bg"><tr><th class="w-60 border-right">#</th><th class="border-right">H\u1ED9i vi\xEAn</th><th \nclass="text-right border-right">Ti\u1EC1n c\u01B0\u1EE3c</th><th class="text-right">Th\u1EAFng thua</th></tr></thead><tbody><tr \nng-repeat="item in vm.dashboard.TopPlayerStats.TopBet"><td class="border-right" \nng-class="{\'has-button\': $root.User.Level === 1}"><span ng-if="$root.User.Level !== 1">{{ $index + 1 }}</span><md-button\n class="md-icon-button" ng-if="$root.User.Level === 1" aria-label="icon-account-network" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="vm.getAncestors(item)"><md-icon \nmd-font-icon="icon-account-network"></md-icon></md-button></td><td class="border-right"><span class="member" \nui-sref="app.accounting.combination.winLose.general({from: vm.date.earlyThisWeek, to: vm.date.thisWeekend, uid: item.UserId, level: 9, name: item.Username, product: \'0,1,2,100,101\'})">\n{{ item.Username }}</span></td><td class="text-right border-right" ng-class="{\'red-600-fg\': item.Amount < 0}">\n{{ item.Amount | currency : \'\' : 0 }}</td><td class="text-right" ng-class="{\'red-600-fg\': item.WinLose < 0 }">\n{{ item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.dashboard.TopPlayerStats.TopBet.length === 0">\n<tr><td colspan="4" class="padding-16 text-center red-400-fg">Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u</td></tr></tfoot></table></div>\n</ms-widget-front></ms-widget><ms-widget layout="column" flex="100" flex-gt-xs="50" flex-gt-md="25"><ms-widget-front \nclass="white-bg"><div class="ph-16 pv-16 blue-grey-200-bg border-bottom" layout="row" \nlayout-align="space-between center"><div class="h2">T\xECnh tr\u1EA1ng t\xE0i kho\u1EA3n</div></div><div \nclass="simple-table-container user-status"><table class="simple" ms-responsive-table><thead class="grey-200-bg"><tr><th \nclass="w-90 border-right"></th><th class="text-right border-right">Ng\u1EEBng c\u01B0\u1EE3c</th><th class="text-right border-right">\n\u0110\xF3ng</th><th class="text-right border-right">Ho\u1EA1t \u0111\u1ED9ng</th><th class="text-right">T\u1ED5ng s\u1ED1</th></tr></thead><tbody><tr \nng-repeat="item in vm.dashboard.UserLevelStatusStats"><td class="border-right">{{ item.Level | group }}</td><td \nclass="text-right border-right red-100-bg text-bold">{{ item.Suspended | currency : \'\' : 0 }}</td><td \nclass="text-right border-right grey-400-bg text-bold">{{ item.Blocked | currency : \'\' : 0 }}</td><td \nclass="text-right border-right green-400-bg text-bold">{{ item.Active | currency : \'\' : 0 }}</td><td \nclass="text-right text-bold">{{ item.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.dashboard.UserLevelStatusStats.length === 0"><tr><td colspan="4" class="padding-16 text-center red-400-fg">\nKh\xF4ng c\xF3 d\u1EEF li\u1EC7u</td></tr></tfoot></table></div></ms-widget-front></ms-widget></div></div><script \ntype="text/ng-template" id="parentClass"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-ancestors">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>L\u1EDBp cha</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <div layout="row" layout-align="center center" ng-if="!vm.parents.length">\n                        <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                    </div>\n                    <div layout="row" ng-repeat="item in vm.parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">{{item.Username}}</span>\n                            <span flex ng-if="$index !== 0"><a ui-sref="app.account.agency({match: item.Username, type: \'keyword\', page: 1})">{{item.Username}}</a></span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/forbidden/forbidden.html', '<h1>403</h1><div class="error-403"><p>> <span>ERROR CODE</span>: "<i>HTTP 403 Forbidden</i>"</p><p>> <span>\nERROR DESCRIPTION</span>: "<i>Access Denied. You Do Not Have The Permission To Access This Page On This Server</i>"</p>\n<p>> <span>ERROR POSSIBLY CAUSED BY</span>: [<b>\nexecute access forbidden, read access forbidden, write access forbidden, ssl required, ssl 128 required, ip address rejected, client certificate required, site access denied, too many users, invalid configuration, password change, mapper denied access, client certificate revoked, directory listing denied, client access licenses exceeded, client certificate is untrusted or invalid, client certificate has expired or is not yet valid, passport logon failed, source access denied, infinite depth is denied, too many requests from the same client ip\n</b>...]</p><p>> <span>SOME PAGES ON THIS SERVER THAT YOU DO HAVE PERMISSION TO ACCESS</span>: [<a href="/dashboard">\nDashboard</a>, <a href="/my/password">Password</a>, <a href="/online">Online</a>...]</p><p>> <span>\nWISH YOU HAVE A LUCKY DAY FROM THE COMPANY 789 :-)</span></p></div>');
    $templateCache.put('app/main/announcements/announcements.html', '<div id="announcements" class="page-layout carded left-sidenav" layout="row"><div class="center" layout="column" flex>\n<div class="content-card" ng-class="vm.currentView" layout="column" flex ng-include="vm.views[vm.currentView]"></div>\n</div></div>');
    $templateCache.put('app/main/announcements/warning.dialog.html', '<md-dialog aria-label="dialog" class="announcements-dialog"><md-dialog-content><div class="md-dialog-content"><div \nclass="content" layout="column"><div>\nTH\xD4NG B\xC1O: C\xD4NG TY C\xD3 QUY\u1EC0N H\u1EE6Y C\xC1C PHI\u1EBEU C\u01AF\u1EE2C GIAN L\u1EACN M\xC0 KH\xD4NG C\u1EA6N TH\xD4NG B\xC1O TR\u01AF\u1EDAC (THEO TH\xD4NG L\u1EC6 QU\u1ED0C T\u1EBE: "NH\xCCN B\xC1O BI\u1EC2U T\xCDNH TI\u1EC0N")\n</div><div>XIN C\u1EA2M \u01A0N S\u1EF0 H\u1EE2P T\xC1C V\xC0 \u0110\u1ED2NG H\xC0NH C\u1EE6A QU\xDD KH\xC1CH</div><div class="text-right">TR\xC2N TR\u1ECCNG!</div><div>\n<md-button class="md-raised md-warn" type="button" ng-click="cancel()">B\u1ECE QUA</md-button></div></div></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/must-change-password/must-change-password.html', '<div class="message-row"><p>M\u1EADt kh\u1EA9u qu\xFD kh\xE1ch c\u1EA7n thay \u0111\u1ED5i 30 ng\xE0y/l\u1EA7n v\xE0 kh\xF4ng \u0111\u01B0\u1EE3c tr\xF9ng l\u1EB7p v\u1EDBi 3 m\u1EADt kh\u1EA9u g\u1EA7n nh\u1EA5t.\n</p><p>Qu\xFD kh\xE1ch c\xF3 th\u1EC3 B\u1EADt ch\u1EE9c n\u0103ng b\u1EA3o m\u1EADt OTP \u0111\u1EC3 b\u1ECF y\xEAu c\u1EA7u n\xE0y (S\u1EED d\u1EE5ng m\u1ED9t m\u1EADt kh\u1EA9u v\u0129nh vi\u1EC5n)</p><div \nclass="button" layout="row" layout-align="center center"><md-button class="md-raised md-primary" \nui-sref="app.my.password">\u0110\u1ED5i m\u1EADt kh\u1EA9u</md-button><md-button class="md-raised md-accent" ui-sref="app.my.otp">\nK\xEDch ho\u1EA1t OTP</md-button></div></div>');
    $templateCache.put('app/main/notification/notification.html', '<div id="notification" class="page-layout fullwidth simple tabbed"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Th\xF4ng b\xE1o</div>\n</div><div layout="row" layout-align="start center"><md-button class="md-raised md-warn btn-news" \nng-click="$root.createNotification($event)"><md-icon md-font-icon="icon-newspaper" class="s20"></md-icon>Th\xF4ng b\xE1o m\u1EDBi\n</md-button><md-button class="md-raised md-icon-button md-warn" ng-click="$root.createPrivateNotification($event)">\n<md-icon md-font-icon="icon-message-text" class="s20"></md-icon></md-button></div></div><div class="content" flex>\n<md-tabs md-dynamic-height md-selected="currentTab"><md-tab label="Th\xF4ng th\u01B0\u1EDDng" ui-sref="app.notification.normal"><div \nui-view="normal"></div></md-tab><md-tab label="Quan tr\u1ECDng" ui-sref="app.notification.special"><div ui-view="special">\n</div></md-tab><md-tab label="H\u1EC7 th\u1ED1ng" ui-sref="app.notification.system"><div ui-view="system"></div></md-tab><md-tab \nlabel="Th\xF4ng b\xE1o c\xE1 nh\xE2n" ui-sref="app.notification.personal"><div ui-view="personal"></div></md-tab></md-tabs></div>\n</div>');
    $templateCache.put('app/toolbar/dialog/activities_popup.html', '<md-dialog aria-label="activities-popup" class="activities-popup"><form ng-cloak><md-dialog-content md-dynamic-height>\n<div class="md-dialog-content"><div layout="column"><div class="md-toolbar-tools"><span flex></span><md-button \nclass="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon>\n</md-button></div><div class="all-done" layout="column"><md-icon md-font-icon="icon-alert-circle" class="s96"></md-icon>\n<div class="message">C\xF3 v\u1EBB nh\u01B0 qu\xFD kh\xE1ch \u0111\xE3 ho\xE0n t\u1EA5t c\xF4ng vi\u1EC7c.<br>H\u1EC7 th\u1ED1ng s\u1EBD t\u1EF1 \u0111\u1ED9ng tho\xE1t ra trong ch\u1ED1c l\xE1t.</div>\n</div></div></div></md-dialog-content><md-dialog-actions layout="row" layout-align="center" class="bottom-fix">\n<md-button ng-click="cancel()" md-no-ink class="md-raised md-accent">Gi\u1EEF \u0111\u0103ng nh\u1EADp</md-button></md-dialog-actions>\n</form></md-dialog>');
    $templateCache.put('app/core/directives/dangerous-browser/dangerous-browser.html', '<div id="ms-dangerous" layout="row" layout-align="start center" flex><div id="ms-dangerous-message" flex layout="row" \nlayout-align="center center"><span>Qu\xFD kh\xE1ch \u0111ang s\u1EED d\u1EE5ng tr\xECnh duy\u1EC7t <a target="_blank" \nhref="https://vietnamnet.vn/vn/cong-nghe/bao-mat/trinh-duyet-coc-coc-bi-to-doc-trom-tin-nhan-nguoi-dung-lay-thong-tin-facebook-444155.html">\nkh\xF4ng an to\xE0n</a>\n, vi\u1EC7c n\xE0y c\xF3 th\u1EC3 khi\u1EBFn t\xE0i kho\u1EA3n, b\xE1o bi\u1EC3u, danh s\xE1ch kh\xE1ch h\xE0ng c\u1EE7a qu\xFD kh\xE1ch b\u1ECB l\u1ED9. Qu\xFD kh\xE1ch c\xF3 th\u1EC3 l\u1EF1a ch\u1ECDn Chrome ho\u1EB7c Firefox.\n</span></div><md-button id="ms-dangerous-message-close" class="md-icon-button" aria-label="Close" \nng-click="removeInfoBar()"><md-icon md-font-icon="icon-close s24"></md-icon></md-button></div>');
    $templateCache.put('app/core/directives/ms-ads/ms-ads.html', '<div id="ms-ads" layout="row" layout-align="start center" flex><md-button id="ms-ads-close" class="md-icon-button" \nng-click="removeAds()"><md-icon md-font-icon="icon-close"></md-icon></md-button><div id="ms-ads-message" \nlayout="column" flex ui-sref="app.my.telegram" layout-align="center"><div class="img" flex layout-align="center"><img \nsrc="/assets/images/etc/telegram.gif" alt=""></div><div class="message">\nLi\xEAn k\u1EBFt t\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch v\u1EDBi Telegram \u0111\u1EC3 xem b\xE1o bi\u1EC3u, ti\u1EC1n c\u01B0\u1EE3c, ... v\xE0 nhi\u1EC1u h\u01A1n n\u1EEFa</div></div></div>');
    $templateCache.put('app/core/directives/ms-crucial-message/crucial-message.html', '<div id="ms-crucial" layout="row" layout-align="start center" flex><div id="ms-crucial-message" ng-transclude flex>\n</div></div>');
    $templateCache.put('app/core/directives/ms-info-bar/ms-info-bar.html', '<div id="ms-info-bar" layout="row" layout-align="start center" flex><div id="ms-info-bar-message" ng-transclude flex>\n</div><md-button id="ms-info-bar-close" class="md-icon-button" aria-label="Close" ng-click="removeInfoBar()"><md-icon \nmd-font-icon="icon-close s24"></md-icon></md-button></div>');
    $templateCache.put('app/core/directives/ms-material-color-picker/ms-material-color-picker.html', '<md-menu md-position-mode="target-right target"><div ng-click="$mdOpenMenu($event)"><ms-color-picker-button><md-button \naria-label="Row Color" md-menu-origin ng-click="$mdOpenMenu($event)" ng-class="vm.selectedColor.class"><span \nng-show="vm.selectedColor.palette">{{vm.selectedColor.palette}} {{vm.selectedColor.hue}} </span><span \nng-show="!vm.selectedColor.palette">Select Color</span></md-button></ms-color-picker-button></div><md-menu-content \nclass="ms-material-color-picker-menu-content" layout-column><header ng-class="vm.selectedColor.class || \'md-accent-bg\'" \nclass="md-whiteframe-4dp" layout="row" layout-align="space-between center"><md-button md-prevent-menu-close \nng-click="vm.activateHueSelection(false,false)" class="md-icon-button" ng-class="{\'hidden\':!vm.selectedPalette}" \naria-label="Palette"><md-icon md-font-icon="icon-arrow-left" class="s20"></md-icon></md-button><span \nng-if="vm.selectedColor.palette">{{vm.selectedColor.palette}} {{vm.selectedColor.hue}} </span><span \nng-if="!vm.selectedColor.palette">Select Color</span><md-button class="remove-color-button md-icon-button" \nng-click="vm.removeColor()" aria-label="Remove Color"><md-icon md-font-icon="icon-delete" class="s20"></md-icon>\n</md-button></header><div class="colors" ms-scroll><div ng-show="!vm.selectedPalette" layout="row" layout-wrap><div \nclass="color" ng-class="\'md-\'+palette+\'-500-bg\'" ng-repeat="(palette, hues) in vm.palettes" \nng-click="vm.activateHueSelection(palette,hues)" layout="row" layout-align="start end" md-prevent-menu-close \nmd-ink-ripple><span class="label">{{palette}}</span></div></div><div ng-show="vm.selectedPalette" layout="row" \nlayout-wrap><div class="color" ng-class="\'md-\'+vm.selectedPalette+\'-\'+hue+\'-bg\'" \nng-repeat="(hue, values) in vm.selectedHues" ng-click="vm.selectColor(vm.selectedPalette,hue)" layout="row" \nlayout-align="start end" md-ink-ripple><span class="label">{{hue}} </span><i \nng-if="vm.selectedPalette == vm.selectedColor.palette && hue == vm.selectedColor.hue" class="s16 icon-check"></i></div>\n</div></div></md-menu-content></md-menu>');
    $templateCache.put('app/core/directives/ms-search-bar/ms-search-bar.html', '<div flex layout="row" layout-align="start center"><label for="ms-search-bar-input"><md-button \nclass="ms-search-bar-expander md-icon-button" aria-label="Expand Search Bar" ng-click="MsSearchBar.expand()" \nng-if="!MsSearchBar.resultsLoading || MsSearchBar.collapsed"><md-icon md-font-icon="icon-magnify" class="icon s24">\n</md-icon></md-button><div class="ms-search-bar-loader" layout="row" layout-align="center center" \nng-if="MsSearchBar.resultsLoading && !MsSearchBar.collapsed"><md-progress-circular class="md-accent" md-diameter="32" \nmd-mode="indeterminate"></md-progress-circular></div></label> <input id="ms-search-bar-input" type="text" \nplaceholder="Search" flex ng-model="MsSearchBar.query" ng-model-options="MsSearchBar.queryOptions" \nng-blur="MsSearchBar.collapse()" ng-keydown="MsSearchBar.handleKeydown($event)"><md-button \nclass="ms-search-bar-collapser md-icon-button" ng-click="MsSearchBar.collapse()" aria-label="Collapse Search Bar">\n<md-icon md-font-icon="icon-close" class="icon s24"></md-icon></md-button><div class="ms-search-bar-results" \nng-if="MsSearchBar.results" ms-scroll><div class="no-results" ng-if="MsSearchBar.results.length === 0">No Results!</div>\n<div class="result" ng-repeat="result in MsSearchBar.results" ng-click="MsSearchBar.handleResultClick(result)" \nng-mouseenter="MsSearchBar.handleMouseenter($index)" ng-mousedown="MsSearchBar.absorbEvent($event)" \nng-class="{\'selected\': $index == MsSearchBar.selectedResultIndex}" md-ink-ripple><div layout="row" \nlayout-align="start center"><div class="icon-container" layout="row" layout-align="center center"><i \nng-if="result.icon" class="icon {{result.icon}}"></i><div ng-if="!result.icon" class="square md-accent-bg"></div></div>\n<div><div class="title">{{result.title}}</div><div class="description" ng-if="result.description">{{result.description}}\n</div></div></div></div></div></div>');
    $templateCache.put('app/core/directives/ms-shortcuts/ms-shortcuts.html', '<div class="shortcuts-container" layout="row" layout-align="space-between center" flex \nng-class="{\'mobile-bar-active\': MsShortcuts.mobileBarActive}"><div layout="row" layout-align="start center" flex><div \nclass="shortcuts hide show-gt-xs" layout="row" layout-align="start center" ms-scroll \nng-if="MsShortcuts.shortcuts.length > 0" ng-sortable="MsShortcuts.sortableOptions"><div \nng-repeat="shortcut in MsShortcuts.shortcuts" layout="row" layout-align="center center"><md-button \nclass="md-icon-button shortcut {{shortcut.class}}" aria-label="{{shortcut.title}}" ui-sref="{{shortcut.uisref}}">\n<md-icon ng-if="shortcut.icon" md-font-icon="{{shortcut.icon}}" class="icon s24"></md-icon><div ng-if="!shortcut.icon" \nclass="first-letter">{{shortcut.title.charAt(0)}}</div><md-tooltip md-direction="bottom">{{shortcut.title}}</md-tooltip>\n</md-button></div></div><md-menu md-offset="8 56" class="shortcut-menu hide show-gt-xs"><md-button \nclass="md-icon-button add-shortcut-button" aria-label="Add shortcut" ng-click="$mdOpenMenu($event)"><md-icon \nmd-menu-origin md-font-icon="icon-star" class="icon amber-600-fg s24"></md-icon><md-tooltip md-direction="bottom">\nClick to add/remove shortcut</md-tooltip></md-button><md-menu-content><div id="ms-shortcut-add-menu"><div \nclass="shortcut-search" layout="row" layout-align="start center"><div class="search-icon" layout="row" \nlayout-align="center center" ng-if="!MsShortcuts.resultsLoading"><md-icon md-menu-align-target \nmd-font-icon="icon-magnify" class="icon s24"></md-icon></div><div class="shortcut-loader" layout="row" \nlayout-align="center center" ng-if="MsShortcuts.resultsLoading"><md-progress-circular class="md-accent" \nmd-diameter="20" md-mode="indeterminate"></md-progress-circular></div><input type="text" placeholder="Search" flex \nng-model="MsShortcuts.query" ng-model-options="MsShortcuts.queryOptions" ng-keydown="MsShortcuts.handleKeydown($event)">\n</div><div class="results" ng-if="MsShortcuts.results" ms-scroll><div class="no-results" \nng-if="MsShortcuts.results.length === 0">No Results!</div><div class="result" ng-repeat="result in MsShortcuts.results" \nng-click="MsShortcuts.handleResultClick(result)" ng-mouseenter="MsShortcuts.handleMouseenter($index)" \nng-mousedown="MsShortcuts.absorbEvent($event)" ng-class="{\'selected\': $index == MsShortcuts.selectedResultIndex}" \nmd-prevent-menu-close="md-prevent-menu-close" md-ink-ripple><div layout="row" layout-align="start space-between"><div \nlayout="row" layout-align="start center" flex><div class="icon icon-container" layout="row" \nlayout-align="center center"><i ng-if="result.icon" class="{{result.icon}}"></i><div ng-if="!result.icon" \nclass="square md-accent-bg"></div></div><div><div class="title">{{result.title}}</div></div></div><md-icon \nmd-font-icon="icon-pin" class="icon s18" ng-class="{\'fade-text\': !result.hasShortcut}"></md-icon></div></div></div>\n</div></md-menu-content></md-menu></div><md-button class="md-icon-button toggle-mobile-menu hide-gt-xs" \naria-label="Add shortcut" ng-click="MsShortcuts.toggleMobileBar()"><md-icon md-menu-origin md-font-icon="icon-star" \nclass="icon amber-600-fg s24" ng-hide="MsShortcuts.mobileBarActive"></md-icon><md-icon md-menu-origin \nmd-font-icon="icon-close" class="icon s24" ng-hide="!MsShortcuts.mobileBarActive"></md-icon></md-button></div>');
    $templateCache.put('app/core/directives/password-expired-soon/password-expired-soon.html', '<div id="ms-password" layout="row" layout-align="start center" flex><p>{{$root.passwordExpired}} Qu\xFD kh\xE1ch vui l\xF2ng\n<md-button class="md-raised md-accent" ui-sref="app.my.password">\u0110\u1ED5i m\u1EADt kh\u1EA9u</md-button>ho\u1EB7c<md-button \nclass="md-raised md-warn" ui-sref="app.my.otp">c\xE0i \u0111\u1EB7t OTP</md-button>\u0111\u1EC3 b\u1EA3o v\u1EC7 t\xE0i kho\u1EA3n.</p></div>');
    $templateCache.put('app/navigation/layouts/horizontal-navigation/navigation.html', '<div layout="row" layout-align="start center"><ms-navigation-horizontal></ms-navigation-horizontal></div>');
    $templateCache.put('app/navigation/layouts/vertical-navigation/navigation.html', '<md-toolbar class="navigation-header md-whiteframe-1dp" layout="row" layout-align="space-between center"><div \nclass="logo" layout="row" layout-align="start center"><a class="logo-image" ui-sref="app.dashboard"></a><div \nlayout="column"><span class="logo-text">ONE789</span> <span class="member-level">{{ $root.User.Level | group }}</span>\n</div></div><md-icon class="fold-toggle s18" md-font-icon="icon-backburger" hide show-gt-sm \nng-click="vm.toggleMsNavigationFolded()"></md-icon></md-toolbar><ms-navigation class="scrollable" folded="vm.folded" \nms-scroll="vm.msScrollOptions"></ms-navigation>');
    $templateCache.put('app/navigation/layouts/vertical-navigation-fullwidth-toolbar-2/navigation.html', '<ms-navigation class="scrollable" folded="vm.folded" ms-scroll="vm.msScrollOptions"></ms-navigation>');
    $templateCache.put('app/main/account/agency/agency.html', '<div class="page-layout simple fullwidth agencies" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="breadcrumb" hide><span \nclass="parent">breadcrumb</span></div><div class="title">Danh s\xE1ch t\xE0i kho\u1EA3n</div></div><div class="open-account" \nlayout="row" layout-align="start center"><md-button class="md-warn md-raised long-btn" \nng-click="vm.createAccount($event)" ng-if="$mdMedia(\'gt-xs\') && vm.hasWritePermission"><md-icon \nmd-font-icon="icon-plus" class="s20"></md-icon>T\u1EA1o t\xE0i kho\u1EA3n</md-button><md-button class="md-fab md-warn" \nng-click="vm.createAccount($event)" ng-if="$mdMedia(\'xs\') && vm.hasWritePermission"><md-icon md-font-icon="icon-plus" \nclass="s20"></md-icon></md-button></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div layout="column" layout-gt-sm="row" \nlayout-align="space-between center"><form layout="row" class="table-header" ng-show="vm.filterType === \'keyword\'" \nng-submit="vm.searchUser()"><div class="search-container"><input type="text" autocomplete="off" class="form-control" \nid="userName" ng-model="vm.userName" placeholder="T\xE0i kho\u1EA3n"><md-icon md-font-icon="icon-close" \nng-if="vm.userName.length" ng-click="vm.userName = \'\'"></md-icon></div><md-button type="submit" \nclass="md-raised md-accent">T\xECm ki\u1EBFm</md-button><md-select ng-model="vm.filter" aria-label="true" \nng-disabled="vm.userName" ng-change="vm.changeFilter()"><md-option ng-repeat="item in vm.userFilters" \nvalue="{{item.id}}" ng-selected="item.id === vm.url.filter">{{item.name}}</md-option></md-select><md-button \nclass="md-raised" ng-click="vm.changeType(\'group\')">L\u1ECDc theo nh\xF3m</md-button></form><div layout="row" \nclass="table-header" ng-show="vm.filterType === \'group\'"><md-select ng-model="vm.level" aria-label="true" \nng-change="vm.changeGroup()"><md-option ng-repeat="item in vm.usersGroups" value="{{item.id}}" \nng-selected="item.id === vm.url.group" ng-if="item.id !== 0">{{item.name}}</md-option></md-select><md-select \nng-model="vm.sortfield" aria-label="true" ng-change="vm.changeSort()"><md-option ng-repeat="item in vm.sortByArr" \nvalue="{{item.id}}" ng-selected="item.id === vm.url.sort">{{item.name}}</md-option></md-select><md-select \nng-model="vm.order" aria-label="true" ng-change="vm.changeOrder()"><md-option ng-repeat="item in vm.orderByArr" \nvalue="{{item.id}}" ng-selected="item.id === vm.url.order">{{item.name}}</md-option></md-select><md-button \nclass="md-raised" ng-click="vm.changeType(\'keyword\')">L\u1ECDc theo t\u1EEB kh\xF3a</md-button></div><div flex></div><div \nclass="pagination-button" layout="row" ng-if="vm.pager.totalPages > 1"><md-button class="md-raised md-primary" \nng-click="vm.setPage(1)" ng-disabled="vm.pager.currentPage === 1"><md-icon md-font-icon="icon-chevron-double-left" \nclass="s20"></md-icon><span>First</span></md-button><md-button class="md-raised md-primary" \nng-repeat="page in vm.pager.pages" ng-class="{\'md-accent\' : vm.pager.currentPage === page}" ng-click="vm.setPage(page)">\n{{page}}</md-button><md-button class="md-raised md-primary" ng-click="vm.setPage(vm.pager.totalPages)" \nng-disabled="vm.pager.currentPage === vm.pager.totalPages"><md-icon md-font-icon="icon-chevron-double-right" \nclass="s20"></md-icon><span>Last</span></md-button></div></div><table class="simple" ms-responsive-table><thead><tr><th \ncolspan="2">T\xE0i kho\u1EA3n</th><th>Nh\xF3m</th><th>T\xEAn</th><th>T\xEDn d\u1EE5ng</th><th>S\u1ED1 d\u01B0</th><th ng-if="vm.hasMember">S\u1ED1 d\u01B0 Bong88\n</th><th>Transfer</th><th colspan="2">OTP</th><th>S\u1EEDa</th></tr></thead><tbody><tr \nng-repeat="item in vm.agencies.Records track by $index" \nng-class="{ \'blocked\': item.Blocked, \'suspended\': item.Suspended }"><td \nng-class="{\'padding-1\': item.parentLevel == 1, \'padding-2\': item.parentLevel === 2, \'padding-3\': item.parentLevel === 3, \'padding-4\': item.parentLevel === 4}">\n<md-button class="md-icon-button" ng-if="item.Level === 9"><md-icon md-font-icon="icon-checkbox-blank-circle" \nclass="s10"></md-icon></md-button><md-button ng-show="item.hasChild" class="md-icon-button md-warn" \nng-click="vm.compactAccount(item)"><md-icon md-font-icon="icon-menu-down"></md-icon></md-button><md-button \nng-show="!item.hasChild" class="md-icon-button md-accent" ng-click="vm.childAccount(item)" ng-if="item.Level !== 9" \nng-disabled="item.inProcess" aria-label="child Account"><md-icon md-font-icon="icon-menu-right" ng-if="!item.inProcess">\n</md-icon><md-icon md-svg-icon="assets/icons/reload10.svg" class="s16" ng-if="item.inProcess"></md-icon></md-button><a \nui-sref="app.account.agency.child({id: item.Id, username: item.Username})" ui-sref-opts="{inherit: false}" \nng-if="item.Level !== 9">{{item.Username}} </a><span ng-if="item.Level === 9">{{item.Username}}</span></td><td \nclass="ancestors"><md-button class="md-icon-button" aria-label="icon-account-network" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="vm.getAncestors(item)"><md-icon \nmd-font-icon="icon-account-network"></md-icon></md-button></td><td class="level">{{item.Level | group}}</td><td \nclass="full-name"><span>{{item.FullName}}</span></td><td class="credit" ng-click="vm.creditUpdate(item, $event)"><span>\n{{item.CreditLimit | currency : \'\' : 0}}</span></td><td class="balance" \nng-class="{\'has-icon\': vm.hasWritePermission && item.PaymentMethod === 1 && vm.resetCreditPermission(item)}"><div \nlayout="row" layout-align="space-between center"><md-button class="md-icon-button" \nng-if="vm.hasWritePermission && item.PaymentMethod === 1 && vm.resetCreditPermission(item)"><md-tooltip \nmd-direction="top">K\u1EBFt to\xE1n t\xE0i kho\u1EA3n</md-tooltip><md-icon ng-click="vm.resetCredit(item, $event)" \nmd-font-icon="icon-backup-restore"></md-icon></md-button><span flex></span> <span>{{item.Balance | currency : \'\' : 0}}\n</span></div></td><td class="balance saba" ng-class="has-icon" ng-if="vm.hasMember"><div ng-if="item.Level === 9" \nlayout="row" layout-align="space-between center"><md-button class="md-icon-button md-warn withdraw" \nng-click="vm.resetSabaBalance(item, $event)" ng-if="item.SabaBalance !== undefined && item.SabaBalance >= 1"><md-tooltip\n md-direction="top">R\xFAt to\xE0n b\u1ED9 s\u1ED1 d\u01B0</md-tooltip><md-icon md-font-icon="icon-withdraw" class="s32"></md-icon>\n</md-button><span flex></span><md-icon ng-click="vm.getSabaBalance(item)" md-font-icon="icon-download" \nng-if="item.SabaBalance === undefined"></md-icon><span>{{ item.SabaBalance | currency : \'\' : 3 }}</span></div></td><td \nclass="payment" ng-click="vm.creditUpdate(item, $event, \'payment\')" ng-if="vm.resetCreditPermission(item)"><span \nng-class="{\'warn\' : item.PaymentMethod === 1}">{{ item.PaymentMethod | paymentMethod }}</span></td><td class="payment" \nng-click="vm.creditUpdate(item, $event)" ng-if="!vm.resetCreditPermission(item)"><span \nng-class="{\'warn\' : item.PaymentMethod === 1}">{{ item.PaymentMethod | paymentMethod }}</span></td><td \nclass="must-enable-mfa"><md-button ng-if="item.MfaRequired" class="md-icon-button md-accent" aria-label="block" \nng-click="vm.mustEnableTfa(false, item, $event)"><md-icon md-font-icon="icon-toggle-switch-on" class="s24"></md-icon>\n</md-button><md-button ng-if="!item.MfaRequired" class="md-icon-button md-warn" aria-label="block" \nng-click="vm.mustEnableTfa(true, item, $event)"><md-icon md-font-icon="icon-toggle-switch-off" class="s24"></md-icon>\n</md-button></td><td class="mfa"><md-button ng-if="item.MfaType === 1" class="md-icon-button md-accent" \naria-label="block" ng-click="vm.disableTFA(item, $event)"><md-icon \nng-class="{ \'fadeIn\' : vm.disabling[item.Username] }" md-font-icon="icon-security" class="s16"></md-icon></md-button>\n</td><td class="edit"><md-menu md-position-mode="right bottom"><md-button aria-label="true" class="md-icon-button" \nng-click="$mdMenu.open($event)"><md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button><md-menu-content \nwidth="4" class="agencies"><md-menu-item><md-menu class="dense"><md-button ng-click="$mdMenu.open()"><md-icon \nmd-font-icon="icon-percent"></md-icon>Th\u1EA7u v\xE0 Gi\xE1 b\xE1n</md-button><md-menu-content width="3"><md-menu-item><md-button \nng-click="vm.agencyShareHolder($event, item, 0)">X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.agencyShareHolder($event, item, 1)">WM Casino</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.agencyShareHolder($event, item, 2)">789 Casino</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.agencyShareHolder($event, item, 3)">Bong88</md-button></md-menu-item></md-menu-content></md-menu>\n</md-menu-item><md-menu-item class="aliceblue"><md-menu class="dense"><md-button ng-click="$mdMenu.open()"><md-icon \nmd-font-icon="icon-code-tags"></md-icon>Th\xF4ng s\u1ED1</md-button><md-menu-content width="3" class="aliceblue"><md-menu-item>\n<md-button ng-click="vm.agencyBettingLimit($event, item, 0)">X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</md-button></md-menu-item><md-menu-item>\n<md-button ng-click="vm.agencyBettingLimit($event, item, 1)">WM Casino</md-button></md-menu-item><md-menu-item>\n<md-button ng-click="vm.agencyBettingLimit($event, item, 2)">789 Casino</md-button></md-menu-item><md-menu-item>\n<md-button ng-click="vm.agencyBettingLimit($event, item, 3)">Bong88</md-button></md-menu-item></md-menu-content>\n</md-menu></md-menu-item><md-menu-item class="cadetblue"><md-menu class="dense"><md-button ng-click="$mdMenu.open()">\n<md-icon md-font-icon="icon-chart-pie"></md-icon>Xem th\xF4ng tin th\u1EA7u</md-button><md-menu-content width="3" \nclass="cadetblue"><md-menu-item><md-button ng-click="vm.viewContract($event, item, 0)">X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng</md-button>\n</md-menu-item><md-menu-item><md-button ng-click="vm.viewContract($event, item, 1)">WM Casino</md-button></md-menu-item>\n<md-menu-item><md-button ng-click="vm.viewContract($event, item, 2)">789 Casino</md-button></md-menu-item><md-menu-item>\n<md-button ng-click="vm.viewContract($event, item, 3)">Bong88</md-button></md-menu-item></md-menu-content></md-menu>\n</md-menu-item><md-menu-item ng-if="vm.isCompany"><md-button ng-click="vm.productionManager(item, $event)"><md-icon \nmd-font-icon="icon-cog-box"></md-icon>Qu\u1EA3n l\xFD s\u1EA3n ph\u1EA9m</md-button></md-menu-item><md-menu-item \nng-if="!item.Blocked && vm.hasWritePermission"><md-button ng-click="vm.blockAccount(item, $event)" class="md-warn">\n<md-icon md-font-icon="icon-account-remove"></md-icon>\u0110\xF3ng t\xE0i kho\u1EA3n</md-button></md-menu-item><md-menu-item \nng-if="item.Blocked && vm.hasWritePermission"><md-button ng-click="vm.unblockAccount(item, $event)" class="md-accent">\n<md-icon md-font-icon="icon-account-check"></md-icon>M\u1EDF t\xE0i kho\u1EA3n</md-button></md-menu-item><md-menu-item \nng-if="!item.Suspended && vm.hasWritePermission"><md-button ng-click="vm.suspendAccount(item, $event)" class="md-warn">\n<md-icon md-font-icon="icon-block-helper"></md-icon>Ng\u1EEBng \u0111\u1EB7t c\u01B0\u1EE3c</md-button></md-menu-item><md-menu-item \nng-if="item.Suspended && vm.hasWritePermission"><md-button ng-click="vm.unSuspendAccount(item, $event)" \nclass="md-accent"><md-icon md-font-icon="icon-check-circle"></md-icon>Cho ph\xE9p \u0111\u1EB7t c\u01B0\u1EE3c</md-button></md-menu-item>\n<md-menu-divider ng-if="vm.hasWritePermission && item.PaymentMethod === 1 && vm.resetCreditPermission(item)">\n</md-menu-divider><md-menu-item \nng-if="vm.hasWritePermission && item.PaymentMethod === 1 && vm.resetCreditPermission(item)"><md-button \nng-click="vm.resetCredit(item, $event)" class="md-accent"><md-icon md-font-icon="icon-account-box-outline"></md-icon>\nK\u1EBFt to\xE1n</md-button></md-menu-item><md-menu-divider ng-if="vm.isCompany && vm.hasWritePermission"></md-menu-divider>\n<md-menu-item ng-if="vm.isCompany && vm.hasWritePermission"><md-button ng-click="vm.creditRecovery(item, $event)" \nclass="md-accent"><md-icon md-font-icon="icon-wallet"></md-icon>R\xFAt t\xEDn d\u1EE5ng</md-button></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item ng-if="vm.hasWritePermission"><md-button ng-click="vm.changePassword(item, $event)">\n<md-icon md-font-icon="icon-account-key"></md-icon>\u0110\u1ED5i m\u1EADt kh\u1EA9u</md-button></md-menu-item><md-menu-item \nng-if="vm.hasWritePermission"><md-button ng-click="vm.changeBiography(item, $event)"><md-icon \nmd-font-icon="icon-account-box-outline"></md-icon>Th\xF4ng tin t\xE0i kho\u1EA3n</md-button></md-menu-item></md-menu-content>\n</md-menu></td></tr></tbody></table><div layout="column" layout-gt-sm="row" layout-align="space-between center" \nng-show="!vm.inProcessing"><div class="sum-info">T\xECm th\u1EA5y <b>{{vm.agencies.TotalRecords}}</b>\n t\xE0i kho\u1EA3n th\u1ECFa m\xE3n tr\xEAn t\u1ED5ng s\u1ED1 <b>{{vm.agencies.TotalPages}}</b> trang</div><div class="pagination-button" \nlayout="row" layout-align="end center" ng-if="vm.agencies.TotalPages > 1"><md-button class="md-raised md-primary" \nng-click="vm.setPage(1)" ng-disabled="vm.pager.currentPage === 1"><md-icon md-font-icon="icon-chevron-double-left" \nclass="s20"></md-icon><span>First</span></md-button><md-button class="md-raised md-primary" \nng-repeat="page in vm.pager.pages" ng-class="{\'md-accent\' : vm.pager.currentPage === page}" ng-click="vm.setPage(page)">\n{{page}}</md-button><md-button class="md-raised md-primary" ng-click="vm.setPage(vm.pager.totalPages)" \nng-disabled="vm.pager.currentPage === vm.pager.totalPages"><md-icon md-font-icon="icon-chevron-double-right" \nclass="s20"></md-icon><span>Last</span></md-button></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.inProcessing}"></md-progress-linear></div><script type="text/ng-template" \nid="parentClass"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-ancestors">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>L\u1EDBp cha</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <div layout="row" layout-align="center center" ng-if="!vm.parents.length">\n                        <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                    </div>\n                    <div layout="row" ng-repeat="item in vm.parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">{{item.Username}}</span>\n                            <span flex ng-if="$index !== 0"><a ui-sref="app.account.agency({match: item.Username, type: \'keyword\', page: 1})">{{item.Username}}</a></span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/account/parameter/parameter.html', '<div class="page-layout simple fullwidth my-parameter" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Th\xF4ng s\u1ED1 t\xE0i kho\u1EA3n\n</div></div></div><md-progress-linear class="md-warn" ng-if="vm.submitting"></md-progress-linear><div class="content" \nlayout="column"><div class="simple-table-container md-whiteframe-4dp" layout="column"><div layout="row" \nclass="game-content" ng-repeat="game in vm.myParameters"><div layout="column" class="bet-content first-class"><div \nclass="title">{{game.group[0].GameType | gameXs }}</div><div class="price">Gi\xE1 b\xE1n</div><div class="maxPointPerNr">\nT\u1ED1i \u0111a 1 l\u1EA7n c\u01B0\u1EE3c</div><div class="purchaseLimit">T\u1ED1i \u0111a tr\xEAn 1 s\u1ED1</div><div class="sharedMaxPointPerNr">Tr\u1EA3 th\u01B0\u1EDFng\n</div><div class="">Th\u1EA7u</div><div class="">Ki\u1EC3u th\u1EA7u</div></div><div layout="column" class="bet-content" \nng-repeat="bet in game.group"><div class="title">{{bet.BetType | bet}}</div><div class="price">\n{{bet.Price | currency : \'\' : 0}}</div><div class="maxPointPerNr" ng-if="bet.MaxPointPerNumber !== 999999999999999">\n{{bet.MaxPointPerNumber | currency : \'\' : 0}}</div><div class="maxPointPerNr Infinity" \nng-if="bet.MaxPointPerNumber === 999999999999999">\u221E</div><div class="purchaseLimit">\n{{bet.TotalPointPerNumber | currency : \'\' : 0}}</div><div class="payouts">{{bet.Payouts | currency : \'\' : 0}}</div><div \nclass="payouts">{{bet.Percent}}%</div><div class="payouts"><md-icon md-font-icon="icon-checkbox-marked-outline" \nclass="s12 md-accent" ng-if="bet.Fixed"></md-icon><md-icon md-font-icon="icon-checkbox-blank-outline" \nclass="s12 md-warn" ng-if="!bet.Fixed"></md-icon></div></div></div></div></div></div>');
    $templateCache.put('app/main/account/sub-account/sub-account.html', '<div class="page-layout simple fullwidth sub-account" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="breadcrumb" hide><span \nclass="parent">breadcrumb</span></div><div class="title">Danh s\xE1ch t\xE0i kho\u1EA3n ph\u1EE5</div></div><div class="open-term" \nlayout="row" layout-align="start center"><md-button class="md-raised md-warn" ng-click="vm.create($event)" \nng-if="$mdMedia(\'gt-xs\')"><md-icon md-font-icon="icon-plus" class="s20"></md-icon>T\u1EA0O T\xC0I KHO\u1EA2N PH\u1EE4</md-button>\n<md-button class="md-fab md-warn" ng-click="vm.create($event)" ng-if="$mdMedia(\'xs\')"><md-icon md-font-icon="icon-plus" \nclass="s20"></md-icon></md-button></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp" ng-if="vm.secondaryAccount.length"><table class="simple" \nms-responsive-table><thead><tr><th rowspan="3">T\xE0i kho\u1EA3n</th><th rowspan="3">H\u1ECD v\xE0 t\xEAn</th><th rowspan="3">Tr\u1EA1ng th\xE1i\n</th><th rowspan="3" colspan="2">OTP</th><th rowspan="3">S\u1EEDa</th><th rowspan="3">Ng\xE0y t\u1EA1o</th><th colspan="12">\nQuy\u1EC1n thao t\xE1c</th></tr><tr><th rowspan="2">B\xE1o bi\u1EC3u</th><th colspan="2">T\xE0i kho\u1EA3n</th><th colspan="2">B\u1EA3ng s\u1ED1</th><th \ncolspan="2" ng-if="vm.isCompany">Qu\u1EA3n l\xFD</th><th colspan="2" ng-if="vm.isCompany">L\xF4 Live</th><th rowspan="2" \nng-if="vm.isCompany">Profile</th><th rowspan="2" ng-if="vm.isCompany">H\u1EE7y c\u01B0\u1EE3c</th><th rowspan="2" ng-if="vm.isCompany">\nDealer</th></tr><tr><th>Ch\u1EC9nh s\u1EEDa</th><th>Xem</th><th>Ch\u1EC9nh s\u1EEDa</th><th>Xem</th><th ng-if="vm.isCompany">Ch\u1EC9nh s\u1EEDa</th>\n<th ng-if="vm.isCompany">Xem</th><th ng-if="vm.isCompany">Ch\u1EC9nh s\u1EEDa</th><th ng-if="vm.isCompany">Xem</th></tr></thead>\n<tbody><tr ng-repeat="item in vm.secondaryAccount"><td>{{item.Username}}</td><td>{{item.FullName}}</td><td><md-button \nclass="md-icon-button" ng-if="item.Status === 1" ng-click="vm.disable(item)"><md-icon md-font-icon="icon-check" \nclass="md-accent"></md-icon></md-button><md-button class="md-icon-button" ng-if="item.Status === 0" \nng-click="vm.enable(item)"><md-icon md-font-icon="icon-close" class="md-warn"></md-icon></md-button></td><td \nclass="must-enable-mfa"><md-button ng-if="item.MfaRequired" class="md-icon-button md-accent" aria-label="block" \nng-click="vm.mustEnableTfa(false, item, $event)"><md-icon md-font-icon="icon-toggle-switch-on" class="s24"></md-icon>\n</md-button><md-button ng-if="!item.MfaRequired" class="md-icon-button md-warn" aria-label="block" \nng-click="vm.mustEnableTfa(true, item, $event)"><md-icon md-font-icon="icon-toggle-switch-off" class="s24"></md-icon>\n</md-button></td><td><md-button class="md-icon-button" ng-if="item.MfaType === 1" \nng-click="vm.disableTFA(item, $event)"><md-icon md-font-icon="icon-security" class="md-accent s16"></md-icon>\n</md-button></td><td><md-menu md-position-mode="left bottom"><md-button aria-label="true" class="md-icon-button" \nng-click="$mdMenu.open($event)"><md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button><md-menu-content \nwidth="4"><md-menu-item><md-button ng-click="vm.setPassword(item, $event)"><md-icon md-font-icon="icon-account-key">\n</md-icon>\u0110\u1ED5i m\u1EADt kh\u1EA9u</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.changeBiography(item, $event)">\n<md-icon md-font-icon="icon-account-box-outline"></md-icon>Th\xF4ng tin t\xE0i kho\u1EA3n</md-button></md-menu-item>\n</md-menu-content></md-menu></td><td>{{item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm\'}}</td><td><md-checkbox \nng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 1)" aria-label="Report" ng-checked="vm.checkAcl(item, 1)">\n</md-checkbox></td><td><md-checkbox ng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 2)" \naria-label="Write Account" ng-checked="vm.checkAcl(item, 2)"></md-checkbox></td><td><md-checkbox \nng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 4)" aria-label="Read Account" \nng-checked="vm.checkAcl(item, 4)"></md-checkbox></td><td><md-checkbox ng-disabled="vm.disableAct" \nng-click="vm.updateAcl(item, 8)" aria-label="Write Betting" ng-checked="vm.checkAcl(item, 8)"></md-checkbox></td><td>\n<md-checkbox ng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 16)" aria-label="Read Betting" \nng-checked="vm.checkAcl(item, 16)"></md-checkbox></td><td ng-if="vm.isCompany"><md-checkbox ng-disabled="vm.disableAct" \nng-click="vm.updateAcl(item, 32)" aria-label="Write Game" ng-checked="vm.checkAcl(item, 32)"></md-checkbox></td><td \nng-if="vm.isCompany"><md-checkbox ng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 64)" aria-label="Read Game" \nng-checked="vm.checkAcl(item, 64)"></md-checkbox></td><td ng-if="vm.isCompany"><md-checkbox ng-disabled="vm.disableAct" \nng-click="vm.updateAcl(item, 128)" aria-label="Read Lo live" ng-checked="vm.checkAcl(item, 128)"></md-checkbox></td><td \nng-if="vm.isCompany"><md-checkbox ng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 256)" \naria-label="Write Lo live" ng-checked="vm.checkAcl(item, 256)"></md-checkbox></td><td ng-if="vm.isCompany"><md-checkbox \nng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 512)" aria-label="Profile" ng-checked="vm.checkAcl(item, 512)">\n</md-checkbox></td><td ng-if="vm.isCompany"><md-checkbox ng-disabled="vm.disableAct" \nng-click="vm.updateAcl(item, 1024)" aria-label="Cancel Bet" ng-checked="vm.checkAcl(item, 1024)"></md-checkbox></td><td \nng-if="vm.isCompany"><md-checkbox ng-disabled="vm.disableAct" ng-click="vm.updateAcl(item, 2048)" \naria-label="Cancel Bet" ng-checked="vm.checkAcl(item, 2048)"></md-checkbox></td></tr></tbody></table></div><div \nng-if="!vm.submitting && vm.secondaryAccount.length === 0" layout="column" class="noRecordFound"><div><img \nsrc="/assets/images/etc/norecordfound-icon.png" alt="noRecordFound"></div><div>Ch\u01B0a c\xF3 t\xE0i kho\u1EA3n ph\u1EE5 n\xE0o!</div></div>\n</div></div>');
    $templateCache.put('app/main/account/tag-account/tag-account.html', '<div class="page-layout simple fullwidth tag-account" layout="column"><div class="header md-accent-bg" \nng-class="\'md-\'+vm.board.settings.color+\'-bg\'" layout="column"><div class="header-content" layout="row" \nlayout-align="space-between" layout-wrap flex><div layout="row" layout-align="start center"><div class="title">\nNh\xF3m t\xE0i kho\u1EA3n</div></div></div></div><div class="spinner" layout="column" ng-show="vm.loading"><md-progress-circular \nmd-diameter="96"></md-progress-circular></div><div class="content" layout-wrap layout="row" ng-hide="vm.loading"><div \nclass="list-wrapper" ng-repeat="tag in vm.userTags track by $index"><div class="list md-whiteframe-1dp" layout="column">\n<div class="list-header md-blue-grey-bg" layout="row" layout-align="space-between center"><div class="list-header-name" \nlayout="row"><md-button class="md-icon-button" ng-click="vm.show[$index] = !vm.show[$index]" \nng-class="{\'show\': vm.show[$index]}"><md-icon md-font-icon="icon-menu-right"></md-icon></md-button><div layout="column">\n<span>{{ tag.Username }} ({{ tag.Tags.length }})</span> <span class="full-name">{{ tag.FullName }}</span></div></div>\n<md-menu md-position-mode="right bottom" class="options list-header-option-button"><md-button class="md-icon-button" \nng-click="$mdMenu.open($event)" aria-label="Options"><md-icon md-menu-origin md-font-icon="icon-dots-vertical">\n</md-icon></md-button><md-menu-content class="options-menu-content" width="4"><md-menu-item><md-button \nng-click="vm.removeList($event, tag)" aria-label="Remove List"><md-icon md-font-icon="icon-delete" md-menu-align-target>\n</md-icon><span>Gi\u1EA3i t\xE1n nh\xF3m</span></md-button></md-menu-item></md-menu-content></md-menu></div><div \nclass="list-content" layout="column" ng-show="vm.show[$index]"><div class="list-cards" ms-scroll><div class="carded" \nng-repeat="item in tag.Tags" layout="row" layout-align="space-between center"><div>{{ item.Username }}</div><md-button \nclass="md-icon-button" aria-label="Delete" ng-click="vm.removeItem(tag, item, $event)"><md-icon \nmd-font-icon="icon-delete"></md-icon></md-button></div></div></div><div class="list-footer" ng-show="vm.show[$index]">\n<div class="ms-sb-add-card-form-wrapper" layout="row" ng-show="vm.TagActive && vm.TagActiveIndex === $index"><div \nflex="70"><md-autocomplete md-input-minlength="4" md-search-text="vm.searchTag[$index]" \nmd-search-text-change="vm.searchTextChange(vm.searchTag[$index])" \nmd-items="item in vm.querySearch(vm.searchTag[$index])" md-selected-item-change="vm.selectedItemChange(item)" \nmd-item-text="item.Username" placeholder="Th\xEAm t\xE0i kho\u1EA3n v\xE0o nh\xF3m"><md-item-template><span class="item-title"><strong \nmd-highlight-text="vm.searchTag[$index]">{{item.Username}}</strong></span></md-item-template></md-autocomplete></div>\n<div flex="30" layout="row"><md-button ng-click="vm.addNewCard(tag, $index)" class="md-accent md-icon-button" \naria-label="add" ng-disabled="vm.selectedItem === undefined || vm.submitting"><md-icon \nmd-font-icon="icon-checkbox-marked-circle"></md-icon></md-button><md-button ng-click="vm.newTags($index, false)" \nclass="md-icon-button md-warn" aria-label="cancel"><md-icon md-font-icon="icon-close-circle"></md-icon></md-button>\n</div></div><div class="ms-sb-add-card-button" layout="row" layout-align="start center" \nng-hide="vm.TagActive && vm.TagActiveIndex === $index" aria-hidden="false" ng-click="vm.newTags($index)"><div><i \nclass="icon-plus s20"></i></div><span>Th\xEAm t\xE0i kho\u1EA3n</span></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-show="vm.submitting && vm.TagActiveIndex === $index"></md-progress-linear></div></div></div><div \nclass="new-list-wrapper"><div class="list new-list md-whiteframe-1dp"><div layout="row" class="new-tags" \nng-show="vm.groupActive"><div flex="70"><md-autocomplete md-input-minlength="4" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nplaceholder="Th\xEAm t\xE0i kho\u1EA3n (Tag to)"><md-item-template><span class="item-title"><strong \nmd-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template></md-autocomplete></div><div \nflex="30" layout="row"><md-button class="md-icon-button md-accent" aria-label="Save" ng-click="vm.addNewGroup()" \nng-disabled="vm.selectedItem === undefined || vm.searchText.length < 4"><md-icon \nmd-font-icon="icon-checkbox-marked-circle"></md-icon></md-button><md-button class="md-icon-button md-warn" \naria-label="Cancel" ng-click="vm.newGroup(false)"><md-icon md-font-icon="icon-close-circle"></md-icon></md-button></div>\n</div><md-button class="new-list-form-button" ng-click="vm.newGroup()" ng-hide="vm.groupActive"><div layout="row" \nlayout-align="start center"><i class="icon-plus md-red-bg"></i> <span>T\u1EA1o nh\xF3m m\u1EDBi</span></div></md-button></div></div>\n</div></div>');
    $templateCache.put('app/main/account/template/template.html', '<div class="page-layout simple fullwidth setting-template" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nM\u1EABu c\u1EA5u h\xECnh t\xE0i kho\u1EA3n</div></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><div class="content" layout="column" layout-gt-md="row"><div \nflex-gt-md="30" flex="100"><div class="simple-table-container md-whiteframe-1dp"><table class="simple" \nms-responsive-table><thead><tr><th>T\xEAn</th><th>M\xF4 t\u1EA3</th><th>S\u1EEDa</th><th>Copy</th></tr></thead><tbody><tr \nng-repeat="item in vm.templates"><td>{{item.Title}}</td><td>{{item.Description}}</td><td><md-button \nclass="md-icon-button" ui-sref="app.account.template.modify({id: item.Id, action: \'edit\'})"><md-icon \nmd-font-icon="icon-dots-vertical" class="s16"></md-icon></md-button></td><td><md-button class="md-icon-button" \nui-sref="app.account.template.modify({id: item.Id, action: \'add\'})"><md-icon md-font-icon="icon-content-copy" \nclass="s16"></md-icon></md-button></td></tr></tbody></table></div></div><div flex-gt-md="70" flex="100"><div \nclass="simple-table-container md-whiteframe-1dp"><table class="table simple task-list" ms-responsive-table><thead><tr>\n<th>M\xF4 t\u1EA3</th><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>Gi\xE1</th><th>Tr\u1EA3 th\u01B0\u1EDFng</th><th>Tr\u1EA1ng th\xE1i</th><th>Kh\u1EDFi t\u1EA1o</th><th>\nK\u1EBFt th\xFAc</th></tr></thead><tbody><tr ng-repeat="item in vm.taskLists"><td>{{ item.Description | TaskDescription }}</td>\n<td>{{ item.GameType | gameXs }}</td><td>{{ item.BetType | bet }}</td><td>{{ item.Price | currency : \'\' : 0 }}</td><td>\n{{ item.Payouts | currency : \'\' : 0 }}</td><td>{{ item.Status | Task }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>{{ item.UpdatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}\n</td></tr></tbody><tfoot ng-if="vm.more"><tr><td colspan="8" ng-click="vm.loadMore()">C\xF2n n\u1EEFa</td></tr></tfoot></table>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="vm.loadingTask"></md-progress-linear></div></div>\n</div></div>');
    $templateCache.put('app/main/dashboard/dialog/ip.html', '<md-dialog aria-label="Th\xF4ng tin IP" class="view-ip"><form><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<h2>Th\xF4ng tin IP: {{ipLookup.ip}}</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-window-close" class="s20"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content" layout="column"><div layout="row" class="data" ng-repeat="(key, value) in ipLookup.data"><div \nclass="title">{{key}}</div><div class="content" ng-if="key !== \'latitude\' && key !== \'longitude\'">{{value}}</div><div \nclass="content" ng-if="key === \'latitude\' || key === \'longitude\'"><a target="_blank" \nhref="https://maps.google.com/?q={{ipLookup.data.latitude}},{{ipLookup.data.longitude}}">{{value}}</a></div></div></div>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="submitting"></md-progress-linear>\n</md-dialog-content></form></md-dialog>');
    $templateCache.put('app/main/dashboard/dialog/online.html', '<md-dialog aria-label="Thay \u0111\u1ED5i th\xF4ng tin m\u1EDF th\u01B0\u1EDFng" class="online"><form><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Danh s\xE1ch tr\u1EF1c tuy\u1EBFn</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-window-close" class="s20"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content><div class="md-dialog-content" layout="column"><div layout="row" class="user-group" \nlayout-align="center center"><div class="group company" ng-click="listDownline()" \nng-class="{disabled: currentLevel !== undefined}">T\u1EA5t c\u1EA3: <span>{{TotalOnline}}</span></div><div class="group" \nng-repeat="group in counterGroupByLevel" ng-click="listDownline(group.Level)" \nng-class="{manager: group.Level === 2, super: group.Level === 3, master: group.Level === 4, agent: group.Level === 5, member: group.Level === 9, disabled: currentLevel !== undefined && currentLevel !== group.Level }">\n{{ group.Level | group }}: <span>{{ group.Count | currency : \'\' : 0 }}</span></div></div><div layout="column" \nclass="content"><table class="simple" ms-responsive-table><thead><tr><th>Username</th><th>Full Name</th><th>Group</th>\n<th class="">IP</th><th class="">Last Online</th><th class="">User Agent</th></tr></thead><tfoot><tr \nng-if="CustomerOnline.length === 0"><td colspan="6">Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u</td></tr><tr ng-if="hasData" class="has-data"><td \ncolspan="6" class="text-right"><span ng-click="listDownline(currentLevel, currentPage + 1)">Trang ti\u1EBFp</span></td></tr>\n</tfoot><tbody><tr ng-repeat="person in CustomerOnline"><td class="">{{person.Username}}</td><td class="">\n{{person.FullName}}</td><td class="">{{person.Level | group}}</td><td class="ip"><a style="cursor: pointer;" \nng-click="viewIp(person.IP)">{{ person.IP }}</a></td><td class="">\n{{person.LastOnlineAt | amDateFormat : \'DD/MM HH:mm\' }}</td><td class=""><md-tooltip md-direction="top">\n{{person.UserAgent}}</md-tooltip>{{person.UserAgentHelper}}</td></tr></tbody></table></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-show="submitting"></md-progress-linear></md-dialog-content></form>\n</md-dialog>');
    $templateCache.put('app/main/announcements/views/dialog.html', '<md-dialog class="popup" aria-label="One"><md-dialog-content><div class="md-dialog-content"><p ng-bind-html="message">\n</p></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="cancel()" class="md-warn">OK\n</md-button></md-dialog-actions></md-dialog>');
    $templateCache.put('app/main/legendary/priceBoard/priceBoard.html', '<div class="page-layout simple fullwidth priceBoard" layout="column"><md-sidenav class="main-sidenav md-sidenav-right" \nmd-component-id="main-sidenav" ng-include="\'app/main/legendary/priceBoard/sideNavs/main-sidenav.html\'" ms-scroll \nms-sidenav-helper></md-sidenav><div class="spinner" layout="column" ng-hide="vm.allSet"><md-progress-circular \nmd-diameter="96"></md-progress-circular></div><div class="content" layout="column" ng-hide="!vm.allSet"><div \nclass="navigation-board-md md-whiteframe-1dp" layout="row" layout-align="space-between center" \nng-hide="$mdMedia(\'gt-md\')"><div class="text-title" layout="row" layout-align="start center"><span>\nK\u1EF3: {{ vm.priceBoard.Term }}</span> <span>{{ vm.priceBoard.GameType | legendGame }}</span> <span>\n{{ vm.priceBoard.BetType | bet : false : vm.priceBoard.GameType }}</span></div><div layout="row" \nlayout-align="end center"><md-button ng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.history }" ng-disabled="vm.history"><md-icon \nmd-font-icon="icon-refresh" class="s20"></md-icon></md-button><md-menu><md-button md-no-ink ng-click="$mdMenu.open()" \nclass="md-accent countdown" ng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }" \nng-disabled="vm.history">{{vm.timer}}<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button>\n<md-menu-content width="4" ng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" \nclass="md-warn">T\u1EAFt</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button \nng-click="vm.refreshEvent(5)" class="md-accent">5 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.refreshEvent(10)" class="md-accent">10 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.refreshEvent(30)" class="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.refreshEvent(60)" class="md-accent">60 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu><div \nclass="filter-button"><md-button class="md-icon-button" ng-click="vm.toggleSidenav(\'main-sidenav\')"><md-icon \nmd-font-icon="icon-filter"></md-icon></md-button></div></div></div><div class="navigation-board md-whiteframe-1dp" \nlayout="column" ng-show="$mdMedia(\'gt-md\')"><div layout="row"><md-button class="md-icon-button history" \nng-class="{\'md-warn md-raised\': vm.history}" ng-click="vm.historyActive()"><md-icon md-font-icon="icon-history" \nclass="s16"></md-icon></md-button><md-select ng-model="vm.priceBoard.Date" placeholder="date" \nng-change="vm.changeDate()" ng-if="vm.history"><md-option ng-repeat="date in vm.dateHistory" value="{{date}}" \nng-selected="date === vm.dateHistory[0]">{{date}}</md-option></md-select><md-select ng-model="vm.selected.GameType" \nng-change="vm.changeGame()" aria-label="Change Game"><md-option ng-repeat="game in vm.aTerms" \nvalue="{{ game.GameType }}" ng-selected="game.GameType == 0">{{ game.GameType | legendGame }}</md-option></md-select>\n<md-select ng-model="vm.selected.Term" ng-change="vm.changeTerm()" aria-label="Change Term" \nng-if="vm.history && vm.termHistories.length"><md-option ng-repeat="term in vm.termHistories" value="{{ term.Term }}" \nng-selected="term.Term === vm.termHistories[0].Term">{{ term.Term }}</md-option></md-select><div flex \nclass="select-bet"><md-button ng-repeat="bet in vm.betTypes" ng-model="vm.selected.BetType" \nng-click="vm.changeBet(bet)" ng-class="{\'md-accent md-raised\' : bet.BetType === vm.priceBoard.BetType }">\n{{ bet.BetType | bet : false : vm.priceBoard.GameType }}</md-button></div></div><div layout="row" \nclass="padding-left-12"><md-select ng-model="vm.viewPoint" ng-change="vm.sortNumber()" aria-label="View Point" \nng-if="vm.isCompany"><md-option ng-repeat="view in vm.viewPoints" value="{{view.id}}" ng-selected="view.id === 1">\n{{view.name}}</md-option></md-select><md-select ng-model="vm.selected.sort" aria-label="true" \nng-change="vm.sortNumber()" aria-label="Sort Number"><md-option ng-repeat="sort in vm.sortDefs" value="{{ sort.id }}" \nng-selected="sort.id == \'risk\'">{{ sort.name }}</md-option></md-select><md-select ng-model="vm.denominator" \naria-label="true"><md-option ng-repeat="denominator in vm.denominators" value="{{denominator}}" \nng-selected="denominator === 1">{{ denominator | currency : \'\' : 0 }}</md-option></md-select><md-button \nng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.history }" ng-disabled="vm.history"><md-icon \nmd-font-icon="icon-refresh" class="s20"></md-icon></md-button><md-menu><md-button md-no-ink ng-click="$mdMenu.open()" \nclass="md-accent countdown" ng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }" \nng-disabled="vm.history">{{vm.timer}}<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button>\n<md-menu-content width="4" ng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" \nclass="md-warn">T\u1EAFt</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button \nng-click="vm.refreshEvent(5)" class="md-accent">5 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.refreshEvent(10)" class="md-accent">10 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.refreshEvent(30)" class="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.refreshEvent(60)" class="md-accent">60 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu><md-menu \nmd-position-mode="left bottom" ng-if="vm.isCompany && vm.hasWritePermission"><md-button \nclass="md-icon-button md-accent" aria-label="menu" ng-click="$mdMenu.open($event)" ng-disabled="vm.history"><md-icon \nmd-font-icon="icon-cog" class="s20"></md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button \nng-click="vm.openAll($event)" class="md-primary"><md-icon md-font-icon="icon-open-in-new" class="s20"></md-icon>\nM\u1EDF to\xE0n b\u1ED9</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button \nng-click="vm.closeAll()" class="md-warn"><md-icon md-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng to\xE0n b\u1ED9\n</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.closeLotto()" class="md-warn"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng l\xF4</md-button></md-menu-item></md-menu-content></md-menu><span \nclass="menu">K\u1EF3: <b>{{vm.priceBoard.Term}}</b></span> <span class="menu">\u0110\xF3ng l\xF4: <b>\n{{ vm.priceBoard.deadLine | amFromUnix | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu">\u0110\xF3ng \u0111\u1EC1: <b>\n{{ vm.priceBoard.deadLineJP | amFromUnix | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu">T\u1ED5ng ti\u1EC1n: <b>\n{{ vm.viewPoint === \'1\' ? vm.odds.Income : vm.odds.TotalIncome | currency : \'\' : 0 }}</b></span> <span class="menu">\nT\u1ED5ng \u0111i\u1EC3m: <b>{{ vm.viewPoint === \'1\' ? vm.priceBoard.point : vm.priceBoard.totalPoint | currency : \'\' : 0 }}</b></span>\n <span class="menu">Gi\xE1 trung b\xECnh: <b>{{ vm.priceBoard.averagePrice | currency : \'\' : 0 }}</b></span></div></div><div \nclass="number-board md-whiteframe-1dp" layout="column"><div layout="row" layout-align="space-between center" \nclass="number-header"><div layout="row" ng-if="vm.hasWritePermission"><div layout="row" class="price-setting" \nng-if="$mdMedia(\'gt-md\') && vm.allowChangePrice"><md-select ng-model="vm.priceStep" aria-label="dropdown" \nmd-container-class=""><md-option ng-repeat="price in vm.steps" value="{{price}}" ng-selected="price === vm.steps[0]">\n{{price}}</md-option></md-select><div class="input-price"><input type="text" autocomplete="off" \nng-model="vm.pricesetup" placeholder="Gi\xE1"></div><md-button type="submit" class="btn-w-xs" ng-disabled="!vm.pricesetup" \nng-click="vm.priceSetting()">C\xE0i \u0111\u1EB7t gi\xE1</md-button><md-button class="" ng-hide="vm.setupKeyNumber" \nng-click="vm.collectionNumber($event)">Ch\u1ECDn nhanh</md-button><md-button class="md-warn" ng-click="vm.cancelChecked()">\nH\u1EE7y</md-button><div layout="row" ng-hide="vm.setupKeyNumber"><div ng-init="showform = 0" ng-show="showform === 0">\n<md-button class="btn-w-xs" ng-click="showform = 1">Nh\u1EADp s\u1ED1</md-button></div><div class="input-number" \nng-show="showform !== 0"><input type="text" id="price-setup" class="number-arr" autocomplete="off" placeholder="D\xE3y s\u1ED1" \nng-model="vm.keynumber" ng-keyup="vm.inputKeyNumber($event)"></div><div ng-show="showform !== 0"><md-button \nclass="btn-w-xs" ng-click="vm.submitKeyNumber()">Nh\u1EADp s\u1ED1</md-button><md-button class="btn-w-xs md-warn" \nng-click="showform = 0; vm.keynumber = \'\'">\u0110\xF3ng</md-button></div></div></div><div layout="column" layout-gt-md="row" \nng-if="vm.show3D" class="show3d"><div layout="column" layout-align="space-between center"><div class="title">H\xE0ng tr\u0103m\n</div><div layout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 20}" ng-click="vm.createNumber3D(20)">\n0</span> <span class="label" ng-class="{\'active\': vm.filterVal === 21}" ng-click="vm.createNumber3D(21)">1</span> <span \nclass="label" ng-class="{\'active\': vm.filterVal === 22}" ng-click="vm.createNumber3D(22)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 23}" ng-click="vm.createNumber3D(23)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 24}" ng-click="vm.createNumber3D(24)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 25}" ng-click="vm.createNumber3D(25)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 26}" ng-click="vm.createNumber3D(26)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 27}" ng-click="vm.createNumber3D(27)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 28}" ng-click="vm.createNumber3D(28)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 29}" ng-click="vm.createNumber3D(29)">9</span></div></div><div layout="column">\n<div class="title">H\xE0ng ch\u1EE5c</div><div layout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 10}" \nng-click="vm.createNumber3D(10)">0</span> <span class="label" ng-class="{\'active\': vm.filterVal === 11}" \nng-click="vm.createNumber3D(11)">1</span> <span class="label" ng-class="{\'active\': vm.filterVal === 12}" \nng-click="vm.createNumber3D(12)">2</span> <span class="label" ng-class="{\'active\': vm.filterVal === 13}" \nng-click="vm.createNumber3D(13)">3</span> <span class="label" ng-class="{\'active\': vm.filterVal === 14}" \nng-click="vm.createNumber3D(14)">4</span> <span class="label" ng-class="{\'active\': vm.filterVal === 15}" \nng-click="vm.createNumber3D(15)">5</span> <span class="label" ng-class="{\'active\': vm.filterVal === 16}" \nng-click="vm.createNumber3D(16)">6</span> <span class="label" ng-class="{\'active\': vm.filterVal === 17}" \nng-click="vm.createNumber3D(17)">7</span> <span class="label" ng-class="{\'active\': vm.filterVal === 18}" \nng-click="vm.createNumber3D(18)">8</span> <span class="label" ng-class="{\'active\': vm.filterVal === 19}" \nng-click="vm.createNumber3D(19)">9</span></div></div><div layout="column"><div class="title">H\xE0ng \u0111\u01A1n v\u1ECB</div><div \nlayout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 0}" ng-click="vm.createNumber3D(0)">0</span> \n<span class="label" ng-class="{\'active\': vm.filterVal === 1}" ng-click="vm.createNumber3D(1)">1</span> <span \nclass="label" ng-class="{\'active\': vm.filterVal === 2}" ng-click="vm.createNumber3D(2)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 3}" ng-click="vm.createNumber3D(3)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 4}" ng-click="vm.createNumber3D(4)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 5}" ng-click="vm.createNumber3D(5)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 6}" ng-click="vm.createNumber3D(6)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 7}" ng-click="vm.createNumber3D(7)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 8}" ng-click="vm.createNumber3D(8)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 9}" ng-click="vm.createNumber3D(9)">9</span></div></div><md-button \nclass="md-warn clear3d" ng-click="vm.createNumber3D(undefined)" ng-if="vm.filterVal !== undefined">X\xF3a b\u1ED9 l\u1ECDc\n</md-button></div><div layout="row" ng-if="vm.show4D" class="show4d"><md-button class="md-raised" ns-popover \nns-popover-template="popooxx" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OOXX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxxoo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button><md-button class="md-warn" \nng-click="vm.createNumber4D(undefined)" ng-if="vm.cond4d !== undefined">X\xF3a b\u1ED9 l\u1ECDc</md-button></div></div><div \nlayout="row" ng-if="vm.hasWritePermission && vm.isCompany && $mdMedia(\'gt-md\')"><md-button class="md-warn" \nng-click="vm.companyBoard($event)">Xem h\xE0ng</md-button></div></div><div class="number-content-md" \nng-hide="$mdMedia(\'gt-md\')"><div class="number" ng-repeat="number in vm.numbers | limitTo: 100" \nng-class="{\'closed\' : number.stop}" ng-click="vm.showNumberSheet(number, $event)"><div class="number-content" \nng-class="{\'change-price\': number.changePrice}" layout="column"><div layout="row"><div class="badge badge-white agency" \nng-class="{\'big\': vm.show3D || vm.show4D }">{{number.num}}</div><div flex class="price">\n{{ number.price | currency : \'\' : 0}}</div></div><div layout="column" class="risk" layout-align="space-between center">\n<span>{{vm.viewPoint === \'1\' ? number.point : number.totalPoint | currency : \'\' : 0}}</span> <span \nng-class="{\'warn\': number.risk < 0}">\n{{ vm.viewPoint === \'1\' ? number.risk/vm.denominator : number.totalRisk/vm.denominator | currency : \'\' : 0}}</span>\n</div></div></div></div><div class="number-content" ng-show="$mdMedia(\'gt-md\')"><table class="table-number" \nms-responsive-table><tbody><tr ng-if="vm.allowChangePrice"><td></td><td><md-checkbox ng-model="vm.checkbox.col0" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col1" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col2" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col3" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col4" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col5" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col6" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col7" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col8" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col9" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row0" aria-label="checkbox" ng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice">\n</md-checkbox></td><td colspan="10" rowspan="10" ng-class="{\'disabled\': !vm.priceBoard.allowBetting }"><div \nclass="number" ng-repeat="number in vm.numbers | limitTo: 100" \nng-class="{\'active\': number.active, \'closed\' : number.stop}"><div class="number-content" \nng-class="{\'change-price\': number.changePrice}" layout="row"><div flex="25" flex-md="40" layout="column" \nlayout-align="space-between center"><div><span ng-if="vm.isCompany && vm.hasWritePermission && !vm.history" \nclass="badge badge-white" ng-class="{\'big\': vm.show3D || vm.show4D }" ng-click="vm.closeNumber($event, number)">\n{{number.num}}</span> <span ng-if="!vm.isCompany || !vm.hasWritePermission || vm.history" \nclass="badge badge-white agency" ng-class="{\'big\': vm.show3D || vm.show4D }">{{number.num}}</span></div><div \nclass="number-share" ng-if="!vm.isCompany"><span class="max-percent" ng-if="number.MaxPercent !== undefined">\n{{ number.MaxPercent }}</span><md-icon class="setting s16" ng-if="vm.hasWritePermission" \nng-click="vm.customPercent($event, number)" md-font-icon="icon-percent"></md-icon></div><div class="price-exception" \nng-if="vm.isCompany && vm.hasWritePermission && vm.allowChangePrice"><span class="exception" \nng-class="{\'postitive\' : number.PriceException > 0}" \nng-if="number.PriceException !== undefined && number.PriceException !== 0">{{ number.PriceException }}</span><md-icon \nclass="setting s16" ng-if="vm.hasWritePermission" ng-click="vm.priceException($event, number)" \nmd-font-icon="icon-auto-fix"></md-icon></div></div><div flex="75" flex-md="60" layout="column"><div layout="row" \nlayout-align="space-between center" class="price"><md-icon md-font-icon="icon-plus" class="s20" \nng-click="vm.changePriceNumber(number, \'add\')" \nng-if="vm.hasWritePermission && $mdMedia(\'gt-md\') && vm.allowChangePrice"></md-icon><span \nng-click="vm.settingPrice($event, number)" ng-if="vm.allowChangePrice">{{ number.price | currency : \'\' : 0}}</span> \n<span ng-if="!vm.allowChangePrice">{{ number.price | currency : \'\' : 0}}</span><md-icon md-font-icon="icon-minus" \nclass="s20" ng-click="vm.changePriceNumber(number, \'remove\')" \nng-if="vm.hasWritePermission && $mdMedia(\'gt-md\') && vm.allowChangePrice"></md-icon></div><div class="risk" \nlayout="column" layout-align="space-between center" ng-click="vm.viewBetting($event, number)"><span>\n{{vm.viewPoint === \'1\' ? number.point : number.totalPoint | currency : \'\' : 0}}</span> <span \nng-class="{\'warn\': number.risk < 0}">\n{{ vm.viewPoint === \'1\' ? number.risk/vm.denominator : number.totalRisk/vm.denominator | currency : \'\' : 0}}</span>\n</div></div></div></div></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row1" aria-label="checkbox" \nng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row2" aria-label="checkbox" ng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice">\n</md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row3" aria-label="checkbox" \nng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row4" aria-label="checkbox" ng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice">\n</md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row5" aria-label="checkbox" \nng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row6" aria-label="checkbox" ng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice">\n</md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row7" aria-label="checkbox" \nng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row8" aria-label="checkbox" ng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice">\n</md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row9" aria-label="checkbox" \nng-change="vm.checkboxEvent()" ng-if="vm.allowChangePrice"></md-checkbox></td></tr></tbody></table></div></div></div>\n<script type="text/ng-template" id="popooxx"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OOXX</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popooxx" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OXXO</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popoxxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OXOX</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popoxox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XOXO</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxoxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XOOX</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxoox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XXOO</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxxoo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/legendary/term/term.legend.html', '<div class="page-layout simple fullwidth legend-term" layout="column" layout-align="start center"><div class="content" \nlayout="column"><div layout="row" layout-align="space-between center" class="content-titles"><h1>Qu\u1EA3n l\xFD k\u1EF3</h1>\n<md-button class="md-warn md-icon-button" ng-class="{\'md-raised\': vm.history}" ng-click="vm.historyActive()"><md-icon \nmd-font-icon="icon-history" class="s20"></md-icon></md-button><div flex></div><md-button class="md-accent" \nui-sref="app.legendary.term.open">M\u1EDF k\u1EF3 m\u1EDBi</md-button></div><div layout="row" class="content-titles" \nng-if="vm.history"><md-select ng-model="vm.Date" placeholder="date" ng-change="vm.changeDate()"><md-option \nng-repeat="date in vm.dateHistory" value="{{date}}" ng-selected="date === vm.dateHistory[0]">{{date}}</md-option>\n</md-select><md-button class="md-accent" ng-class="{\'md-raised\': item.GameType === vm.GameType }" \nng-click="vm.changeGame(item.GameType)" ng-repeat="item in vm.GameTypes">{{ item.label }}</md-button></div><div \nclass="spinner" layout="column" layout-align="center center" ng-hide="vm.legendTerms.length"><md-progress-circular \nmd-diameter="96"></md-progress-circular></div><div layout="column" layout-gt-md="row" layout-wrap class="term-wrap"><div\n class="content-wrapper" ng-repeat="item in vm.legendTerms" flex-gt-md="50" flex="100"><div class="term-by-game" \nlayout="column"><div class="term-header" layout="row" layout-align="space-between center"><md-menu \nmd-position-mode="left bottom"><md-button aria-label="Open menu" class="md-icon-button" ng-click="$mdMenu.open($event)">\n<md-icon md-font-icon="icon-dots-vertical" class="s20"></md-icon></md-button><md-menu-content width="4"><md-menu-item>\n<md-button ng-click="vm.termHistory(item, $event)"><md-icon md-font-icon="icon-history" class="s16"></md-icon>\nL\u1ECBch s\u1EED thao t\xE1c</md-button></md-menu-item><md-menu-divider ng-if="item.Status === 9 && vm.hasWritePermission">\n</md-menu-divider><md-menu-item ng-if="item.Status === 9 && vm.hasWritePermission"><md-button \nng-click="vm.closing(item, $event)" class="md-warn"><md-icon md-font-icon="icon-check-circle" class="s16"></md-icon>\nK\u1EBFt s\u1ED5 l\u1EA1i</md-button></md-menu-item></md-menu-content></md-menu><div class="name">{{ item.GameType | legendGame }}\n</div><div flex></div><div class="status" \nng-class="{\'open\': item.Status === 1, \'closing\': item.Status === 2, \'closing_fail\': item.Status === 3, \'closed\': item.Status === 9 }">\n{{ item.Status | termStatus }}</div><md-menu md-position-mode="left bottom"><md-button class="md-icon-button md-accent" \naria-label="menu" ng-click="$mdMenu.open($event)" ng-disabled="vm.history"><md-icon md-font-icon="icon-cog" class="s20">\n</md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button ng-click="vm.openAll(item, $event)" \nclass="md-primary"><md-icon md-font-icon="icon-open-in-new" class="s20"></md-icon>M\u1EDF to\xE0n b\u1ED9</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.closeAll(item, $event)" class="md-warn">\n<md-icon md-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng to\xE0n b\u1ED9</md-button></md-menu-item><md-menu-item><md-button\n ng-click="vm.closeLotto(item, $event)" class="md-warn"><md-icon md-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng l\xF4\n</md-button></md-menu-item></md-menu-content></md-menu><md-progress-linear class="md-warn" md-mode="indeterminate" \nng-show="item.Status === 2 || item.Status === 3 || item.Status === 10"></md-progress-linear></div><div \nclass="term-content"><ul><li layout="row" layout-align="space-between center"><div class="label">S\u1ED1 k\u1EF3</div><div \nclass="value">{{ item.Term | term }}</div></li><li layout="row" layout-align="space-between center"><div class="label">\nTh\u1EDDi gian m\u1EDF th\u01B0\u1EDFng</div><div class="value"><input mdc-datetime-picker="" week-start="1" date="true" time="true" \nauto-ok="true" click-outside-to-close="true" type="text" short-time="true" min-date="vm.minDate" minute-steps="1" \nformat="DD-MM-YYYY H:mm" placeholder="Th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng" show-todays-date="false" ng-model="item.DrawResult" \nclass="md-input" ng-change="vm.changeDrawResultAt(item)" readonly="readonly"></div></li><li layout="row" \nlayout-align="space-between center"><div class="label">\u0110\xF3ng \u0111\u1EC1</div><div class="value"><input mdc-datetime-picker="" \nweek-start="1" date="true" time="true" auto-ok="true" click-outside-to-close="true" type="text" short-time="true" \nmin-date="vm.minDate" minute-steps="1" format="DD-MM-YYYY H:mm" placeholder="Th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng" show-todays-date \nng-model="item.Close.deadLineJack" class="md-input" ng-change="vm.updateGameAutoClose(item, \'de\')" readonly="readonly">\n</div></li><li layout="row" layout-align="space-between center"><div class="label">\u0110\xF3ng l\xF4</div><div class="value">\n<input mdc-datetime-picker="" week-start="1" date="true" time="true" auto-ok="true" click-outside-to-close="true" \ntype="text" short-time="true" min-date="vm.minDate" minute-steps="1" format="DD-MM-YYYY H:mm" \nplaceholder="Th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng" show-todays-date ng-model="item.Close.deadLineBet" class="md-input" \nng-change="vm.updateGameAutoClose(item, \'lo\')" readonly="readonly"></div></li></ul></div><div class="term-footer" \nlayout="row" layout-align="space-between center"><md-button class="md-accent" aria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" \nng-click="vm.updateResult($event, item)" ng-show="item.GameType === 0">K\u1EBFt qu\u1EA3</md-button><md-button class="md-accent" \naria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" ng-click="vm.updateResultSouthern($event, item)" ng-show="item.GameType === 1">K\u1EBFt qu\u1EA3\n</md-button><div flex></div><md-button class="md-warn" aria-label="K\u1EBFt s\u1ED5" \nng-if="item.Status === 1 && item.BookKeepingReady" ng-click="vm.closing(item, $event)">K\u1EBFt s\u1ED5</md-button><md-button \nclass="md-warn" aria-label="K\u1EBFt s\u1ED5 l\u1EA1i" ng-if="item.Status === 9" ng-click="vm.closing(item, $event)" hide>K\u1EBFt s\u1ED5 l\u1EA1i\n</md-button></div></div></div></div></div></div>');
    $templateCache.put('app/main/legend-casino/area/area.html', '<div class="page-layout simple fullwidth area-managing" layout="column"><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-show="vm.submitting"></md-progress-linear><div class="content" layout="column"><div \nclass="simple-table-container legend-wrapper" layout="column"><div class="area-wrap" ng-repeat="item in vm.areas"><div \nclass="area-content ms-responsive-table-wrapper" layout="row"><div class="area-round-realtime"><table class="simple" \nms-responsive-table><thead><tr><th colspan="3">{{ item.CurrentGame.GameNumber}}-{{item.CurrentGame.GameRound}}</th></tr>\n<tr><th>Lo\u1EA1i</th><th>S\u1ED1 L\u01B0\u1EE3ng</th><th>Ti\u1EC1n</th></tr></thead><tbody><tr ng-repeat="item in vm.RoundData" \nng-click="vm.gamesBettingDetails(item, $event, item.BetType)"><td>{{ item.BetType | LegendBet }}</td><td>\n{{ item.Quantity }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng</td><td>\n{{vm.RoundData | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.RoundData | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td></tr></tfoot></table></div><div \nclass="area-round-realtime game-stats" \nng-if="vm.IncludedGameStats && vm.SumByShoe.length && vm.GameNumber !== undefined && (vm.GameRound === undefined || vm.GameRound === \'\')">\n<table class="simple" ms-responsive-table><thead><tr><th colspan="4" class="warn">\n{{ vm.GamesByAreaNumbers[0].GameNumber}}</th></tr><tr><th>Lo\u1EA1i</th><th>S\u1ED1 L\u01B0\u1EE3ng</th><th>Ti\u1EC1n</th><th class="text-right">\nTh\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.SumByShoe"><td>{{ item.BetType | LegendBet }}</td><td>\n{{ item.Quantity }}</td><td>\n{{ item.Amount/1000 | currency : \'\' : 0 }} ({{(item.Amount)/(vm.SumByShoe | sumOfValue : \'Amount\') | percentage : 1 }})\n</td><td class="text-right" ng-class="{\'warn\': (item.WinLose) < 0}">{{ item.WinLose/1000 | currency : \'\' : 0 }}</td>\n</tr></tbody><tfoot><tr><td>T\u1ED5ng</td><td>{{ vm.SumByShoe | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{ (vm.SumByShoe | sumOfValue : \'Amount\')/1000 | currency : \'\' : 0}}</td><td class="text-right">\n{{ (vm.SumByShoe | sumOfValue : \'WinLose\')/1000 | currency : \'\' : 0}}</td></tr></tfoot></table></div><div \nclass="area-round-realtime stats" \nng-if="vm.IncludedGameStats && vm.SumByShoe.length && vm.GameNumber !== undefined && (vm.GameRound === undefined || vm.GameRound === \'\')">\n<table class="simple" ms-responsive-table><thead><tr><th colspan="2" class="warn">\n{{ vm.GamesByAreaNumbers[0].GameNumber}}</th></tr><tr><th>K\u1EBFt qu\u1EA3</th><th>S\u1ED1 L\u01B0\u1EE3ng</th></tr></thead><tbody><tr><td>CH\u1EB4N\n</td><td>{{vm.even}}</td></tr><tr><td>L\u1EBA</td><td>{{vm.odd}}</td></tr><tr><td>R0</td><td>{{vm.sum_arr[0]}}</td></tr><tr>\n<td>R1</td><td>{{vm.sum_arr[1]}}</td></tr><tr><td>R2</td><td>{{vm.sum_arr[2]}}</td></tr><tr><td>R3</td><td>\n{{vm.sum_arr[3]}}</td></tr><tr><td>R4</td><td>{{vm.sum_arr[4]}}</td></tr></tbody></table></div><div class="area-dealer" \nlayout="column"><div class="dealer-avatar"><img ng-src="{{ item.Dealer.Avatar }}" alt="{{item.Dealer.FullName}}"></div>\n<div class="dealer-name" layout="column"><p>{{ item.Dealer.FullName }}</p></div></div><div class="area-data" \nlayout="column" flex layout-align="space-between start"><div class="table-info" layout="column"><div layout="row" \nlayout-wrap><div>Number: <b>{{item.AreaNumber}}</b></div><div>Current: <b>\n{{item.CurrentGame.GameNumber}}.{{item.CurrentGame.GameRound}}</b></div><div>MaxRound: <b>{{item.MaxRound}}</b></div>\n<div>BetSeconds: <b>{{item.BetSeconds}}</b></div><div>Status: <b>{{item.Status | areaStatus}}</b></div></div><div \nlayout="row" layout-wrap><div>Name: <b>{{item.Name}}</b></div><div>Description: <b>{{item.Description}}</b></div><div>\nNote: <b>{{item.Note}}</b></div></div></div><div class="roller-road"><div class="roller-bg"><ul><li \nng-repeat="i in vm.GameResults track by $index"><div class="element">{{i}}</div></li></ul></div></div></div><div \nclass="setting" layout="column" layout-align="space-between start"><md-menu md-position-mode="right bottom"><md-button \naria-label="true" class="md-icon-button" ng-click="$mdMenu.open($event)"><md-icon md-font-icon="icon-dots-horizontal">\n</md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button ng-click="vm.areaUpdateStatus(item, $event)">\nC\u1EADp nh\u1EADt tr\u1EA1ng th\xE1i</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.areaUpdateProperties(item, $event)">\nC\u1EADp nh\u1EADt thu\u1ED9c t\xEDnh</md-button></md-menu-item></md-menu-content></md-menu></div></div></div></div><div \nclass="simple-table-container" layout="column"><div class="games-header" layout="row"><div \nclass="padding-right-8 text-bold">Chi ti\u1EBFt v\xE1n game:</div><div>Table: <b>100</b></div><div class="padding-left-8">\n<label>Ng\xE0y</label><md-datepicker ng-model="vm.reportDate" md-open-on-focus md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" name="dateField"></md-datepicker></div><div class="padding-left-8"><label><input type="text" \nclass="game" placeholder="Game Number" ng-model="vm.GameNumber"></label></div><div class="padding-left-8"><label><input \ntype="text" class="game" placeholder="Game Round" ng-model="vm.GameRound"></label></div><div class="padding-left-8">\n<md-checkbox ng-model="vm.IncludedGameStats" aria-label="IncludedGameStats">Stats</md-checkbox></div><div><md-button \nclass="md-raised md-accent" ng-click="vm.GamesByAreaNumber()">OK</md-button></div><div class="padding-left-8">\n<md-checkbox ng-model="vm.AutoReload" class="md-warn" aria-label="AutoReload">Auto</md-checkbox></div><div \nclass="padding-left-8" ng-if="!vm.IncludedGameStats"><md-checkbox ng-model="vm.showSnapshot" class="md-warn" \naria-label="showSnapshot">Snapshot</md-checkbox></div><div class="padding-left-8" ng-if="!vm.IncludedGameStats">\n<md-button class="md-accent" ng-disabled="vm.GamesByAreaNumbers.length === 0" ng-click="vm.areaPlayback($event);">\nplayback</md-button></div><div class="padding-left-8" hide><label><input type="number" class="interval" \nplaceholder="Game Round" ng-model="vm.Interval"></label></div></div><div class="games-content" \nng-if="vm.GamesByAreaNumbers.length"><table class="simple" ms-responsive-table ng-if="vm.IncludedGameStats"><thead><tr>\n<th>CreatedAt</th><th>GameNumber</th><th>Round</th><th class="text-right">Ch\u1EB5n</th><th class="text-right">L\u1EBB</th><th \nclass="text-right">4 \u0110\u1ECF</th><th class="text-right">4 Tr\u1EAFng</th><th class="text-right">1 \u0110\u1ECF</th><th class="text-right">\n3 \u0110\u1ECF</th><th class="text-right">T\u1ED5ng</th><th class="text-center">K\u1EBFt qu\u1EA3</th><th class="text-center">Video</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.GamesByAreaNumbers"><td>\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\'}}</td><td>{{ item.GameNumber }}</td><td>{{ item.GameRound }}\n</td><td class="cursor-pointer" ng-click="vm.gamesBettingDetails(item, $event, 0)"><div layout="column" \nlayout-align="start end"><div>\n{{ item.Stats | gameStats : 0 : \'Quantity\' }} / {{ (item.Stats | gameStats : 0 : \'Amount\')/1000 | currency : \'\' : 0 }}\n</div><div ng-class="{\'warn\' : (item.Stats | gameStats : 0 : \'WinLose\') < 0}">\n{{ (item.Stats | gameStats : 0 : \'WinLose\')/1000 | currency : \'\' : 0 }}</div><div>\n{{ (item.Stats | gameStats : 0 : \'Commission\')/1000 | currency : \'\' : 0 }}</div></div></td><td class="cursor-pointer" \nng-click="vm.gamesBettingDetails(item, $event, 1)"><div layout="column" layout-align="start end"><div>\n{{ item.Stats | gameStats : 1 : \'Quantity\' }} / {{ (item.Stats | gameStats : 1 : \'Amount\')/1000 | currency : \'\' : 0 }}\n</div><div ng-class="{\'warn\' : (item.Stats | gameStats : 1 : \'WinLose\') < 0}">\n{{ (item.Stats | gameStats : 1 : \'WinLose\')/1000 | currency : \'\' : 0 }}</div><div>\n{{ (item.Stats | gameStats : 1 : \'Commission\')/1000 | currency : \'\' : 0 }}</div></div></td><td class="cursor-pointer" \nng-click="vm.gamesBettingDetails(item, $event, 2)"><div layout="column" layout-align="start end"><div>\n{{ item.Stats | gameStats : 2 : \'Quantity\' }} / {{ (item.Stats | gameStats : 2 : \'Amount\')/1000 | currency : \'\' : 0 }}\n</div><div ng-class="{\'warn\' : (item.Stats | gameStats : 2 : \'WinLose\') < 0}">\n{{ (item.Stats | gameStats : 2 : \'WinLose\')/1000 | currency : \'\' : 0 }}</div><div>\n{{ (item.Stats | gameStats : 2 : \'Commission\')/1000 | currency : \'\' : 0 }}</div></div></td><td class="cursor-pointer" \nng-click="vm.gamesBettingDetails(item, $event, 3)"><div layout="column" layout-align="start end"><div>\n{{ item.Stats | gameStats : 3 : \'Quantity\' }} / {{ (item.Stats | gameStats : 3 : \'Amount\')/1000 | currency : \'\' : 0 }}\n</div><div ng-class="{\'warn\' : (item.Stats | gameStats : 3 : \'WinLose\') < 0}">\n{{ (item.Stats | gameStats : 3 : \'WinLose\')/1000 | currency : \'\' : 0 }}</div><div>\n{{ (item.Stats | gameStats : 3 : \'Commission\')/1000 | currency : \'\' : 0 }}</div></div></td><td class="cursor-pointer" \nng-click="vm.gamesBettingDetails(item, $event, 4)"><div layout="column" layout-align="start end"><div>\n{{ item.Stats | gameStats : 4 : \'Quantity\' }} / {{ (item.Stats | gameStats : 4 : \'Amount\')/1000 | currency : \'\' : 0 }}\n</div><div ng-class="{\'warn\' : (item.Stats | gameStats : 4 : \'WinLose\') < 0}">\n{{ (item.Stats | gameStats : 4 : \'WinLose\')/1000 | currency : \'\' : 0 }}</div><div>\n{{ (item.Stats | gameStats : 4 : \'Commission\')/1000 | currency : \'\' : 0 }}</div></div></td><td class="cursor-pointer" \nng-click="vm.gamesBettingDetails(item, $event, 5)"><div layout="column" layout-align="start end"><div>\n{{ item.Stats | gameStats : 5 : \'Quantity\' }} / {{ (item.Stats | gameStats : 5 : \'Amount\')/1000 | currency : \'\' : 0 }}\n</div><div ng-class="{\'warn\' : (item.Stats | gameStats : 5 : \'WinLose\') < 0}">\n{{ (item.Stats | gameStats : 5 : \'WinLose\')/1000 | currency : \'\' : 0 }}</div><div>\n{{ (item.Stats | gameStats : 5 : \'Commission\')/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="column" \nlayout-align="start end" class="text-bold"><div>{{ item.Stats | gameSumStats }}</div><div \nng-class="{\'warn\' : (item.Stats | gameSumWinLose) < 0}">{{ (item.Stats | gameSumWinLose)/1000 | currency : \'\' : 0 }}\n</div><div>{{ item.Stats | gameSumComm }}</div></div></td><td class="text-center text-bold">{{item.GameResult}}</td><td>\n<a target="_blank" \nhref="https://dn3lcpwlay7ly.cloudfront.net/{{item.AreaNumber}}-{{item.GameNumber}}-{{item.GameRound}}.mp4"><img \nsrc="assets/images/etc/play-icon.png"></a></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting"><tr><td \ncolspan="11" ng-click="vm.GamesByAreaNumber(vm.GamesByAreaNumbers[vm.GamesByAreaNumbers.length - 1].Id)">Xem ti\u1EBFp</td>\n</tr></tfoot></table><table class="simple" ms-responsive-table ng-if="!vm.IncludedGameStats"><thead><tr><th>GameNumber\n</th><th>StartAt</th><th>EndAt</th><th>Fiscal</th><th>Dealer</th><th>Status</th><th>BookKeepingStatus</th><th>CreatedAt\n</th><th>Thao t\xE1c</th><th>GameResult</th><th ng-show="vm.showSnapshot">Snapshot</th><th>Video</th></tr></thead><tbody>\n<tr ng-repeat="item in vm.GamesByAreaNumbers"><td>{{ item.GameNumber }}.{{ item.GameRound }}</td><td>\n{{ item.PlayStartAt*1000 | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</td><td>\n{{ item.PlayEndAt*1000 | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</td><td>\n{{ item.FiscalDate | amDateFormat : \'DD/MM/YYYY\' }}</td><td>{{ item.Dealer.FullName }}</td><td>\n{{ item.Status | gameStatus }}</td><td>{{ item.BookKeepingStatus | GameBookKeeping }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</td><td><md-menu md-position-mode="right bottom"><md-button \naria-label="true" class="md-icon-button" ng-click="$mdMenu.open($event)" ng-disabled="item.BookKeepingStatus === -9">\n<md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button \nng-click="vm.gamesUpdateResults(item, $event)">S\u1EEDa k\u1EBFt qu\u1EA3</md-button></md-menu-item><md-menu-item><md-button \nng-click="vm.gamesRedo(item, $event)">K\u1EBFt s\u1ED5 l\u1EA1i</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item><md-button ng-click="vm.gamesBettingDetails(item, $event)">Chi ti\u1EBFt \u0111\u1EB7t c\u01B0\u1EE3c</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item><md-button class="md-warn" \nng-click="vm.gamesCancelBetting(item, $event)">Hu\u1EF7 v\xE1n</md-button></md-menu-item></md-menu-content></md-menu></td><td>\n<img ng-src="{{ item.GameResult | SedieResult }}" alt="{{ item.GameResult }}"></td><td ng-show="vm.showSnapshot"><div \nclass="thumbs" ng-style="vm.thumbsSnap(item)"><div class="big md-whiteframe-4dp" ng-style="vm.thumbsSnap(item)"></div>\n</div></td><td><a target="_blank" \nhref="https://dn3lcpwlay7ly.cloudfront.net/{{item.AreaNumber}}-{{item.GameNumber}}-{{item.GameRound}}.mp4"><img \nsrc="assets/images/etc/play-icon.png"></a></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting"><tr><td \ncolspan="11" ng-click="vm.GamesByAreaNumber(vm.GamesByAreaNumbers[vm.GamesByAreaNumbers.length - 1].Id)">Xem ti\u1EBFp</td>\n</tr></tfoot></table></div></div></div><div id="area-video" class="md-whiteframe-8dp"><div id="area-video-header" \nlayout="row" layout-align="space-between center"><p>Live from cinematic</p><md-button class="md-icon-button" \nng-click="vm.playPause()"><md-icon md-font-icon="icon-pause" ng-show="vm.playing"></md-icon><md-icon \nmd-font-icon="icon-play" ng-show="!vm.playing"></md-icon></md-button></div><div class="video-player"><div \nclass="player-element" id="player-element"></div></div></div></div>');
    $templateCache.put('app/main/legend-casino/dealer/dealer.html', '<div class="page-layout simple fullwidth dealer-managing" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Qu\u1EA3n l\xFD Dealer\n</div></div><div class="open-term" layout="row" layout-align="start center"><md-button class="md-raised md-warn" \nng-click="vm.openDealer($event)"><md-icon md-font-icon="icon-plus" class="s20"></md-icon>Th\xEAm Dealer</md-button></div>\n</div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="vm.submitting"></md-progress-linear><div \nclass="content" layout="column" layout-align="center center"><div class="simple-table-container legend-wrapper" \nlayout="row" layout-wrap><div ng-repeat="item in vm.dealers" class="dealer-wrap" ng-click="vm.openDealer($event, item)">\n<div class="dealer"><div class="dealer-avatar"><img ng-src="{{ item.Avatar }}" alt=""></div><div class="dealer-name" \nlayout="column"><p class="sku">{{ item.Code }}</p><p>{{ item.FullName }}</p></div></div></div></div></div></div>');
    $templateCache.put('app/main/legend-casino/parameter/parameter.html', '<div class="page-layout simple fullwidth term-base-parameter" layout="column"><div class="content" layout="column" \nlayout-align="center center"><div layout="row" class="content-titles"><h1 class="open">Tham s\u1ED1 c\u01A1 b\u1EA3n</h1></div><div \nclass="simple-table-container md-whiteframe-4dp legend-casino-parameter"><table class="simple" ms-responsive-table>\n<thead><tr><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>Payouts</th><th>Min Bet</th><th>Max Bet</th><th ng-if="vm.hasWritePermission">S\u1EEDa</th>\n</tr></thead><tbody><tr ng-repeat="param in vm.parameters" ng-class="{\'edit\': param.editMode}"><td>\n{{ param.BetType | LegendBet }}</td><td><input ng-model="param.Payouts" type="number" ng-disabled="!param.editMode">\n</td><td><input ng-model="param.MinBet" type="number" ng-disabled="!param.editMode"></td><td><input \nng-model="param.MaxBet" type="number" ng-disabled="!param.editMode"></td><td ng-if="vm.hasWritePermission"><md-button \nclass="md-icon-button" ng-click="vm.editParam(param)" ng-hide="param.editMode"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button><md-button class="md-icon-button md-accent s20" \nng-click="vm.save(param)" ng-hide="!param.editMode"><md-icon md-font-icon="icon-check"></md-icon></md-button><md-button \nclass="md-icon-button md-warn s20" ng-click="vm.cancel(param)" ng-hide="!param.editMode"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></td></tr></tbody></table></div></div></div>');
    $templateCache.put('app/main/history/account/account.html', '<div class="page-layout simple fullwidth history-account" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Nh\u1EADt k\xFD t\xE0i kho\u1EA3n\n</div></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear></div><div class="content" layout="column"><div class="simple-table-container md-whiteframe-1dp">\n<div class="content-header" layout="row"><input ng-model="vm.form.Username" placeholder="T\xE0i kho\u1EA3n" autocomplete="off"> \n<input ng-model="vm.form.IP" placeholder="IP" autocomplete="off" ng-if="vm.selectedRule === 0"> <input \nng-model="vm.form.UpdateUsername" placeholder="T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa" autocomplete="off" ng-if="vm.selectedRule !== 0"> \n<input mdc-datetime-picker="" week-start="1" date="true" time="true" type="text" format="DD-MM-YYYY H:mm" \nplaceholder="B\u1EAFt \u0111\u1EA7u" show-todays-date min-date="vm.min" max-date="vm.max" ng-model="vm.form.start" class="md-input" \nreadonly="readonly"> <input mdc-datetime-picker="" week-start="1" date="true" time="true" type="text" \nformat="DD-MM-YYYY H:mm" placeholder="K\u1EBFt th\xFAc" show-todays-date min-date="vm.min" max-date="vm.max" \nng-model="vm.form.end" class="md-input" readonly="readonly"><md-menu md-position-mode="right bottom"><md-button \naria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{ vm.selectedLabel }}<md-icon \nmd-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3" class="search-rules">\n<md-menu-item ng-repeat="item in vm.searchRules"><md-button ng-click="vm.changeRules(item)" \nng-class="{\'md-accent\': item.active}"><md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline">\n</md-icon><md-icon ng-if="item.active" md-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button>\n</md-menu-item></md-menu-content></md-menu><md-button class="md-raised md-accent" ng-click="vm.checkHistory()" \nng-disabled="vm.submitting">Ki\u1EC3m tra</md-button></div><div class="container"><div class="no-data" layout="row" \nng-if="!vm.hasData && vm.loadDone">Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u ph\xF9 h\u1EE3p</div><div layout="column" ng-if="vm.hasData"><div \nng-if="vm.selectedRule === 0" ng-include="\'app/main/history/account/templates/login.html\'"></div><div \nng-if="vm.selectedRule === 1" ng-include="\'app/main/history/account/templates/password.html\'"></div><div \nng-if="vm.selectedRule === 2" ng-include="\'app/main/history/account/templates/shareHolder.html\'"></div><div \nng-if="vm.selectedRule === 3" ng-include="\'app/main/history/account/templates/userGameSetting.html\'"></div><div \nng-if="vm.selectedRule === 4" ng-include="\'app/main/history/account/templates/stopBetting.html\'"></div><div \nng-if="vm.selectedRule === 5" ng-include="\'app/main/history/account/templates/suspend.html\'"></div><div \nng-if="vm.selectedRule === 6" ng-include="\'app/main/history/account/templates/credit.html\'"></div><div \nng-if="vm.selectedRule === 7" ng-include="\'app/main/history/account/templates/paymentMethod.html\'"></div><div \nng-if="vm.selectedRule === 8" ng-include="\'app/main/history/account/templates/settle.html\'"></div><div \nng-if="vm.selectedRule === 9" ng-include="\'app/main/history/account/templates/WmShareHolder.html\'"></div><div \nng-if="vm.selectedRule === 10" ng-include="\'app/main/history/account/templates/WmUserGame.html\'"></div><div \nng-if="vm.selectedRule === 11" ng-include="\'app/main/history/account/templates/production.html\'"></div><div \nng-if="vm.selectedRule === 12" ng-include="\'app/main/history/account/templates/legendShareHolder.html\'"></div><div \nng-if="vm.selectedRule === 13" ng-include="\'app/main/history/account/templates/legendUserGameSetting.html\'"></div><div \nng-if="vm.selectedRule === 14" ng-include="\'app/main/history/account/templates/Casino789ShareHolder.html\'"></div><div \nng-if="vm.selectedRule === 15" ng-include="\'app/main/history/account/templates/Casino789UserGame.html\'"></div><div \nng-if="vm.selectedRule === 16" ng-include="\'app/main/history/account/templates/Casino789ShareHolder.html\'"></div><div \nng-if="vm.selectedRule === 17" ng-include="\'app/main/history/account/templates/Casino789UserGame.html\'"></div></div>\n</div></div></div></div>');
    $templateCache.put('app/main/history/balance/balance.html', '<div class="page-layout simple fullwidth history-balance" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nNh\u1EADt k\xFD bi\u1EBFn \u0111\u1ED9ng s\u1ED1 d\u01B0</div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="content-header" layout="row"><input ng-model="vm.Username" \nplaceholder="T\xE0i kho\u1EA3n"> <input mdc-datetime-picker="" week-start="1" date="true" time="true" type="text" \nformat="DD-MM-YYYY H:mm" placeholder="B\u1EAFt \u0111\u1EA7u" show-todays-date min-date="vm.min" max-date="vm.max" \nng-model="vm.form.start" class="md-input" readonly="readonly"> <input mdc-datetime-picker="" week-start="1" date="true" \ntime="true" type="text" format="DD-MM-YYYY H:mm" placeholder="K\u1EBFt th\xFAc" show-todays-date min-date="vm.min" \nmax-date="vm.max" ng-model="vm.form.end" class="md-input" readonly="readonly"><md-menu md-position-mode="right bottom">\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">\n{{vm.textTransactionLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content \nwidth="3"><md-menu-item><md-button ng-click="vm.selectAllTransaction($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.TransactionTypes"><md-button \nng-click="vm.selectTransaction(item)" md-prevent-menu-close="md-prevent-menu-close" \nng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline">\n</md-icon><md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button>\n</md-menu-item></md-menu-content></md-menu><md-button class="md-raised md-accent" ng-click="vm.checkHistory()">Ki\u1EC3m tra\n</md-button></div><div class="container"><table class="simple" ms-responsive-table ng-if="vm.Records.length"><thead><tr>\n<th><span>Date</span> <span class="sort"><md-icon ng-if="vm.sort === \'asc\'" md-font-icon="icon-arrow-up-bold" \nng-click="vm.changeSort(\'desc\')"></md-icon><md-icon ng-if="vm.sort === \'desc\'" md-font-icon="icon-arrow-down-bold" \nng-click="vm.changeSort(\'asc\')"></md-icon></span></th><th>T\xE0i kho\u1EA3n</th><th class="text-right">Bi\u1EBFn \u0111\u1ED9ng</th><th \nclass="text-right">S\u1ED1 d\u01B0</th><th class="text-center">Transaction</th><th>Describe</th><th>Ref</th><th>IP</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.Records" ng-class="{\'minus\' : item.ChangeType === \'-\' }"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.Username }}</td><td class="text-right" \nng-class="{\'red-600-fg\' : item.ChangeType === \'-\' }">{{ item.ChangeType }}{{ item.Amount | currency : \'\' : 0 }}</td><td \nclass="text-right">{{ item.Balance | currency : \'\' : 0 }}</td><td class="text-center">\n{{ item.TransactionType | transaction }}</td><td>{{ item.Describe }}</td><td>Ref: {{ item.Ref }}</td><td>{{ item.IP }}\n</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="8"><a ng-click="vm.checkHistory(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table></div></div></div></div>');
    $templateCache.put('app/main/history/price/price.html', '<div class="page-layout simple fullwidth price-history" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nNh\u1EADt k\xFD thay \u0111\u1ED5i gi\xE1</div></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="content-header" layout="row"><md-select \nng-model="vm.form.term" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option ng-repeat="item in vm.termHistory" ng-value="item" \nng-selected="$index === 0">{{item}}</md-option></md-select><md-select ng-model="vm.form.game" \naria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" ng-change="vm.changeGame()"><md-option ng-repeat="item in vm.games" ng-value="item.id" \nng-selected="$index === 0">{{item.name}}</md-option></md-select><md-select ng-model="vm.form.bet" \naria-label="Ch\u1ECDn ki\u1EC3u c\u01B0\u1EE3c"><md-option ng-repeat="item in vm.bets" ng-value="item.id" ng-selected="$index === 0">\n{{item.name}}</md-option></md-select><md-button class="md-raised md-accent" ng-click="vm.checkHistory()">Ki\u1EC3m tra\n</md-button></div><table class="simple" ms-responsive-table ng-if="vm.history.length"><thead><tr><th>Th\u1EDDi gian</th><th>\nT\xE0i kho\u1EA3n</th><th>\u0110\xE0i - Ki\u1EC3u c\u01B0\u1EE3c</th><th>Chi ti\u1EBFt</th><th>IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.history"><td>{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.Username }}\n</td><td>{{ item.GameType | gameXs }} - {{item.BetType | bet }}</td><td>{{ item.Describe }}</td><td>{{ item.IP }}</td>\n</tr><tr ng-if="vm.more && !vm.submitting" class="more"><td colspan="5" \nng-click="vm.checkHistory(vm.response.Page + 1)">Xem ti\u1EBFp</td></tr></tbody></table><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/my/otp/otp.html', '<div class="page-layout simple fullwidth" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">C\xE0i \u0111\u1EB7t OTP</div>\n</div></div><div class="content" layout="column" ui-view="otpView"></div></div>');
    $templateCache.put('app/main/my/otp/otp.template.html', '<div class="wait-data" ng-if="vm.waitData"><md-progress-circular md-diameter="96"></md-progress-circular></div><div \nclass="enable-tfa simple-table-container md-whiteframe-4dp" ng-if="!vm.waitData"><div class="setup-otp" layout="column">\n<div class="on1txb"><div class="iH9H0b"><div class="tvv1nd"></div></div><div class="I4mZgb" layout="column" \nng-if="vm.EnabledOTP"><div class="nUt1y">T\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c b\u1EA3o v\u1EC7 b\u1EB1ng x\xE1c minh 2 b\u01B0\u1EDBc!</div></div><div \nclass="I4mZgb" layout="column" ng-if="!vm.EnabledOTP"><div class="nUt1y">\nB\u1EA3o v\u1EC7 t\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch b\u1EB1ng OTP (One Time Password)</div><div class="qDDjIb" layout="column"><div \nclass="UJm2Pb">M\u1ED7i khi qu\xFD kh\xE1ch \u0111\u0103ng nh\u1EADp v\xE0o T\xE0i kho\u1EA3n c\u1EE7a m\xECnh, qu\xFD kh\xE1ch s\u1EBD c\u1EA7n m\u1EADt kh\u1EA9u v\xE0 m\xE3 x\xE1c minh. <a \nhref="https://www.google.com/intl/vi/landing/2step/" target="_blank">T\xECm hi\u1EC3u&nbsp;th\xEAm</a></div><div class="UJm2Pb">\nHacker ho\u1EB7c c\u01A1 quan an ninh c\xF3 r\u1EA5t nhi\u1EC1u c\xE1ch \u0111\xE1nh c\u1EAFp t\xE0i kho\u1EA3n v\xE0 m\u1EADt kh\u1EA9u c\u1EE7a qu\xFD kh\xE1ch th\xF4ng qua c\xE0i virus ho\u1EB7c nghe l\xE9n tr\xEAn \u0111\u01B0\u1EDDng truy\u1EC1n internet c\u1EE7a qu\xFD kh\xE1ch s\u1EED d\u1EE5ng. N\u1EBFu qu\xFD kh\xE1ch kh\xF4ng s\u1EED d\u1EE5ng OTP, vi\u1EC7c m\u1EA5t m\u1EADt kh\u1EA9u d\u1EABn \u0111\u1EBFn l\u1ED9 nh\u1EEFng th\xF4ng tin giao d\u1ECBch, th\xF4ng tin c\xE1 nh\xE2n c\u1EE7a \u0111\u1EA1i l\xFD v\xE0 kh\xE1ch h\xE0ng.\n</div><div class="zdBZpd" layout="row"><div class="lVeBCc" flex="25" flex-xs="30"><div class="hyMrOd qNeFe"></div></div>\n<div class="c8zWkd" flex><div class="fKMMOd">Th\xEAm l\u1EDBp b\u1EA3o m\u1EADt b\u1ED5 sung</div><div class="UkntSc">\nNh\u1EADp m\u1EADt kh\u1EA9u v\xE0 m\xE3 x\xE1c minh duy nh\u1EA5t \u0111\u01B0\u1EE3c g\u1EEDi \u0111\u1EBFn \u0111i\u1EC7n tho\u1EA1i c\u1EE7a qu\xFD kh\xE1ch.</div></div></div><div class="zdBZpd" \nlayout="row"><div class="lVeBCc" flex="25" flex-xs="30"><div class="hyMrOd GsuOzd"></div></div><div class="c8zWkd" flex>\n<div class="fKMMOd">Tr\xE1nh nh\u1EEFng k\u1EBB x\u1EA5u ra</div><div class="UkntSc">\nK\u1EC3 c\u1EA3 n\u1EBFu ai \u0111\xF3 l\u1EA5y \u0111\u01B0\u1EE3c m\u1EADt kh\u1EA9u c\u1EE7a qu\xFD kh\xE1ch th\xEC c\u0169ng s\u1EBD kh\xF4ng \u0111\u1EE7 \u0111\u1EC3 \u0111\u0103ng nh\u1EADp v\xE0o t\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch.</div>\n</div></div><div class="zdBZpd" layout="row"><div class="lVeBCc" flex="25" flex-xs="30"><div class="hyMrOd G3gOzr">\n</div></div><div class="c8zWkd" flex><div class="fKMMOd">\u0110\u1EA3m b\u1EA3o an to\xE0n cho \u0111\u1EA1i l\xFD v\xE0 kh\xE1ch h\xE0ng</div><div \nclass="UkntSc">\nVi\u1EC7c qu\xFD kh\xE1ch kh\xF4ng s\u1EED d\u1EE5ng OTP, n\u1EBFu b\u1ECB m\u1EA5t m\u1EADt kh\u1EA9u d\u1EABn \u0111\u1EBFn b\u1ECB l\u1ED9 l\u1ECBch s\u1EED giao d\u1ECBch c\u1EE7a qu\xFD kh\xE1ch, l\u1ED9 th\xF4ng tin c\xE1 nh\xE2n c\u1EE7a \u0111\u1EA1i l\xFD v\xE0 kh\xE1ch h\xE0ng v\xE0 s\u1EBD tr\u1EF1c ti\u1EBFp g\xE2y nguy hi\u1EC3m cho h\u1ECD v\xE0 ch\xEDnh m\xECnh.\n</div></div></div></div></div></div><div class="RH9rqf" layout="row" layout-align="end center"><md-button \nclass="md-raised md-accent" ng-if="!vm.EnabledOTP" ng-click="vm.starting($event)">B\u1EAFt \u0111\u1EA7u</md-button><md-button \nclass="md-raised md-warn" ng-if="vm.EnabledOTP" ng-click="vm.cancelOTP($event)" ng-disabled="$root.User.MfaRequired">\nH\u1EE7y x\xE1c minh 2 b\u01B0\u1EDBc</md-button></div><div class="nUt2y" ng-if="$root.User.MfaRequired && $root.User.MfaType === 1"><div>\nC\xF4ng ty y\xEAu c\u1EA7u qu\xFD kh\xE1ch ph\u1EA3i s\u1EED d\u1EE5ng OTP \u0111\u1EC3 \u0111\u1EA3m b\u1EA3o an to\xE0n.<br>\nN\u1EBFu qu\xFD kh\xE1ch c\xF3 nhu c\u1EA7u b\u1ECF OTP, xin vui l\xF2ng li\xEAn h\u1EC7 v\u1EDBi c\xF4ng ty \u0111\u1EC3 \u0111\u01B0\u1EE3c t\u1EAFt OTP.</div></div><div class="B34EJ" \nng-if="$root.User.MfaRequired && $root.User.MfaType === 0">Do y\xEAu c\u1EA7u t\u1EEB c\xF4ng ty, Qu\xFD kh\xE1ch vui l\xF2ng b\u1EADt OTP \u0111\u1EC3 ti\u1EBFp t\u1EE5c\n</div></div></div>');
    $templateCache.put('app/main/my/otp/setup.dialog.html', '<md-dialog aria-label="setup-otp" class="setup-otp"><form name="formOTP" ng-submit="setupOTP()" novalidate><md-toolbar \nclass="md-accent"><div class="nsbjKc"></div></md-toolbar><md-dialog-content class="md-setup-otp-dialog"><div \nmd-dynamic-height class="md-dialog-content"><div class="I4mZgb" layout="column" ng-if="data.step === 0"><div \nclass="nUt1y">Nh\u1EADn m\xE3 t\u1EEB \u1EE9ng d\u1EE5ng Google Authenticator</div><div class="njmKQb">\nM\xE3 x\xE1c minh mi\u1EC5n ph\xED t\u1EEB \u1EE9ng d\u1EE5ng Google Authenticator. \u1EE8ng d\u1EE5ng n\xE0y ho\u1EA1t \u0111\u1ED9ng ngay c\u1EA3 khi \u0111i\u1EC7n tho\u1EA1i c\u1EE7a qu\xFD kh\xE1ch kh\xF4ng c\xF3 m\u1EA1ng.\n</div><div class="Fywh3b njmKQb">Qu\xFD kh\xE1ch c\xF3 lo\u1EA1i \u0111i\u1EC7n tho\u1EA1i n\xE0o?</div><div class="njmKQb"><md-radio-group \nng-model="data.device"><md-radio-button value="apple">Apple (iPhone, iPad)</md-radio-button><md-radio-button \nvalue="android">Android (Samsung, Sony, Oppo, ...)</md-radio-button></md-radio-group></div></div><div class="I4mZgb" \nlayout="column" ng-if="data.step === 1"><div class="nUt1y">Thi\u1EBFt l\u1EADp Authenticator</div><div class="qDDjIb"><li>\nT\u1EA3i \u1EE9ng d\u1EE5ng Authenticator t\u1EEB <a target="_blank" \nhref="https://itunes.apple.com/us/app/google-authenticator/id388497605?mt=8">App Store</a>.</li><li>\nTrong \u1EE8ng d\u1EE5ng h\xE3y ch\u1ECDn <b>C\xE0i \u0111\u1EB7t t\xE0i kho\u1EA3n</b>.</li><li>Ch\u1ECDn <b>Qu\xE9t m\xE3 v\u1EA1ch</b>.</li></div><div class="K8EGIe" \nng-if="!hasPsk"><md-progress-circular md-mode="indeterminate"></md-progress-circular><p>\u0110ang t\u1EA3i m\xE3 QR...</p></div><div \nclass="bZMVCe" layout="column" ng-if="hasPsk"><div class="img"><qr type-number="8" correction-level="\'M\'" size="170" \ntext="imgSrc" image="true"></qr></div><div class="_button"><a ng-click="cannotScan()">Kh\xF4ng th\u1EC3 qu\xE9t m\xE3?</a></div></div>\n</div><div class="I4mZgb" layout="column" ng-if="data.step === 2"><div class="nUt1y">Thi\u1EBFt l\u1EADp Authenticator</div><div \nclass="qDDjIb"><li>T\u1EA3i \u1EE9ng d\u1EE5ng Authenticator t\u1EEB <a target="_blank" \nhref="https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2">C\u1EEDa h\xE0ng Play</a>.</li><li>\nTrong \u1EE8ng d\u1EE5ng h\xE3y ch\u1ECDn <b>C\xE0i \u0111\u1EB7t t\xE0i kho\u1EA3n</b>.</li><li>Ch\u1ECDn <b>Qu\xE9t m\xE3 v\u1EA1ch</b>.</li></div><div class="K8EGIe" \nng-if="!hasPsk"><md-progress-circular md-mode="indeterminate"></md-progress-circular><p>\u0110ang t\u1EA3i m\xE3 QR...</p></div><div \nclass="bZMVCe" layout="column" ng-if="hasPsk"><div class="img"><qr type-number="8" correction-level="\'M\'" size="170" \ntext="imgSrc" image="true"></qr></div><div class="_button"><a ng-click="cannotScan()">Kh\xF4ng th\u1EC3 qu\xE9t m\xE3?</a></div></div>\n</div><div class="I4mZgb" layout="column" ng-if="data.step === 3"><div class="nUt1y">Qu\xFD kh\xE1ch kh\xF4ng th\u1EC3 qu\xE9t m\xE3 v\u1EA1ch?\n</div><div class="fKMMOd"><ol class="nGQ74"><li>Nh\u1EA5n v\xE0o <b>Menu </b>, sau \u0111\xF3 <b>Thi\u1EBFt l\u1EADp t\xE0i kho\u1EA3n</b>.</li><li>\nNh\u1EA5n v\xE0o <b>Nh\u1EADp kh\xF3a \u0111\xE3 c\u1EA5p</b>.</li><li>Nh\u1EADp \u0111\u1ECBa ch\u1EC9 email c\u1EE7a qu\xFD kh\xE1ch v\xE0 kh\xF3a n\xE0y:</li><div class="W30gRe"><div \nclass="mZ7JQb" ngclipboard ngclipboard-success="onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="{{sharedKey}}">{{sharedKey}}</div><div ng-class="{\'ZYIfFd\' : copied}" class="copy copy_code" \nngclipboard ngclipboard-success="onSuccess(e);" ngclipboard-error="onError(e);" data-clipboard-text="{{sharedKey}}">\nB\u1EA5m \u0111\u1EC3 sao ch\xE9p m\xE3</div><div ng-class="{\'ZYIfFd\' : !copied}" class="copy copied">\u0110\xE3 sao ch\xE9p m\xE3</div></div><li>\u0110\u1EA3m b\u1EA3o \n<b>D\u1EF1a tr\xEAn th\u1EDDi gian</b> \u0111\u01B0\u1EE3c b\u1EADt v\xE0 nh\u1EA5n v\xE0o <b>Th\xEAm</b> \u0111\u1EC3 k\u1EBFt th\xFAc.</li></ol></div></div><div class="I4mZgb" \nlayout="column" ng-if="data.step === 4"><div class="nUt1y">Thi\u1EBFt l\u1EADp Authenticator</div><div class="njmKQb">\nNh\u1EADp m\xE3 6 ch\u1EEF s\u1ED1 qu\xFD kh\xE1ch th\u1EA5y trong \u1EE9ng d\u1EE5ng.</div><div class="PQ3dUd"><div otp-input-directive options="otpInput">\n</div></div><div class="otp_not_val" ng-if="valFalse">M\xE3 OTP kh\xF4ng h\u1EE3p l\u1EC7</div></div><div class="I4mZgb" \nng-if="data.step === 5"><div class="nUt1y">Xong!</div><div class="qDDjIb fKMMOd">\nQu\xFD kh\xE1ch \u0111\xE3 ho\xE0n t\u1EA5t. T\u1EEB b\xE2y gi\u1EDD, qu\xFD kh\xE1ch s\u1EBD s\u1EED d\u1EE5ng Authenticator \u0111\u1EC3 \u0111\u0103ng nh\u1EADp v\xE0o t\xE0i kho\u1EA3n c\u1EE7a m\xECnh.</div></div>\n</div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ng-click="cancel()" \nng-disabled="submitting" ng-if="data.step !== 3 && data.step !== 5">H\u1EE7y</md-button><md-button class="md-accent" \nng-disabled="submitting" ng-click="data.step = data.remember" ng-if="data.step === 3">Quay l\u1EA1i</md-button><md-button \nclass="md-accent" ng-disabled="submitting" ng-click="nextStep()" ng-if="data.step < 4">Ti\u1EBFp theo</md-button><md-button \nclass="md-accent" type="submit" ng-disabled="!otpOk || submitting" ng-if="data.step === 4">X\xE1c minh</md-button>\n<md-button class="md-accent" ng-click="cancel(true)" ng-if="data.step === 5">Xong</md-button></md-dialog-actions></form>\n</md-dialog>');
    $templateCache.put('app/main/my/password/password.html', '<div class="page-layout simple fullwidth" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u\n</div></div></div><div class="content" layout="column" ui-view="password"></div></div>');
    $templateCache.put('app/main/my/password/password.template.html', '<div class="change-password simple-table-container md-whiteframe-4dp"><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><div layout="column"><form \nname="formPassword" ng-submit="vm.changePassword()" novalidate><div class="iH9H0b"><div class="tvv1nd"></div></div><div \nclass="helper" layout="column"><div class="help-content"><p>\nM\u1EADt kh\u1EA9u ph\u1EA3i g\u1ED3m \xEDt nh\u1EA5t 6 k\xED t\u1EF1 v\xE0 c\xF3 \xEDt nh\u1EA5t 3 \u0111i\u1EC1u ki\u1EC7n d\u01B0\u1EDBi \u0111\xE2y:</p><ul><li>\nC\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng ch\u1EEF vi\u1EBFt HOA</li><li>C\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng ch\u1EEF vi\u1EBFt th\u01B0\u1EDDng</li><li>\nC\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng s\u1ED1</li><li>C\xF3 \xEDt nh\u1EA5t m\u1ED9t k\xFD t\u1EF1 s\u1EED d\u1EE5ng k\xFD t\u1EF1 \u0111\u1EB7c bi\u1EC7t</li></ul><p>V\xED d\u1EE5: 38E7@@, lisa48$Z\n</p><p class="noted">Qu\xFD kh\xE1ch l\u01B0u \xFD t\u1EAFt b\u1ED9 g\xF5 ti\u1EBFng Vi\u1EC7t tr\u01B0\u1EDBc khi \u0111\u1EB7t l\u1EA1i m\u1EADt kh\u1EA9u.</p></div></div><div \nlayout="column" class="form-password"><md-input-container class="md-block md-password" ng-if="!vm.mustChange"><label>\nM\u1EADt kh\u1EA9u c\u0169</label> <input ng-model="vm.user.password" name="password" \nng-attr-type="{{ vm.showPassword ? \'text\' : \'password\' }}" required minlength="6"><div class="icon-wrap"><md-icon \nng-click="vm.showPassword = !vm.showPassword" ng-show="vm.showPassword" md-font-icon="icon-eye-off"></md-icon><md-icon \nng-click="vm.showPassword = !vm.showPassword" ng-show="!vm.showPassword" md-font-icon="icon-eye"></md-icon></div><div \nng-messages="formPassword.password.$error"><div ng-message="required">Vui l\xF2ng kh\xF4ng b\u1ECF tr\u1ED1ng</div><div \nng-message="minlength">M\u1EADt kh\u1EA9u c\u0169 y\xEAu c\u1EA7u t\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</div></div></md-input-container><md-input-container \nclass="md-block md-password"><label>M\u1EADt kh\u1EA9u m\u1EDBi</label> <input ng-model="vm.user.newPassword" name="newPassword" \nng-attr-type="{{ vm.showPassword ? \'text\' : \'password\' }}" ng-focus="vm.inputFocus()" ng-blur="vm.showCheck = false" \nng-keyup="vm.inputKeyup()"><div class="icon-wrap"><md-icon ng-click="vm.showPassword = !vm.showPassword" \nng-show="vm.showPassword" md-font-icon="icon-eye-off"></md-icon><md-icon ng-click="vm.showPassword = !vm.showPassword" \nng-show="!vm.showPassword" md-font-icon="icon-eye"></md-icon></div><div \nclass="md-input-message-animation password-perfect" ng-show="vm.passwordPerfect">M\u1EADt kh\u1EA9u an to\xE0n \u0111\u1EC3 s\u1EED d\u1EE5ng</div><div \nclass="md-input-message-animation password-weak" ng-show="!vm.passwordPerfect && vm.user.newPassword.length">\nM\u1EADt kh\u1EA9u y\u1EBFu</div><div class="password-requirements" ng-show="vm.showCheck"><ul class="not_listing"><li \nng-class="{ \'completed\': vm.upperCase === 1, \'line-through\' : vm.totalScore >= 3 && vm.upperCase === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t ch\u1EEF HOA</li><li \nng-class="{ \'completed\': vm.lowerCase === 1, \'line-through\' : vm.totalScore >= 3 && vm.lowerCase === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t ch\u1EEF th\u01B0\u1EDDng</li><li \nng-class="{ \'completed\': vm.number === 1, \'line-through\' : vm.totalScore >= 3 && vm.number === 0 }">T\u1ED1i thi\u1EC3u m\u1ED9t s\u1ED1\n</li><li ng-class="{ \'completed\': vm.specialChar === 1, \'line-through\' : vm.totalScore >= 3 && vm.specialChar === 0 }">\nT\u1ED1i thi\u1EC3u m\u1ED9t k\xFD t\u1EF1 \u0111\u1EB7c bi\u1EC7t</li><li class="strong" ng-class="{ \'completed\': vm.characterCount }">T\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</li>\n</ul></div></md-input-container><md-input-container class="md-block md-password"><label>X\xE1c nh\u1EADn l\u1EA1i m\u1EADt kh\u1EA9u m\u1EDBi\n</label> <input ng-model="vm.user.rePassword" ng-attr-type="{{ vm.showPassword ? \'text\' : \'password\' }}" \nname="rePassword" compare-to="vm.user.newPassword" required><div class="icon-wrap"><md-icon \nng-click="vm.showPassword = !vm.showPassword" ng-show="vm.showPassword" md-font-icon="icon-eye-off"></md-icon><md-icon \nng-click="vm.showPassword = !vm.showPassword" ng-show="!vm.showPassword" md-font-icon="icon-eye"></md-icon></div><div \nng-messages="formPassword.rePassword.$error"><div ng-message="required">Vui l\xF2ng kh\xF4ng b\u1ECF tr\u1ED1ng</div><div \nng-message="compareTo">M\u1EADt kh\u1EA9u x\xE1c nh\u1EADn kh\xF4ng kh\u1EDBp</div></div></md-input-container></div><div layout="row" \nlayout-align="end center" class="form-bottom"><md-button class="md-warn" ng-click="vm.cancel()" \nng-disabled="vm.submitting" ng-if="!vm.mustChange">Cancel</md-button><md-button class="md-raised md-accent" \ntype="submit" ng-disabled="formPassword.$invalid || formPassword.$pristine || !vm.passwordPerfect || vm.submitting">OK\n</md-button></div></form><div class="must-change-password" ng-if="vm.mustChange">\nQu\xFD kh\xE1ch c\u1EA7n c\u1EADp nh\u1EADt m\u1EADt kh\u1EA9u m\u1EDBi \u0111\u1EC3 ti\u1EBFp t\u1EE5c</div></div></div>');
    $templateCache.put('app/main/my/telegram/telegram.html', '<div class="page-layout simple fullwidth telegram" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Li\xEAn k\u1EBFt Telegram\n</div></div></div><div class="content" layout="row" layout-align="center center"><div class="telegram" layout="column" \nng-class="{\'linked\': vm.telegramBot.Status === 1}" ng-if="vm.telegramBot.Status === 0"><div class="K8EGIe" \nng-if="!vm.hasPsk" layout="column" layout-align="center center"><md-progress-circular md-mode="indeterminate" \nclass="md-warn"></md-progress-circular><p>\u0110ang t\u1EA3i m\xE3 QR...</p></div><div class=""><div class="helper">\nQu\xFD kh\xE1ch c\xF3 th\u1EC3 li\xEAn k\u1EBFt t\xE0i kho\u1EA3n One789 c\u1EE7a qu\xFD kh\xE1c v\u1EDBi Telegram b\u1EB1ng 1 trong 3 c\xE1ch sau:</div><div class="the-way">\nC\xE1ch 1:</div><div class="helper" ng-show="vm.hasPsk">Qu\xE9t m\xE3 QR d\u01B0\u1EDBi \u0111\xE2y.</div><div class="qr-bot" layout="row" \nlayout-align="center center"><qr type-number="8" correction-level="\'M\'" size="240" text="vm.telegramBot.DirectLink" \nimage="true"></qr></div><div class="the-way">C\xE1ch 2:</div><div class="helper" ng-if="vm.telegramBot.Status === 0">\nT\u1EEB t\xE0i kho\u1EA3n Telegram c\u1EE7a qu\xFD kh\xE1ch, c\xF3 th\u1EC3 chat tr\u1EF1c ti\u1EBFp v\u1EDBi t\xE0i kho\u1EA3n <span class="bot">\n@{{vm.telegramBot.BotUsername}} </span>v\xE0 nh\u1EADp l\u1EC7nh<div class="command" ngclipboard \nngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="/link {{vm.telegramBot.LinkMessage}}">/link {{vm.telegramBot.LinkMessage}}<div \nng-class="{\'ZYIfFd\' : !vm.copied}" class="copy copied">\u0110\xE3 sao ch\xE9p m\xE3</div></div>\u0111\u1EC3 k\u1EBFt n\u1ED1i</div><div class="the-way">\nC\xE1ch 3:</div><div class="helper mt-16" ng-show="vm.hasPsk">\nN\u1EBFu qu\xFD kh\xE1ch \u0111ang s\u1EED d\u1EE5ng Telegram tr\xEAn c\xF9ng {{vm.deviceName}} n\xE0y, qu\xFD kh\xE1ch c\xF3 th\u1EC3 click tr\u1EF1c ti\u1EBFp v\xE0o \u0111\xE2y \u0111\u1EC3 li\xEAn k\u1EBFt:\n<div class="btn" layout="column" layout-align="center center"><md-button class="md-raised md-accent command" \naria-label="Link" ng-href="{{vm.telegramBot.DirectLink}}" target="_blank"><md-icon md-font-icon="icon-telegram" \nclass="s20"></md-icon>Li\xEAn k\u1EBFt</md-button></div></div></div></div><div class="telegram linked" layout="column" \nng-if="vm.telegramBot.Status === 1"><div class="helper" ng-show="vm.hasPsk">\nT\xE0i kho\u1EA3n c\u1EE7a qu\xFD kh\xE1ch \u0111\xE3 \u0111\u01B0\u1EE3c li\xEAn k\u1EBFt v\u1EDBi Telegram. T\u1EEB t\xE0i kho\u1EA3n Telegram c\u1EE7a qu\xFD kh\xE1ch, c\xF3 th\u1EC3 chat tr\u1EF1c ti\u1EBFp v\u1EDBi t\xE0i kho\u1EA3n \n<span class="bot">@{{vm.telegramBot.BotUsername}} </span>\u0111\u1EC3 qu\u1EA3n l\xFD, ho\u1EB7c nh\u1EADp l\u1EC7nh<div class="command" ngclipboard \nngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" data-clipboard-text="/help">/help<div \nng-class="{\'ZYIfFd\' : !vm.copied}" class="copy copied">Copied</div></div>\u0111\u1EC3 nh\u1EADn \u0111\u01B0\u1EE3c tr\u1EE3 gi\xFAp</div><div class="K8EGIe" \nng-if="!vm.hasPsk" layout="column" layout-align="center center"><md-progress-circular md-mode="indeterminate" \nclass="md-warn"></md-progress-circular></div><div class="cancel" ng-if="vm.telegramBot.Status === 1" \nng-click="vm.cancelTelegram($event)">h\u1EE7y li\xEAn k\u1EBFt</div></div></div></div>');
    $templateCache.put('app/main/presidential/event/event.html', '<div class="page-layout simple fullwidth term-base-parameter" layout="column" id="presidential"><div class="content" \nlayout="column" layout-align="center center"><div layout="row" class="content-titles"><h1 class="open">\npresidential election 2020</h1></div><div class="simple-table-container md-whiteframe-4dp presidential" layout="column">\n<div layout="row"><div flex="20" class="label">Status</div><div flex layout="row" class="values">\n{{vm.presidentialEvent.Status | presidentialStatus}}</div></div><div layout="row"><div flex="20" class="label">Event\n</div><div flex layout="row" class="values">{{vm.presidentialEvent.Event}}</div></div><div layout="row"><div flex="20" \nclass="label">Description</div><div flex layout="row"><input class="md-input-container" type="text" name="Description" \nng-model="vm.presidentialEvent.Description" autocomplete="off"></div></div><div layout="row"><div flex="20" \nclass="label">EventDate</div><div flex layout="row"><md-datepicker ng-model="vm.presidentialEvent.EventDate" \nmd-open-on-focus name="dateField"></md-datepicker></div></div><div layout="row"><div flex="20" class="label">FiscalDate\n</div><div flex layout="row"><md-datepicker ng-model="vm.presidentialEvent.FiscalDate" md-open-on-focus \nname="dateField"></md-datepicker></div></div><div layout="row"><div flex="20" class="label">AutoCloseAt</div><div flex \nlayout="row"><input mdc-datetime-picker="" week-start="1" date="true" time="true" auto-ok="true" \nclick-outside-to-close="true" type="text" short-time="true" min-date="vm.minDate" minute-steps="1" \nformat="DD-MM-YYYY H:mm" placeholder="Th\u1EDDi gian \u0111\xF3ng c\u01B0\u1EE3c" show-todays-date="false" \nng-model="vm.presidentialEvent.AutoCloseAt" class="md-input"></div></div><div layout="row" \nlayout-align="space-between center"><md-button class="md-warn" ng-click="vm.updateResults($event)">K\u1EBFt qu\u1EA3</md-button>\n<md-button class="md-accent" ng-click="vm.closingEvent($event)" \nng-if="(vm.presidentialEvent.Status === 1 || vm.presidentialEvent.Status === 0) && vm.presidentialEvent.Results.length">\nK\u1EBFt s\u1ED5</md-button><span flex></span><md-button class="md-raised md-accent" ng-click="vm.updateEvent()">C\u1EADp nh\u1EADt\n</md-button></div></div></div></div>');
    $templateCache.put('app/main/presidential/event/update-results-dialog.html', '<md-dialog aria-label="update-results-dialog" class="open-betting"><form name="update-results-dialog"><md-toolbar \nclass=""><div class="md-toolbar-tools"><h2>C\xE2p nh\u1EADt k\u1EBFt qu\u1EA3</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><p \nclass="text-strong">Ch\u1ECDn k\u1EBFt qu\u1EA3</p><div layout="row" layout-wrap><div flex="50" ng-repeat="item in candidates">\n<md-checkbox class="md-warn" ng-checked="exists(item, selected)" ng-click="toggle(item, selected)" \nng-disabled="submitting">{{ item | candidate }}</md-checkbox></div></div></div></md-dialog-content><md-dialog-actions \nlayout="row"><md-button class="btn-w-md" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button \nclass="btn-w-md md-primary" ng-click="update(data)" ng-disabled="submitting">OK</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/notification/dialog/create.notification.dialog.html', '<md-dialog aria-label="G\u1EEDi tin nh\u1EAFn c\xE1 nh\xE2n" style="min-width: 520px" class="notification-dialog"><form \nname="notificationForm"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>So\u1EA1n th\xF4ng b\xE1o m\u1EDBi</h2><span \nflex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-window-close" class="s20">\n</md-icon></md-button></div></md-toolbar><md-dialog-content class=""><div class="md-dialog-content"><div \nlayout="column" class="editor"><div ckeditor="options" ng-model="Message" ready="onReady()"></div><md-input-container \nclass="md-block" hide><label>Tin nh\u1EAFn</label> <textarea ng-model="Message" md-maxlength="2048" rows="1" \nautocomplete="off" md-select-on-focus></textarea></md-input-container></div><div layout="row" layout-align="start"><div \nflex="20"><md-input-container><label>Ng\xE0y xu\u1EA5t b\u1EA3n</label><md-datepicker ng-model="PublishedAt" \nmd-placeholder="Published" md-hide-icons="calendar"></md-datepicker></md-input-container></div><div flex="20">\n<md-input-container><label>Ng\xE0y h\u1EBFt h\u1EA1n</label><md-datepicker ng-model="ExpiredAt" md-placeholder="Expired" \nmd-hide-icons="calendar"></md-datepicker></md-input-container></div><div flex="60"><md-input-container><label>Danh m\u1EE5c\n</label><md-select ng-model="Category"><md-option ng-value="topping.id" ng-repeat="topping in categories">\n{{topping.name}}</md-option></md-select></md-input-container></div></div><div layout="row"><div flex="40">\n<md-input-container><label>Khu v\u1EF1c hi\u1EC3n th\u1ECB</label><md-select ng-model="DisplaySections" multiple="multiple">\n<md-optgroup label="Khu v\u1EF1c hi\u1EC3n th\u1ECB"><md-option ng-value="topping.id" ng-repeat="topping in displaySections">\n{{topping.name}}</md-option></md-optgroup></md-select></md-input-container></div><div flex="60"><md-input-container>\n<label>Trang th\xF4ng b\xE1o</label><md-select ng-model="DisplayPages" multiple="multiple"><md-optgroup \nlabel="Trang th\xF4ng b\xE1o"><md-option ng-value="topping.id" ng-repeat="topping in displayPages">{{topping.name}}\n</md-option></md-optgroup></md-select></md-input-container></div></div><div layout="row" ng-show="newItems"><div \nflex="100"><md-checkbox aria-label="checked" ng-model="PushNotification">\n\u0110\u1EA9y th\xF4ng b\xE1o ngay l\u1EADp t\u1EE9c cho kh\xE1ch h\xE0ng \u0111ang tr\u1EF1c tuy\u1EBFn</md-checkbox></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button ng-click="update()">C\u1EADp nh\u1EADt</md-button></md-dialog-actions></form>\n</md-dialog>');
    $templateCache.put('app/main/notification/dialog/create.private.dialog.html', '<md-dialog aria-label="G\u1EEDi tin nh\u1EAFn c\xE1 nh\xE2n" style="min-width: 520px" class="notification-dialog"><form \nname="notificationForm"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>G\u1EEDi tin nh\u1EAFn c\xE1 nh\xE2n</h2><span \nflex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-window-close" class="s20">\n</md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><div \nlayout="column" ng-show="!Multiple"><div layout="column"><input name="recipient-model" ng-model="RecipientModel" \ntype="text" class="recipient-model" placeholder="Danh s\xE1ch nh\u1EADn, t\u1ED1i \u0111a 30 h\u1ED9i vi\xEAn"></div><div layout="column">\n<md-input-container class="md-block"><label>Tin nh\u1EAFn</label> <textarea ng-model="Message" md-maxlength="2048" rows="1" \nautocomplete="off" md-select-on-focus></textarea></md-input-container></div></div><div layout="column" \nclass="upload-excel" ng-show="Multiple"><div layout="row"><input type="file" id="fileUpload" accept=".xls,.xlsx,.csv">\n<md-button class="md-raised md-accent" ng-click="uploadExcel()" ng-disabled="processing">Upload</md-button></div><div \nclass="" ng-show="rowObject.length"><table class="simple message-row" ms-responsive-table><thead><tr><th>Ng\u01B0\u1EDDi nh\u1EADn</th>\n<th>N\u1ED9i dung</th></tr></thead><tbody><tr ng-repeat="item in rowObject" ng-class="{\'succeeded\' : item.succeeded}"><td \nclass="member">{{ item.Member }}</td><td ng-bind-html="item.Content"></td></tr></tbody></table></div></div><div \nlayout="row" layout-align="space-between"><div flex="25"><md-input-container><label>Ng\xE0y xu\u1EA5t b\u1EA3n</label><md-datepicker \nng-model="PublishedAt" md-placeholder="Published" md-hide-icons="calendar" md-open-on-focus></md-datepicker>\n</md-input-container></div><div flex="25"><md-input-container><label>Ng\xE0y h\u1EBFt h\u1EA1n</label><md-datepicker \nng-model="ExpiredAt" md-placeholder="Expired" md-hide-icons="calendar" md-open-on-focus></md-datepicker>\n</md-input-container></div><div flex="50"><md-input-container><label>Khu v\u1EF1c hi\u1EC3n th\u1ECB</label><md-select \nng-model="DisplaySections" multiple="multiple"><md-optgroup label="Trang hi\u1EC3n th\u1ECB"><md-option ng-value="topping.id" \nng-repeat="topping in displaySections">{{topping.name}}</md-option></md-optgroup></md-select></md-input-container></div>\n</div><div layout="row"><div flex="100"><md-checkbox aria-label="checked" ng-model="PushNotification">\n\u0110\u1EA9y th\xF4ng b\xE1o ngay l\u1EADp t\u1EE9c cho kh\xE1ch h\xE0ng \u0111ang tr\u1EF1c tuy\u1EBFn</md-checkbox></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row" layout-align="space-between"><md-button ng-click="sendMultiple()" class="md-warn" \nng-hide="editMode || Multiple" ng-disabled="processing">G\u1EEDi h\xE0ng lo\u1EA1t</md-button><div flex></div><md-button \nng-click="sendMessage()" ng-show="!Multiple">G\u1EEDi \u0111i</md-button><md-button ng-click="sendMultipleMessage()" \nng-show="Multiple" ng-disabled="processing">G\u1EEDi \u0111i</md-button></md-dialog-actions></form><md-progress-linear \nclass="md-warn" md-mode="indeterminate" ng-show="processing"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/presidential/parameter/parameter.html', '<div id="parameter" class="page-layout simple fullwidth term-base-parameter" layout="column"><div class="content" \nlayout="column" layout-align="center center"><div layout="row" class="content-titles"><h1 class="open">Tham s\u1ED1 c\u01A1 b\u1EA3n\n</h1></div><div class="simple-table-container md-whiteframe-4dp legend-casino-parameter"><form name="form-param" \nng-submit="vm.save()" novalidate><table class="simple" ms-responsive-table><thead><tr><th>Candidate</th><th>Odds</th>\n<th>Payouts</th><th>Enabled</th><th ng-if="vm.hasWritePermission">S\u1EEDa</th></tr></thead><tbody><tr \nng-repeat="param in vm.presidentialParameters" ng-class="{\'edit\': param.editMode}"><td class="text-left">\n{{ param.BetType | candidate }}</td><td><input ng-model="param.Odds" ng-class="{\'warn\' : param.Odds < 0 }" \ntype="number" ng-disabled="!param.editMode"></td><td><input ng-model="param.Payouts" type="number" \nng-disabled="!param.editMode"></td><td><md-button class="md-icon-button" ng-click="vm.updateStatus(param)"><md-icon \nmd-font-icon="icon-check" class="md-accent" ng-if="param.Enabled"></md-icon><md-icon md-font-icon="icon-close" \nclass="md-warn" ng-if="!param.Enabled"></md-icon></md-button></td><td ng-if="vm.hasWritePermission"><md-button \nclass="md-icon-button" ng-click="vm.editParam(param)" ng-hide="param.editMode"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button><md-button class="md-icon-button md-accent s20" type="submit" \nng-hide="!param.editMode"><md-icon md-font-icon="icon-content-save"></md-icon></md-button><md-button \nclass="md-icon-button md-warn s20" ng-click="vm.cancel()" ng-hide="!param.editMode"><md-icon md-font-icon="icon-close">\n</md-icon></md-button></td></tr></tbody></table></form></div></div></div>');
    $templateCache.put('app/main/traditional/live/closeExcept.dialog.html', '<md-dialog aria-label="close.betting" class="open-betting"><form name="closebetting"><md-toolbar class="md-warn"><div \nclass="md-toolbar-tools"><h2>\u0110\xF3ng c\u01B0\u1EE3c \u0111\xE0i {{ TermInfo.GameType | gameXs }}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><div layout="row" layout-wrap><div flex="33" ng-repeat="item in TermInfo.Games"><md-checkbox \nclass="md-warn" ng-checked="exists(item.BetType, selected)" ng-click="toggle(item.BetType, selected)" \nng-disabled="submitting">{{ item.BetType | bet : false : TermInfo.GameType }}</md-checkbox></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="closeBettingExcept(data)" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/price_table.html', '<div class="page-layout simple fullwidth priceBoard" layout="column"><md-sidenav class="main-sidenav md-sidenav-right" \nmd-component-id="main-sidenav" ng-include="\'app/main/traditional/price_table/sidenavs/main-sidenav.html\'" ms-scroll \nms-sidenav-helper></md-sidenav><div class="spinner" layout="column" ng-hide="vm.allSet"><md-progress-circular \nmd-diameter="96"></md-progress-circular></div><div class="content" layout="column" ng-hide="!vm.allSet"><div \nclass="navigation-board-md md-whiteframe-1dp" layout="row" layout-align="space-between center" \nng-hide="$mdMedia(\'gt-md\')"><div class="text-title" layout="column" layout-align="start start"><span>\nK\u1EF3: {{ vm.priceBoard.Term }}</span> <span>{{ vm.priceBoard.GameType | gameXs }}</span> <span>\n{{ vm.priceBoard.BetType | bet }}</span></div><div layout="row" layout-align="end center"><md-menu \nmd-position-mode="left bottom" ng-if="vm.isCompany && vm.hasWritePermission"><md-button \nclass="md-icon-button md-accent" aria-label="menu" ng-click="$mdMenu.open($event)" \nng-disabled="vm.priceBoard.TermStatus !== 1"><md-icon md-font-icon="icon-cog" class="s20"></md-icon></md-button>\n<md-menu-content width="4"><md-menu-item><md-button ng-click="vm.openAll($event)" class="md-primary"><md-icon \nmd-font-icon="icon-open-in-new" class="s20"></md-icon>M\u1EDF to\xE0n b\u1ED9</md-button></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item><md-button ng-click="vm.closeAll()" class="md-warn"><md-icon md-font-icon="icon-close" \nclass="s20"></md-icon>\u0110\xF3ng to\xE0n b\u1ED9</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.closeExcept()" \nclass="md-warn"><md-icon md-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng l\xF4</md-button></md-menu-item>\n<md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.closeCaishen($event)" class="md-warn"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng \u0110\u1EC1 Th\u1EA7n T\xE0i</md-button></md-menu-item></md-menu-content></md-menu>\n<md-button ng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': !vm.priceView.currentTerm }" ng-disabled="!vm.priceView.currentTerm">\n<md-icon md-font-icon="icon-refresh" class="s20"></md-icon></md-button><md-menu><md-button md-no-ink \nng-click="$mdMenu.open()" class="md-accent countdown" \nng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }" ng-disabled="!vm.priceView.currentTerm">\n{{vm.timer}}<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button><md-menu-content width="4" \nng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" class="md-warn">T\u1EAFt</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.refreshEvent(5)" \nclass="md-accent">5 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(10)" \nclass="md-accent">10 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(30)" \nclass="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(60)" \nclass="md-accent">60 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu><div class="filter-button"><md-button \nclass="md-icon-button" ng-click="vm.toggleSidenav(\'main-sidenav\')"><md-icon md-font-icon="icon-filter"></md-icon>\n</md-button></div></div></div><div class="navigation-board md-whiteframe-1dp" layout="column" \nng-show="$mdMedia(\'gt-md\')"><div layout="row"><md-select ng-model="vm.priceBoard.Term" placeholder="K\u1EF3" \nng-change="vm.changeTerm()"><md-option ng-repeat="term in vm.termHistory" value="{{term}}" \nng-selected="term == vm.termHistory[0]">{{term}}</md-option></md-select><md-select ng-model="vm.selected.GameType" \nng-change="vm.changeGame()" aria-label="Change Game" class="select-game"><md-option ng-repeat="game in vm.aTerms" \nvalue="{{ game.GameType }}" ng-selected="game.GameType == 0">{{ game.GameType | gameXs }}</md-option></md-select><div \nflex class="select-bet"><md-button ng-repeat="bet in vm.betTypes" ng-model="vm.selected.BetType" \nng-click="vm.changeBet(bet)" ng-class="{\'md-accent md-raised\' : bet.BetType === vm.priceBoard.BetType }">\n{{ bet.BetType | bet }}</md-button></div></div><div layout="row"><md-select ng-model="vm.viewPoint" \nng-change="vm.sortNumber()" aria-label="View Point" ng-if="vm.isCompany"><md-option ng-repeat="view in vm.viewPoints" \nvalue="{{view.id}}" ng-selected="view.id === 1">{{view.name}}</md-option></md-select><md-select \nng-model="vm.selected.sort" aria-label="true" ng-change="vm.sortNumber()" aria-label="Sort Number"><md-option \nng-repeat="sort in vm.sortDefs" value="{{ sort.id }}" ng-selected="sort.id == \'risk\'">{{ sort.name }}</md-option>\n</md-select><md-select ng-model="vm.denominator" aria-label="true"><md-option \nng-repeat="denominator in vm.denominators" value="{{denominator}}" ng-selected="denominator === 1">\n{{ denominator | currency : \'\' : 0 }}</md-option></md-select><md-button ng-click="vm.immediatePrice()" \nclass="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.priceBoard.TermStatus !== 1 }" \nng-disabled="vm.priceBoard.TermStatus !== 1"><md-icon md-font-icon="icon-refresh" class="s20"></md-icon></md-button>\n<md-menu><md-button md-no-ink ng-click="$mdMenu.open()" class="md-accent countdown" \nng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }" ng-disabled="vm.priceBoard.TermStatus !== 1">\n{{vm.timer}}<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button><md-menu-content width="4" \nng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" class="md-warn">T\u1EAFt</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.refreshEvent(5)" \nclass="md-accent">5 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(10)" \nclass="md-accent">10 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(30)" \nclass="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(60)" \nclass="md-accent">60 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu><md-menu md-position-mode="left bottom" \nng-if="vm.isCompany && vm.hasWritePermission"><md-button class="md-icon-button md-accent" aria-label="menu" \nng-click="$mdMenu.open($event)" ng-disabled="vm.priceBoard.TermStatus !== 1"><md-icon md-font-icon="icon-cog" \nclass="s20"></md-icon></md-button><md-menu-content width="4" class="close-open"><md-menu-item><md-button \nng-click="vm.openAll($event)" class="md-primary"><md-icon md-font-icon="icon-open-in-new" class="s20"></md-icon>\nM\u1EDF to\xE0n b\u1ED9</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button \nng-click="vm.closeAll()" class="md-warn"><md-icon md-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng to\xE0n b\u1ED9\n</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.closeExcept()" class="md-warn"><md-icon \nmd-font-icon="icon-close" class="s20"></md-icon>\u0110\xF3ng l\xF4</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item><md-button ng-click="vm.closeCaishen($event)" class="md-warn"><md-icon md-font-icon="icon-close" \nclass="s20"></md-icon>\u0110\xF3ng \u0110\u1EC1 Th\u1EA7n T\xE0i</md-button></md-menu-item><md-menu-divider \nng-if="vm.priceBoard.BetType !== 20 && vm.priceBoard.BetType !== 27"></md-menu-divider><md-menu-item \nng-if="vm.priceBoard.BetType !== 20"><md-button ng-click="vm.changeCurrentStatus(1, $event)" class="md-accent"><md-icon \nmd-font-icon="icon-open-in-app" class="s20"></md-icon>\nM\u1EDF {{ vm.priceBoard.BetType | bet : false : vm.priceBoard.GameType }}</md-button></md-menu-item><md-menu-item \nng-if="vm.priceBoard.BetType !== 20 && vm.priceBoard.BetType !== 27"><md-button \nng-click="vm.changeCurrentStatus(0, $event)" class="md-warn"><md-icon md-font-icon="icon-close" class="s20"></md-icon>\n\u0110\xF3ng {{ vm.priceBoard.BetType | bet : false : vm.priceBoard.GameType }}</md-button></md-menu-item></md-menu-content>\n</md-menu><span class="menu">K\u1EF3: <b>{{vm.priceBoard.Term}}</b></span> <span class="menu">\u0110\xF3ng l\xF4: <b>\n{{ vm.priceBoard.deadLine | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu">\u0110\xF3ng \u0111\u1EC1: <b>\n{{ vm.priceBoard.deadLineJP | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu">T\u1ED5ng ti\u1EC1n: <b>\n{{vm.viewPoint === \'1\' ? vm.odds.Income : vm.odds.TotalIncome | currency : \'\' : 0}}</b></span> <span class="menu">\nT\u1ED5ng \u0111i\u1EC3m: <b>{{vm.viewPoint === \'1\' ? vm.priceBoard.point : vm.priceBoard.totalPoint | currency : \'\' : 0}}</b></span> \n<span class="menu">Gi\xE1 trung b\xECnh: <b>{{ vm.priceBoard.averagePrice | currency : \'\' : 0}}</b></span></div></div><div \nclass="number-board md-whiteframe-1dp" layout="column"><div layout="row" layout-align="space-between center" \nclass="number-header"><div layout="row" ng-if="vm.hasWritePermission"><div layout="row" class="price-setting" \nng-if="$mdMedia(\'gt-md\')"><md-button type="button" class="md-icon-button md-warn s18" ng-disabled="!vm.mayAdd" \nng-click="vm.changeManyPrice(\'remove\')" ng-if="vm.isCompany"><md-icon md-font-icon="icon-minus-circle-outline">\n</md-icon></md-button><md-select ng-model="vm.priceStep" aria-label="dropdown" md-container-class=""><md-option \nng-repeat="price in vm.steps" value="{{price}}" ng-selected="price === vm.steps[0]">{{price}}</md-option></md-select>\n<md-button type="button" class="md-icon-button md-accent s18" ng-disabled="!vm.mayAdd" \nng-click="vm.changeManyPrice(\'add\')" ng-if="vm.isCompany"><md-icon md-font-icon="icon-plus-circle-outline"></md-icon>\n</md-button><div class="input-price"><input type="text" autocomplete="off" ng-model="vm.pricesetup" placeholder="Gi\xE1">\n</div><md-button type="submit" class="btn-w-xs" ng-disabled="!vm.pricesetup" ng-click="vm.priceSetting()">C\xE0i \u0111\u1EB7t gi\xE1\n</md-button><md-button class="" ng-hide="vm.setupKeyNumber" ng-click="vm.collectionNumber($event)">Ch\u1ECDn nhanh\n</md-button><md-button class="md-warn" ng-click="vm.cancelChecked()">H\u1EE7y</md-button><div layout="row" \nng-hide="vm.setupKeyNumber"><div ng-init="showform = 0" ng-show="showform === 0"><md-button class="btn-w-xs" \nng-click="showform = 1">Nh\u1EADp s\u1ED1</md-button></div><div class="input-number" ng-show="showform !== 0"><input type="text" \nid="price-setup" class="number-arr" autocomplete="off" placeholder="D\xE3y s\u1ED1" ng-model="vm.keynumber" \nng-keyup="vm.inputKeyNumber($event)"></div><div ng-show="showform !== 0"><md-button class="btn-w-xs" \nng-click="vm.submitKeyNumber()">Nh\u1EADp s\u1ED1</md-button><md-button class="btn-w-xs md-warn" \nng-click="showform = 0; vm.keynumber = \'\'">\u0110\xF3ng</md-button></div></div><md-button class="md-warn" \nng-disabled="!vm.mayAdd" ng-click="vm.closeManyNumber($event, \'close\')" ng-if="vm.isCompany">\u0110\xF3ng s\u1ED1</md-button>\n<md-button class="md-accent" ng-disabled="!vm.mayAdd" ng-click="vm.closeManyNumber($event, \'open\')" \nng-if="vm.isCompany">M\u1EDF s\u1ED1</md-button></div><div layout="column" layout-gt-md="row" ng-if="vm.show3D" class="show3d">\n<div layout="column" layout-align="space-between center"><div class="title">H\xE0ng tr\u0103m</div><div layout="row"><span \nclass="label" ng-class="{\'active\': vm.filterVal === 20}" ng-click="vm.createNumber3D(20)">0</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 21}" ng-click="vm.createNumber3D(21)">1</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 22}" ng-click="vm.createNumber3D(22)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 23}" ng-click="vm.createNumber3D(23)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 24}" ng-click="vm.createNumber3D(24)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 25}" ng-click="vm.createNumber3D(25)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 26}" ng-click="vm.createNumber3D(26)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 27}" ng-click="vm.createNumber3D(27)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 28}" ng-click="vm.createNumber3D(28)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 29}" ng-click="vm.createNumber3D(29)">9</span></div></div><div layout="column">\n<div class="title">H\xE0ng ch\u1EE5c</div><div layout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 10}" \nng-click="vm.createNumber3D(10)">0</span> <span class="label" ng-class="{\'active\': vm.filterVal === 11}" \nng-click="vm.createNumber3D(11)">1</span> <span class="label" ng-class="{\'active\': vm.filterVal === 12}" \nng-click="vm.createNumber3D(12)">2</span> <span class="label" ng-class="{\'active\': vm.filterVal === 13}" \nng-click="vm.createNumber3D(13)">3</span> <span class="label" ng-class="{\'active\': vm.filterVal === 14}" \nng-click="vm.createNumber3D(14)">4</span> <span class="label" ng-class="{\'active\': vm.filterVal === 15}" \nng-click="vm.createNumber3D(15)">5</span> <span class="label" ng-class="{\'active\': vm.filterVal === 16}" \nng-click="vm.createNumber3D(16)">6</span> <span class="label" ng-class="{\'active\': vm.filterVal === 17}" \nng-click="vm.createNumber3D(17)">7</span> <span class="label" ng-class="{\'active\': vm.filterVal === 18}" \nng-click="vm.createNumber3D(18)">8</span> <span class="label" ng-class="{\'active\': vm.filterVal === 19}" \nng-click="vm.createNumber3D(19)">9</span></div></div><div layout="column"><div class="title">H\xE0ng \u0111\u01A1n v\u1ECB</div><div \nlayout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 0}" ng-click="vm.createNumber3D(0)">0</span> \n<span class="label" ng-class="{\'active\': vm.filterVal === 1}" ng-click="vm.createNumber3D(1)">1</span> <span \nclass="label" ng-class="{\'active\': vm.filterVal === 2}" ng-click="vm.createNumber3D(2)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 3}" ng-click="vm.createNumber3D(3)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 4}" ng-click="vm.createNumber3D(4)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 5}" ng-click="vm.createNumber3D(5)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 6}" ng-click="vm.createNumber3D(6)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 7}" ng-click="vm.createNumber3D(7)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 8}" ng-click="vm.createNumber3D(8)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 9}" ng-click="vm.createNumber3D(9)">9</span></div></div><md-button \nclass="md-warn clear3d" ng-click="vm.createNumber3D(undefined)" ng-if="vm.filterVal !== undefined">X\xF3a b\u1ED9 l\u1ECDc\n</md-button></div><div layout="row" ng-if="vm.show4D" class="show4d"><md-button class="md-raised" ns-popover \nns-popover-template="popooxx" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OOXX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxxoo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button><md-button class="md-warn" \nng-click="vm.createNumber4D(undefined)" ng-if="vm.cond4d !== undefined">X\xF3a b\u1ED9 l\u1ECDc</md-button></div></div><div \nlayout="row" ng-if="vm.hasWritePermission && vm.isCompany && $mdMedia(\'gt-md\')"><md-button class="md-accent" \nng-click="vm.makeOdds()" \nng-if="(vm.priceBoard.BetType === 20 || vm.priceBoard.BetType === 27) && vm.hasWritePermission && vm.isCompany">\nChuy\u1EC3n gi\xE1 l\xF4</md-button><md-button class="md-warn" ng-click="vm.calculationRisk($event)" \nng-if="vm.priceBoard.BetType === 1 || vm.priceBoard.BetType === 7 || vm.priceBoard.BetType === 9 || vm.priceBoard.BetType === 12">\nT\xEDnh r\u1EE7i ro</md-button><md-button class="md-warn" ng-click="vm.companyBoard($event)">Xem h\xE0ng</md-button><md-button \nclass="md-raised md-icon-button md-warn highlight" ng-click="vm.setupHighlight($event)" ng-if="$root.User.Level === 1">\n<md-icon md-font-icon="icon-star" class="s20"></md-icon></md-button></div></div><div class="number-content-md" \nng-hide="$mdMedia(\'gt-md\')"><div class="number" ng-repeat="number in vm.numbers | limitTo: 100" \nng-class="{\'closed\' : number.stop}" ng-click="vm.showNumberSheet(number, $event)"><div class="number-content" \nng-class="{\'change-price\': number.changePrice}" layout="column"><div layout="row"><div class="badge badge-white agency">\n{{number.num}}</div><div flex class="price">{{ number.price | currency : \'\' : 0}}</div></div><div layout="column" \nclass="risk" layout-align="space-between center"><span>\n{{vm.viewPoint === \'1\' ? number.point : number.totalPoint | currency : \'\' : 0}}</span> <span \nng-class="{\'warn\': number.risk < 0}">\n{{ vm.viewPoint === \'1\' ? number.risk/vm.denominator : number.totalRisk/vm.denominator | currency : \'\' : 0}}</span>\n</div></div></div></div><div class="number-content" ng-show="$mdMedia(\'gt-md\')"><table class="table-number" \nms-responsive-table><tbody><tr><td></td><td><md-checkbox ng-model="vm.checkbox.col0" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col1" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col2" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col3" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col4" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col5" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col6" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col7" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col8" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td><td><md-checkbox ng-model="vm.checkbox.col9" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row0" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td><td colspan="10" rowspan="10" \nng-class="{\'disabled\': !vm.priceBoard.allowBetting }"><div class="number" \nng-repeat="number in vm.numbers | limitTo: 100" ng-class="{\'active\': number.active, \'closed\' : number.stop}" \nng-click="vm.activeNumber(number)"><div class="number-content" ng-class="{\'change-price\': number.changePrice}" \nlayout="row"><div class="higher" ng-if="number.higher"><span><md-icon md-font-icon="icon-star-circle"></md-icon></span>\n</div><div flex="25" flex-md="40" layout="column" layout-align="space-between center"><div><span \nng-if="vm.isCompany && vm.hasWritePermission" class="badge badge-white" ng-click="vm.closeNumber($event, number)">\n{{number.num}}</span> <span ng-if="!vm.isCompany || !vm.hasWritePermission" class="badge badge-white agency">\n{{number.num}}</span></div><div class="price-exception" ng-if="vm.isCompany && vm.hasWritePermission"><span \nclass="exception" ng-class="{\'postitive\' : number.PriceException > 0}" \nng-if="number.PriceException !== undefined && number.PriceException !== 0">{{ number.PriceException }}</span><md-icon \nclass="setting s16" ng-if="vm.hasWritePermission" ng-click="vm.priceException($event, number)" \nmd-font-icon="icon-auto-fix"></md-icon></div></div><div flex="75" flex-md="60" layout="column"><div layout="row" \nlayout-align="space-between center" class="price"><md-icon md-font-icon="icon-plus" class="s20" \nng-click="vm.changePriceNumber(number, \'add\', $event)" ng-if="vm.hasWritePermission && $mdMedia(\'gt-md\')"></md-icon>\n<span ng-click="vm.settingPrice($event, number)">{{ number.price | currency : \'\' : 0}}</span><md-icon \nmd-font-icon="icon-minus" class="s20" ng-click="vm.changePriceNumber(number, \'remove\', $event)" \nng-if="vm.hasWritePermission && $mdMedia(\'gt-md\')"></md-icon></div><div class="risk" layout="column" \nlayout-align="space-between center" ng-click="vm.viewBetting($event, number)"><span>\n{{vm.viewPoint === \'1\' ? number.point : number.totalPoint | currency : \'\' : 0}}</span> <span \nng-class="{\'warn\': number.risk < 0}">\n{{ vm.viewPoint === \'1\' ? number.risk/vm.denominator : number.totalRisk/vm.denominator | currency : \'\' : 0}}</span>\n</div></div></div></div></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row1" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row2" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row3" aria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td>\n<md-checkbox ng-model="vm.checkbox.row4" aria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td></tr>\n<tr><td><md-checkbox ng-model="vm.checkbox.row5" aria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox>\n</td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row6" aria-label="checkbox" ng-change="vm.checkboxEvent()">\n</md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row7" aria-label="checkbox" \nng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td><md-checkbox ng-model="vm.checkbox.row8" \naria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td></tr><tr><td><md-checkbox \nng-model="vm.checkbox.row9" aria-label="checkbox" ng-change="vm.checkboxEvent()"></md-checkbox></td></tr></tbody>\n</table></div></div></div><script type="text/ng-template" id="popooxx"><div class="triangle"></div>\r\n        <div class="ns-popover-tooltip">\r\n            <div layout="column" class="panel">\r\n                <div class="header" layout="row" layout-align="space-between center">\r\n                    <h3>OOXX</h3>\r\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\r\n                </div>\r\n                <div class="content">\r\n                    <md-button ng-repeat="pop in vm.popooxx" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\r\n                </div>\r\n            </div>\r\n        </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\r\n        <div class="ns-popover-tooltip">\r\n            <div layout="column" class="panel">\r\n                <div class="header" layout="row" layout-align="space-between center">\r\n                    <h3>OXXO</h3>\r\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\r\n                </div>\r\n                <div class="content">\r\n                    <md-button ng-repeat="pop in vm.popoxxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\r\n                </div>\r\n            </div>\r\n        </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\r\n        <div class="ns-popover-tooltip">\r\n            <div layout="column" class="panel">\r\n                <div class="header" layout="row" layout-align="space-between center">\r\n                    <h3>OXOX</h3>\r\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\r\n                </div>\r\n                <div class="content">\r\n                    <md-button ng-repeat="pop in vm.popoxox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\r\n                </div>\r\n            </div>\r\n        </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\r\n        <div class="ns-popover-tooltip">\r\n            <div layout="column" class="panel">\r\n                <div class="header" layout="row" layout-align="space-between center">\r\n                    <h3>XOXO</h3>\r\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\r\n                </div>\r\n                <div class="content">\r\n                    <md-button ng-repeat="pop in vm.popxoxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\r\n                </div>\r\n            </div>\r\n        </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\r\n        <div class="ns-popover-tooltip">\r\n            <div layout="column" class="panel">\r\n                <div class="header" layout="row" layout-align="space-between center">\r\n                    <h3>XOOX</h3>\r\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\r\n                </div>\r\n                <div class="content">\r\n                    <md-button ng-repeat="pop in vm.popxoox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\r\n                </div>\r\n            </div>\r\n        </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\r\n        <div class="ns-popover-tooltip">\r\n            <div layout="column" class="panel">\r\n                <div class="header" layout="row" layout-align="space-between center">\r\n                    <h3>XXOO</h3>\r\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\r\n                </div>\r\n                <div class="content">\r\n                    <md-button ng-repeat="pop in vm.popxxoo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\r\n                </div>\r\n            </div>\r\n        </div></script></div>');
    $templateCache.put('app/main/traditional/term/term.html', '<div class="page-layout simple fullwidth term-managing" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="breadcrumb" hide><span \nclass="parent">breadcrumb</span></div><div class="title">Qu\u1EA3n l\xFD k\u1EF3</div></div><div class="open-term" layout="row" \nlayout-align="start center"><md-button class="md-raised md-warn" ng-click="vm.openTerm()" \nng-if="vm.newTermAllowed && vm.hasWritePermission"><md-icon md-font-icon="icon-plus" class="s20"></md-icon>M\u1EDF k\u1EF3 m\u1EDBi\n</md-button><md-button class="md-raised" ng-click="vm.closing()" ng-if="vm.closingValid && vm.hasWritePermission">\n<md-icon md-font-icon="icon-check-circle" class="s20"></md-icon>K\u1EBFt s\u1ED5</md-button></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-show="vm.submitting"></md-progress-linear><div class="content" \nlayout="column"><div class="simple-table-container md-whiteframe-4dp"><table class="simple" ms-responsive-table><thead>\n<tr><th><md-datepicker ng-model="vm.formDate" ng-change="vm.changeDate($event)" md-placeholder="Enter date" \nmd-min-date="minDate" md-max-date="maxDate"></md-datepicker></th><th>S\u1ED1 k\u1EF3</th><th>\u0110\xE0i m\u1EDF th\u01B0\u1EDFng</th><th>Ng\xE0y m\u1EDF th\u01B0\u1EDFng\n</th><th>\u0110\xF3ng l\xF4</th><th>\u0110\xF3ng \u0111\u1EC1</th><th>Th\u1EA7n T\xE0i</th><th \nng-show="vm.currentTerm === vm.terms[0].Term && vm.hasWritePermission">K\u1EBFt qu\u1EA3</th><th \nng-show="vm.currentTerm === vm.terms[0].Term && vm.hasWritePermission">KQ Th\u1EA7n T\xE0i</th><th \nng-show="vm.currentTerm === vm.terms[0].Term">Tr\u1EA1ng th\xE1i</th><th ng-show="vm.currentTerm === vm.terms[0].Term" \nclass="text-center">S\u1ED5 t\u1EA1m</th><th>C\xF4ng c\u1EE5</th></tr></thead><tbody><tr ng-show="vm.termNotfound"><td colspan="9">\nKh\xF4ng t\xECm th\u1EA5y th\xF4ng tin k\u1EF3 h\u1EE3p l\u1EC7</td></tr><tr ng-repeat="item in vm.terms"><td>{{item.GameType | gameXs }}</td><td>\n{{item.Term}}</td><td>{{item.CityName}}</td><td>{{item.Date | amDateFormat: \'DD/MM/YYYY\' }}</td><td><span ns-popover \nns-popover-template="timeUpdate" ns-popover-on-open="vm.loadCurrentTime(item, \'lo\')" ns-popover-placement="bottom" \nng-if="vm.hasWritePermission" class="update-time">{{item.Close.deadLineBet | amDateFormat : \'HH:mm:ss\' }} </span><span \nng-if="!vm.hasWritePermission">{{item.Close.deadLineBet | amDateFormat : \'HH:mm:ss\' }}</span></td><td><span ns-popover \nns-popover-template="timeUpdate" ns-popover-on-open="vm.loadCurrentTime(item, \'de\')" ns-popover-placement="bottom" \nng-if="vm.hasWritePermission" class="update-time">{{item.Close.deadLineJack | amDateFormat : \'HH:mm:ss\' }} </span><span \nng-if="!vm.hasWritePermission">{{item.Close.deadLineBet | amDateFormat : \'HH:mm:ss\' }}</span></td><td><span ns-popover \nns-popover-template="timeUpdate" ns-popover-on-open="vm.loadCurrentTime(item, \'cai\')" ns-popover-placement="bottom" \nng-if="vm.hasWritePermission" class="update-time">{{item.Close.deadLineCaishen | amDateFormat : \'HH:mm:ss\' }} </span>\n<span ng-if="!vm.hasWritePermission">{{item.Close.deadLineBet | amDateFormat : \'HH:mm:ss\' }}</span></td><td \nng-show="vm.currentTerm === item.Term && vm.hasWritePermission"><md-button class="md-icon-button" \naria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" ng-if="!item.BookKeepingReady && (item.GameType === 0)" \nng-click="vm.updateResult($event, item)"><md-icon md-font-icon="icon-bulletin-board" class="s20"></md-icon></md-button>\n<md-button class="md-icon-button" aria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" \nng-if="!item.BookKeepingReady && (item.GameType === 2 || item.GameType === 3 || item.GameType === 4)" \nng-click="vm.updateResultSouthern($event, item)"><md-icon md-font-icon="icon-bulletin-board" class="s20"></md-icon>\n</md-button><md-button class="md-icon-button" aria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" \nng-if="item.BookKeepingReady && (item.GameType === 0)" ng-click="vm.updateResult($event, item)"><md-icon \nmd-font-icon="icon-check-all" class="s20"></md-icon></md-button><md-button class="md-icon-button" \naria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" \nng-if="item.BookKeepingReady && (item.GameType === 2 || item.GameType === 3 || item.GameType === 4)" \nng-click="vm.updateResultSouthern($event, item)"><md-icon md-font-icon="icon-check-all" class="s20"></md-icon>\n</md-button></td><td ng-show="vm.currentTerm === item.Term && vm.hasWritePermission"><md-button class="md-icon-button" \naria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" ng-if="!item.BookKeepingReady && item.GameType === 0" \nng-click="vm.updateResultCaishen($event, item)"><md-icon md-font-icon="icon-bulletin-board" class="s20"></md-icon>\n</md-button><md-button class="md-icon-button" aria-label="C\u1EADp nh\u1EADt k\u1EBFt qu\u1EA3" \nng-if="item.BookKeepingReady && item.GameType === 0" ng-click="vm.updateResultCaishen($event, item)"><md-icon \nmd-font-icon="icon-check-all" class="s20"></md-icon></md-button></td><td ng-show="vm.currentTerm == item.Term" \nclass="status" \nng-class="{\'open\': item.Status === 1, \'closing\': item.Status === 2, \'closing_fail\': item.Status === 3, \'closed\': item.Status === 9 }">\n{{ item.Status | termStatus }}</td><td ng-show="vm.currentTerm == item.Term" class="status" \nng-class="{\'open\': item.TemporaryBookkeepingStatus === 1, \'closing\': item.TemporaryBookkeepingStatus === 2, \'closing_fail\': item.TemporaryBookkeepingStatus === 3, \'closed\': item.TemporaryBookkeepingStatus === 9 }">\n<div layout="row" layout-align="space-between center"><div><md-menu md-position-mode="left bottom" \nng-if="item.Status !== 9 && item.BookKeepingReady && vm.hasWritePermission"><md-button aria-label="Open menu" \nclass="md-icon-button" ng-click="$mdMenu.open($event)"><md-icon md-font-icon="icon-dots-vertical" class="s20"></md-icon>\n</md-button><md-menu-content width="4"><md-menu-item><md-button \nng-disabled="item.Status === 9 || item.TemporaryBookkeepingStatus !== undefined || item.TemporaryBookkeepingStatus === null || !item.BookKeepingReady" \nng-click="vm.TemporaryBookkeeping(item, $event)" class="md-warn"><md-icon md-font-icon="icon-check-circle" class="s16">\n</md-icon>K\u1EBFt s\u1ED5 th\u1EED</md-button></md-menu-item><md-menu-item><md-button \nng-disabled="item.TemporaryBookkeepingStatus !== 9" ng-click="vm.ReTemporaryBookkeeping(item, $event)"><md-icon \nmd-font-icon="icon-history" class="s16"></md-icon>K\u1EBFt s\u1ED5 th\u1EED l\u1EA1i</md-button></md-menu-item></md-menu-content></md-menu>\n</div><div>{{ item.TemporaryBookkeepingStatus | TemporaryBookingStatus }}</div></div></td><td><md-menu \nmd-position-mode="left bottom"><md-button aria-label="Open menu" class="md-icon-button" ng-click="$mdMenu.open($event)">\n<md-icon md-font-icon="icon-dots-vertical" class="s20"></md-icon></md-button><md-menu-content width="4"><md-menu-item>\n<md-button ng-click="vm.termHistory(item, $event)"><md-icon md-font-icon="icon-history" class="s16"></md-icon>\nL\u1ECBch s\u1EED thao t\xE1c</md-button></md-menu-item><md-menu-divider ng-if="item.Status === 9 && vm.hasWritePermission">\n</md-menu-divider><md-menu-item ng-if="item.Status === 9 && vm.hasWritePermission"><md-button \nng-click="vm.reClosing(item, $event)" class="md-warn"><md-icon md-font-icon="icon-check-circle" class="s16"></md-icon>\nK\u1EBFt s\u1ED5 l\u1EA1i</md-button></md-menu-item></md-menu-content></md-menu></td></tr></tbody></table></div></div><script \ntype="text/ng-template" id="timeUpdate"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-term-update md-whiteframe-8dp">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>Th\u1EDDi gian \u0111\xF3ng c\u01B0\u1EE3c</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <div layout="column">\n                        <div class="form-credit" layout="row">\n                            <input type="text" ng-model="vm.deadLine" ng-disabled="vm.updateInProcess">\n                            <md-button class="md-icon-button md-accent" aria-label="updateTime" ng-click="vm.updateTime(item)" ng-disabled="vm.updateInProcess">\n                                <md-icon md-font-icon="icon-check" class="s24" ng-if="!vm.updateInProcess"></md-icon>\n                                <md-icon md-svg-icon="assets/icons/reload10.svg" class="s24" ng-if="vm.updateInProcess"></md-icon>\n                            </md-button>\n                        </div>\n                    </div>\n                    <div class="note" ng-show="vm.notValid">\n                        <p class="warn">Th\u1EDDi gian kh\xF4ng h\u1EE3p l\u1EC7</p>\n                    </div>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/wm-casino/maintenance/maintenance.html', '<div class="page-layout simple fullwidth term-base-parameter" layout="column" id="presidential"><div class="content" \nlayout="column" layout-align="center center"><div layout="row" class="content-titles"><h1 class="open">L\u1ECBch b\u1EA3o tr\xEC</h1>\n</div><div class="simple-table-container md-whiteframe-4dp presidential" layout="column"><div layout="row"><div \nflex="20" class="label">Note</div><div flex layout="row"><input class="md-input-container" type="text" \nname="Description" ng-model="vm.Maintenance.Note" autocomplete="off"></div></div><div layout="row"><div flex="20" \nclass="label">Start</div><div flex layout="row"><input mdc-datetime-picker="" week-start="1" date="true" time="true" \nauto-ok="true" click-outside-to-close="true" type="text" short-time="true" minute-steps="1" format="DD-MM-YYYY HH:mm" \nplaceholder="Th\u1EDDi gian \u0111\xF3ng c\u01B0\u1EE3c" show-todays-date="true" ng-model="vm.Maintenance.StartAt" class="md-input"></div>\n</div><div layout="row"><div flex="20" class="label">End</div><div flex layout="row"><input mdc-datetime-picker="" \nweek-start="1" date="true" time="true" auto-ok="true" click-outside-to-close="true" type="text" short-time="true" \nminute-steps="1" format="DD-MM-YYYY HH:mm" placeholder="Th\u1EDDi gian \u0111\xF3ng c\u01B0\u1EE3c" show-todays-date="true" \nng-model="vm.Maintenance.EndAt" class="md-input"></div></div><div layout="row" layout-align="space-between center"><span\n flex></span><md-button class="md-raised md-accent" ng-click="vm.updateEvent()" ng-disabled="vm.submitting">C\u1EADp nh\u1EADt\n</md-button></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear></div></div></div>');
    $templateCache.put('app/main/statistical/agency/agency.html', '<div class="page-layout fullwidth statistical-lottery" layout="column"><div class="navigation" layout-gt-sm="row" \nlayout="column"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>T\u1EEB ng\xE0y\n</label><md-datepicker ng-model="vm.filter.FromDate" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.filter.ToDate" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div class="menu-button" layout-gt-sm="row" layout="column"><div layout="row"><md-input-container><md-select \nng-model="vm.filter.GameType" ng-change="vm.changeGame()"><md-option selected="selected" value="-1">T\u1EA5t c\u1EA3</md-option>\n<md-option ng-repeat="item in vm.localData" ng-value="item.GameType">{{ item.GameType | gameXs }}</md-option>\n</md-select></md-input-container><md-input-container ng-if="vm.BetTypes.length"><md-select ng-model="vm.filter.BetType">\n<md-option value="-1" selected="selected"><em>T\u1EA5t c\u1EA3</em></md-option><md-option \nng-repeat="item in vm.BetTypes[0].BetTypes" ng-value="item">{{ item | bet }}</md-option></md-select>\n</md-input-container></div><div layout="row" ng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" \nlayout-align-xs="space-between center"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.selectedLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item ng-repeat="item in vm.termLists"><md-button \nng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button" layout-gt-sm="row" layout="column"><md-autocomplete md-input-minlength="4" \nmd-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm t\xE0i kho\u1EA3n qu\u1EA3n tr\u1ECB"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div><div class="menu-button" layout="row"><md-button class="md-raised md-primary" \nng-click="vm.render()" ng-disabled="vm.checkDisabled()">Xem th\u1ED1ng k\xEA</md-button></div></div></div><div flex="100" \nlayout="row" layout-wrap class="statistical-chart"><div layout-gt-sm="row" layout="column" flex="100"><div \nflex-gt-sm="50" flex="100"><div class="chart"><div layout="column" class="chart-content manager" id="TurnOver"></div>\n</div></div><div flex-gt-sm="50" flex="100"><div class="chart"><div layout="column" class="chart-content manager" \nid="WinLoss"></div></div></div></div></div></div>');
    $templateCache.put('app/main/statistical/general/general.html', '<div class="page-layout fullwidth blank" layout="column"><div flex="100" fill-height fill-width layout="column" \nid="statistical-general" layout="column"><div flex-gt-sm="50" flex="100" plex-offset="25"><div class="chart"><div \nlayout="column" class="chart-content" id="Quarter"></div></div></div></div></div>');
    $templateCache.put('app/main/statistical/lottery/lottery.html', '<div class="page-layout fullwidth statistical-lottery" layout="column"><div class="navigation" layout-gt-sm="row" \nlayout="column"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>T\u1EEB ng\xE0y\n</label><md-datepicker ng-model="vm.filter.FromDate" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.filter.ToDate" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div class="menu-button" layout-gt-sm="row" layout="column"><div layout="row"><md-input-container><md-select \nng-model="vm.filter.GameType" ng-change="vm.changeGame()"><md-option selected="selected" value="-1">T\u1EA5t c\u1EA3</md-option>\n<md-option ng-repeat="item in vm.localData" ng-value="item.GameType">{{ item.GameType | gameXs }}</md-option>\n</md-select></md-input-container><md-input-container ng-if="vm.BetTypes.length"><md-select ng-model="vm.filter.BetType">\n<md-option value="-1" selected="selected"><em>T\u1EA5t c\u1EA3</em></md-option><md-option \nng-repeat="item in vm.BetTypes[0].BetTypes" ng-value="item">{{ item | bet }}</md-option></md-select>\n</md-input-container></div><div layout="row" ng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" \nlayout-align-xs="space-between center"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.selectedLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item ng-repeat="item in vm.termLists"><md-button \nng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu>\n<md-button class="md-raised md-primary" ng-click="vm.renderStatistical()">Xem th\u1ED1ng k\xEA</md-button></div></div></div><div\n flex="100" layout="row" layout-wrap class="statistical-chart"><div flex-gt-sm="50" flex="100"><div class="chart"><div \nlayout="column" class="chart-content" id="TurnOver"></div></div></div><div flex-gt-sm="50" flex="100"><div \nclass="chart"><div layout="column" class="chart-content" id="WinLoss"></div></div></div><div flex-gt-sm="50" flex="100">\n<div class="chart"><div layout="column" class="chart-content" id="Commission"></div></div></div><div flex-gt-sm="50" \nflex="100"><div class="chart"><div layout="column" class="chart-content" id="TopManagerTurnover"></div></div></div><div \nflex-gt-sm="50" flex="100"><div class="chart"><div layout="column" class="chart-content" id="TopManagerLoss"></div>\n</div></div><div flex-gt-sm="50" flex="100"><div class="chart"><div layout="column" class="chart-content" \nid="TopManagerWin"></div></div></div></div></div>');
    $templateCache.put('app/main/statistical/member/member.html', '<div class="page-layout fullwidth statistical-lottery" layout="column"><div class="navigation" layout-gt-sm="row" \nlayout="column"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>T\u1EEB ng\xE0y\n</label><md-datepicker ng-model="vm.filter.FromDate" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.filter.ToDate" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div class="menu-button" layout-gt-sm="row" layout="column"><md-menu><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button \nng-click="vm.selectAllProduct($index)" md-prevent-menu-close="md-prevent-menu-close"><md-icon \nmd-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item ng-repeat="item in vm.productions"><md-button ng-click="vm.selectProduct(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu><div layout="row" ng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center">\n<md-menu><md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">\n{{vm.selectedLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content \nwidth="3"><md-menu-item ng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" \nng-class="{\'md-accent\': item.active}"><md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline">\n</md-icon><md-icon ng-if="item.active" md-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button>\n</md-menu-item></md-menu-content></md-menu><md-button class="md-raised md-primary" ng-click="vm.renderStatistical()">\nXem th\u1ED1ng k\xEA</md-button></div></div></div><div flex="100" layout="row" layout-wrap class="statistical-chart"><div \nflex-gt-sm="50" flex="100"><div class="chart"><div layout="column" class="chart-content table"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="table-title">H\u1ED9i vi\xEAn th\u1EAFng nhi\u1EC1u nh\u1EA5t</div><table \nclass="simple" ms-responsive-table><thead><tr><th colspan="2">#</th><th>H\u1ED9i vi\xEAn</th><th class="text-right">Ti\u1EC1n c\u01B0\u1EE3c\n</th><th class="text-right">Th\u1EAFng thua</th><th class="text-right">C\xF4ng ty th\u1EAFng/thua</th><th class="text-right">T\u1EF7 l\u1EC7\n</th></tr></thead><tbody><tr ng-repeat="item in vm.members.top_win"><td class="">{{$index + 1}}</td><td \nclass="ancestors"><md-button class="md-icon-button" aria-label="icon-account-network" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="vm.getAncestors(item)"><md-icon \nmd-font-icon="icon-account-network"></md-icon></md-button></td><td class="name">{{item.username}}</td><td \nclass="text-right">{{item.amount | currency : \'\' : 0 }}</td><td class="text-right" \nng-class="{\'red-800-fg\' : item.win_loss < 0}">{{item.win_loss | currency : \'\' : 0 }}</td><td class="text-right" \nng-class="{\'red-800-fg\' : item.company_total_win_loss < 0}"><span class="difference" \nng-class="vm.getFieldClass(item.index_win_loss)">{{item.company_total_win_loss | currency : \'\' : 0 }}</span></td><td \nclass="text-right"><span class="difference" ng-class="vm.getFieldClass(item.index_ratio)">{{item.win_loss_ratio}}</span>\n</td></tr></tbody></table></div></div></div></div><div flex-gt-sm="50" flex="100"><div class="chart"><div \nlayout="column" class="chart-content table"><div class="simple-table-container md-whiteframe-4dp"><div \nclass="table-title">H\u1ED9i vi\xEAn t\u1EF7 l\u1EC7 th\u1EAFng cao nh\u1EA5t</div><table class="simple" ms-responsive-table><thead><tr><th \ncolspan="2">#</th><th>H\u1ED9i vi\xEAn</th><th class="text-right">Ti\u1EC1n c\u01B0\u1EE3c</th><th class="text-right">Th\u1EAFng thua</th><th \nclass="text-right">C\xF4ng ty th\u1EAFng/thua</th><th class="text-right">T\u1EF7 l\u1EC7</th></tr></thead><tbody><tr \nng-repeat="item in vm.members.top_win_ratio"><td class="">{{$index + 1}}</td><td class="ancestors"><md-button \nclass="md-icon-button" aria-label="icon-account-network" ns-popover ns-popover-template="parentClass" \nns-popover-on-open="vm.getAncestors(item)"><md-icon md-font-icon="icon-account-network"></md-icon></md-button></td><td \nclass="name">{{item.username}}</td><td class="text-right">{{item.amount | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.win_loss < 0}">{{item.win_loss | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.company_total_win_loss < 0}"><span class="difference" \nng-class="vm.getFieldClass(item.index_win_loss)">{{item.company_total_win_loss | currency : \'\' : 0 }}</span></td><td \nclass="text-right"><span class="difference" ng-class="vm.getFieldClass(item.index_ratio)">{{item.win_loss_ratio}}</span>\n</td></tr></tbody></table></div></div></div></div><div flex-gt-sm="50" flex="100"><div class="chart"><div \nlayout="column" class="chart-content table"><div class="simple-table-container md-whiteframe-4dp"><div \nclass="table-title">H\u1ED9i vi\xEAn thua nhi\u1EC1u nh\u1EA5t</div><table class="simple" ms-responsive-table><thead><tr><th colspan="2">#\n</th><th>H\u1ED9i vi\xEAn</th><th class="text-right">Ti\u1EC1n c\u01B0\u1EE3c</th><th class="text-right">Th\u1EAFng thua</th><th class="text-right">\nC\xF4ng ty th\u1EAFng/thua</th><th class="text-right">T\u1EF7 l\u1EC7</th></tr></thead><tbody><tr ng-repeat="item in vm.members.top_loss">\n<td class="">{{$index + 1}}</td><td class="ancestors"><md-button class="md-icon-button" \naria-label="icon-account-network" ns-popover ns-popover-template="parentClass" \nns-popover-on-open="vm.getAncestors(item)"><md-icon md-font-icon="icon-account-network"></md-icon></md-button></td><td \nclass="name">{{item.username}}</td><td class="text-right">{{item.amount | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.win_loss < 0}">{{item.win_loss | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.company_total_win_loss < 0}"><span class="difference" \nng-class="vm.getFieldClass(item.index_win_loss)">{{item.company_total_win_loss | currency : \'\' : 0 }}</span></td><td \nclass="text-right"><span class="difference" ng-class="vm.getFieldClass(item.index_ratio)">{{item.win_loss_ratio}}</span>\n</td></tr></tbody></table></div></div></div></div><div flex-gt-sm="50" flex="100"><div class="chart"><div \nlayout="column" class="chart-content table"><div class="simple-table-container md-whiteframe-4dp"><div \nclass="table-title">H\u1ED9i vi\xEAn - C\xF4ng ty thua nhi\u1EC1u nh\u1EA5t</div><table class="simple" ms-responsive-table><thead><tr><th \ncolspan="2">#</th><th>H\u1ED9i vi\xEAn</th><th class="text-right">Ti\u1EC1n c\u01B0\u1EE3c</th><th class="text-right">Th\u1EAFng thua</th><th \nclass="text-right">C\xF4ng ty th\u1EAFng/thua</th><th class="text-right">T\u1EF7 l\u1EC7</th></tr></thead><tbody><tr \nng-repeat="item in vm.members.top_company_loss"><td class="">{{$index + 1}}</td><td class="ancestors"><md-button \nclass="md-icon-button" aria-label="icon-account-network" ns-popover ns-popover-template="parentClass" \nns-popover-on-open="vm.getAncestors(item)"><md-icon md-font-icon="icon-account-network"></md-icon></md-button></td><td \nclass="name">{{item.username}}</td><td class="text-right">{{item.amount | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.win_loss < 0}">{{item.win_loss | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.company_total_win_loss < 0}"><span class="difference" \nng-class="vm.getFieldClass(item.index_win_loss)">{{item.company_total_win_loss | currency : \'\' : 0 }}</span></td><td \nclass="text-right"><span class="difference" ng-class="vm.getFieldClass(item.index_ratio)">{{item.win_loss_ratio}}</span>\n</td></tr></tbody></table></div></div></div></div><div flex-gt-sm="50" flex="100"><div class="chart"><div \nlayout="column" class="chart-content table"><div class="simple-table-container md-whiteframe-4dp"><div \nclass="table-title">H\u1ED9i vi\xEAn c\u01B0\u1EE3c nhi\u1EC1u nh\u1EA5t</div><table class="simple" ms-responsive-table><thead><tr><th colspan="2">#\n</th><th>H\u1ED9i vi\xEAn</th><th class="text-right">Ti\u1EC1n c\u01B0\u1EE3c</th><th class="text-right">Th\u1EAFng thua</th><th class="text-right">\nC\xF4ng ty th\u1EAFng/thua</th><th class="text-right">T\u1EF7 l\u1EC7</th></tr></thead><tbody><tr \nng-repeat="item in vm.members.top_turnover"><td class="">{{$index + 1}}</td><td class="ancestors"><md-button \nclass="md-icon-button" aria-label="icon-account-network" ns-popover ns-popover-template="parentClass" \nns-popover-on-open="vm.getAncestors(item)"><md-icon md-font-icon="icon-account-network"></md-icon></md-button></td><td \nclass="name">{{item.username}}</td><td class="text-right">{{item.amount | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.win_loss < 0}">{{item.win_loss | currency : \'\' : 0 }}</td><td \nclass="text-right" ng-class="{\'red-800-fg\' : item.company_total_win_loss < 0}"><span class="difference" \nng-class="vm.getFieldClass(item.index_win_loss)">{{item.company_total_win_loss | currency : \'\' : 0 }}</span></td><td \nclass="text-right"><span class="difference" ng-class="vm.getFieldClass(item.index_ratio)">{{item.win_loss_ratio}}</span>\n</td></tr></tbody></table></div></div></div></div></div></div><script type="text/ng-template" id="parentClass">\n<div class="triangle"></div>    <div class="ns-popover-tooltip ns-popover-ancestors">\n        <div layout="column" class="panel">\n            <div class="header" layout="row" layout-align="space-between center">\n                <h3>L\u1EDBp cha</h3>\n                <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n            </div>\n            <div class="content">\n                <div layout="row" layout-align="center center" ng-if="!vm.parents.length">\n                    <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                </div>\n                <div layout="row" ng-repeat="item in vm.parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">{{item.Username}}</span>\n                            <span flex ng-if="$index !== 0"><a ui-sref="app.account.agency({match: item.Username, type: \'keyword\', page: 1})">{{item.Username}}</a></span>\n                        </span>\n                </div>\n            </div>\n        </div>\n    </div></script>');
    $templateCache.put('app/main/statistical/production/production.html', '<div class="page-layout fullwidth statistical-lottery" layout="column"><div class="navigation" layout-gt-sm="row" \nlayout="column"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>T\u1EEB ng\xE0y\n</label><md-datepicker ng-model="vm.filter.FromDate" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.filter.ToDate" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div class="menu-button" layout="row" layout-align-xs="end center"><md-menu><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu>\n<md-button class="md-raised md-primary" ng-click="vm.renderStatistical()">Xem th\u1ED1ng k\xEA</md-button></div></div><div \nflex="100" layout="row" layout-wrap class="statistical-chart"><div flex-gt-sm="50" flex="100" class="chart"><div \nlayout="column" class="chart-content" id="Turnover"></div></div><div flex-gt-sm="50" flex="100" class="chart"><div \nlayout="column" class="chart-content" id="WinLoss"></div></div><div flex-gt-sm="50" flex="100" class="chart"><div \nlayout="column" class="chart-content" id="PlayerBetDaily"></div></div><div flex-gt-sm="50" flex="100" class="chart"><div\n layout="column" class="chart-content"><table class="simple members" ms-responsive-table><thead><tr><th>Ng\xE0y</th><th>\nS\u1EA3n ph\u1EA9m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>H\u1ED9i vi\xEAn</th></tr></thead><tbody \nng-repeat="item in vm.chartsData"><tr><td rowspan="{{ item.products.length }}" class="text-center">{{item.date}}</td><td\n class="text-right">{{item.products[0].product | Production }}</td><td class="text-right">\n{{item.products[0].player_amount | currency : \'\' : 0 }}</td><td class="text-right" \nng-class="{\'red-800-fg\' : item.products[0].total_win_loss < 0}">{{item.products[0].total_win_loss | currency : \'\' : 0 }}\n</td><td class="text-right">{{item.products[0].total | currency : \'\' : 0 }}</td></tr><tr \nng-repeat="prod in item.products" ng-show="$index !== 0"><td class="text-right">{{prod.product | Production }}</td><td \nclass="text-right">{{prod.player_amount | currency : \'\' : 0 }}</td><td class="text-right" \nng-class="{\'red-800-fg\' : prod.total_win_loss < 0}">{{prod.total_win_loss | currency : \'\' : 0 }}</td><td \nclass="text-right">{{prod.total | currency : \'\' : 0 }}</td></tr></tbody></table></div></div></div></div>');
    $templateCache.put('app/quick-panel/tabs/activity/activity-tab.html', '<md-list class="friends"><md-subheader class="md-no-sticky"><span translate="QUICKPANEL.FRIENDS">Friends</span>\n</md-subheader><md-list-item class="friend md-3-line" ng-repeat="friend in vm.activities.friends"><img \nng-src="{{friend.avatar}}" class="md-avatar" alt="{{friend.name}}"><div class="status {{friend.status}}"></div><div \nng-if="contact.unread" class="md-accent-bg unread-message-count">{{contact.unread}}</div><div class="md-list-item-text">\n<h3 class="message">{{friend.message}}</h3><p class="time">{{friend.time}}</p></div></md-list-item></md-list>\n<md-divider></md-divider><md-list class="servers"><md-subheader class="md-no-sticky"><span \ntranslate="QUICKPANEL.APP_SERVERS">Application Servers</span></md-subheader><md-list-item class="server md-3-line" \nng-repeat="server in vm.activities.servers"><md-icon md-font-icon="icon-checkbox-blank-circle" class="s16 status" \nng-class="server.status"></md-icon><div class="md-list-item-text"><h3>{{server.location}}</h3><p>{{server.detail}}</p>\n</div></md-list-item></md-list><md-divider></md-divider><md-list class="stats"><md-subheader class="md-no-sticky"><span \ntranslate="QUICKPANEL.USER_STATS">User Stats</span></md-subheader><md-list-item class="stat md-2-line" \nng-repeat="stat in vm.activities.stats"><div class="md-list-item-text"><span>\n{{stat.title}} ({{stat.current}} / {{stat.total}})</span><md-progress-linear ng-class="stat.status" \nmd-mode="determinate" value="{{stat.percent}}"></md-progress-linear></div></md-list-item></md-list>');
    $templateCache.put('app/quick-panel/tabs/chat/chat-tab.html', '<div class="main animate-slide-left" ng-hide="vm.chatActive"><md-list class="recent"><md-subheader class="md-no-sticky">\n<span translate="QUICKPANEL.RECENT">Recent</span></md-subheader><md-list-item class="contact md-3-line" \nng-repeat="contact in vm.contacts.recent" ng-click="vm.toggleChat(contact)"><img ng-src="{{contact.avatar}}" \nclass="md-avatar" alt="{{contact.name}}"><div class="status {{contact.status}}"></div><div ng-if="contact.unread" \nclass="md-accent-bg unread-message-count">{{contact.unread}}</div><div class="md-list-item-text"><h3>{{contact.name}}\n</h3><p class="last-message">{{contact.lastMessage}}</p></div></md-list-item></md-list><md-divider></md-divider><md-list\n class="all"><md-subheader class="md-no-sticky"><span translate="QUICKPANEL.START_NEW_CHAT">Start New Chat</span>\n</md-subheader><md-list-item class="contact" ng-repeat="contact in vm.contacts.all" ng-click="vm.toggleChat(contact)">\n<img ng-src="{{contact.avatar}}" class="md-avatar" alt="{{contact.name}}"><div class="status {{contact.status}}"></div>\n<div class="md-list-item-text"><h3>{{contact.name}}</h3></div></md-list-item></md-list><md-divider></md-divider></div>\n<div class="chat animate-slide-right" ng-show="vm.chatActive" layout="column"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools" layout="row" layout-align="space-between center"><div layout="row" layout-align="start center">\n<md-button class="md-icon-button" ng-click="vm.toggleChat()" aria-label="Back" translate \ntranslate-attr-aria-label="QUICKPANEL.BACK"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h4>\n<span>{{vm.chat.contact.name}}</span></h4></div><div layout="row" layout-align="end center"><md-button \nclass="md-icon-button" aria-label="Call" translate translate-attr-aria-label="QUICKPANEL.CALL"><md-icon \nmd-font-icon="icon-phone"></md-icon></md-button><md-button class="md-icon-button" aria-label="More" translate \ntranslate-attr-aria-label="QUICKPANEL.MORE"><md-icon md-font-icon="icon-dots-vertical"></md-icon></md-button></div>\n</div></md-toolbar><md-content flex layout-paddings ms-scroll id="chat-dialog"><div layout="row" \nng-repeat="dialog in vm.chat.contact.dialog" class="md-padding message-row" ng-class="dialog.who"><img \nng-if="dialog.who ===\'contact\'" ng-src="{{vm.chat.contact.avatar}}" class="avatar" alt="{{vm.chat.contact.name}}"> <img \nng-if="dialog.who ===\'user\'" class="avatar" src="assets/images/avatars/profile.jpg"><div class="bubble" flex><div \nclass="message">{{dialog.message}}</div><div class="time secondary-text">{{dialog.time}}</div></div></div></md-content>\n<form ng-submit="vm.reply()" layout="row" class="reply" layout-align="start center"><textarea \nng-keyup="$event.keyCode == 13 ? vm.reply() : null" flex ng-model="vm.replyMessage" \nplaceholder="Type and hit enter to send message" translate translate-attr-placeholder="QUICKPANEL.REPLY_PLACEHOLDER">\n</textarea><md-button class="md-fab md-mini" type="submit" aria-label="Send message" translate \ntranslate-attr-aria-label="QUICKPANEL.SEND_MESSAGE"><md-icon md-font-icon="icon-send" class="s16"></md-icon></md-button>\n</form></div>');
    $templateCache.put('app/quick-panel/tabs/today/today-tab.html', '<md-list class="date"><md-subheader class="md-no-sticky"><span translate="QUICKPANEL.TODAY">Today</span></md-subheader>\n<md-list-item class="md-display-1 md-2-line"><div class="secondary-text"><div>{{vm.date | date:\'EEEE\'}}</div><div \nlayout="row" layout-align="start start"><span>{{vm.date | date:\'d\'}}</span> <span class="md-subhead">th</span> <span>\n{{vm.date | date:\'MMMM\'}}</span></div></div></md-list-item></md-list><md-divider></md-divider><md-list><md-subheader \nclass="md-no-sticky"><span translate="QUICKPANEL.EVENTS">Events</span></md-subheader><md-list-item class="md-2-line" \nng-repeat="event in vm.events" ng-click="dummyFunction()"><div class="md-list-item-text"><h3>{{event.title}}</h3><p>\n{{event.detail}}</p></div></md-list-item></md-list><md-divider></md-divider><md-list><md-subheader class="md-no-sticky">\n<span translate="QUICKPANEL.NOTES">Notes</span></md-subheader><md-list-item class="md-2-line" \nng-repeat="note in vm.notes" ng-click="dummyFunction()"><div class="md-list-item-text"><h3>{{note.title}}</h3><p>\n{{note.detail}}</p></div></md-list-item></md-list><md-divider></md-divider><md-list><md-subheader class="md-no-sticky">\n<span translate="QUICKPANEL.QUICK_SETTINGS">Quick Settings</span></md-subheader><md-list-item><h3 \ntranslate="QUICKPANEL.NOTIFICATIONS">Notifications</h3><md-switch class="md-secondary" ng-model="vm.settings.notify" \naria-label="Notifications" translate translate-attr-aria-label="QUICKPANEL.NOTIFICATIONS"></md-switch></md-list-item>\n<md-list-item><h3 translate="QUICKPANEL.CLOUD_SYNC">Cloud Sync</h3><md-switch class="md-secondary" \nng-model="vm.settings.cloud" aria-label="Cloud Sync" translate translate-attr-aria-label="QUICKPANEL.CLOUD_SYNC">\n</md-switch></md-list-item><md-list-item><h3 translate="QUICKPANEL.RETRO_THRUSTERS">Retro Thrusters</h3><md-switch \nclass="md-secondary md-warn" ng-model="vm.settings.retro" aria-label="Retro Thrusters" translate \ntranslate-attr-aria-label="QUICKPANEL.RETRO_THRUSTERS"></md-switch></md-list-item></md-list>');
    $templateCache.put('app/toolbar/layouts/content-with-toolbar/toolbar.html', '<div layout="row" layout-align="space-between center"><div layout="row" layout-align="start center"><div class="logo" \nlayout="row" layout-align="start center"><span class="logo-image">F</span> <span class="logo-text">FUSE</span></div><div\n class="toolbar-separator"></div><ms-shortcuts></ms-shortcuts><div class="toolbar-separator"></div></div><div \nlayout="row" layout-align="start center"><md-progress-circular id="toolbar-progress" ng-if="$root.loadingProgress" \nclass="md-accent" md-mode="indeterminate" md-diameter="32"></md-progress-circular><div class="toolbar-separator"></div>\n<md-menu-bar id="user-menu"><md-menu md-position-mode="left bottom"><md-button class="user-button" \nng-click="$mdOpenMenu()" aria-label="User settings" translate translate-attr-aria-label="TOOLBAR.USER_SETTINGS"><div \nlayout="row" layout-align="space-between center"><div class="avatar-wrapper"><img md-menu-align-target class="avatar" \nsrc="assets/images/avatars/profile.jpg"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon status s16"></md-icon></div><span class="username" hide-sm>\nJohn Doe</span><md-icon md-font-icon="icon-chevron-down" class="icon s16" hide-sm></md-icon></div></md-button>\n<md-menu-content width="3"><md-menu-item class="md-indent" ui-sref="app.pages_profile"><md-icon \nmd-font-icon="icon-account" class="icon"></md-icon><md-button>My Profile</md-button></md-menu-item><md-menu-item \nclass="md-indent" ui-sref="app.mail"><md-icon md-font-icon="icon-email" class="icon"></md-icon><md-button>Inbox\n</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon"></md-icon><md-menu id="user-status-menu"><md-button \nng-click="$mdOpenMenu()" class="status" ng-class="vm.userStatus.class">{{vm.userStatus.title}}</md-button>\n<md-menu-content width="2"><md-menu-item class="status md-indent" ng-class="{\'selected\': status === vm.userStatus}" \nng-repeat="status in vm.userStatusOptions"><md-icon md-font-icon="{{status.icon}}" ng-style="{\'color\': status.color }" \nclass="icon"></md-icon><md-button ng-click="vm.setUserStatus(status)">{{status.title}}</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="icon"></md-icon><md-button ng-click="vm.logout()">Logout</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><div class="toolbar-separator"></div><ms-search-bar \non-search="vm.search(query)" on-result-click="vm.searchResultClick(item)" debounce="300"></ms-search-bar><div \nclass="toolbar-separator"></div><md-menu id="language-menu" md-offset="0 72" md-position-mode="target-right target">\n<md-button class="language-button" ng-click="$mdOpenMenu()" aria-label="Language" md-menu-origin md-menu-align-target>\n<div layout="row" layout-align="center center"><img class="flag" \nng-src="assets/images/flags/{{vm.selectedLanguage.flag}}.png"> <span class="iso">{{vm.selectedLanguage.code}}</span>\n</div></md-button><md-menu-content width="3" id="language-menu-content"><md-menu-item \nng-repeat="(iso, lang) in vm.languages"><md-button ng-click="vm.changeLanguage(lang)" aria-label="{{lang.title}}" \ntranslate translate-attr-aria-label="{{lang.title}}"><span layout="row" layout-align="start center"><img class="flag" \nng-src="assets/images/flags/{{lang.flag}}.png"> <span translate="{{lang.translation}}">{{lang.title}}</span></span>\n</md-button></md-menu-item></md-menu-content></md-menu><div class="toolbar-separator"></div><md-button \nid="quick-panel-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'quick-panel\')" \naria-label="Toggle quick panel" translate translate-attr-aria-label="TOOLBAR.TOGGLE_QUICK_PANEL"><md-icon \nmd-font-icon="icon-format-list-bulleted" class="icon"></md-icon></md-button></div></div>');
    $templateCache.put('app/toolbar/layouts/horizontal-navigation/toolbar.html', '<div class="top-row" layout="row" layout-align="space-between center"><div layout="row" layout-align="start center"><div\n class="navigation-toggle" hide-gt-sm><md-button class="md-icon-button" ng-click="vm.toggleHorizontalMobileMenu()" \naria-label="Toggle Mobile Navigation"><md-icon md-font-icon="icon-menu"></md-icon></md-button></div><div class="logo" \nlayout="row" layout-align="start center"><span class="logo-image">F</span> <span class="logo-text">FUSE</span></div>\n</div><div layout="row" layout-align="start center"><md-progress-circular id="toolbar-progress" \nng-if="$root.loadingProgress" class="md-accent" md-mode="indeterminate" md-diameter="32"></md-progress-circular>\n<ms-shortcuts></ms-shortcuts><md-menu-bar id="user-menu"><md-menu md-position-mode="left bottom"><md-button \nclass="user-button" ng-click="$mdOpenMenu()" aria-label="User settings" translate \ntranslate-attr-aria-label="TOOLBAR.USER_SETTINGS"><div layout="row" layout-align="space-between center"><div \nclass="avatar-wrapper"><img md-menu-align-target class="avatar" src="assets/images/avatars/profile.jpg"><md-icon \nmd-font-icon ng-class="vm.userStatus.icon" ng-style="{\'color\': vm.userStatus.color }" class="icon status s16"></md-icon>\n</div><span class="username" hide-sm>John Doe</span><md-icon md-font-icon="icon-chevron-down" class="icon s16" hide-sm>\n</md-icon></div></md-button><md-menu-content width="3"><md-menu-item class="md-indent" ui-sref="app.pages_profile">\n<md-icon md-font-icon="icon-account" class="icon"></md-icon><md-button>My Profile</md-button></md-menu-item>\n<md-menu-item class="md-indent" ui-sref="app.mail"><md-icon md-font-icon="icon-email" class="icon"></md-icon><md-button>\nInbox</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon"></md-icon><md-menu id="user-status-menu"><md-button \nng-click="$mdOpenMenu()" class="status" ng-class="vm.userStatus.class">{{vm.userStatus.title}}</md-button>\n<md-menu-content width="2"><md-menu-item class="status md-indent" ng-class="{\'selected\': status === vm.userStatus}" \nng-repeat="status in vm.userStatusOptions"><md-icon md-font-icon="{{status.icon}}" ng-style="{\'color\': status.color }" \nclass="icon"></md-icon><md-button ng-click="vm.setUserStatus(status)">{{status.title}}</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="icon"></md-icon><md-button ng-click="vm.logout()">Logout</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><ms-search-bar on-search="vm.search(query)" \non-result-click="vm.searchResultClick(item)" debounce="300"></ms-search-bar><md-menu id="language-menu" \nmd-offset="0 72" md-position-mode="target-right target"><md-button class="language-button" ng-click="$mdOpenMenu()" \naria-label="Language" md-menu-origin md-menu-align-target><div layout="row" layout-align="center center"><img \nclass="flag" ng-src="assets/images/flags/{{vm.selectedLanguage.flag}}.png"> <span class="iso">\n{{vm.selectedLanguage.code}}</span></div></md-button><md-menu-content width="3" id="language-menu-content"><md-menu-item\n ng-repeat="(iso, lang) in vm.languages"><md-button ng-click="vm.changeLanguage(lang)" aria-label="{{lang.title}}" \ntranslate translate-attr-aria-label="{{lang.title}}"><span layout="row" layout-align="start center"><img class="flag" \nng-src="assets/images/flags/{{lang.flag}}.png"> <span translate="{{lang.translation}}">{{lang.title}}</span></span>\n</md-button></md-menu-item></md-menu-content></md-menu><md-button id="quick-panel-toggle" class="md-icon-button" \nng-click="vm.toggleSidenav(\'quick-panel\')" aria-label="Toggle quick panel" translate \ntranslate-attr-aria-label="TOOLBAR.TOGGLE_QUICK_PANEL"><md-icon md-font-icon="icon-format-list-bulleted" class="icon">\n</md-icon></md-button></div></div>');
    $templateCache.put('app/toolbar/layouts/vertical-navigation/toolbar.html', '<div layout="row" layout-align="start center"><div layout="row" layout-align="start center"><md-button \nid="navigation-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'navigation\')" hide-gt-sm \naria-label="Toggle navigation"><md-icon md-font-icon="icon-menu" class="icon"></md-icon></md-button><md-button \nclass="md-icon-button md-accent" aria-label="telegram" ui-sref="app.my.telegram"><md-icon md-font-icon="icon-telegram" \nclass="icon"></md-icon></md-button><ms-shortcuts ng-hide="$mdMedia(\'xs\')"></ms-shortcuts><div class="toolbar-separator" \nng-hide="$mdMedia(\'xs\')"></div><div class="user-online" ng-if="$root.User.Level === 1" ng-hide="$mdMedia(\'xs\')"><label>\n</label> {{$root.UserOnline | currency : \'\' : 0}}</div></div><div flex id="info-bar-message"><div class="notification" \nng-show="$root.infoBars.length" ng-if="$mdMedia(\'min-width: 1365px\')"><p class="marquee"><span \nng-repeat="item in $root.infoBars"><label>{{ item.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</label>\n{{ item.Message | htmlToPlaintext }}</span></p></div></div><div layout="row" layout-align="start center">\n<md-progress-circular id="toolbar-progress" ng-disabled="!$root.loadingProgress" class="md-accent" md-diameter="32">\n</md-progress-circular><md-menu-bar id="user-menu"><md-menu md-position-mode="left bottom"><md-button \nclass="user-button" ng-click="$mdMenu.open()" aria-label="User settings" translate \ntranslate-attr-aria-label="TOOLBAR.USER_SETTINGS"><div layout="row" layout-align="space-between center"><span \nclass="username">{{$root.User.Username}}</span><md-icon md-font-icon="icon-chevron-down" class="icon s16"></md-icon>\n</div></md-button><md-menu-content width="3"><md-menu-item class="md-indent" ui-sref="app.my.password"><md-icon \nmd-font-icon="icon-key" class="icon"></md-icon><md-button>Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u</md-button></md-menu-item><md-menu-item \nclass="md-indent" ui-sref="app.my.otp"><md-icon md-font-icon="icon-security" class="icon"></md-icon><md-button>\nC\xE0i \u0111\u1EB7t OTP</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent" \nui-sref="app.my.telegram"><md-icon md-font-icon="icon-telegram" class="icon"></md-icon><md-button>Li\xEAn k\u1EBFt Telegram\n</md-button></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="icon"></md-icon><md-button ng-click="vm.signOut()">Tho\xE1t</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><div class="toolbar-separator" ng-hide="$mdMedia(\'xs\')"></div><ms-search-bar \non-search="vm.search(query)" on-result-click="vm.searchResultClick(item)" debounce="300" ng-hide="$mdMedia(\'xs\')">\n</ms-search-bar><div class="toolbar-separator"></div><md-menu id="notification-menu" md-offset="0 72" \nmd-position-mode="target-right target"><md-button id="quick-panel-toggle" ng-click="$mdMenu.open()" \nclass="md-icon-button" aria-label="Notify"><md-icon md-font-icon="icon-bell" class="s28"></md-icon><label \nng-if="$root.bellUnRead !== 0"></label></md-button><md-menu-content width="6" id="notification-content" \nclass="scrollable" ms-scroll><md-menu-item ng-repeat="item in $root.bellNotifications | limitTo : 10"><div layout="row" \nlayout-align="start center" class="button" ng-click="vm.viewNotification(item)"><div class="thumb"></div><div \nlayout="column" class="notification"><div class="text" ng-class="{\'un-read\' : !item.Read}">\n{{ item.Message | htmlToPlaintext }}</div><div class="date">{{ item.CreatedAt | amDateFormat: \'DD/MM/YYYY HH:mm\' }}\n</div></div></div></md-menu-item></md-menu-content></md-menu><md-button id="quick-panel-toggle" class="md-icon-button" \nng-click="vm.toggleSidenav(\'quick-panel\')" aria-label="Toggle quick panel" hide><md-icon \nmd-font-icon="icon-format-list-bulleted" class="icon"></md-icon></md-button></div></div>');
    $templateCache.put('app/toolbar/layouts/vertical-navigation-fullwidth-toolbar/toolbar.html', '<div layout="row" layout-align="start center"><div layout="row" layout-align="start center" flex><md-button \nid="navigation-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'navigation\')" hide-gt-sm \naria-label="Toggle navigation" translate translate-attr-aria-label="TOOLBAR.TOGGLE_NAVIGATION"><md-icon \nmd-font-icon="icon-menu" class="icon"></md-icon></md-button><ms-search-bar on-search="vm.search(query)" \non-result-click="vm.searchResultClick(item)" debounce="300"></ms-search-bar><div class="toolbar-separator"></div>\n<ms-shortcuts></ms-shortcuts><div class="toolbar-separator"></div></div><div layout="row" layout-align="start center">\n<md-progress-circular id="toolbar-progress" ng-if="$root.loadingProgress" class="md-accent" md-mode="indeterminate" \nmd-diameter="32"></md-progress-circular><md-menu-bar id="user-menu"><md-menu md-position-mode="left bottom"><md-button \nclass="user-button" ng-click="$mdOpenMenu()" aria-label="User settings" translate \ntranslate-attr-aria-label="TOOLBAR.USER_SETTINGS"><div layout="row" layout-align="space-between center"><div \nclass="avatar-wrapper"><img md-menu-align-target class="avatar" src="assets/images/avatars/profile.jpg"><md-icon \nmd-font-icon ng-class="vm.userStatus.icon" ng-style="{\'color\': vm.userStatus.color }" class="icon status s16"></md-icon>\n</div><span class="username" hide-sm>John Doe</span><md-icon md-font-icon="icon-chevron-down" class="icon s16" hide-sm>\n</md-icon></div></md-button><md-menu-content width="3"><md-menu-item class="md-indent" ui-sref="app.pages_profile">\n<md-icon md-font-icon="icon-account" class="icon"></md-icon><md-button>My Profile</md-button></md-menu-item>\n<md-menu-item class="md-indent" ui-sref="app.mail"><md-icon md-font-icon="icon-email" class="icon"></md-icon><md-button>\nInbox</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon"></md-icon><md-menu id="user-status-menu"><md-button \nng-click="$mdOpenMenu()" class="status" ng-class="vm.userStatus.class">{{vm.userStatus.title}}</md-button>\n<md-menu-content width="2"><md-menu-item class="status md-indent" ng-class="{\'selected\': status === vm.userStatus}" \nng-repeat="status in vm.userStatusOptions"><md-icon md-font-icon="{{status.icon}}" ng-style="{\'color\': status.color }" \nclass="icon"></md-icon><md-button ng-click="vm.setUserStatus(status)">{{status.title}}</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="icon"></md-icon><md-button ng-click="vm.logout()">Logout</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><div class="toolbar-separator"></div><md-menu id="language-menu" \nmd-offset="0 72" md-position-mode="target-right target"><md-button class="language-button" ng-click="$mdOpenMenu()" \naria-label="Language" md-menu-origin md-menu-align-target><div layout="row" layout-align="center center"><img \nclass="flag" ng-src="assets/images/flags/{{vm.selectedLanguage.flag}}.png"> <span class="iso">\n{{vm.selectedLanguage.code}}</span></div></md-button><md-menu-content width="3" id="language-menu-content"><md-menu-item\n ng-repeat="(iso, lang) in vm.languages"><md-button ng-click="vm.changeLanguage(lang)" aria-label="{{lang.title}}" \ntranslate translate-attr-aria-label="{{lang.title}}"><span layout="row" layout-align="start center"><img class="flag" \nng-src="assets/images/flags/{{lang.flag}}.png"> <span translate="{{lang.translation}}">{{lang.title}}</span></span>\n</md-button></md-menu-item></md-menu-content></md-menu><div class="toolbar-separator"></div><md-button \nid="quick-panel-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'quick-panel\')" \naria-label="Toggle quick panel" translate translate-attr-aria-label="TOOLBAR.TOGGLE_QUICK_PANEL"><md-icon \nmd-font-icon="icon-format-list-bulleted" class="icon"></md-icon></md-button></div></div>');
    $templateCache.put('app/toolbar/layouts/vertical-navigation-fullwidth-toolbar-2/toolbar.html', '<div layout="row" layout-align="start center"><div layout="row" layout-align="start center" flex><div class="logo" \nlayout="row" layout-align="start center"><span class="logo-image">F</span> <span class="logo-text">FUSE</span></div><div\n class="toolbar-separator"></div><md-button id="navigation-toggle" class="md-icon-button" \nng-click="vm.toggleSidenav(\'navigation\')" hide-gt-sm aria-label="Toggle navigation" translate \ntranslate-attr-aria-label="TOOLBAR.TOGGLE_NAVIGATION"><md-icon md-font-icon="icon-menu" class="icon"></md-icon>\n</md-button><md-button class="md-icon-button navigation-fold-toggle" hide show-gt-sm \naria-label="Toggle navigation fold" translate translate-attr-aria-label="TOOLBAR.TOGGLE_NAVIGATION_FOLD" \nng-click="vm.toggleMsNavigationFolded()"><md-icon class="s18" md-font-icon="icon-backburger"></md-icon></md-button>\n<ms-shortcuts></ms-shortcuts><div class="toolbar-separator"></div></div><div layout="row" layout-align="start center">\n<md-progress-circular id="toolbar-progress" ng-if="$root.loadingProgress" class="md-accent" md-mode="indeterminate" \nmd-diameter="32"></md-progress-circular><md-menu-bar id="user-menu"><md-menu md-position-mode="left bottom"><md-button \nclass="user-button" ng-click="$mdOpenMenu()" aria-label="User settings" translate \ntranslate-attr-aria-label="TOOLBAR.USER_SETTINGS"><div layout="row" layout-align="space-between center"><div \nclass="avatar-wrapper"><img md-menu-align-target class="avatar" src="assets/images/avatars/profile.jpg"><md-icon \nmd-font-icon ng-class="vm.userStatus.icon" ng-style="{\'color\': vm.userStatus.color }" class="icon status s16"></md-icon>\n</div><span class="username" hide-sm>John Doe</span><md-icon md-font-icon="icon-chevron-down" class="icon s16" hide-sm>\n</md-icon></div></md-button><md-menu-content width="3"><md-menu-item class="md-indent" ui-sref="app.pages_profile">\n<md-icon md-font-icon="icon-account" class="icon"></md-icon><md-button>My Profile</md-button></md-menu-item>\n<md-menu-item class="md-indent" ui-sref="app.mail"><md-icon md-font-icon="icon-email" class="icon"></md-icon><md-button>\nInbox</md-button></md-menu-item><md-menu-item class="md-indent"><md-icon md-font-icon ng-class="vm.userStatus.icon" \nng-style="{\'color\': vm.userStatus.color }" class="icon"></md-icon><md-menu id="user-status-menu"><md-button \nng-click="$mdOpenMenu()" class="status" ng-class="vm.userStatus.class">{{vm.userStatus.title}}</md-button>\n<md-menu-content width="2"><md-menu-item class="status md-indent" ng-class="{\'selected\': status === vm.userStatus}" \nng-repeat="status in vm.userStatusOptions"><md-icon md-font-icon="{{status.icon}}" ng-style="{\'color\': status.color }" \nclass="icon"></md-icon><md-button ng-click="vm.setUserStatus(status)">{{status.title}}</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-item><md-menu-divider></md-menu-divider><md-menu-item class="md-indent"><md-icon \nmd-font-icon="icon-logout" class="icon"></md-icon><md-button ng-click="vm.logout()">Logout</md-button></md-menu-item>\n</md-menu-content></md-menu></md-menu-bar><div class="toolbar-separator"></div><ms-search-bar \non-search="vm.search(query)" on-result-click="vm.searchResultClick(item)" debounce="300"></ms-search-bar><div \nclass="toolbar-separator"></div><md-menu id="language-menu" md-offset="0 72" md-position-mode="target-right target">\n<md-button class="language-button" ng-click="$mdOpenMenu()" aria-label="Language" md-menu-origin md-menu-align-target>\n<div layout="row" layout-align="center center"><img class="flag" \nng-src="assets/images/flags/{{vm.selectedLanguage.flag}}.png"> <span class="iso">{{vm.selectedLanguage.code}}</span>\n</div></md-button><md-menu-content width="3" id="language-menu-content"><md-menu-item \nng-repeat="(iso, lang) in vm.languages"><md-button ng-click="vm.changeLanguage(lang)" aria-label="{{lang.title}}" \ntranslate translate-attr-aria-label="{{lang.title}}"><span layout="row" layout-align="start center"><img class="flag" \nng-src="assets/images/flags/{{lang.flag}}.png"> <span translate="{{lang.translation}}">{{lang.title}}</span></span>\n</md-button></md-menu-item></md-menu-content></md-menu><div class="toolbar-separator"></div><md-button \nid="quick-panel-toggle" class="md-icon-button" ng-click="vm.toggleSidenav(\'quick-panel\')" \naria-label="Toggle quick panel" translate translate-attr-aria-label="TOOLBAR.TOGGLE_QUICK_PANEL"><md-icon \nmd-font-icon="icon-format-list-bulleted" class="icon"></md-icon></md-button></div></div>');
    $templateCache.put('app/core/directives/ms-navigation/templates/horizontal.html', '<div class="navigation-toggle" hide-gt-sm><md-button class="md-icon-button" ng-click="vm.toggleHorizontalMobileMenu()" \naria-label="Toggle Mobile Navigation"><md-icon md-font-icon="icon-menu"></md-icon></md-button></div><ul \nclass="horizontal"><li ng-repeat="node in vm.navigation" ms-navigation-horizontal-node="node" \nng-class="{\'has-children\': vm.hasChildren}" ng-include="\'navigation-horizontal-nested.html\'"></li></ul><script \ntype="text/ng-template" id="navigation-horizontal-nested.html">\n<div ms-navigation-horizontal-item layout="row" ng-if="!vm.isHidden()">\n        <div class="ms-navigation-horizontal-button" ng-if="!node.uisref && node.title"\n             ng-class="{\'active md-accent-bg md-accent-fg\': vm.isActive}">\n            <i class="icon s18 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" style="background: {{node.badge.color}}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s18 arrow" ng-if="vm.hasChildren"></i>\n        </div>\n\n        <a class="ms-navigation-horizontal-button" ui-sref="{{node.uisref}}" ui-sref-active="active md-accent-bg"\n           ng-class="{\'active md-accent-bg md-accent-fg\': vm.isActive}"\n           ng-if="node.uisref && node.title">\n            <i class="icon s18 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" style="background: {{node.badge.color}}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s18 arrow" ng-if="vm.hasChildren"></i>\n        </a>\n\n    </div>\n\n    <ul ng-if="vm.hasChildren && !vm.isHidden()">\n        <li ng-repeat="node in node.children" ms-navigation-horizontal-node="node"\n            ng-class="{\'has-children\': vm.hasChildren}"\n            ng-include="\'navigation-horizontal-nested.html\'"></li>\n    </ul></script>');
    $templateCache.put('app/core/directives/ms-navigation/templates/vertical.html', '<ul><li ng-repeat="node in vm.navigation" ms-navigation-node="node" \nng-class="{\'collapsed\': vm.collapsed, \'has-children\': vm.hasChildren}" ng-include="\'navigation-nested.html\'"></li></ul>\n<script type="text/ng-template" id="navigation-nested.html"><div ms-navigation-item layout="row" ng-if="!vm.isHidden()">\n\n        <div class="ms-navigation-button" ng-if="!node.uisref && node.title">\n            <i class="icon s16 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" ng-style="{\'background\': node.badge.color}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s16 arrow" ng-if="vm.collapsable && vm.hasChildren"></i>\n        </div>\n\n        <a class="ms-navigation-button" ui-sref="{{node.uisref}}" ui-sref-active="active md-accent-bg" ui-sref-opts="{inherit: false, reload: true}" ng-if="node.uisref && node.title">\n            <i class="icon s16 {{node.icon}}" ng-if="node.icon"></i>\n            <span class="title" translate="{{node.translate}}" flex>{{node.title}}</span>\n            <span class="badge white-fg" ng-style="{\'background\': node.badge.color}" ng-if="node.badge">{{node.badge.content}}</span>\n            <i class="icon-chevron-right s16 arrow" ng-if="vm.collapsable && vm.hasChildren"></i>\n        </a>\n\n    </div>\n\n    <ul ng-if="vm.hasChildren && !vm.isHidden()">\n        <li ng-repeat="node in node.children" ms-navigation-node="node"\n            ng-class="{\'collapsed\': vm.collapsed, \'has-children\': vm.hasChildren}"\n            ng-include="\'navigation-nested.html\'"></li>\n    </ul></script>');
    $templateCache.put('app/main/account/agency/dialog/betting-limit-dialog.html', '<md-dialog aria-label="share-holder-dialog" class="share-holder-dialog agencies-parameter"><form name="form" \nng-submit="update($event)" novalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>Gi\u1EDBi h\u1EA1n \u0111\u1EB7t c\u01B0\u1EE3c c\u1EE7a t\xE0i kho\u1EA3n {{item.Username}}</h2>\n<span flex></span><md-button class="md-warn md-raised long-btn" aria-label="close" ng-click="update($event)" \nng-disabled="submitting || hasError" ng-if="$mdMedia(\'gt-xs\') && hasWritePermission"><md-icon \nmd-font-icon="icon-content-save"></md-icon>C\u1EADp nh\u1EADt</md-button></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-toolbar><md-dialog-content class=""><div \nclass="md-dialog-content"><md-tabs md-dynamic-height md-border-bottom md-selected="tab"><md-tab \nlabel="X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng" md-on-select="onTabSelected(0)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/betting-limit-template-lottery.html\'"></md-content></md-tab><md-tab\n label="WM Casino" md-on-select="onTabSelected(2)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/betting-limit-template-wm-casino.html\'"></md-content></md-tab>\n<md-tab label="789 Casino" md-on-select="onTabSelected(3)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/betting-limit-template-legend-casino.html\'"></md-content></md-tab>\n<md-tab label="Bong88" md-on-select="onTabSelected(4)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/betting-limit-template-saba.html\'"></md-content></md-tab></md-tabs>\n</div></md-dialog-content><md-dialog-actions layout="row" ng-show="$mdMedia(\'xs\') && hasWritePermission"><md-button \nclass="md-accent md-mini md-raised long-btn" type="submit" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-content-save"></md-icon>C\u1EADp nh\u1EADt</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/biography.dialog.html', '<md-dialog aria-label="change-biography" class="change-biography"><form name="form" ng-submit="submit()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Th\xF4ng tin t\xE0i kho\u1EA3n {{accountInfo.Username}}</h2><span \nflex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><md-input-container class="md-block"><label>H\u1ECD T\xEAn</label> <input name="FullName" \nng-model="accountInfo.FullName" aria-label="FullName" autocomplete="off" minlength="4"><div \nng-messages="form.FullName.$error"><div ng-message="minlength">T\u1ED1i thi\u1EC3u 4 k\xFD t\u1EF1</div></div></md-input-container>\n<md-input-container class="md-block"><label>Ghi ch\xFA</label> <input name="name" ng-model="accountInfo.About" \nautocomplete="off"><div class="hint">C\xF3 th\u1EC3 b\u1ECF tr\u1ED1ng ho\u1EB7c ph\u1EA3i nhi\u1EC1u h\u01A1n 8 k\xFD t\u1EF1</div></md-input-container><div \nlayout="row"><div flex="40">Ng\xE0y t\u1EA1o t\xE0i kho\u1EA3n</div><div flex="60">\n{{ accountInfo.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button>\n<md-button class="md-accent" type="submit" ng-disabled="form.$invalid || form.$pristine  || submitting">Update\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/change_displayname.dialog.html', '<md-dialog aria-label="change-password" class="change-password"><form name="form" ng-submit="submit()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\u0110\u1ED5i t\xEAn hi\u1EC3n th\u1ECB {{accountInfo.Username}}</h2><span \nflex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-change-info-dialog"><div\n class="md-dialog-content"><div layout="column"><div layout="row"><div flex="100"><md-input-container class="md-block" \nflex-gt-sm><label>T\xEAn hi\u1EC3n th\u1ECB</label> <input type="text" name="displayName" ng-model="displayName" minlength="8" \nrequired ng-change="displayOnchange()"><div ng-messages="form.displayName.$error"><div ng-message="minlength">\nT\u1ED1i thi\u1EC3u 8 k\xFD t\u1EF1</div><div ng-message="displayNameExists">T\xEAn n\xE0y \u0111\xE3 c\xF3 ng\u01B0\u1EDDi s\u1EED d\u1EE5ng</div></div></md-input-container>\n</div></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="form.$invalid || form.$pristine  || submitting">OK</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/change_password.dialog.html', '<md-dialog aria-label="change-password" class="change-password"><form name="formPassword" ng-submit="submit()" \nnovalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i m\u1EADt kh\u1EA9u {{accountInfo.Username}}\n</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" \nng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="md-change-password-dialog"><div class="md-dialog-content"><div layout="column"><div layout="row" \nng-if="!data.Automatically" class="fade"><div flex="100"><md-input-container class="md-block" flex-gt-sm><label>Password\n</label> <input ng-attr-type="{{ show ? \'text\' : \'password\' }}" name="password" ng-model="form.password"><md-icon \nng-if="show" md-font-icon="icon-eye" ng-click="showPassword()"></md-icon><md-icon ng-if="!show" \nmd-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon><div class="hint">M\u1EADt kh\u1EA9u y\xEAu c\u1EA7u t\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1\n</div></md-input-container></div></div><div layout="row" hide><div flex="100"><md-switch ng-model="data.Automatically" \naria-label="Switch 1">T\u1EF1 \u0111\u1ED9ng t\u1EA1o m\u1EADt kh\u1EA9u m\u1EDBi</md-switch></div></div><div layout="row" hide><div flex="100"><md-switch \nng-model="data.Ask" aria-label="Switch 2">Y\xEAu c\u1EA7u \u0111\u1ED5i m\u1EADt kh\u1EA9u sau khi \u0111\u0103ng nh\u1EADp</md-switch></div></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">\nCancel</md-button><md-button class="md-accent" type="submit" ng-disabled="disablePost() || submitting">OK</md-button>\n</md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/contract.dialog.html', '<md-dialog aria-label="Bid Rate" class="contract share-holder-dialog"><form name="formBidRate" \nng-submit="changeBidRate()" novalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nTh\xF4ng tin th\u1EA7u t\xE0i kho\u1EA3n: <span>{{userData.Username}}</span></h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}">\n</md-progress-linear></md-toolbar><md-dialog-content class="md-contract-dialog scrollable" ms-scroll><div \nclass="md-dialog-content"><md-tabs md-dynamic-height md-border-bottom md-selected="tab"><md-tab \nlabel="X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng" md-on-select="onTabSelected(0)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/contract.template.lottery.html\'"></md-content></md-tab><md-tab \nlabel="WM Casino" md-on-select="onTabSelected(2)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/contract.template.wm-casino.html\'"></md-content></md-tab><md-tab \nlabel="789 Casino" md-on-select="onTabSelected(3)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/contract.template.legend-casino.html\'"></md-content></md-tab>\n<md-tab label="Bong88" md-on-select="onTabSelected(4)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/contract.template.saba.html\'"></md-content></md-tab></md-tabs>\n</div></md-dialog-content></form></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/create_account.dialog.html', '<md-dialog aria-label="create-account" class="create-account"><form name="form" ng-submit="submit()" novalidate \nautocomplete="off"><md-toolbar class="" ng-class="{ \'md-accent\': !disablePost(), \'md-warn\': disablePost() }"><div \nclass="md-toolbar-tools"><h2>T\u1EA1o t\xE0i kho\u1EA3n {{usersGroups[0].name}}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><div layout="row" layout-xs="column"><div flex="50" flex-xs="100"><md-input-container \nclass="md-block"><label>T\xE0i kho\u1EA3n</label> <input type="text" name="username" ng-model="user.username" minlength="4" \naria-label="username" autocomplete="off" ng-blur="checkNameExists()"><div ng-messages="form.username.$error"><div \nng-message="minlength">T\u1ED1i thi\u1EC3u 4 k\xFD t\u1EF1</div><div ng-message="nameExists">T\xE0i kho\u1EA3n \u0111\xE3 c\xF3 ng\u01B0\u1EDDi s\u1EED d\u1EE5ng</div></div>\n</md-input-container></div><div flex="50" flex-xs="100"><md-input-container class="md-block"><label>M\u1EADt kh\u1EA9u</label> \n<input ng-attr-type="{{ show ? \'text\' : \'password\' }}" name="password" class="input-password" autocomplete="off" \nng-model="user.password"><md-icon ng-if="!show" md-font-icon="icon-eye" ng-click="showPassword()"></md-icon><md-icon \nng-if="show" md-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon><div class="hint">T\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</div>\n</md-input-container></div></div><div layout="row" layout-xs="column"><div flex="50" flex-xs="100"><md-input-container \nclass="md-block"><label>H\u1ECD t\xEAn</label> <input type="text" name="fullName" ng-model="user.fullName" \naria-label="fullName" autocomplete="off"></md-input-container></div><div flex="50" flex-xs="100"><md-input-container \nclass="md-block"><label>Ghi ch\xFA</label> <input name="about" ng-model="user.about" autocomplete="off">\n</md-input-container></div></div><div layout="row" ng-if="!data.Automatically" class="fade" hide><div flex="100" \nclass="padding-top-16"><md-input-container class="md-block" flex-gt-sm><label>M\u1EADt kh\u1EA9u \u0111\u0103ng nh\u1EADp</label> <input \nng-attr-type="{{ show ? \'text\' : \'password\' }}" name="password" class="input-password" ng-model="user.password"><md-icon\n ng-if="!show" md-font-icon="icon-eye" ng-click="showPassword()"></md-icon><md-icon ng-if="show" \nmd-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon><div class="hint">Ph\u1EA3i c\xF3 t\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</div>\n</md-input-container></div></div><div layout="row" hide><div flex="100"><md-switch ng-model="data.Automatically" \naria-label="Automatically">T\u1EF1 \u0111\u1ED9ng t\u1EA1o m\u1EADt kh\u1EA9u m\u1EDBi</md-switch></div></div><div layout="row" hide><div flex="100">\n<md-switch ng-model="data.Ask" aria-label="Switch 2">Y\xEAu c\u1EA7u \u0111\u1ED5i m\u1EADt kh\u1EA9u sau khi \u0111\u0103ng nh\u1EADp</md-switch></div></div><div \nlayout="row" class="error-message" ng-show="errorText">{{errorText}}</div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button>\n<md-button class="md-accent" type="submit" ng-disabled="disablePost() || submitting">NEXT</md-button>\n</md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/create_account_success.dialog.html', '<md-dialog aria-label="create-account" class="create-account"><form name="formPassword" ng-submit="submit()" novalidate>\n<md-toolbar class="md-green-500-bg"><div class="md-toolbar-tools"><h2>M\u1EDF t\xE0i kho\u1EA3n m\u1EDBi</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><div layout="row"><h2>T\u1EA1o t\xE0i kho\u1EA3n m\u1EDBi th\xE0nh c\xF4ng</h2></div><div layout="row"><div flex="30">\n{{accountInfo.Level | group }}</div><div flex="70">{{accountInfo.Username}}</div></div><div layout="row"><div flex="30">\nM\u1EADt kh\u1EA9u</div><div flex="70" class="password_text"><span ng-show="show">{{accountInfo.Password}}</span> <span \nng-show="!show">\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF</span> <span class="password-show"><md-icon ng-if="show" md-font-icon="icon-eye" \nng-click="showPassword()"></md-icon><md-icon ng-if="!show" md-font-icon="icon-eye-off" ng-click="showPassword()">\n</md-icon></span></div></div><div layout="row" class="padding-top-16">\nTi\u1EBFp theo, qu\xFD kh\xE1ch c\u1EA7n c\xE0i \u0111\u1EB7t t\xEDn d\u1EE5ng v\xE0 th\xF4ng tin th\u1EA7u cho t\xE0i kho\u1EA3n n\xE0y.</div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="md-warn" ngclipboard ngclipboard-success="onSuccess(e);" \nngclipboard-error="onError(e);" \ndata-clipboard-text="T\xE0i kho\u1EA3n: {{accountInfo.Username}}, M\u1EADt kh\u1EA9u: {{accountInfo.Password}}"><span \nng-class="{\'ZYIfFd\' : copied}" class="copy copy_password">Sao ch\xE9p th\xF4ng tin \u0111\u0103ng nh\u1EADp</span> <span \nng-class="{\'ZYIfFd\' : !copied}" class="copy copied">\u0110\xE3 sao ch\xE9p</span></md-button><span flex></span><md-button \nclass="green-700-fg" href="account/agency?uid={{accountInfo.UserId}}&match={{accountInfo.Username}}" \nng-click="cancel()">NEXT</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/credit_update.dialog.html', '<md-dialog aria-label="credit-update" class="credit-update"><form name="formPassword" ng-submit="submit()" novalidate>\n<md-toolbar class="md-green-500-bg"><div class="md-toolbar-tools"><h2>T\xE0i kho\u1EA3n {{childUser.Username}}</h2><span flex>\n</span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><md-tabs class="md-accent" \nmd-swipe-content="false" md-selected="currentTab"><md-tab label="T\xEDn d\u1EE5ng"><md-content><div class="credit-note">\nT\xEDn d\u1EE5ng th\u1EF1c t\u1EBF = t\xEDn d\u1EE5ng x 1,000</div><div class="md-dialog-content"><div flex="100"><div layout="row" flex="100">\n<div flex="40">{{ childUser.parentLevel | group }} c\xF2n l\u1EA1i:</div><div flex="60" class="text-bold padding-left-8" \nng-if="childUser.parentLevel !== 1" ng-class="{\'warn\': childUser.parentBalance < 0 }">\n{{ childUser.parentBalance | currency : \'\' : 0 }}</div><div flex="60" class="text-bold padding-left-8" \nng-if="childUser.parentLevel === 1">Kh\xF4ng gi\u1EDBi h\u1EA1n</div></div><div layout="row" class="padding-top-16" flex="100"><div \nflex="40">S\u1ED1 d\u01B0 {{ childUser.Level | group }}:</div><div flex="60" class="padding-left-8" \nng-class="{\'warn\': childUser.Balance < 0 }">{{ childUser.Balance | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="padding-top-16" flex="100"><div flex="40" class="line-height-36">T\xEDn d\u1EE5ng {{ childUser.Level | group }}:</div>\n<div flex="60" class="credit-limit"><input type="tel" name="CreditLimit" ng-model="childUser.CreditLimit" ng-currency \naria-label="CreditLimit" ng-change="changeCredit()" autocomplete="off"><md-icon md-font-icon="icon-close" class="s20" \nng-click="childUser.CreditLimit = 0; changeCredit()"></md-icon></div></div><div layout="row" class="padding-top-8" \nflex="100"><div flex class="credit-to-word"><span>{{ childUser.CreditLimit | words }}</span></div></div></div></div>\n</md-content></md-tab><md-tab label="Transfer" ng-disabled="!PaymentPermissions"><md-content class="md-padding"><div \nlayout="row" layout-align="start center" class="payment-method"><div flex \nng-class="{\'active\' : childUser.PaymentMethod === 0}" ng-click="childUser.PaymentMethod = 0">T\u1EF1 \u0111\u1ED9ng</div><div flex \nng-class="{\'active\' : childUser.PaymentMethod === 1}" ng-click="childUser.PaymentMethod = 1">Th\u1EE7 c\xF4ng</div></div><div \nclass="payment-date" layout="column" ng-if="childUser.PaymentMethod === 0 && childUser.Level === 9"><h2>Ng\xE0y thanh to\xE1n\n</h2><div layout="row" layout-wrap flex><div flex="50" ng-repeat="item in paymentDates"><md-checkbox \nng-checked="exists(item.id, childUser.PlayerPaymentDates)" ng-click="toggle(item.id, childUser.PlayerPaymentDates)">\n{{ item.date }}</md-checkbox></div></div></div></md-content></md-tab></md-tabs></md-dialog-content><md-dialog-actions \nlayout="row"><div class="error-message" ng-if="errChild.length || errParent.length">{{errChild + errParent}}</div><span \nflex></span><md-button class="md-accent" ng-click="submit()">C\u1EADp nh\u1EADt</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/production-manager.dialog.html', '<md-dialog aria-label="production-manager" class="production-manager"><form name="form" ng-submit="submit()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Qu\u1EA3n l\xFD s\u1EA3n ph\u1EA9m {{accountInfo.Username}}</h2><span \nflex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><div class="current"><div ng-repeat="item in ParentProducts"><md-checkbox \nng-checked="exists(item, Products)" ng-click="toggle(item, Products)" ng-show="item !== 1">{{ item | Production }}\n</md-checkbox></div></div><div class="descendants" ng-show="addDescendantsAvailable && accountInfo.Level !== 9">\n<md-checkbox ng-model="AddProductForDescendants" ng-disabled="!addDescendantsAvailable">Th\xEAm s\u1EA3n ph\u1EA9m cho t\xE0i kho\u1EA3n con\n</md-checkbox><p>T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi ph\u1EA3i \u0111\u0103ng nh\u1EADp l\u1EA1i m\u1EDBi \u0111\u01B0\u1EE3c \xE1p d\u1EE5ng</p></div><div class="force-sign-out" \nng-show="forceSignOutAvailable" hide><md-checkbox class="md-warn" ng-model="forceSignOut" \nng-disabled="!forceSignOutAvailable">Tho\xE1t t\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</md-checkbox></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button>\n<md-button class="md-accent" type="submit" ng-disabled="conditionUpdate() || submitting">Update</md-button>\n</md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/prompt.dialog.html', '<md-dialog aria-label="prompt_dialog" class="prompt_dialog"><form name="form" ng-submit="submit()" novalidate>\n<md-dialog-content><h2>{{title}}</h2><div class="md-dialog-content-body"><p>{{textContent}}</p></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="green-700-fg" ng-click="done()" ng-disabled="submitting">OK\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/prompt.unlock.dialog.html', '<md-dialog aria-label="prompt_dialog" class="prompt_dialog downline-users"><form name="form" ng-submit="submit()" \nnovalidate><md-dialog-content><h2>{{title}}</h2><div class="md-dialog-content-body"><p>{{textContent}}</p><md-checkbox \nng-model="IncludeDownlineUsers">M\u1EDF t\u1EA5t c\u1EA3 t\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi b\u1ECB kh\xF3a c\xF9ng t\xE0i kho\u1EA3n n\xE0y.</md-checkbox></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="green-700-fg" ng-click="done()" ng-disabled="submitting">OK\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/share-holder-dialog.html', '<md-dialog aria-label="share-holder-dialog" class="share-holder-dialog"><form name="form" ng-submit="update($event)" \nnovalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-keyboard-backspace">\n</md-icon></md-button><h2>T\u1EF7 l\u1EC7 th\u1EA7u v\xE0 gi\xE1 b\xE1n c\u1EE7a t\xE0i kho\u1EA3n {{item.Username}}</h2><span flex></span><md-button \nclass="md-warn md-raised long-btn" aria-label="close" ng-click="update($event)" ng-disabled="submitting" \nng-if="$mdMedia(\'gt-xs\') && hasWritePermission"><md-icon md-font-icon="icon-content-save"></md-icon>C\u1EADp nh\u1EADt</md-button>\n</div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}">\n</md-progress-linear></md-toolbar><md-dialog-content class=""><div class="md-dialog-content"><md-tabs md-dynamic-height \nmd-border-bottom md-selected="tab"><md-tab label="X\u1ED5 s\u1ED1 truy\u1EC1n th\u1ED1ng" md-on-select="onTabSelected(0)" \nng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/share-holder-template-lottery.html\'"></md-content></md-tab><md-tab \nlabel="WM Casino" md-on-select="onTabSelected(2)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/share-holder-template-wm-casino.html\'"></md-content></md-tab>\n<md-tab label="789 Casino" md-on-select="onTabSelected(3)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/share-holder-template-legend-casino.html\'"></md-content></md-tab>\n<md-tab label="Bong88" md-on-select="onTabSelected(4)" ng-disabled="submitting"><md-content \nng-include="\'app/main/account/agency/dialog/template/share-holder-template-saba.html\'"></md-content></md-tab></md-tabs>\n</div></md-dialog-content><md-dialog-actions layout="row" ng-show="$mdMedia(\'xs\') && hasWritePermission"><md-button \nclass="md-accent md-mini md-raised long-btn" type="submit" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-content-save"></md-icon>C\u1EADp nh\u1EADt</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/show_password.dialog.html', '<md-dialog aria-label="change-password" class="change-password"><form name="formPassword" ng-submit="changePassword()" \nnovalidate><md-toolbar class="md-green-500-bg"><div class="md-toolbar-tools"><h2>\nThay \u0111\u1ED5i m\u1EADt kh\u1EA9u {{accountInfo.Username}}</h2></div></md-toolbar><md-dialog-content class="md-change-password-dialog">\n<div class="md-dialog-content"><div layout="column"><div layout="row" class="small-text">M\u1EADt kh\u1EA9u</div><div \nlayout="row" class="password_text"><span ng-show="show">{{accountInfo.password}}</span> <span ng-show="!show">\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\n</span> <span class="password-show"><md-icon ng-if="show" md-font-icon="icon-eye" ng-click="showPassword()"></md-icon>\n<md-icon ng-if="!show" md-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon></span></div><div layout="row" \nclass="small-text"><span ng-class="{\'ZYIfFd\' : copied}" class="copy copy_password" ngclipboard \nngclipboard-success="onSuccess(e);" ngclipboard-error="onError(e);" data-clipboard-text="{{accountInfo.password}}">\nSao ch\xE9p m\u1EADt kh\u1EA9u</span> <span ng-class="{\'ZYIfFd\' : !copied}" class="copy copied">\u0110\xE3 sao ch\xE9p m\u1EADt kh\u1EA9u</span></div>\n</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="green-700-fg" ng-click="cancel()">Done\n</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/view_template.dialog.html', '<md-dialog aria-label="assign_payouts_member" class="assign_payouts_member"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Th\xF4ng s\u1ED1 {{ template.Title }}</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="scrollable" ms-scroll><div class="md-dialog-content" \nlayout="column"><div layout="row" class="game-content" ng-repeat="item in Values"><div class="bet-content first-class" \nlayout="column"><div class="title">{{ item[0].GameType | gameXs }}</div><div>Gi\xE1 b\xE1n</div><div>Tr\u1EA3 th\u01B0\u1EDFng</div></div>\n<div class="bet-content" layout="column" ng-repeat="bet in item"><div class="title">{{ bet.BetType | bet }}</div><div>\n{{ bet.Price | currency : \'\' : 0 }}</div><div>{{ bet.Payouts | currency : \'\' : 0 }}</div></div></div></div>\n</md-dialog-content><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}">\n</md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/agency/dialog/view_template.legend.dialog.html', '<md-dialog aria-label="assign_payouts_member" class="assign_payouts_member"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Th\xF4ng s\u1ED1 {{ template.Title }}</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="scrollable" ms-scroll><div class="md-dialog-content" \nlayout="column"><div layout="row" class="game-content" ng-repeat="item in Values"><div class="bet-content first-class" \nlayout="column"><div class="title">{{ item[0].GameType | legendGame }}</div><div>Gi\xE1 b\xE1n</div><div>Tr\u1EA3 th\u01B0\u1EDFng</div>\n</div><div class="bet-content" layout="column" ng-repeat="bet in item"><div class="title">\n{{ bet.BetType | bet : false : item[0].GameType }}</div><div>{{ bet.Price | currency : \'\' : 0 }}</div><div>\n{{ bet.Payouts | currency : \'\' : 0 }}</div></div></div></div></md-dialog-content><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/sub-account/dialog/biography.dialog.html', '<md-dialog aria-label="change-biography" class="change-biography"><form name="form" ng-submit="submit()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Th\xF4ng tin t\xE0i kho\u1EA3n {{accountInfo.Username}}</h2><span \nflex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><md-input-container class="md-block"><label>H\u1ECD T\xEAn</label> <input name="name" \nng-model="accountInfo.FullName" autocomplete="off"></md-input-container><div layout="row"><div flex="40">\nNg\xE0y t\u1EA1o t\xE0i kho\u1EA3n</div><div flex="60">{{ accountInfo.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div>\n</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="form.$invalid || form.$pristine  || submitting">Update</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/account/sub-account/dialog/create.secondary.dialog.html', '<md-dialog aria-label="create-secondary" class="create-account"><form name="formSecond" ng-submit="create()" novalidate>\n<md-toolbar class="md-green-500-bg"><div class="md-toolbar-tools"><h2>T\u1EA1o t\xE0i kho\u1EA3n ph\u1EE5</h2><span flex></span><md-button\n class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="md-create-secondary-dialog"><div class="md-dialog-content"><div layout="row" layout-xs="column"><div flex="50" \nflex-xs="100"><md-input-container class="md-block"><label>T\xE0i kho\u1EA3n</label> <input ng-model="user.username" \nname="username" type="text" required minlength="4" autocomplete="off"><div ng-messages="formSecond.username.$error"><div\n ng-message="minlength">T\u1ED1i thi\u1EC3u 4 k\xFD t\u1EF1</div></div></md-input-container></div><div flex="50" flex-xs="100">\n<md-input-container class="md-block" flex-gt-sm><label>M\u1EADt kh\u1EA9u</label> <input \nng-attr-type="{{ show ? \'text\' : \'password\' }}" name="password" class="input-password" ng-model="user.password"><md-icon\n ng-if="!show" md-font-icon="icon-eye" ng-click="showPassword()"></md-icon><md-icon ng-if="show" \nmd-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon><div class="hint">T\u1ED1i thi\u1EC3u 6 k\xFD t\u1EF1</div>\n</md-input-container></div></div><div layout="row" layout-xs="column"><div flex="100"><md-input-container \nclass="md-block"><label>H\u1ECD t\xEAn</label> <input ng-model="user.fullName" type="text" autocomplete="off">\n</md-input-container></div></div><div layout="row" ng-if="!data.Automatically" class="fade" hide><div flex="100" \nclass="padding-top-16"><md-input-container class="md-block" flex-gt-sm><label>M\u1EADt kh\u1EA9u \u0111\u0103ng nh\u1EADp</label> <input \nng-attr-type="{{ show ? \'text\' : \'password\' }}" name="password" class="input-password" ng-model="user.password"><md-icon\n ng-if="!show" md-font-icon="icon-eye" ng-click="showPassword()"></md-icon><md-icon ng-if="show" \nmd-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon><div class="hint">Ph\u1EA3i c\xF3 t\u1ED1i thi\u1EC3u 8 k\xFD t\u1EF1</div>\n</md-input-container></div></div><div layout="row" hide><div flex="100"><md-switch ng-model="data.Automatically" \naria-label="Automatically">T\u1EF1 \u0111\u1ED9ng t\u1EA1o m\u1EADt kh\u1EA9u m\u1EDBi</md-switch></div></div><div layout="row" hide><div flex="100">\n<md-switch ng-model="data.Ask" aria-label="Switch 2">Y\xEAu c\u1EA7u \u0111\u1ED5i m\u1EADt kh\u1EA9u sau khi \u0111\u0103ng nh\u1EADp</md-switch></div></div><div \nlayout="row" class="error-message" ng-show="errorText">{{errorText}}</div></div></md-dialog-content><md-dialog-actions \nlayout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button \nclass="md-accent" type="submit" ng-disabled="formSecond.$invalid || formSecond.$pristine || submitting">OK</md-button>\n</md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/account/sub-account/dialog/create.secondary.success.dialog.html', '<md-dialog aria-label="create-account" class="create-account"><form name="formPassword" ng-submit="submit()" novalidate>\n<md-toolbar class="md-green-500-bg"><div class="md-toolbar-tools"><h2>M\u1EDF t\xE0i kho\u1EA3n ph\u1EE5</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><div layout="row"><h2>T\u1EA1o t\xE0i kho\u1EA3n m\u1EDBi th\xE0nh c\xF4ng</h2></div><div layout="row"><div flex="30">\nT\xEAn \u0111\u0103ng nh\u1EADp</div><div flex="70">{{accountInfo.username}}</div></div><div layout="row"><div flex="30">M\u1EADt kh\u1EA9u</div>\n<div flex="70" class="password_text"><span ng-show="show">{{accountInfo.password}}</span> <span ng-show="!show">\n\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF\u25CF</span> <span class="password-show"><md-icon ng-if="show" md-font-icon="icon-eye" ng-click="showPassword()">\n</md-icon><md-icon ng-if="!show" md-font-icon="icon-eye-off" ng-click="showPassword()"></md-icon></span></div></div><div\n layout="row" class="padding-top-16">Ti\u1EBFp theo, qu\xFD kh\xE1ch c\u1EA7n c\u1EA5p quy\u1EC1n cho t\xE0i kho\u1EA3n n\xE0y.</div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ngclipboard \nngclipboard-success="onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="T\xE0i kho\u1EA3n: {{accountInfo.username}}, M\u1EADt kh\u1EA9u: {{accountInfo.password}}"><span \nng-class="{\'ZYIfFd\' : copied}" class="copy copy_password">Sao ch\xE9p th\xF4ng tin \u0111\u0103ng nh\u1EADp</span> <span \nng-class="{\'ZYIfFd\' : !copied}" class="copy copied">\u0110\xE3 sao ch\xE9p</span></md-button><span flex></span><md-button \nclass="green-700-fg" ng-click="cancel()">OK</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/account/template/modify/modify.template.html', '<div class="page-layout simple fullwidth modify-template" layout="column"><div class="header md-accent-bg" \nng-class="{\'red-300-bg\': !vm.newTemplate}" layout="row" layout-align="space-between center"><div layout="row" \nlayout-align="start center"><div class="title">M\u1EABu c\u1EA5u h\xECnh t\xE0i kho\u1EA3n</div></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><div class="content" \nlayout="column"><form name="modifyTemplate" ng-submit="vm.updateTemplate()" novalidate><div \nclass="simple-table-container md-whiteframe-4dp"><div layout="column"><div layout="row" class="game-content" \nng-repeat="item in vm.templates.Values"><div class="bet-content first-class" layout="column"><div class="title">\n{{ item[0].GameType | gameXs }}</div><div>Gi\xE1 b\xE1n</div><div>Tr\u1EA3 th\u01B0\u1EDFng</div></div><div class="bet-content" \nlayout="column" ng-repeat="bet in item" ng-class="{\'edit-template\': !vm.newTemplate}" \nng-click="vm.changePrice(vm.templates.Id, bet, $event)"><div class="title">{{ bet.BetType | bet }}</div><div><input \nng-model="bet.Price" type="text" ng-currency ng-disabled="bet.BetType === 20 || !vm.newTemplate" \nng-change="vm.changeValues(bet, \'price\')" ng-class="{\'highlight\': bet.highlight.Price }"></div><div><input \nng-model="bet.Payouts" type="text" ng-currency ng-disabled="bet.BetType === 20 || !vm.newTemplate" \nng-change="vm.changeValues(bet, \'payout\')" ng-class="{\'highlight\': bet.highlight.Payouts }"></div></div></div><div \nlayout="column" class="input-bottom"><input type="text" ng-model="vm.templates.Title" placeholder="T\xEAn m\u1EABu" required \nminlength="4"> <input type="text" ng-model="vm.templates.Description" placeholder="M\xF4 t\u1EA3"></div><div layout="row" \nlayout-align="start center" class="bottom"><md-button class="md-raised md-accent" type="submit" \nng-disabled="modifyTemplate.$invalid || modifyTemplate.$pristine || vm.submitting" ng-if="!vm.newTemplate">C\u1EADp nh\u1EADt\n</md-button><md-button class="md-raised md-warn" type="submit" \nng-disabled="modifyTemplate.$invalid || modifyTemplate.$pristine || vm.submitting" ng-if="vm.newTemplate">T\u1EA1o m\u1EABu m\u1EDBi\n</md-button></div></div></div></form></div></div>');
    $templateCache.put('app/main/account/template/modify/price-change.dialog.html', '<md-dialog aria-label="setting_price" class="price-change-dialog"><form name="settingPrice" ng-submit="submitForm">\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i tham s\u1ED1</h2></div></md-toolbar>\n<md-dialog-content class="md-dialog-sm setting-price"><div class="md-dialog-content" layout="column"><div layout="row" \nclass="title"><div flex="100">{{ priceInfo.BetType | bet }}, {{ priceInfo.GameType | gameXs }}</div></div><div \nlayout="row"><label flex="40">Gi\xE1 b\xE1n</label> <input type="text" ng-currency ng-model="priceInfo.Price" md-autofocus>\n</div><div layout="row"><label flex="40">Tr\u1EA3 th\u01B0\u1EDFng</label> <input type="text" ng-currency ng-model="priceInfo.Payouts">\n</div><div class="warning" ng-show="warningMessage">{{ warningMessage }}</div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="btn-w-md md-warn" ng-click="cancel()" ng-disabled="submitting">Cancel\n</md-button><md-button class="btn-w-md md-accent" type="submit" ng-click="submitForm()" ng-disabled="submitting">OK\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/accounting/casino789/classification/classification.html', '<div ng-if="$root.User.Level === 1" ng-include="\'app/main/accounting/casino789/classification/template/company.html\'">\n</div><div ng-if="$root.User.Level === 5" \nng-include="\'app/main/accounting/casino789/classification/template/agent.html\'"></div><div \nng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/accounting/casino789/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/accounting/casino789/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/accounting/casino789/general/template/company.html\'"></div><div\n ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/accounting/casino789/general/template/agency.html\'"></div><div ng-if="vm.report.level === 9" \nng-include="\'app/main/accounting/casino789/general/template/member.html\'"></div>');
    $templateCache.put('app/main/accounting/casino789/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><table class="simple wm-casino" ms-responsive-table \nng-if="vm.members.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>C\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua\n</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th><th ng-if="$root.User.Level <= 2">IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.members"><td><div class="padding-4 text-bold">{{ item.GameNumber }}.{{ item.GameRound }}</div><div\n class="padding-4">{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td class="game-bet"><div \nng-bind-html="item.BetType | LegendBet"></div></td><td class="text-center"><div ng-show="item.WinLose > 0" \nclass="text-bold blue-900-fg padding-4">{{ item.GameResult }} - Th\u1EAFng</div><div ng-show="item.WinLose < 0" \nclass="padding-4">{{ item.GameResult }} - Thua</div><div class="font-size-10 padding-4">{{ item.IP }}</div></td><td \nclass="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.NetAmount | currency : \'\' : 0 }}</div></td><td class="text-center"><div class="padding-4 text-bold" \nng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.CommissionPercent }} % - {{ item.Commission | currency : \'\' : 0 }}</div></td><td class="share" \nng-if="$root.User.Level <= 5"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.WinLose < 0 }">\n{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.WinLose < 0 }">\n{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td><td ng-if="$root.User.Level <= 2"><a \nng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting"><tr><td \ncolspan="11" ng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</td></tr></tfoot></table>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/accounting/combination/group/group.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/accounting/legendary/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/accounting/legendary/general/template/company.html\'"></div><div\n ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/accounting/legendary/general/template/agency.html\'"></div><div ng-if="vm.report.level === 9" \nng-include="\'app/main/accounting/legendary/general/template/member.html\'"></div>');
    $templateCache.put('app/main/accounting/legendary/classification/classification.html', '<div ng-if="$root.User.Level === 1" ng-include="\'app/main/accounting/legendary/classification/template/company.html\'">\n</div><div ng-if="$root.User.Level === 5" \nng-include="\'app/main/accounting/legendary/classification/template/agent.html\'"></div><div \nng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/accounting/legendary/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/accounting/combination/win-lose/win-lose.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-1dp"><div class="navigation" ui-view="navigation"></div><div id="portView" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/accounting/legendary/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><table \nclass="simple report-table member-report" ms-responsive-table ng-if="vm.members.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span>\n</div></th><th><div class="table-header"><span class="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EF1c thu</span>\n</div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng / Thua</span></div></th><th \nng-if="$root.User.Level <= 5"><div class="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 4"><div class="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 3"><div class="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level <= 1"><div class="table-header"><span class="column-title">C\xF4ng ty</span></div></th></tr>\n</thead><tbody><tr ng-repeat="item in vm.members"><td>{{item.Term | term}}.{{item.TicketNumber}}</td><td>\n{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.data.GameType | legendGame }} - {{vm.data.BetType | bet : false : vm.data.GameType }}</td><td \nng-if="vm.data.betType !== 5 && vm.data.betType !== 6" ng-class="{\'blue\' : item.WinLose > 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup \nng-if="item.PrizeNr && vm.data.BetType !== 26">[{{ item.PrizeNr }}]</sup> <sup \nng-if="item.PrizeNr && vm.data.BetType === 26">[{{ item.PrizeNr-4 }}]</sup></td><td \nng-if="vm.data.betType === 5 || vm.data.betType === 6" ng-class="{\'blue\' : item.WinLose < 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub></td><td>\n{{item.Payouts | currency : \'\' : 0 }}</td><td>{{item.Price | currency : \'\' : 0 }}</td><td>\n{{item.Point | currency : \'\' : 0 }}</td><td>{{item.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0 }}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="14" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0 }}\n</td><td>{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.members | sumOfValue : \'WinLose\') < 0 }">\n{{vm.members | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td><td colspan="5"></td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/accounting/saba/general/template/company.html\'"></div><div \nng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/accounting/saba/general/template/agency.html\'"></div><div ng-if="vm.report.level === 9" \nng-include="\'app/main/accounting/saba/general/template/member.html\'"></div>');
    $templateCache.put('app/main/accounting/saba/member/member.html', '<div layout="row" layout-xs="column" layout-align="start center" layout-align-xs="start start" class="member-header">\n<h3>Chi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><h3 class="date">\n{{ vm.data.From | amDateFormat : \'DD/MM/YYYY\' }} -> {{ vm.data.To | amDateFormat : \'DD/MM/YYYY\' }}</h3><div></div></div>\n<table class="simple saba" ms-responsive-table ng-if="vm.members.length"><thead><tr><th>#</th><th>Th\u1EDDi gian</th><th>\nL\u1EF1a ch\u1ECDn</th><th ng-if="vm.data.SportGroup !== 3">T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>Tr\u1EA1ng th\xE1i</th><th \nng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th><th ng-if="$root.User.Level <= 2">IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.members track by $index"><td><div class="td-wrap"><div>{{ $index + 1 }}</div></div></td><td \nclass="ticket-tx"><div class="td-wrap"><div>Ref: {{item.Tx}}</div><div class="TxAt">\n{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div></td><td class="event"><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'1\'" \nng-include="\'app/main/accounting/saba/member/template/sport-live.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'0\' && item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/sport-dead.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'System Parlay\'" \nng-include="\'app/main/accounting/saba/member/template/system-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/mix-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData !== undefined" \nng-include="\'app/main/accounting/saba/member/template/single-parlay.html\'"></div><div ng-if="vm.data.SportGroup === 1" \nng-include="\'app/main/accounting/saba/member/template/number-game.html\'"></div><div ng-if="vm.data.SportGroup === 3" \nng-include="\'app/main/accounting/saba/member/template/arcadia-gaming.html\'"></div><div \nng-if="vm.data.SportGroup === 2 && item.ParlayData === undefined" \nng-include="\'app/main/accounting/saba/member/template/virtual-sport.html\'"></div><div \nng-if="vm.data.SportGroup === 2 && item.ParlayData !== undefined" \nng-include="\'app/main/accounting/saba/member/template/virtual-mix-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 4 || vm.data.SportGroup === 7 || vm.data.SportGroup === 8" \nng-include="\'app/main/accounting/saba/member/template/saba-club.html\'"></div><div \nng-if="vm.data.SportGroup === 5 || vm.data.SportGroup === 6" \nng-include="\'app/main/accounting/saba/member/template/keno.html\'"></div></td><td class="odds" \nng-if="vm.data.SportGroup !== 3"><div class="td-wrap"><div class="box" layout="row" layout-align="end center" \nng-if="item.ParlayType === \'System Parlay\' || item.ParlayType === \'MixParlay\'" \nng-click="vm.ParlayDetails(item, $event)"><span><md-icon md-font-icon="icon-information" class="s24"></md-icon></span>\n</div><div layout="column" layout-align="space-between end" \nng-if="item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'"><div class="odd" \nng-class="{\'warn\' : item.Odds < 0 }">{{ item.Odds }}</div><div class="odd-type" \nng-if="vm.data.SportGroup === 0 || vm.data.SportGroup === 1 || vm.data.SportGroup === 2">\n{{ item.OddsType | SabaOddsType }}</div></div></div></td><td class="stake-amount"><div class="stake td-wrap">\n{{ item.Stake | currency : \'\' : 0 }}</div></td><td class="win-lose"><div layout="column" class="td-wrap padding-0"><div \nclass="win-lose" ng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div \nclass="member-com" layout="row" layout-align="space-between center"><div flex="30" class="text-left">\n{{ item.CommissionPercent }}%</div><div flex="70">{{ item.Commission | currency : \'\' : 0 }}</div></div></div></td><td \nclass="ticket-status"><div class="td-wrap"><div class="ticket-status">{{ item.TicketStatus | SabaTicketStatus }}</div>\n<div class="ticket-result" ng-click="vm.ticketResult(item, $event)" \nng-if="vm.data.SportGroup === 0 || vm.data.SportGroup === 1 || vm.data.SportGroup === 2">K\u1EBFt qu\u1EA3</div><div \nclass="ip-address">{{ item.IP }}</div></div></td><td class="share" ng-if="$root.User.Level <= 5"><div flex="100" \nlayout="column" layout-align="start stretch" class="td-wrap padding-0"><div class="share-holder md-deep-orange-50-bg" \nlayout="column"><span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="column"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="column"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div class="commission" layout="column">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Master.Commission < 0 }">\n{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 3"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="column"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Super.WinLose < 0 }">{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Super.Percent }} %</span></div><div class="commission" layout="column">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="column"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div class="commission" layout="column">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Manager.Commission < 0 }">\n{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 1"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="column"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Company.Percent }} %</span></div><div class="commission" layout="column">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td><td ng-if="$root.User.Level <= 2"><a \nng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting"><tr><td \ncolspan="12" ng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Tx)">Xem ti\u1EBFp</td></tr></tfoot></table>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/accounting/traditional/classification/classification.html', '<div ng-if="$root.User.Level === 1" ng-include="\'app/main/accounting/traditional/classification/template/company.html\'">\n</div><div ng-if="$root.User.Level === 5" \nng-include="\'app/main/accounting/traditional/classification/template/agent.html\'"></div><div \nng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/accounting/traditional/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/accounting/saba/classification/classification.html', '<div ng-if="$root.User.Level === 1" ng-include="\'app/main/accounting/saba/classification/template/company.html\'"></div>\n<div ng-if="$root.User.Level === 5" ng-include="\'app/main/accounting/saba/classification/template/agent.html\'"></div>\n<div ng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/accounting/saba/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/accounting/traditional/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/accounting/traditional/general/template/company.html\'"></div>\n<div ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/accounting/traditional/general/template/agency.html\'"></div><div ng-if="vm.report.level === 9" \nng-include="\'app/main/accounting/traditional/general/template/member.html\'"></div>');
    $templateCache.put('app/main/accounting/traditional/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><table \nclass="simple report-table member-report" ms-responsive-table ng-if="vm.members.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span>\n</div></th><th><div class="table-header"><span class="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EF1c thu</span>\n</div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng / Thua</span></div></th><th \nng-if="$root.User.Level <= 5"><div class="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 4"><div class="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 3"><div class="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level <= 1"><div class="table-header"><span class="column-title">C\xF4ng ty</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">IP</span></div></th></tr></thead>\n<tbody><tr ng-repeat="item in vm.members"><td>{{item.Term}}.{{item.TicketNumber}}</td><td>\n{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.data.GameType | gameXs }} - {{vm.data.BetType | bet }}</td><td \nng-if="vm.data.betType !== 5 && vm.data.betType !== 6" ng-class="{\'blue\' : item.WinLose > 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup ng-if="item.PrizeNr">\n[{{ item.PrizeNr }}]</sup></td><td ng-if="vm.data.betType === 5 || vm.data.betType === 6" \nng-class="{\'blue\' : item.WinLose < 0}">{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub>\n</td><td>{{item.Payouts | currency : \'\' : 0 }}</td><td>{{item.Price | currency : \'\' : 0 }}</td><td>\n{{item.Point | currency : \'\' : 0 }}</td><td>{{item.NetAmount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0 }}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td><td \nng-if="$root.User.Level <= 2"><a ng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="14" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0 }}\n</td><td>{{vm.members | sumOfValue : \'NetAmount\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.members | sumOfValue : \'WinLose\') < 0 }">\n{{vm.members | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td><td colspan="6"></td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/classification/classification.html', '<div ng-if="$root.User.Level === 1" ng-include="\'app/main/accounting/wm-casino/classification/template/company.html\'">\n</div><div ng-if="$root.User.Level === 5" \nng-include="\'app/main/accounting/wm-casino/classification/template/agent.html\'"></div><div \nng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/accounting/wm-casino/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/accounting/wm-casino/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><table class="simple wm-casino" ms-responsive-table \nng-if="vm.members.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>V\xE1n ch\u01A1i</th><th>C\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th>\n<th>Th\u1EAFng thua</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.members"><td><div \nclass="padding-4">Ref: {{item.BetId}}</div><div class="padding-4">\n{{ item.BetAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td><div class="padding-4 text-bold">\n{{ vm.data.GameType | WMGame }} - {{ item.TableId }}</div><div class="padding-4">{{ item.Round }}-{{ item.SubRound }}\n</div></td><td class="game-bet"><div ng-bind-html="item.Bet | WMBet : vm.data.GameType"></div></td><td \nclass="text-center"><div ng-show="item.WinLose > 0" class="text-bold blue-900-fg padding-4">\n{{ item.GameResult }} - Th\u1EAFng</div><div ng-show="item.WinLose < 0" class="padding-4">{{ item.GameResult }} - Thua</div>\n<div ng-show="item.WinLose === 0" class="padding-4">{{ item.GameResult }}</div><div class="font-size-10 padding-4">\n{{ item.IP }}</div></td><td class="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div \nclass="padding-4">{{ item.NetAmount | currency : \'\' : 0 }}</div></td><td class="text-center"><div \nclass="padding-4 text-bold" ng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div \nclass="padding-4">{{ item.CommissionPercent }} % - {{ item.Commission | currency : \'\' : 0 }}</div></td><td \nclass="share" ng-if="$root.User.Level <= 5"><div layout="column"><div class="share-holder md-deep-orange-50-bg" \nlayout="row"><span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.WinLose < 0 }">\n{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.WinLose < 0 }">\n{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting">\n<tr><td colspan="11" ng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</td></tr></tfoot>\n</table><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear>');
    $templateCache.put('app/main/accounting/wm-casino/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/accounting/wm-casino/general/template/company.html\'"></div><div\n ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/accounting/wm-casino/general/template/agency.html\'"></div><div ng-if="vm.report.level === 9" \nng-include="\'app/main/accounting/wm-casino/general/template/member.html\'"></div>');
    $templateCache.put('app/main/announcements/views/classic/classic-view.html', '<div class="toolbar" layout="row" layout-align="space-between center"><div layout="row" layout-align="start center" \nclass="filter-label"><md-button class="md-icon-button close-thread" aria-label="Back" ng-click="vm.closeThread()" \nng-if="vm.currentThread"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><div class="label">\n{{ vm.currentFilter.filter | announcements }}</div><div ng-hide="$mdMedia(\'xs\')"><label>T\u1EEB ng\xE0y</label><md-datepicker \nng-model="vm.From" md-placeholder="Expired"></md-datepicker></div><div ng-hide="$mdMedia(\'xs\')"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.To" md-placeholder="Expired"></md-datepicker></div><div ng-hide="$mdMedia(\'xs\')"><md-button \nclass="md-raised md-accent" ng-click="vm.loadAnnouncements()" ng-disabled="vm.loadingThreads">Submit</md-button></div>\n</div><div layout="row" layout-align="start center"><md-menu class="settings-menu"><md-button class="md-icon-button" \nng-click="$mdMenu.open($event)" aria-label="Settings" translate translate-attr-aria-label="MAIL.SETTINGS"><md-icon \nmd-font-icon="icon-cog"></md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button \nng-click="vm.changeView(\'classic\')"><md-icon md-font-icon="icon-checkbox-blank-outline" \nng-if="vm.currentView !== \'classic\'"></md-icon><md-icon md-font-icon="icon-checkbox-marked" class="md-accent" \nng-if="vm.currentView === \'classic\'"></md-icon><span>Classic View</span></md-button></md-menu-item><md-menu-item \nhide-xs><md-button ng-click="vm.changeView(\'outlook\')"><md-icon md-font-icon="icon-checkbox-blank-outline" \nng-if="vm.currentView !== \'outlook\'"></md-icon><md-icon md-font-icon="icon-checkbox-marked" class="md-accent" \nng-if="vm.currentView === \'outlook\'"></md-icon><span>Outlook View</span></md-button></md-menu-item></md-menu-content>\n</md-menu></div></div><div class="content-wrapper" layout="column" flex><div class="content thread-detail" \nng-if="vm.currentThread" ng-include="\'app/main/announcements/views/classic/detail/detail.html\'" ms-scroll flex></div>\n<div class="content thread-list" ng-if="!vm.currentThread" \nng-include="\'app/main/announcements/views/classic/list/list.html\'" ms-scroll flex></div></div>');
    $templateCache.put('app/main/legendary/loLive/dialog/notifications.html', '<md-dialog aria-label="open.betting" class="open-betting push-notifications"><form name="open-betting"><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>\u0110\u1EA9y th\xF4ng b\xE1o cho h\u1ED9i vi\xEAn</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><md-input-container md-no-float class="md-block"><textarea md-maxlength="150" rows="2" \naria-label="setText" ng-model="setText"></textarea></md-input-container><div class="template"><span \nng-click="setTemplate()">Do l\u1ED7i l\u1ED3ng c\u1EA7u kh\xF4ng ra b\xF3ng, ch\xFAng t\xF4i ti\u1EBFn h\xE0nh quay l\u1EA1i l\u1ED3ng c\u1EA7u s\u1ED1</span></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="clear()" \nng-disabled="submitting">Clear</md-button><span flex></span><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="submit()" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/announcements/views/outlook/outlook-view.html', '<div class="toolbar" layout="row" layout-align="space-between center"><div layout="row" layout-align="start center" \nclass="filter-label"><div class="label">{{ vm.currentFilter.filter | announcements }}</div><div><label>T\u1EEB ng\xE0y</label>\n<md-datepicker ng-model="vm.From" md-placeholder="Expired"></md-datepicker></div><div><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.To" md-placeholder="Expired"></md-datepicker></div><div><md-button \nclass="md-raised md-accent" ng-click="vm.loadAnnouncements()" ng-disabled="vm.loadingThreads">Submit</md-button></div>\n</div><div layout="row" layout-align="start center"><md-menu class="settings-menu"><md-button class="md-icon-button" \nng-click="$mdMenu.open($event)" aria-label="Settings"><md-icon md-font-icon="icon-cog"></md-icon></md-button>\n<md-menu-content width="3"><md-menu-item><md-button ng-click="vm.changeView(\'classic\')"><md-icon \nmd-font-icon="icon-checkbox-blank-outline" ng-if="vm.currentView !== \'classic\'"></md-icon><md-icon \nmd-font-icon="icon-checkbox-marked" class="md-accent" ng-if="vm.currentView === \'classic\'"></md-icon><span>Classic View\n</span></md-button></md-menu-item><md-menu-item hide-xs><md-button ng-click="vm.changeView(\'outlook\')"><md-icon \nmd-font-icon="icon-checkbox-blank-outline" ng-if="vm.currentView !== \'outlook\'"></md-icon><md-icon \nmd-font-icon="icon-checkbox-marked" class="md-accent" ng-if="vm.currentView === \'outlook\'"></md-icon><span>Outlook View\n</span></md-button></md-menu-item></md-menu-content></md-menu></div></div><div class="content-wrapper" layout="row" \nflex><div class="content thread-list" ng-include="\'app/main/announcements/views/outlook/list/list.html\'" ms-scroll \nflex="50"></div><div class="content thread-detail" \nng-include="\'app/main/announcements/views/outlook/detail/detail.html\'" ms-scroll layout="column" flex="50"></div></div>');
    $templateCache.put('app/main/legendary/loLive/northern/loLive.northern.legend.html', '<div class="page-layout simple fullwidth live-control" layout="column"><div class="content" layout-gt-sm="row" \nlayout="column"><div flex class="content-wrapper"><div class="simple-table-container md-whiteframe-4dp" layout="column">\n<div class="title"><h3>Mi\u1EC1n B\u1EAFc</h3><div class="ping-error" \nng-if="vm.liveCurrent.error === \'TimeExceeded\' && vm.liveCurrent.Active">\nC\xF3 l\u1ED7i s\u1EA3y ra. M\u1EA1ng c\u1EE7a b\u1EA1n \u0111\xE3 b\u1ECB tr\u1EC5 qu\xE1 l\xE2u. Vui l\xF2ng x\xE1c nh\u1EADn l\u1EA1i nh\u1EEFng gi\u1EA3i \u0111\xE3 \u0111\xF3ng v\xE0 th\u1EF1c hi\u1EC7n m\u1EDF l\u1EA1i.</div></div>\n<div layout-gt-sm="row" layout="column" class="prize"><div layout="row"><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(\'start\')"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-accent" \nng-click="vm.openBet(vm.liveCurrent)" ng-disabled="vm.liveCurrent.Active">M\u1EDF c\u01B0\u1EE3c</md-button><md-button \nclass="md-raised md-accent" ng-click="vm.reOpen($event)" \nng-if="vm.liveCurrent.error === \'TimeExceeded\' && vm.liveCurrent.Active">M\u1EDF l\u1EA1i</md-button></div><div layout="row" \nlayout-align="space-between center"><md-button class="md-raised md-primary" ng-disabled="vm.voiceOff" \nng-click="vm.speaker.playRedraw()" ng-disabled="vm.currentResult === undefined"><md-icon md-font-icon="icon-volume">\n</md-icon>Re-Draw</md-button><md-button class="md-raised md-accent" ng-click="vm.pushNotifications($event)" \nng-disabled="vm.currentResult === undefined">push notifications</md-button><md-button class="md-accent" \nng-click="vm.closeLotto($event)">\u0110\xF3ng l\xF4</md-button></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 1</label>\n<div class="flex-container one"><div class="child"><md-button class="md-raised md-accent left" \nng-click="vm.closedPrize(26)" ng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 27">\u0110\xF3ng 1</md-button>\n<md-button class="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(26)">\n<md-icon md-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 1, \'gi\u1EA3i 1\')" \nng-class="{\'has-result\': vm.currentResult.First.length}"><span ng-if="vm.currentResult.First.length">\n{{vm.currentResult.First}}</span> <span ng-if="vm.currentResult.First.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 2</label><div class="flex-container one c2"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(25)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 26">\u0110\xF3ng 2</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(25)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 2, \'gi\u1EA3i 2, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Second[0].length}"><span ng-if="vm.currentResult.Second[0].length">\n{{vm.currentResult.Second[0]}}</span> <span ng-if="vm.currentResult.Second[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(24)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 25">\u0110\xF3ng 3</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(24)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 3, \'gi\u1EA3i 2, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Second[1].length}"><span ng-if="vm.currentResult.Second[1].length">\n{{vm.currentResult.Second[1]}}</span> <span ng-if="vm.currentResult.Second[1].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 3</label><div class="flex-container one c3"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(23)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 24">\u0110\xF3ng 4</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(23)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 4, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Third[0].length}"><span ng-if="vm.currentResult.Third[0].length">\n{{vm.currentResult.Third[0]}}</span> <span ng-if="vm.currentResult.Third[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(22)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 23">\u0110\xF3ng 5</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(22)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 5, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Third[1].length}"><span ng-if="vm.currentResult.Third[1].length">\n{{vm.currentResult.Third[1]}}</span> <span ng-if="vm.currentResult.Third[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(21)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 22">\u0110\xF3ng 6</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(21)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 6, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Third[2].length}"><span ng-if="vm.currentResult.Third[2].length">\n{{vm.currentResult.Third[2]}}</span> <span ng-if="vm.currentResult.Third[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(20)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 21">\u0110\xF3ng 7</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(20)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 7, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Third[3].length}"><span ng-if="vm.currentResult.Third[3].length">\n{{vm.currentResult.Third[3]}}</span> <span ng-if="vm.currentResult.Third[3].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(19)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 20">\u0110\xF3ng 8</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(19)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 8, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 5\')" \nng-class="{\'has-result\': vm.currentResult.Third[4].length}"><span ng-if="vm.currentResult.Third[4].length">\n{{vm.currentResult.Third[4]}}</span> <span ng-if="vm.currentResult.Third[4].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(18)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 19">\u0110\xF3ng 9</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(18)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 9, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 6\')" \nng-class="{\'has-result\': vm.currentResult.Third[5].length}"><span ng-if="vm.currentResult.Third[5].length">\n{{vm.currentResult.Third[5]}}</span> <span ng-if="vm.currentResult.Third[5].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 4</label><div class="flex-container one c4"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(17)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 18">\u0110\xF3ng 10</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(17)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 10, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[0].length}"><span ng-if="vm.currentResult.Fourth[0].length">\n{{vm.currentResult.Fourth[0]}}</span> <span ng-if="vm.currentResult.Fourth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(16)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 17">\u0110\xF3ng 11</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(16)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 11, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[1].length}"><span ng-if="vm.currentResult.Fourth[1].length">\n{{vm.currentResult.Fourth[1]}}</span> <span ng-if="vm.currentResult.Fourth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(15)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 16">\u0110\xF3ng 12</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(15)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 12, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[2].length}"><span ng-if="vm.currentResult.Fourth[2].length">\n{{vm.currentResult.Fourth[2]}}</span> <span ng-if="vm.currentResult.Fourth[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(14)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 15">\u0110\xF3ng 13</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(14)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 13, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[3].length}"><span ng-if="vm.currentResult.Fourth[3].length">\n{{vm.currentResult.Fourth[3]}}</span> <span ng-if="vm.currentResult.Fourth[3].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 5</label><div class="flex-container one c3"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(13)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 14">\u0110\xF3ng 14</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(13)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 14, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[0].length}"><span ng-if="vm.currentResult.Fiveth[0].length">\n{{vm.currentResult.Fiveth[0]}}</span> <span ng-if="vm.currentResult.Fiveth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(12)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 13">\u0110\xF3ng 15</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(12)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 15, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[1].length}"><span ng-if="vm.currentResult.Fiveth[1].length">\n{{vm.currentResult.Fiveth[1]}}</span> <span ng-if="vm.currentResult.Fiveth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(11)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 12">\u0110\xF3ng 16</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(11)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 16, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[2].length}"><span ng-if="vm.currentResult.Fiveth[2].length">\n{{vm.currentResult.Fiveth[2]}}</span> <span ng-if="vm.currentResult.Fiveth[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(10)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 11">\u0110\xF3ng 17</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(10)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 17, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[3].length}"><span ng-if="vm.currentResult.Fiveth[3].length">\n{{vm.currentResult.Fiveth[3]}}</span> <span ng-if="vm.currentResult.Fiveth[3].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(9)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 10">\u0110\xF3ng 18</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(9)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 18, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 5\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[4].length}"><span ng-if="vm.currentResult.Fiveth[4].length">\n{{vm.currentResult.Fiveth[4]}}</span> <span ng-if="vm.currentResult.Fiveth[4].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(8)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 9">\u0110\xF3ng 19</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(8)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 19, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 6\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[5].length}"><span ng-if="vm.currentResult.Fiveth[5].length">\n{{vm.currentResult.Fiveth[5]}}</span> <span ng-if="vm.currentResult.Fiveth[5].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 6</label><div class="flex-container one c3"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(7)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 8">\u0110\xF3ng 20</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(7)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 20, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[0].length}"><span ng-if="vm.currentResult.Sixth[0].length">\n{{vm.currentResult.Sixth[0]}}</span> <span ng-if="vm.currentResult.Sixth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(6)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 7">\u0110\xF3ng 21</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(6)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 21, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[1].length}"><span ng-if="vm.currentResult.Sixth[1].length">\n{{vm.currentResult.Sixth[1]}}</span> <span ng-if="vm.currentResult.Sixth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(5)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 6">\u0110\xF3ng 22</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(5)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 22, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[2].length}"><span ng-if="vm.currentResult.Sixth[2].length">\n{{vm.currentResult.Sixth[2]}}</span> <span ng-if="vm.currentResult.Sixth[2].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 7</label><div class="flex-container one c4"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(4)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 5">\u0110\xF3ng 23</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(4)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 23, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[0].length}"><span ng-if="vm.currentResult.Seventh[0].length">\n{{vm.currentResult.Seventh[0]}}</span> <span ng-if="vm.currentResult.Seventh[0].length === 0">KQ</span></md-button>\n</div><div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(3)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 4">\u0110\xF3ng 24</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(3)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 24, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[1].length}"><span ng-if="vm.currentResult.Seventh[1].length">\n{{vm.currentResult.Seventh[1]}}</span> <span ng-if="vm.currentResult.Seventh[1].length === 0">KQ</span></md-button>\n</div><div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(2)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 3">\u0110\xF3ng 25</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(2)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 25, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[2].length}"><span ng-if="vm.currentResult.Seventh[2].length">\n{{vm.currentResult.Seventh[2]}}</span> <span ng-if="vm.currentResult.Seventh[2].length === 0">KQ</span></md-button>\n</div><div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(1)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 2">\u0110\xF3ng 26</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(1)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 26, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[3].length}"><span ng-if="vm.currentResult.Seventh[3].length">\n{{vm.currentResult.Seventh[3]}}</span> <span ng-if="vm.currentResult.Seventh[3].length === 0">KQ</span></md-button>\n</div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</label><div class="flex-container one"><div \nclass="child"><md-button class="md-speaker md-raised md-primary left" ng-disabled="vm.voiceOff" \nng-click="vm.speaker.playNorthern(0)"><md-icon md-font-icon="icon-volume"></md-icon></md-button><md-button \nclass="md-raised md-warn right" aria-label="update Prize" ng-click="vm.updateResult($event, 0, \'gi\u1EA3i \u0111\u1EB7c bi\u1EC7t\')" \nng-class="{\'has-result\': vm.currentResult.Jackpot.length}"><span ng-if="vm.currentResult.Jackpot.length">\n{{vm.currentResult.Jackpot}}</span> <span ng-if="vm.currentResult.Jackpot.length === 0">KQ</span></md-button></div>\n</div></div><div layout="row" class="prize close"><md-button class="md-raised md-warn" ng-click="vm.closeBet($event)" \nng-disabled="!vm.liveCurrent.Active">\u0110\xF3ng c\u01B0\u1EE3c</md-button><md-button class="md-speaker md-raised md-primary" \nng-disabled="vm.voiceOff" ng-click="vm.speaker.playNorthern(\'end\')"><md-icon md-font-icon="icon-volume"></md-icon>\n</md-button></div></div></div></div></div>');
    $templateCache.put('app/main/legendary/loLive/southern/loLive.southern.legend.html', '<div class="page-layout simple fullwidth live-control" layout="column"><div class="content" layout-gt-sm="row" \nlayout="column"><div flex class="content-wrapper"><div class="simple-table-container md-whiteframe-4dp" layout="column">\n<div class="title"><h3>Mi\u1EC1n Nam</h3><div class="ping-error" \nng-if="vm.liveCurrent.error === \'TimeExceeded\' && vm.liveCurrent.Active">\nC\xF3 l\u1ED7i s\u1EA3y ra. M\u1EA1ng c\u1EE7a b\u1EA1n \u0111\xE3 b\u1ECB tr\u1EC5 qu\xE1 l\xE2u. Vui l\xF2ng x\xE1c nh\u1EADn l\u1EA1i nh\u1EEFng gi\u1EA3i \u0111\xE3 \u0111\xF3ng v\xE0 th\u1EF1c hi\u1EC7n m\u1EDF l\u1EA1i.</div></div>\n<div layout-gt-sm="row" layout="column" class="prize"><div layout="row"><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(\'start\')"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-accent" \nng-click="vm.openBet(vm.liveCurrent)" ng-disabled="vm.liveCurrent.Active">M\u1EDF c\u01B0\u1EE3c</md-button><md-button \nclass="md-raised md-accent" ng-click="vm.reOpen($event)" \nng-if="vm.liveCurrent.error === \'TimeExceeded\' && vm.liveCurrent.Active">M\u1EDF l\u1EA1i</md-button></div><div layout="row" \nlayout-align="space-between center"><md-button class="md-raised md-primary hide" ng-disabled="vm.voiceOff" \nng-click="vm.speaker.playRedraw()" ng-disabled="vm.currentResult === undefined"><md-icon md-font-icon="icon-volume">\n</md-icon>Re-Draw</md-button><md-button class="md-raised md-accent" ng-click="vm.pushNotifications($event)" \nng-disabled="vm.currentResult === undefined">push notifications</md-button><md-button class="md-accent" \nng-click="vm.closeLotto($event)">\u0110\xF3ng l\xF4</md-button></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 8</label>\n<div class="flex-container one"><div class="child"><md-button class="md-raised md-accent left" \nng-click="vm.closedPrize(17)" ng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 18">\u0110\xF3ng 1</md-button>\n<md-button class="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(17)">\n<md-icon md-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 17, \'gi\u1EA3i 8\')" \nng-class="{\'has-result\': vm.currentResult.Eighth.length}"><span ng-if="vm.currentResult.Eighth.length">\n{{vm.currentResult.Eighth}}</span> <span ng-if="vm.currentResult.Eighth.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 7</label><div class="flex-container one"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(16)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 17">\u0110\xF3ng 2</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(16)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 16, \'gi\u1EA3i 7\')" \nng-class="{\'has-result\': vm.currentResult.Seventh.length}"><span ng-if="vm.currentResult.Seventh.length">\n{{vm.currentResult.Seventh}}</span> <span ng-if="vm.currentResult.Seventh.length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 6</label><div class="flex-container one c3"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(15)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 16">\u0110\xF3ng 3</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(15)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 15, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[0].length}"><span ng-if="vm.currentResult.Sixth[0].length">\n{{vm.currentResult.Sixth[0]}}</span> <span ng-if="vm.currentResult.Sixth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(14)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 15">\u0110\xF3ng 4</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(14)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 14, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[1].length}"><span ng-if="vm.currentResult.Sixth[1].length">\n{{vm.currentResult.Sixth[1]}}</span> <span ng-if="vm.currentResult.Sixth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(13)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 14">\u0110\xF3ng 5</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(13)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 13, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[2].length}"><span ng-if="vm.currentResult.Sixth[2].length">\n{{vm.currentResult.Sixth[2]}}</span> <span ng-if="vm.currentResult.Sixth[2].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 5</label><div class="flex-container one"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(12)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 13">\u0110\xF3ng 6</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(12)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 12, \'gi\u1EA3i 5\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth.length}"><span ng-if="vm.currentResult.Fiveth.length">\n{{vm.currentResult.Fiveth}}</span> <span ng-if="vm.currentResult.Fiveth.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 4</label><div class="flex-container one c3"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(11)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 12">\u0110\xF3ng 7</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(11)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 11, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[0].length}"><span ng-if="vm.currentResult.Fourth[0].length">\n{{vm.currentResult.Fourth[0]}}</span> <span ng-if="vm.currentResult.Fourth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(10)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 11">\u0110\xF3ng 8</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(10)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 10, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[1].length}"><span ng-if="vm.currentResult.Fourth[1].length">\n{{vm.currentResult.Fourth[1]}}</span> <span ng-if="vm.currentResult.Fourth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(9)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 10">\u0110\xF3ng 9</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(9)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 9, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[2].length}"><span ng-if="vm.currentResult.Fourth[2].length">\n{{vm.currentResult.Fourth[2]}}</span> <span ng-if="vm.currentResult.Fourth[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(8)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 9">\u0110\xF3ng 10</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(8)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 8, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[3].length}"><span ng-if="vm.currentResult.Fourth[3].length">\n{{vm.currentResult.Fourth[3]}}</span> <span ng-if="vm.currentResult.Fourth[3].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(7)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 8">\u0110\xF3ng 11</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(7)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 7, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 5\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[4].length}"><span ng-if="vm.currentResult.Fourth[4].length">\n{{vm.currentResult.Fourth[4]}}</span> <span ng-if="vm.currentResult.Fourth[4].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(6)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 7">\u0110\xF3ng 12</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(6)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 6, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 6\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[5].length}"><span ng-if="vm.currentResult.Fourth[5].length">\n{{vm.currentResult.Fourth[5]}}</span> <span ng-if="vm.currentResult.Fourth[5].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(5)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 6">\u0110\xF3ng 13</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(5)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 5, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 7\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[6].length}"><span ng-if="vm.currentResult.Fourth[6].length">\n{{vm.currentResult.Fourth[6]}}</span> <span ng-if="vm.currentResult.Fourth[6].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 3</label><div class="flex-container one c2"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(4)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 5">\u0110\xF3ng 14</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(4)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 4, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Third[1].length}"><span ng-if="vm.currentResult.Third[0].length">\n{{vm.currentResult.Third[0]}}</span> <span ng-if="vm.currentResult.Third[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(3)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 4">\u0110\xF3ng 15</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(3)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 3, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Third[0].length}"><span ng-if="vm.currentResult.Third[1].length">\n{{vm.currentResult.Third[1]}}</span> <span ng-if="vm.currentResult.Third[1].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 2</label><div class="flex-container one"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(2)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 3">\u0110\xF3ng 16</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(2)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 2, \'gi\u1EA3i 2\')" \nng-class="{\'has-result\': vm.currentResult.Second.length}"><span ng-if="vm.currentResult.Second.length">\n{{vm.currentResult.Second}}</span> <span ng-if="vm.currentResult.Second.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 1</label><div class="flex-container one"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(1)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 2">\u0110\xF3ng 17</md-button><md-button \nclass="md-speaker md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(1)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn md-hue-1 right" \naria-label="update Prize" ng-click="vm.updateResult($event, 1, \'gi\u1EA3i 1\')" \nng-class="{\'has-result\': vm.currentResult.First.length}"><span ng-if="vm.currentResult.First.length">\n{{vm.currentResult.First}}</span> <span ng-if="vm.currentResult.First.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</label><div class="flex-container one"><div class="child">\n<md-button class="left md-raised md-primary" ng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(0)"><md-icon \nmd-font-icon="icon-volume"></md-icon></md-button><md-button class="md-raised md-warn right" aria-label="update Prize" \nng-click="vm.updateResult($event, 0, \'gi\u1EA3i \u0111\u1EB7c bi\u1EC7t\')" ng-class="{\'has-result\': vm.currentResult.Jackpot.length}"><span \nng-if="vm.currentResult.Jackpot.length">{{vm.currentResult.Jackpot}}</span> <span \nng-if="vm.currentResult.Jackpot.length === 0">KQ</span></md-button></div></div></div><div layout="row" \nclass="prize close"><md-button class="md-raised md-warn" ng-click="vm.closeBet($event)" \nng-disabled="!vm.liveCurrent.Active">\u0110\xF3ng c\u01B0\u1EE3c</md-button><md-button class="md-speaker md-raised md-primary" \nng-disabled="vm.voiceOff" ng-click="vm.speaker.playSouthern(\'end\')"><md-icon md-font-icon="icon-volume"></md-icon>\n</md-button></div></div></div></div></div>');
    $templateCache.put('app/main/legendary/priceBoard/dialog/close.dialog.html', '<md-dialog aria-label="close.betting" class="open-betting"><form name="closebetting"><md-toolbar class="md-warn"><div \nclass="md-toolbar-tools"><h2>\u0110\xF3ng to\xE0n b\u1ED9 \u0111\xE0i {{ TermInfo.GameType | legendGame }}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><div layout="row" layout-wrap><div flex="33" ng-repeat="item in TermInfo.Games"><md-checkbox \nclass="md-warn" ng-checked="exists(item.BetType, selected)" ng-click="toggle(item.BetType, selected)" \nng-disabled="submitting">{{ item.BetType | bet : false : TermInfo.GameType }}</md-checkbox></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="closeBetting(data)" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/legendary/priceBoard/dialog/closeExcept.dialog.html', '<md-dialog aria-label="close.betting" class="open-betting"><form name="closebetting"><md-toolbar class="md-warn"><div \nclass="md-toolbar-tools"><h2>\u0110\xF3ng c\u01B0\u1EE3c \u0111\xE0i {{ TermInfo.GameType | legendGame }}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><div layout="row" layout-wrap><div flex="33" ng-repeat="item in TermInfo.Games"><md-checkbox \nclass="md-warn" ng-checked="exists(item.BetType, selected)" ng-click="toggle(item.BetType, selected)" \nng-disabled="submitting">{{ item.BetType | bet : false : TermInfo.GameType }}</md-checkbox></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="closeBettingExcept(data)" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/legendary/priceBoard/dialog/open.dialog.html', '<md-dialog aria-label="open.betting" class="open-betting"><form name="openbetting"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>M\u1EDF c\u01B0\u1EE3c \u0111\xE0i {{ TermInfo.GameType | legendGame }}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><div layout="row" layout-wrap><div flex="33" ng-repeat="item in TermInfo.Games"><md-checkbox \nclass="md-accent" ng-checked="exists(item.BetType, selected)" ng-click="toggle(item.BetType, selected)" \nng-disabled="submitting">{{ item.BetType | bet : false : TermInfo.GameType }}</md-checkbox></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="openBetting(data)" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/legendary/priceBoard/sideNavs/main-sidenav.html', '<div class="header" layout="column"><div layout="row"><div flex="40">K\u1EF3</div><div flex="60" class="text-bold">\n{{ vm.priceBoard.Term }}</div></div><div layout="row"><div flex="40">\u0110\xF3ng l\xF4</div><div flex="60" class="text-bold">\n{{ vm.priceBoard.deadLine | amDateFormat : \'HH:mm:ss\' }}</div></div><div layout="row"><div flex="40">\u0110\xF3ng \u0111\u1EC1</div><div \nflex="60" class="text-bold">{{ vm.priceBoard.deadLineJP | amDateFormat : \'HH:mm:ss\' }}</div></div><div layout="row"><div\n flex="40">T\u1ED5ng ti\u1EC1n</div><div flex="60" class="text-bold">\n{{vm.viewPoint === \'1\' ? vm.odds.Income : vm.odds.TotalIncome | currency : \'\' : 0}}</div></div><div layout="row"><div \nflex="40">T\u1ED5ng \u0111i\u1EC3m</div><div flex="60" class="text-bold">\n{{vm.viewPoint === \'1\' ? vm.priceBoard.point : vm.priceBoard.totalPoint | currency : \'\' : 0}}</div></div><div \nlayout="row"><div flex="40">Gi\xE1 trung b\xECnh</div><div flex="60" class="text-bold">\n{{ vm.priceBoard.averagePrice | currency : \'\' : 0}}</div></div></div><div class="content"><div \nclass="navigation-simple" layout="column"><div class="text-label">S\u1EAFp x\u1EBFp</div><md-button class="item" \naria-label="sort" ng-repeat="sort in vm.sortDefs" ng-click="vm.navChangeSortDefs(sort.id)"><div class="context" \nlayout="row" layout-align="start center" ng-class="{\'selected\' : vm.selected.sort === sort.id}"><md-icon \nmd-font-icon="icon-check md-accent" class="s20"></md-icon><div class="title">{{ sort.name }}</div></div></md-button>\n</div><div class="navigation-simple" layout="column"><div class="text-label">Xem r\u1EE7i ro theo t\u1EF7 l\u1EC7</div><md-button \nclass="item" aria-label="sort" ng-repeat="denominator in vm.denominators" ng-click="vm.denominator = denominator"><div \nclass="context" layout="row" layout-align="start center" ng-class="{\'selected\' : vm.denominator == denominator }">\n<md-icon md-font-icon="icon-check md-accent" class="s20"></md-icon><div class="title">\n{{ denominator | currency : \'\' : 0 }}</div></div></md-button></div><div class="navigation-simple" layout="column">\n<md-button class="item" aria-label="game" ng-repeat="game in vm.aTerms" ng-click="vm.navChangeGame(game.GameType)"><div \nclass="context" layout="row" layout-align="start center" \nng-class="{\'selected\' : vm.priceBoard.GameType === game.GameType}"><md-icon md-font-icon="icon-check md-accent" \nclass="s20"></md-icon><div class="title">{{ game.GameType | legendGame }}</div></div></md-button></div><div \nclass="navigation-simple" layout="column"><md-button class="item" aria-label="game" ng-repeat="bet in vm.betTypes" \nng-click="vm.changeBet(bet)"><div class="context" layout="row" layout-align="start center" \nng-class="{\'selected\' : bet.BetType === vm.priceBoard.BetType }"><md-icon md-font-icon="icon-check md-accent" \nclass="s20"></md-icon><div class="title">{{ bet.BetType | bet : false : vm.priceBoard.GameType }}</div></div>\n</md-button></div></div>');
    $templateCache.put('app/main/legendary/settings/parameter/parameter.html', '<div class="page-layout simple fullwidth term-parameter" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Tham s\u1ED1</div></div>\n</div><div class="content" layout="column"><div class="simple-table-container md-whiteframe-4dp"><table class="simple" \nms-responsive-table><thead><tr><th></th><th>Tham s\u1ED1</th><th>R\u1EE7i ro</th></tr></thead><tbody><tr \nng-repeat="param in vm.LegendaryGames"><td>{{ param | legendGame }}</td><td><md-button class="md-icon-button" \naria-label="More" ui-sref="app.legendary.settings.parameter.base({id: param})"><md-icon \nmd-font-icon="icon-dots-horizontal" class="s20"></md-icon></md-button></td><td><md-button class="md-icon-button" \naria-label="More" ui-sref="app.legendary.settings.parameter.risk({id: param})"><md-icon \nmd-font-icon="icon-dots-horizontal" class="s20"></md-icon></md-button></td></tr></tbody></table></div></div></div>');
    $templateCache.put('app/main/legendary/settings/livePrice/live.legendary.html', '<div class="page-layout simple fullwidth calculate-price" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">T\xEDnh gi\xE1 L\xF4 Live\n</div></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="vm.submitting">\n</md-progress-linear><div class="content" layout="column"><div class="simple-table-container md-whiteframe-4dp"><div \nclass="content-header" layout="row" layout-align="space-between center"><div layout="row" class="form"><div>\nL\u1EE3i nhu\u1EADn th\u1EA5p nh\u1EA5t</div><div><input ng-model="vm.prices.MinProfit" type="number" \nng-disabled="vm.reCal || !vm.hasWritePermission || vm.submitting"></div><div>L\u1EE3i nhu\u1EADn cao nh\u1EA5t</div><div><input \nng-model="vm.prices.MaxProfit" type="number" ng-disabled="vm.reCal || !vm.hasWritePermission || vm.submitting"></div>\n<div>Gi\xE1 b\xE1n</div><div><input ng-model="vm.prices.Price" ng-currency type="tel" \nng-disabled="vm.reCal || !vm.hasWritePermission || vm.submitting"></div><div>Hoa h\u1ED3ng</div><div><input \nng-model="vm.prices.Commission" ng-currency type="tel" \nng-disabled="vm.reCal || !vm.hasWritePermission || vm.submitting"></div><div><md-button class="md-raised md-accent" \nng-click="vm.priceCalculation()" ng-disabled="vm.reCal || vm.submitting" ng-if="vm.hasWritePermission">T\xEDnh gi\xE1\n</md-button></div></div><div layout="row" ng-if="vm.hasWritePermission"><md-button class="md-raised md-accent" \nng-disabled="!vm.reCal" ng-click="vm.updatePrice()">S\u1EEDa \u0111\u1ED5i</md-button><md-button class="md-raised md-warn" \nng-disabled="!vm.reCal" ng-click="vm.resetPrice()">B\u1ECF</md-button></div></div><table class="simple" ms-responsive-table>\n<thead><tr><th>S\u1ED1 gi\u1EA3i</th><th>X\xE1c xu\u1EA5t</th><th>L\u1EE3i nhu\u1EADn t\u01B0\u01A1ng \u1EE9ng</th><th>L\u1EE3i nhu\u1EADn %</th><th>Tr\u1EA3 th\u01B0\u1EDFng t\u01B0\u01A1ng \u1EE9ng\n</th><th>Tr\u1EA3 th\u01B0\u1EDFng</th><th>Gi\xE1 b\xE1n</th></tr></thead><tbody><tr ng-repeat="item in vm.prices.Values" \nng-class="{\'blue\': vm.checkBlue($index) }"><td>{{item.PrizeNr}}</td><td>{{item.Probability}}</td><td>\n{{item.EquivalentProfit}}</td><td>{{item.Profit}}</td><td>{{item.EquivalentPayouts | currency : \'\' : 0 }}</td><td>\n{{item.Payouts | currency : \'\' : 0 }}</td><td>{{item.Price | currency : \'\' : 0 }}</td></tr></tbody></table></div></div>\n</div>');
    $templateCache.put('app/main/legendary/settings/public/public.html', '<div class="page-layout simple fullwidth public-odds" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Public Odds</div>\n</div></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="vm.submitting"></md-progress-linear>\n<div class="content" layout-wrap layout="row"><div class="public-user md-whiteframe-2dp" layout="row"><md-icon \nmd-font-icon="icon-account"></md-icon><h2>{{ vm.publicUser.Username }}</h2></div><div \nclass="public-user new-public-user md-whiteframe-2dp"><div layout="row" class="new-tags"><div flex="80"><md-autocomplete\n md-input-minlength="4" md-search-text="vm.searchText" md-search-text-change="vm.searchTextChange(vm.searchText)" \nmd-items="item in vm.querySearch(vm.searchText)" md-selected-item-change="vm.selectedItemChange(item)" \nmd-item-text="item.Username" placeholder="\u0110\u1ED5i t\xE0i kho\u1EA3n"><md-item-template><span class="item-title"><strong \nmd-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template></md-autocomplete></div><div \nflex="20" layout="row"><md-button class="md-icon-button md-accent" aria-label="Save" ng-click="vm.updateUser()" \nng-disabled="vm.selectedItem === undefined || vm.searchText.length < 4"><md-icon \nmd-font-icon="icon-checkbox-marked-circle"></md-icon></md-button></div></div></div></div></div>');
    $templateCache.put('app/main/legendary/settings/template/template.html', '<div class="page-layout simple fullwidth setting-template" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nM\u1EABu c\u1EA5u h\xECnh t\xE0i kho\u1EA3n</div></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><div class="content" layout="column" layout-gt-md="row"><div \nflex-gt-md="30" flex="100"><div class="simple-table-container md-whiteframe-1dp"><table class="simple" \nms-responsive-table><thead><tr><th>T\xEAn</th><th>M\xF4 t\u1EA3</th><th>S\u1EEDa</th><th>Copy</th></tr></thead><tbody><tr \nng-repeat="item in vm.templates"><td>{{item.Title}}</td><td>{{item.Description}}</td><td><md-button \nclass="md-icon-button" ui-sref="app.legendary.settings.template.modify({id: item.Id, action: \'edit\'})"><md-icon \nmd-font-icon="icon-dots-vertical" class="s16"></md-icon></md-button></td><td><md-button class="md-icon-button" \nui-sref="app.legendary.settings.template.modify({id: item.Id, action: \'add\'})"><md-icon \nmd-font-icon="icon-content-copy" class="s16"></md-icon></md-button></td></tr></tbody></table></div></div><div \nflex-gt-md="70" flex="100"><div class="simple-table-container md-whiteframe-1dp"><table class="table simple task-list" \nms-responsive-table><thead><tr><th>M\xF4 t\u1EA3</th><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>Gi\xE1</th><th>Tr\u1EA3 th\u01B0\u1EDFng</th><th>Hoa h\u1ED3ng\n</th><th>Tr\u1EA1ng th\xE1i</th><th>Kh\u1EDFi t\u1EA1o</th><th>K\u1EBFt th\xFAc</th></tr></thead><tbody><tr ng-repeat="item in vm.taskLists"><td>\n{{ item.Description | TaskDescription }}</td><td>{{ item.GameType | legendGame }}</td><td>\n{{ item.BetType | bet : false : item.GameType }}</td><td>{{ item.Price | currency : \'\' : 0 }}</td><td>\n{{ item.Payouts | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td>\n{{ item.Status | Task }}</td><td>{{ item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{ item.UpdatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td></tr></tbody><tfoot ng-if="vm.more"><tr><td colspan="8" \nng-click="vm.loadMore()">C\xF2n n\u1EEFa</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-show="vm.loadingTask"></md-progress-linear></div></div></div></div>');
    $templateCache.put('app/main/legendary/statement/outstanding/outstanding.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/legendary/statement/member/member.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="navigation" ui-view="navigation"></div><div \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/legendary/statement/term/statement.term.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/legendary/statement/winLose/winLose.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/legendary/term/dialog/update.result.bac.html', '<md-dialog aria-label="K\u1EBFt qu\u1EA3 mi\u1EC1n b\u1EAFc" class="dialog-result"><form ng-cloak><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 Mi\u1EC1n B\u1EAFc</h2></div></md-toolbar><md-dialog-content class="md-dialog-lg"><div \nclass="md-dialog-content"><div layout="row" layout-align="start center"><div flex="20" flex-offset="20"><span>\nK\u1EF3 m\u1EDF th\u01B0\u1EDFng</span><div class="text">{{data.Term}}</div></div><div flex="20"><span>Ng\xE0y m\u1EDF th\u01B0\u1EDFng</span><div \nclass="text">{{ data.DrawResultAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div></div><div layout="row" \nlayout-align="start center"><div flex="20" class="md-warn">Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</div><div flex="20"><input name="result-0" \nng-model="result.Jackpot" class="hight" autocomplete="off"></div></div><div layout="row" layout-align="start center">\n<div flex="20">Gi\u1EA3i nh\u1EA5t</div><div flex="20"><input name="result-1" ng-model="result.First" autocomplete="off"></div>\n</div><div layout="row" layout-align="start center"><div flex="20">Gi\u1EA3i nh\xEC</div><div flex="20"><input name="result-2" \nng-model="result.Second[0]" autocomplete="off"></div><div flex="20"><input name="result-3" ng-model="result.Second[1]" \nautocomplete="off"></div></div><div layout="row" layout-align="start center" class="no-border"><div flex="20">Gi\u1EA3i ba\n</div><div flex="20"><input name="result-4" ng-model="result.Third[0]" autocomplete="off"></div><div flex="20"><input \nname="result-5" ng-model="result.Third[1]" autocomplete="off"></div><div flex="20"><input name="result-6" \nng-model="result.Third[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><input name="result-7" ng-model="result.Third[3]" autocomplete="off"></div><div flex="20"><input \nname="result-8" ng-model="result.Third[4]" autocomplete="off"></div><div flex="20"><input name="result-9" \nng-model="result.Third[5]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i t\u01B0</div><div flex="20"><input name="result-10" ng-model="result.Fourth[0]" autocomplete="off"></div><div flex="20">\n<input name="result-11" ng-model="result.Fourth[1]" autocomplete="off"></div><div flex="20"><input name="result-12" \nng-model="result.Fourth[2]" autocomplete="off"></div><div flex="20"><input name="result-13" ng-model="result.Fourth[3]" \nautocomplete="off"></div></div><div layout="row" layout-align="start center" class="no-border"><div flex="20">Gi\u1EA3i n\u0103m\n</div><div flex="20"><input name="result-14" ng-model="result.Fiveth[0]" autocomplete="off"></div><div flex="20"><input \nname="result-15" ng-model="result.Fiveth[1]" autocomplete="off"></div><div flex="20"><input name="result-16" \nng-model="result.Fiveth[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><input name="result-17" ng-model="result.Fiveth[3]" autocomplete="off"></div><div flex="20"><input \nname="result-18" ng-model="result.Fiveth[4]" autocomplete="off"></div><div flex="20"><input name="result-19" \nng-model="result.Fiveth[5]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i s\xE1u</div><div flex="20"><input name="result-20" ng-model="result.Sixth[0]" autocomplete="off"></div><div flex="20">\n<input name="result-21" ng-model="result.Sixth[1]" autocomplete="off"></div><div flex="20"><input name="result-22" \nng-model="result.Sixth[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i b\u1EA3y</div><div flex="20"><input name="result-23" ng-model="result.Seventh[0]" autocomplete="off"></div><div \nflex="20"><input name="result-24" ng-model="result.Seventh[1]" autocomplete="off"></div><div flex="20"><input \nname="result-25" ng-model="result.Seventh[2]" autocomplete="off"></div><div flex="20"><input name="result-26" \nng-model="result.Seventh[3]" autocomplete="off"></div></div></div></md-dialog-content><md-dialog-actions layout="row">\n<md-button class="btn-w-md md-accent" ng-click="sample()" ng-disabled="!enabled" ng-if="debugOnly">sample</md-button>\n<span flex></span><md-button class="btn-w-md" ng-click="cancel()">Close</md-button><md-button \nclass="btn-w-md md-accent" ng-click="submitResult(false)" ng-disabled="!enabled">OK</md-button></md-dialog-actions>\n</form></md-dialog>');
    $templateCache.put('app/main/legendary/term/dialog/update.result.nam.html', '<md-dialog aria-label="K\u1EBFt qu\u1EA3 x\u1ED5 s\u1ED1" class="dialog-result"><form ng-cloak><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 Mi\u1EC1n Nam</h2></div></md-toolbar><md-dialog-content class="md-dialog-lg"><div \nclass="md-dialog-content"><div layout="row" layout-align="start center"><div flex="20" flex-offset="20"><span>\nK\u1EF3 m\u1EDF th\u01B0\u1EDFng</span><div class="text">{{data.Term}}</div></div><div flex="20"><span>Ng\xE0y m\u1EDF th\u01B0\u1EDFng</span><div \nclass="text">{{data.DrawResultAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div></div><div layout="row" \nlayout-align="start center"><div flex="20">Gi\u1EA3i t\xE1m</div><div flex="20"><input name="result-17" \nng-model="result.Eighth" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i b\u1EA3y</div><div flex="20"><input name="result-16" ng-model="result.Seventh" autocomplete="off"></div></div><div \nlayout="row" layout-align="start center"><div flex="20">Gi\u1EA3i s\xE1u</div><div flex="20"><input name="result-13" \nng-model="result.Sixth[0]" autocomplete="off"></div><div flex="20"><input name="result-14" ng-model="result.Sixth[1]" \nautocomplete="off"></div><div flex="20"><input name="result-15" ng-model="result.Sixth[2]" autocomplete="off"></div>\n</div><div layout="row" layout-align="start center"><div flex="20">Gi\u1EA3i n\u0103m</div><div flex="20"><input name="result-12" \nng-model="result.Fiveth" autocomplete="off"></div></div><div layout="row" layout-align="start center" class="no-border">\n<div flex="20">Gi\u1EA3i t\u01B0</div><div flex="20"><input name="result-5" ng-model="result.Fourth[0]" autocomplete="off"></div>\n<div flex="20"><input name="result-6" ng-model="result.Fourth[1]" autocomplete="off"></div><div flex="20"><input \nname="result-7" ng-model="result.Fourth[2]" autocomplete="off"></div><div flex="20"><input name="result-8" \nng-model="result.Fourth[3]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><input name="result-9" ng-model="result.Fourth[4]" autocomplete="off"></div><div flex="20"><input \nname="result-10" ng-model="result.Fourth[5]" autocomplete="off"></div><div flex="20"><input name="result-11" \nng-model="result.Fourth[6]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i ba</div><div flex="20"><input name="result-3" ng-model="result.Third[0]" autocomplete="off"></div><div flex="20">\n<input name="result-4" ng-model="result.Third[1]" autocomplete="off"></div></div><div layout="row" \nlayout-align="start center"><div flex="20">Gi\u1EA3i nh\xEC</div><div flex="20"><input name="result-2" ng-model="result.Second" \nautocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">Gi\u1EA3i nh\u1EA5t</div><div \nflex="20"><input name="result-1" ng-model="result.First" autocomplete="off"></div></div><div layout="row" \nlayout-align="start center"><div flex="20" class="md-warn">Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</div><div flex="20"><input name="result-0" \nng-model="result.Jackpot" class="hight" autocomplete="off"></div></div></div></md-dialog-content><md-dialog-actions \nlayout="row"><md-button class="btn-w-md md-accent" ng-click="sample()" ng-disabled="!enabled" ng-if="debugOnly">sample\n</md-button><md-button class="btn-w-md md-accent" ng-click="Reverse()" ng-disabled="!enabled" hide>Reverse</md-button>\n<span flex></span><md-button class="btn-w-md" ng-click="cancel()">Close</md-button><md-button \nclass="btn-w-md md-primary" ng-click="submitResult(false)" ng-disabled="!enabled">OK</md-button></md-dialog-actions>\n</form></md-dialog>');
    $templateCache.put('app/main/legendary/term/open/legend.term.open.html', '<div class="page-layout simple fullwidth legend-term" layout="column" layout-align="start center"><div class="content" \nlayout="column" layout-align="center center"><div layout="row" class="content-titles"><h1 class="open">M\u1EDF k\u1EF3 m\u1EDBi</h1>\n</div><div layout="column" class="legend-term-open"><div class="content-wrapper"><div layout="row" \nclass="padding-top-12"><div flex="50" class="label">\u0110\xE0i m\u1EDF th\u01B0\u1EDFng</div><div flex="50"><md-radio-group \nng-model="vm.data.GameType" layout="row"><md-radio-button flex="50" value="0" class="md-warn">Mi\u1EC1n B\u1EAFc</md-radio-button>\n<md-radio-button flex="50" value="1" class="md-warn">Mi\u1EC1n Nam</md-radio-button></md-radio-group></div></div><div \nlayout="row" class="padding-top-24"><div flex="50" class="label">Th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng</div><div flex="50"><input \nmdc-datetime-picker="" week-start="1" date="true" time="true" auto-ok="true" click-outside-to-close="true" type="text" \nshort-time="true" min-date="vm.minDate" minute-steps="1" format="DD-MM-YYYY H:mm" placeholder="Th\u1EDDi gian m\u1EDF th\u01B0\u1EDFng" \nshow-todays-date ng-model="vm.data.DrawResultAt" class="md-input" readonly="readonly"></div></div><div layout="row" \nclass="padding-top-24"><div flex="50" class="label">Ng\xE0y t\xE0i ch\xEDnh</div><div flex="50"><md-switch \nng-model="vm.data.Fiscal" aria-label="Fiscal">{{ vm.data.Fiscal ? \'Hi\u1EC7n t\u1EA1i\' : \'Tu\u1EF3 ch\u1EC9nh\' }}</md-switch></div></div>\n<div layout="row" class="padding-top-24" ng-if="!vm.data.Fiscal"><div flex="50" flex-offset="50"><input \nmdc-datetime-picker="" week-start="1" date="true" time="false" auto-ok="true" click-outside-to-close="true" type="text" \nmin-date="vm.minDate" format="DD-MM-YYYY" placeholder="Ch\u1ECDn ng\xE0y t\xE0i ch\xEDnh" show-todays-date \nng-model="vm.data.FiscalDate" class="md-input" readonly="readonly"></div></div></div><div class="content-footer" \nlayout="row" layout-align="space-between center"><md-button class="md-warn" ui-sref="app.legendary.term" \nng-disabled="vm.submitting">Quay l\u1EA1i</md-button><div flex></div><md-button class="md-raised md-accent" \nng-click="vm.createTerm()" ng-disabled="vm.submitting">OK</md-button><md-progress-linear class="md-warn" \nmd-mode="indeterminate" ng-disabled="!vm.submitting"></md-progress-linear></div></div></div></div>');
    $templateCache.put('app/main/legendary/tickets/cancellation/cancellation.html', 'cancellation');
    $templateCache.put('app/main/legend-casino/area/dialog/area.playback.html', '<md-dialog aria-label="area-update" class="area-playback"><md-dialog-content><div class="md-dialog-content" \nlayout="column" layout-align="space-between center" flex="100" ng-style="thumbs"><div layout="column" \nlayout-align="space-between stretch" flex="100" class="content-wrapper"><div layout="row" class="result" \nlayout-align="space-between center"><div layout="row"><div class="img-result"><img \nng-src="{{ currentData.GameResult | SedieResult }}" alt="{{ currentData.GameResult }}"></div><div class="game-number">\n{{currentData.GameNumber}}.{{currentData.GameRound}}</div></div><div><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></div><div class="control-button" \nlayout="row" layout-align="center center"><md-button class="md-icon-button" ng-click="skipPrevious()" \nng-disabled="playing || disabledPrevious"><md-icon md-font-icon="icon-skip-previous" class="s36"></md-icon></md-button>\n<md-button class="md-icon-button" ng-click="playPause()"><md-icon md-font-icon="icon-pause" class="s36" \nng-show="playing"></md-icon><md-icon md-font-icon="icon-play" class="s36" ng-show="!playing"></md-icon></md-button>\n<md-button class="md-icon-button" ng-click="skipNext()" ng-disabled="playing || disabledNext"><md-icon \nmd-font-icon="icon-skip-next" class="s36"></md-icon></md-button></div></div><md-progress-linear class="md-warn" \nmd-mode="determinate" value="{{determinateValue}}"></md-progress-linear></div></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/legend-casino/area/dialog/area.update.properties.html', '<md-dialog aria-label="area-update" class="area-update"><form name="form" ng-submit="submit()" novalidate><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>C\u1EADp nh\u1EADt tr\u1EA1ng th\xE1i b\xE0n ch\u01A1i</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><md-input-container class="md-block"><label>Name</label> <input name="Name" \nng-model="AreaItem.Name" autocomplete="off"></md-input-container><md-input-container class="md-block"><label>Description\n</label> <input name="Description" ng-model="AreaItem.Description" autocomplete="off"></md-input-container>\n<md-input-container class="md-block"><label>MaxRound</label> <input name="MaxRound" ng-model="AreaItem.MaxRound" \nautocomplete="off"></md-input-container><md-input-container class="md-block"><label>BetSeconds</label> <input \nname="BetSeconds" ng-model="AreaItem.BetSeconds" autocomplete="off"></md-input-container></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">\nCancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="form.$invalid || form.$pristine  || submitting">Update</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/legend-casino/area/dialog/area.update.status.html', '<md-dialog aria-label="area-update" class="area-update"><form name="form" ng-submit="submit()" novalidate><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>C\u1EADp nh\u1EADt tr\u1EA1ng th\xE1i b\xE0n ch\u01A1i</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><div layout="row" class="status"><md-button class="md-raised" ng-click="updateStatus(0)" \nng-class="{\'md-warn\': Status === 0}">Ng\u1EEBng ho\u1EA1t \u0111\u1ED9ng</md-button><md-button class="md-raised" ng-click="updateStatus(1)" \nng-class="{\'md-warn\': Status === 1}">T\u1EA1m ng\u1EEBng</md-button></div><md-input-container class="md-block"><label>Ghi ch\xFA\n</label> <input name="name" ng-model="Note" autocomplete="off"></md-input-container></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button>\n<md-button class="md-accent" type="submit" ng-disabled="submitting">Update</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/legend-casino/area/dialog/game.betting.details.html', '<md-dialog aria-label="area-update" class="area-update company-board"><form name="form" ng-submit="submit()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Chi ti\u1EBFt \u0111\u1EB7t c\u01B0\u1EE3c</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content table-betting"><div class="text-center" ng-if="itemsByGames.length === 0 && !submitting"><h3>\nKh\xF4ng c\xF3 k\u1EBFt qu\u1EA3</h3></div><table class="simple wm-casino" ms-responsive-table ng-if="itemsByGames.length"><thead><tr>\n<th>T\xE0i kho\u1EA3n</th><th>M\xE3 c\u01B0\u1EE3c</th><th>C\u01B0\u1EE3c</th><th>K\u1EBFt qu\u1EA3</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>\u0110\u1EA1i l\xFD</th><th>\nT\u1ED5ng \u0111\u1EA1i l\xFD</th><th>C\u1ED5 \u0111\xF4ng</th><th>Qu\u1EA3n tr\u1ECB</th><th>C\xF4ng ty</th></tr></thead><tbody><tr \nng-repeat="item in itemsByGames"><td><div class="text-bold"><span class="username" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="getAncestors(item)">{{ item.Username }}</span></div><div>\n{{ item.Status | betItemStatus }}</div></td><td><div class="padding-4 text-bold">\n{{ Games.GameNumber }}.{{ Games.GameRound }}</div><div class="padding-4">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td class="game-bet"><div \nng-bind-html="item.BetType | LegendBet"></div><div>{{item.Payouts}}</div></td><td class="text-center"><div \nng-show="item.WinLose > 0" class="text-bold blue-900-fg padding-4">{{ item.GameResult }} - Th\u1EAFng</div><div \nng-show="item.WinLose < 0" class="padding-4">{{ item.GameResult }} - Thua</div><div class="font-size-10 padding-4">\n{{ item.IP }}</div></td><td class="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div \nclass="padding-4">{{ item.NetAmount | currency : \'\' : 0 }}</div></td><td class="text-center"><div \nclass="padding-4 text-bold" ng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div \nclass="padding-4">{{ item.CommissionPercent }} % - {{ item.Commission | currency : \'\' : 0 }}</div></td><td \nclass="share" ng-if="$root.User.Level <= 5"><div layout="column"><div class="share-holder md-deep-orange-50-bg" \nlayout="row"><span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.WinLose < 0 }">\n{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.WinLose < 0 }">\n{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="loadMore && !submitting"><tr>\n<td colspan="11" ng-click="_fGetBetItemsByGame(itemsByGames[itemsByGames - 1].Id)">Xem ti\u1EBFp</td></tr></tfoot></table>\n</div></md-dialog-content></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear><script type="text/ng-template" id="parentClass">\n<div class="triangle"></div>        <div class="ns-popover-tooltip ns-popover-ancestors full-name">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>L\u1EDBp cha</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <div layout="row" layout-align="center center" ng-if="!parents.length">\n                        <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                    </div>\n                    <div layout="row" ng-repeat="item in parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">\n                                {{item.Username}}\n                            </span>\n                            <span flex ng-if="$index !== 0">\n                                <span>{{item.Username}}</span>\n                                <span class="full-name" ng-if="item.FullName.length">({{item.FullName }})</span>\n                            </span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div></script></md-dialog>');
    $templateCache.put('app/main/legend-casino/area/dialog/games.update.results.html', '<md-dialog aria-label="area-update" class="area-update"><form name="form" ng-submit="submit()" novalidate><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i k\u1EBFt qu\u1EA3</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="row" layout-align="center center" class="update-game-result"><div \nng-class="{\'active\' : currentResult === 0}" ng-click="currentResult = 0">0</div><div \nng-class="{\'active\' : currentResult === 1}" ng-click="currentResult = 1">1</div><div \nng-class="{\'active\' : currentResult === 2}" ng-click="currentResult = 2">2</div><div \nng-class="{\'active\' : currentResult === 3}" ng-click="currentResult = 3">3</div><div \nng-class="{\'active\' : currentResult === 4}" ng-click="currentResult = 4">4</div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button>\n<md-button class="md-accent" type="submit" ng-disabled="submitting">Update</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/legend-casino/dealer/dialog/open.dealer.html', '<md-dialog aria-label="area-update" class="area-update"><form name="form" ng-submit="submit()" novalidate><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>Th\xF4ng tin Dealer</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<div layout="column"><md-input-container class="md-block"><label>Avatar</label> <input name="Avatar" \nng-model="DealerInfo.Avatar" autocomplete="off"></md-input-container><md-input-container class="md-block"><label>Code\n</label> <input name="Code" ng-model="DealerInfo.Code" autocomplete="off"></md-input-container><md-input-container \nclass="md-block"><label>FullName</label> <input name="FullName" ng-model="DealerInfo.FullName" autocomplete="off">\n</md-input-container></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="" \nng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="submitting">Update</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/legend-casino/statement/member/member.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="navigation" ui-view="navigation"></div><div \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/legend-casino/statement/winLose/winLose.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/history/account/templates/Casino789ShareHolder.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>\nT\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}</td>\n<td>{{item.IP }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5"><a \nng-click="vm.WmShareHolder(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/Casino789UserGame.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>\nT\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Activity</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records">\n<td>{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}\n</td><td>{{item.IP }}</td><td>{{item.ActivityType | WMActivity }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot \nng-if="vm.hasMoreRecord"><tr><td colspan="6"><a ng-click="vm.WmUserGame(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/WmShareHolder.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>\nT\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}</td>\n<td>{{item.IP }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5"><a \nng-click="vm.WmShareHolder(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/WmUserGame.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>\nT\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Activity</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records">\n<td>{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}\n</td><td>{{item.IP }}</td><td>{{item.ActivityType | WMActivity }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot \nng-if="vm.hasMoreRecord"><tr><td colspan="6"><a ng-click="vm.WmUserGame(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/credit.html', '<table class="simple" ms-responsive-table><thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th>\n<th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td>{{ item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5">\n<a ng-click="vm.credit(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/legendShareHolder.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th class="left">Lo\u1EA1i</th><th>Th\u1EDDi gian</th><th>\nT\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr \nng-repeat="item in vm.Records"><td class="left">\n{{ item.GameType | legendGame }} - {{item.BetType | bet : false : item.GameType }}</td><td>\n{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}</td>\n<td>{{item.IP }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="6"><a \nng-click="vm.shareHolder(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/legendUserGameSetting.html', '<table class="simple" ms-responsive-table><thead><tr><th class="left" rowspan="2">Lo\u1EA1i</th><th>Th\u1EDDi gian</th><th>\nT\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr \nng-repeat="item in vm.Records"><td class="left">\n{{ item.GameType | legendGame }} - {{item.BetType | bet : false : item.GameType }}</td><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td>{{ item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="6">\n<a ng-click="vm.userGameSetting(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot>\n</table>');
    $templateCache.put('app/main/history/account/templates/login.html', '<table class="simple" ms-responsive-table><thead><tr><th>T\xE0i kho\u1EA3n</th><th>Level</th><th>Th\u1EDDi gian</th><th>IP Address\n</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>{{ item.Username }}</td><td>{{ item.Level | group }}\n</td><td>{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td><a ng-click="vm.viewIp(item.IP)">\n{{ item.IP }}</a></td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="4"><a \nng-click="vm.login(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/password.html', '<table class="simple password" ms-responsive-table><thead><tr><th>T\xE0i kho\u1EA3n s\u1EEDa</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>\nTh\u1EDDi gian</th><th>IP</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>{{ item.Username }}</td><td>\n{{ item.UpdateUsername }}</td><td>{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.IP }}</td>\n</tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="4"><a ng-click="vm.password(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/paymentMethod.html', '<table class="simple" ms-responsive-table><thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th>\n<th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td>{{ item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5">\n<a ng-click="vm.paymentMethod(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/production.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>\nT\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}</td>\n<td>{{item.IP }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5"><a \nng-click="vm.Production(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/settle.html', '<table class="simple" ms-responsive-table><thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th>\n<th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td>{{ item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5">\n<a ng-click="vm.settle(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/shareHolder.html', '<table class="simple" ms-responsive-table><thead class=""><tr><th class="left">Lo\u1EA1i</th><th>Th\u1EDDi gian</th><th>\nT\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr \nng-repeat="item in vm.Records"><td class="left">{{item.GameType | gameXs }} - {{item.BetType | bet}}</td><td>\n{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{item.UpdateUsername }}</td><td>{{item.Username}}</td>\n<td>{{item.IP }}</td><td>{{item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="6"><a \nng-click="vm.shareHolder(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/stopBetting.html', '<table class="simple" ms-responsive-table><thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th>\n<th>IP</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td>{{ item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="5">\n<a ng-click="vm.stopBetting(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/suspend.html', '<table class="simple" ms-responsive-table><thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th>\n<th>IP</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody><tr ng-repeat="item in vm.Records"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td ng-class="{\'warn\': item.status === 0}">{{ item.Describe }}</td></tr></tbody><tfoot \nng-if="vm.hasMoreRecord"><tr><td colspan="5"><a ng-click="vm.suspend(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table>');
    $templateCache.put('app/main/history/account/templates/userGameSetting.html', '<table class="simple" ms-responsive-table><thead><tr><th class="left" rowspan="2">Lo\u1EA1i</th><th>Th\u1EDDi gian</th><th>\nT\xE0i kho\u1EA3n b\u1ECB s\u1EEDa</th><th>T\xE0i kho\u1EA3n s\u1EEDa</th><th>IP</th><th>Chi ti\u1EBFt</th></tr></thead><tbody><tr \nng-repeat="item in vm.Records"><td class="left">{{ item.GameType | gameXs }} - {{item.BetType | bet }}</td><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.UpdateUsername }}</td><td>{{ item.Username }}\n</td><td>{{ item.IP }}</td><td>{{ item.Describe }}</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="6">\n<a ng-click="vm.userGameSetting(vm.nextPage)" ng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot>\n</table>');
    $templateCache.put('app/main/history/casino/activity/activity.html', '<div class="page-layout simple fullwidth history-balance" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Game Activity</div>\n</div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear></div><div class="content" layout="column"><div class="simple-table-container md-whiteframe-4dp">\n<div class="content-header" layout="row"><input type="text" ng-model="vm.AreaNumber" placeholder="Area Number" \nng-readonly="true"> <input type="text" ng-model="vm.GameNumber" placeholder="Game Number"> <input type="text" \nng-model="vm.GameRound" placeholder="Game Round"><md-button class="md-raised md-accent" ng-click="vm.checkHistory()">\nKi\u1EC3m tra</md-button></div><div class="container"><table class="simple" ms-responsive-table ng-if="vm.Records.length">\n<thead><tr><th>T\xE0i kho\u1EA3n</th><th>ActivityType</th><th>Describe</th><th>Date</th><th>IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.Records" ng-class="{\'minus\' : item.ChangeType === \'-\' }"><td>{{ item.Username }}</td><td>\n{{ item.ActivityType | Activity }}</td><td>{{ item.Describe }}</td><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.IP }}</td></tr></tbody><tfoot \nng-if="vm.hasMoreRecord"><tr><td colspan="5"><a ng-click="vm.checkHistory(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table></div></div></div></div>');
    $templateCache.put('app/main/history/casino/activity-by-user/activity-by-user.html', '<div class="page-layout simple fullwidth history-balance" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nNh\u1EADt k\xFD bi\u1EBFn \u0111\u1ED9ng s\u1ED1 d\u01B0</div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="content-header" layout="row"><input ng-model="vm.Username" \nplaceholder="T\xE0i kho\u1EA3n"> <input mdc-datetime-picker="" week-start="1" date="true" time="true" type="text" \nformat="DD-MM-YYYY H:mm" placeholder="B\u1EAFt \u0111\u1EA7u" show-todays-date min-date="vm.min" max-date="vm.max" \nng-model="vm.form.start" class="md-input" readonly="readonly"> <input mdc-datetime-picker="" week-start="1" date="true" \ntime="true" type="text" format="DD-MM-YYYY H:mm" placeholder="K\u1EBFt th\xFAc" show-todays-date min-date="vm.min" \nmax-date="vm.max" ng-model="vm.form.end" class="md-input" readonly="readonly"><md-menu md-position-mode="right bottom">\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.textActivityLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item>\n<md-button ng-click="vm.selectAllActivity($index)" md-prevent-menu-close="md-prevent-menu-close"><md-icon \nmd-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item ng-repeat="item in vm.ActivityTypes"><md-button ng-click="vm.selectActivity(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu><md-button class="md-raised md-accent" ng-click="vm.checkHistory()">Ki\u1EC3m tra</md-button></div><div \nclass="container"><table class="simple" ms-responsive-table ng-if="vm.Records.length"><thead><tr><th>T\xE0i kho\u1EA3n</th><th>\nV\xE1n</th><th>Ho\u1EA1t \u0111\u1ED9ng</th><th>Mi\xEAu t\u1EA3</th><th>Ng\xE0y</th><th>IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.Records" ng-class="{\'minus\' : item.ChangeType === \'-\' }"><td>{{ item.Username }}</td><td>\n{{ item.AreaNumber }}.{{ item.GameNumber }}.{{ item.GameRound }}</td><td>{{ item.ActivityType | Activity }}</td><td>\n{{ item.Describe }}</td><td>{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.IP }}</td></tr>\n</tbody><tfoot ng-if="vm.hasMoreRecord"><tr><td colspan="8"><a ng-click="vm.checkHistory(vm.nextPage)" \nng-class="{\'loading\': vm.submitting}">Xem ti\u1EBFp</a></td></tr></tfoot></table></div></div></div></div>');
    $templateCache.put('app/main/history/live/legendary/live.html', '<div class="page-layout simple fullwidth live-history" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nNh\u1EADt k\xFD thay \u0111\u1ED5i gi\xE1</div></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="content-header" layout="row"><md-select \nng-model="vm.form.term" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option ng-repeat="item in vm.termHistory" ng-value="item" \nng-selected="$index === 0">{{item}}</md-option></md-select><md-select ng-model="vm.form.subTerm" \naria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option ng-repeat="item in vm.termRound" ng-value="item" ng-selected="$index === 0">\n{{item}}</md-option></md-select><md-select ng-model="vm.form.game" aria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" \nng-change="vm.changeGame()"><md-option ng-repeat="item in vm.games" ng-value="item.id" ng-selected="$index === 0">\n{{item.name}}</md-option></md-select><md-button class="md-raised md-accent" ng-click="vm.checkHistory()">Ki\u1EC3m tra\n</md-button></div><table class="simple" ms-responsive-table ng-if="vm.history.length"><thead><tr><th>Th\u1EDDi gian</th><th>\nT\xE0i kho\u1EA3n</th><th>\u0110\xE0i</th><th>Gi\u1EA3i</th><th>IP</th></tr></thead><tbody><tr ng-repeat="item in vm.history"><td>\n{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>{{ item.Username }}</td><td>\n{{ item.GameType | gameXs }}</td><td>{{ item.Describe }}</td><td>{{ item.IP }}</td></tr><tr \nng-if="vm.more && !vm.submitting" class="more"><td colspan="7" \nng-click="vm.checkHistory(vm.history[vm.history.length - 1].id)">Xem ti\u1EBFp</td></tr></tbody></table><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/history/live/traditional/live.html', '<div class="page-layout simple fullwidth live-history" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">\nNh\u1EADt k\xFD thay \u0111\u1ED5i gi\xE1</div></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="content-header" layout="row"><md-select \nng-model="vm.form.term" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option ng-repeat="item in vm.termHistory" ng-value="item" \nng-selected="$index === 0">{{item}}</md-option></md-select><md-select ng-model="vm.form.game" \naria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" ng-change="vm.changeGame()"><md-option ng-repeat="item in vm.games" ng-value="item.id" \nng-selected="$index === 0">{{item.name}}</md-option></md-select><md-button class="md-raised md-accent" \nng-click="vm.checkHistory()">Ki\u1EC3m tra</md-button></div><table class="simple" ms-responsive-table \nng-if="vm.history.length"><thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n</th><th>\u0110\xE0i</th><th>Gi\u1EA3i</th><th>IP</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.history"><td>{{ item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\' }}</td><td>\n{{ item.Username }}</td><td>{{ item.GameType | gameXs }}</td><td>{{ item.Describe }}</td><td>{{ item.IP }}</td></tr><tr \nng-if="vm.more && !vm.submitting" class="more"><td colspan="7" \nng-click="vm.checkHistory(vm.history[vm.history.length - 1].id)">Xem ti\u1EBFp</td></tr></tbody></table><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/my/otp/cancel-otp/cancel-otp.html', '<md-dialog class="cancel-otp-dialog" aria-label="Cancel Task"><form name="dialogsForm" class="md-inline-form" \nnovalidate><md-toolbar class="md-warn" layout="column"><div class="md-toolbar-tools md-toolbar-tools-top" layout="row" \nlayout-align="space-between center"><span class="title">H\u1EE7y x\xE1c minh 2 b\u01B0\u1EDBc</span><md-button class="md-icon-button" \nng-click="vm.cancelDialog()" aria-label="Close dialog"><md-icon md-font-icon="icon-close"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content ms-scroll><p>Qu\xFD kh\xE1ch vui l\xF2ng cung c\u1EA5p m\xE3 OTP \u0111\u1EC3 th\u1EF1c hi\u1EC7n h\u1EE7y</p><div \nclass="form-wrapper" layout="row" layout-align="center center"><div id="divOuter"><div id="divInner"><input \nid="partitioned" class="requiredOTP" type="text" name="otp" ng-model="vm.otp" maxlength="6" \noninput="this.value = this.value.replace(/[^0-9.]/g, \'\').replace(/(\\..*)\\./g, \'$1\');"></div></div></div>\n<md-progress-linear class="md-warn" md-mode="indeterminate" ng-show="vm.processing"></md-progress-linear>\n</md-dialog-content><md-dialog-actions layout="row" layout-align="center center"><div flex></div><div layout="row" \nlayout-align="center center"><md-button type="submit" ng-click="vm.cancelOTP()" class="send-button md-accent md-raised" \nng-disabled="dialogsForm.$invalid || dialogsForm.$pristine || vm.processing" aria-label="Add Task">\u0110\u1ED3ng \xFD</md-button>\n</div></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/saba/statement/member/member.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="navigation" ui-view="navigation"></div><div \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/saba/statement/outstanding/outstanding.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/saba/statement/winlose/winLose.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/presidential/statement/outstanding/outstanding.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/notification/tabs/personal/personal.html', '<div class="page-layout simple fullwidth md-whiteframe-2dp" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container"><table class="simple notification" ms-responsive-table><thead><tr><th>#</th><th>Message\n</th><th class="target">Target</th></tr></thead><tbody><tr ng-repeat="item in vm.newsLists"><td>{{ $index + 1 }}<md-menu\n md-position-mode="left bottom"><md-button class="md-icon-button" ng-click="$mdMenu.open($event)"><md-icon \nmd-font-icon="icon-dots-horizontal" class="s14"></md-icon></md-button><md-menu-content width="2"><md-menu-item>\n<md-button ng-click="$root.createPrivateNotification($event, item)"><md-icon md-font-icon="icon-content-cut" \nclass="s20"></md-icon>S\u1EEDa n\u1ED9i dung</md-button></md-menu-item><md-menu-item><md-button \nng-click="$root.deleteNotification($event, item)"><md-icon md-font-icon="icon-delete" class="s20"></md-icon>Xo\xE1 b\u1EA3n tin\n</md-button></md-menu-item></md-menu-content></md-menu></td><td><div class="date" layout="row"><div class="create-date">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="code">{{ item.Code }}</div><div \nclass="sections"><span ng-repeat="d in item.DisplaySections"><md-icon ng-if="d === 0" \nmd-font-icon="icon-arrange-send-backward" class="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-border-top" \nclass="s14"></md-icon><md-icon ng-if="d === 2" md-font-icon="icon-bell-ring" class="s14"></md-icon></span></div></div>\n<div>{{ item.Message }}</div></td><td class="target"><div class="from">From: {{ item.CreatedBy }}</div><div class="to">\nTo: <span ng-repeat="user in item.Recipients">{{ user.Username }}</span></div></td></tr></tbody><tfoot \nng-show="vm.hasData"><tr><td colspan="3"><md-button \nng-click="vm.personalNotification( vm.newsLists[vm.newsLists.length -1 ].Id )">Xem ti\u1EBFp</md-button></td></tr></tfoot>\n</table></div></div></div>');
    $templateCache.put('app/main/notification/tabs/normal/normal.html', '<div class="page-layout simple fullwidth md-whiteframe-2dp" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container"><table class="simple notification" ms-responsive-table><thead><tr><th>#</th><th>Message\n</th></tr></thead><tbody><tr ng-repeat="item in vm.newsLists"><td>{{ $index + 1 }}<md-menu \nmd-position-mode="left bottom"><md-button class="md-icon-button" ng-click="$mdMenu.open($event)"><md-icon \nmd-font-icon="icon-dots-horizontal" class="s14"></md-icon></md-button><md-menu-content width="2"><md-menu-item>\n<md-button ng-click="$root.createNotification($event, item)"><md-icon md-font-icon="icon-content-cut" class="s20">\n</md-icon>S\u1EEDa n\u1ED9i dung</md-button></md-menu-item><md-menu-item><md-button \nng-click="$root.deleteNotification($event, item)"><md-icon md-font-icon="icon-delete" class="s20"></md-icon>Xo\xE1 b\u1EA3n tin\n</md-button></md-menu-item></md-menu-content></md-menu></td><td><div class="date" layout="row"><div class="create-date">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="code">{{ item.Code }}</div><div \nclass="sections"><span ng-repeat="d in item.DisplaySections"><md-icon ng-if="d === 0" \nmd-font-icon="icon-arrange-send-backward" class="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-border-top" \nclass="s14"></md-icon><md-icon ng-if="d === 2" md-font-icon="icon-bell-ring" class="s14"></md-icon></span></div><div \nclass="pages"><span ng-repeat="d in item.DisplayPages"><md-icon ng-if="d === 0" md-font-icon="icon-account-network" \nclass="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-medium" class="s14"></md-icon><md-icon \nng-if="d === 2" md-font-icon="icon-book-open" class="s14"></md-icon></span></div></div><div>\n{{ item.Message | htmlToPlaintext }}</div></td></tr></tbody><tfoot ng-show="vm.hasData"><tr><td colspan="3"><md-button \nng-click="vm.normalNotification( vm.newsLists[vm.newsLists.length -1 ].Id )">Xem ti\u1EBFp</md-button></td></tr></tfoot>\n</table></div></div></div>');
    $templateCache.put('app/main/notification/tabs/special/special.html', '<div class="page-layout simple fullwidth md-whiteframe-2dp" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container"><table class="simple notification" ms-responsive-table><thead><tr><th>#</th><th>Message\n</th></tr></thead><tbody><tr ng-repeat="item in vm.newsLists"><td>{{ $index + 1 }}<md-menu \nmd-position-mode="left bottom"><md-button class="md-icon-button" ng-click="$mdMenu.open($event)"><md-icon \nmd-font-icon="icon-dots-horizontal" class="s14"></md-icon></md-button><md-menu-content width="2"><md-menu-item>\n<md-button ng-click="$root.createNotification($event, item)"><md-icon md-font-icon="icon-content-cut" class="s20">\n</md-icon>S\u1EEDa n\u1ED9i dung</md-button></md-menu-item><md-menu-item><md-button \nng-click="$root.deleteNotification($event, item)"><md-icon md-font-icon="icon-delete" class="s20"></md-icon>Xo\xE1 b\u1EA3n tin\n</md-button></md-menu-item></md-menu-content></md-menu></td><td><div class="date" layout="row"><div class="create-date">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="code">{{ item.Code }}</div><div \nclass="sections"><span ng-repeat="d in item.DisplaySections"><md-icon ng-if="d === 0" \nmd-font-icon="icon-arrange-send-backward" class="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-border-top" \nclass="s14"></md-icon><md-icon ng-if="d === 2" md-font-icon="icon-bell-ring" class="s14"></md-icon></span></div><div \nclass="pages"><span ng-repeat="d in item.DisplayPages"><md-icon ng-if="d === 0" md-font-icon="icon-account-network" \nclass="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-medium" class="s14"></md-icon><md-icon \nng-if="d === 2" md-font-icon="icon-book-open" class="s14"></md-icon></span></div></div><div>\n{{ item.Message | htmlToPlaintext }}</div></td></tr></tbody><tfoot ng-show="vm.hasData"><tr><td colspan="3"><md-button \nng-click="vm.specialNotification( vm.newsLists[vm.newsLists.length -1 ].Id )">Xem ti\u1EBFp</md-button></td></tr></tfoot>\n</table></div></div></div>');
    $templateCache.put('app/main/traditional/cancellation/numbers/numbers.html', '<div class="page-layout simple fullwidth cancellation-numbers"><div class="content"><div \nclass="simple-table-container md-whiteframe-4dp" layout="column"><div layout="row" class=""><div layout="column" \nflex="30" class="term-content"><div class="term" layout="row"><md-select ng-model="vm.Term" \naria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option ng-repeat="item in vm.termHistory" ng-value="item" ng-selected="$index === 0">\n{{item}}</md-option></md-select><md-select ng-model="vm.GameType" aria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" \nng-change="vm.changeGame()"><md-option ng-repeat="item in vm.games" ng-value="item.id" ng-selected="$index === 0">\n{{item.name}}</md-option></md-select><md-select ng-model="vm.BetType" aria-label="Ch\u1ECDn ki\u1EC3u c\u01B0\u1EE3c" \nng-change="vm.changeBetType()" ng-hide="vm.GameType === 0"><md-option ng-repeat="item in vm.BetTypes" \nng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select><div class="quick" \nng-show="vm.numberLength === 2"><md-button class="md-raised md-accent md-quick" ng-click="vm.quickShow = !vm.quickShow">\nCh\u1ECDn nhanh<md-icon md-font-icon="icon-menu-down" ng-if="!vm.quickShow"></md-icon><md-icon md-font-icon="icon-menu-up" \nng-if="vm.quickShow"></md-icon></md-button></div></div><div layout="row" class="bet-list" layout-wrap \nng-show="vm.GameType === 0"><div class="content" ng-repeat="item in vm.BetTypes"><md-checkbox \nng-checked="vm.existsObj(item.id, vm.selected)" ng-click="vm.toggle(item.id, vm.selected)">{{ item.name }}</md-checkbox>\n</div></div><div class="number-container" layout="column" ng-if="vm.numberLength === 2"><div class="collapsing" \nng-show="vm.quickShow"><md-content><md-tabs md-dynamic-height md-border-bottom><md-tab \nng-repeat="item in vm.quickChoices" label="{{item.name}}" ng-if="$index > 0" md-on-select="vm.onTabSelected($index)">\n<md-content class=""><div class="content" ng-repeat="content in item.collection"><md-checkbox \nng-checked="vm.exists($parent.$index, $index)" ng-click="vm.groupNumbers($parent.$index, $index)">{{ content.name }}\n</md-checkbox></div></md-content></md-tab></md-tabs></md-content></div><table><tbody><tr><td><md-checkbox md-no-ink \nng-checked="vm.exists(3, 1)" ng-click="vm.groupNumbers(3, 1)"></md-checkbox></td><td colspan="10" layout="row" \nclass="row-check"><div layout="row" layout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 10)" \nng-click="vm.groupNumbers(0, 10)"></md-checkbox></div><div layout="row" layout-align="start center"><md-checkbox \nmd-no-ink ng-checked="vm.exists(0, 11)" ng-click="vm.groupNumbers(0, 11)"></md-checkbox></div><div layout="row" \nlayout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 12)" ng-click="vm.groupNumbers(0, 12)">\n</md-checkbox></div><div layout="row" layout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 13)" \nng-click="vm.groupNumbers(0, 13)"></md-checkbox></div><div layout="row" layout-align="start center"><md-checkbox \nmd-no-ink ng-checked="vm.exists(0, 14)" ng-click="vm.groupNumbers(0, 14)"></md-checkbox></div><div layout="row" \nlayout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 15)" ng-click="vm.groupNumbers(0, 15)">\n</md-checkbox></div><div layout="row" layout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 16)" \nng-click="vm.groupNumbers(0, 16)"></md-checkbox></div><div layout="row" layout-align="start center"><md-checkbox \nmd-no-ink ng-checked="vm.exists(0, 17)" ng-click="vm.groupNumbers(0, 17)"></md-checkbox></div><div layout="row" \nlayout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 18)" ng-click="vm.groupNumbers(0, 18)">\n</md-checkbox></div><div layout="row" layout-align="start center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 19)" \nng-click="vm.groupNumbers(0, 19)"></md-checkbox></div></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink ng-checked="vm.exists(0, 0)" ng-click="vm.groupNumbers(0, 0)"></md-checkbox></td><td colspan="10" \nrowspan="10" class="main-number"><div class="number-wrapper" layout="row" layout-wrap><div class="number-content" \nng-repeat="item in vm.numbers"><div class="number" ng-click="vm.selectNumber(item)" ng-class="{\'active\': item.active}">\n{{item.number}}</div></div></div></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink \nng-checked="vm.exists(0, 1)" ng-click="vm.groupNumbers(0, 1)"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 2)" ng-click="vm.groupNumbers(0, 2)">\n</md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 3)" \nng-click="vm.groupNumbers(0, 3)"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink ng-checked="vm.exists(0, 4)" ng-click="vm.groupNumbers(0, 4)"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 5)" ng-click="vm.groupNumbers(0, 5)">\n</md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 6)" \nng-click="vm.groupNumbers(0, 6)"></md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox \nmd-no-ink ng-checked="vm.exists(0, 7)" ng-click="vm.groupNumbers(0, 7)"></md-checkbox></td></tr><tr><td layout="row" \nlayout-align="center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 8)" ng-click="vm.groupNumbers(0, 8)">\n</md-checkbox></td></tr><tr><td layout="row" layout-align="center"><md-checkbox md-no-ink ng-checked="vm.exists(0, 9)" \nng-click="vm.groupNumbers(0, 9)"></md-checkbox></td></tr></tbody></table></div><div class="number-container" \nlayout="row" layout-wrap ng-if="vm.numberLength !== 2"><div class="number-list" layout="row" layout-wrap><div \nclass="number" ng-repeat="item in vm.selectedNumbers">{{ item }}<md-button class="btn-remove" \nng-click="vm.removeNumber(item)"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></div></div><div \nclass="input-container" layout="row"><input type="tel" autocomplete="off" go-focus="vm.focusVar" \nclass="input-numbers-array" placeholder="D\xE3y s\u1ED1" ng-model="vm.keyNumber" ng-keyup="vm.inputKeyNumber($event)"><md-button\n class="md-raised" type="button" ng-click="vm.submitKeyNumber()" ng-disabled="!vm.keyNumber.length">Th\xEAm v\xE0o</md-button>\n</div></div><div layout="column" flex="30" class="member-container"><div class="title">Danh s\xE1ch H\u1ED9i vi\xEAn h\u1EE7y c\u01B0\u1EE3c</div>\n<div><textarea ng-model="vm.CancelPlayers" name="ip" rows="3" placeholder=""></textarea></div><div class="title">\nDanh s\xE1ch \u0110\u1EA1i l\xFD - Qu\u1EA3n tr\u1ECB h\u1EE7y c\u01B0\u1EE3c</div><div><textarea ng-model="vm.CancelAgents" name="ip" rows="3" placeholder="">\n</textarea></div><div class="title green-800-fg">Danh s\xE1ch H\u1ED9i vi\xEAn kh\xF4ng h\u1EE7y c\u01B0\u1EE3c</div><div><textarea class="green" \nng-model="vm.ExceptPlayers" name="ip" rows="3" placeholder=""></textarea></div><div class="button-action" layout="row" \nlayout-align="end center"><md-button class="md-raised md-warn" ng-click="vm.multipleTask();" \nng-disabled="vm.submitting" ng-show="vm.GameType === 0">Multiple task</md-button><md-button class="md-raised md-warn" \nng-click="vm.createTask(vm.BetType, true);" ng-disabled="vm.submitting" ng-hide="vm.GameType === 0">create task\n</md-button></div></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div><div class="content"><div \nclass="simple-table-container md-whiteframe-4dp" layout="column"><div class="table-title" layout="row"><div \nclass="title">Danh s\xE1ch h\u1EE7y theo k\u1EF3</div><div class="term"><md-select ng-model="vm.taskTerm" \naria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng" ng-change="vm.changeTerm()"><md-option ng-repeat="item in vm.termHistory" \nng-value="item" ng-selected="$index === 0">{{item}}</md-option></md-select></div></div><table class="simple" \nms-responsive-table><thead><tr><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>S\u1ED1</th><th>H\u1ED9i vi\xEAn</th><th class="">\u0110\u1EA1i l\xFD</th><th \nclass="">H\u1ED9i vi\xEAn (lo\u1EA1i tr\u1EEB)</th><th class="">Th\u1EDDi gian kh\u1EDFi t\u1EA1o</th><th class="">Tr\u1EA1ng th\xE1i</th><th class="">Action\n</th></tr></thead><tbody><tr ng-repeat="item in vm.allTasks"><td class="">{{item.GameType | gameXs }}</td><td class="">\n{{item.BetType | bet }}</td><td class="numbers"><div class="number" layout="row" layout-wrap><span \nng-repeat="number in item.Numbers" ng-click="vm.openTask(item, $event, number)">{{number}}</span></div></td><td \nclass="">{{item.CancelPlayers.length}}</td><td class="">{{item.CancelAgents.length}}</td><td class="">\n{{item.ExceptPlayers.length}}</td><td class="">{{item.CreatedAt | amDateFormat:\'DD-MM-YYYY HH:mm:ss\'}}</td><td \nclass="status" ng-class="{\n                        \'pending\': item.Status === \'pending\',\n                        \'new\': item.Status === \'new\',\n                        \'failed\': item.Status === \'failed\',\n                        \'cancelled\': item.Status === \'cancelled\',\n                        \'processing\': item.Status === \'processing\',\n                        \'completed\': item.Status === \'completed\'}">{{item.Status}} <span class="task" \nng-class="{\'warn\': item.TotalTasks !== item.FinishTasks}" \nng-if="item.TotalTasks !== undefined && (item.Status === \'completed\' || item.Status === \'processing\')">\n({{item.FinishTasks}}/{{item.TotalTasks}})</span> <span class="warn-task" \nng-if="item.Status === \'completed\' && item.TotalTasks !== item.FinishTasks">!</span></td><td class="button"><md-button \nclass="md-primary" ng-click="vm.openTask(item, $event)">Chi ti\u1EBFt</md-button><md-button class="md-accent" \nng-click="vm.copyTask(item)">Sao ch\xE9p</md-button></td></tr></tbody></table></div></div></div>');
    $templateCache.put('app/main/notification/tabs/system/system.html', '<div class="page-layout simple fullwidth md-whiteframe-2dp" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container"><table class="simple notification" ms-responsive-table><thead><tr><th>#</th><th>Message\n</th></tr></thead><tbody><tr ng-repeat="item in vm.newsLists"><td>{{ $index + 1 }}<md-menu \nmd-position-mode="left bottom"><md-button class="md-icon-button" ng-click="$mdMenu.open($event)"><md-icon \nmd-font-icon="icon-dots-horizontal" class="s14"></md-icon></md-button><md-menu-content width="2"><md-menu-item>\n<md-button ng-click="$root.createNotification($event, item)"><md-icon md-font-icon="icon-content-cut" class="s20">\n</md-icon>S\u1EEDa n\u1ED9i dung</md-button></md-menu-item><md-menu-item><md-button \nng-click="$root.deleteNotification($event, item)"><md-icon md-font-icon="icon-delete" class="s20"></md-icon>Xo\xE1 b\u1EA3n tin\n</md-button></md-menu-item></md-menu-content></md-menu></td><td><div class="date" layout="row"><div class="create-date">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="code">{{ item.Code }}</div><div \nclass="sections"><span ng-repeat="d in item.DisplaySections"><md-icon ng-if="d === 0" \nmd-font-icon="icon-arrange-send-backward" class="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-border-top" \nclass="s14"></md-icon><md-icon ng-if="d === 2" md-font-icon="icon-bell-ring" class="s14"></md-icon></span></div><div \nclass="pages"><span ng-repeat="d in item.DisplayPages"><md-icon ng-if="d === 0" md-font-icon="icon-account-network" \nclass="s14"></md-icon><md-icon ng-if="d === 1" md-font-icon="icon-medium" class="s14"></md-icon><md-icon \nng-if="d === 2" md-font-icon="icon-book-open" class="s14"></md-icon></span></div></div><div>\n{{ item.Message | htmlToPlaintext }}</div></td></tr></tbody><tfoot ng-show="vm.hasData"><tr><td colspan="3"><md-button \nng-click="vm.systemNotification( vm.newsLists[vm.newsLists.length -1 ].Id )">Xem ti\u1EBFp</md-button></td></tr></tfoot>\n</table></div></div></div>');
    $templateCache.put('app/main/traditional/cancellation/tickets/command.dialog.html', '<md-dialog aria-label="md-dialog" class="dialog-cancel-betting"><form><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>H\u1EE7y C\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()">\n<md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content><div class="md-dialog-content"><div layout="column"><div layout="row" \nlayout-align="space-between center"><div>e</div><div>e</div><div>e</div></div><div>dd</div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><div class="message" ng-if="message">{{message}}</div><div flex>\n</div><md-button class="md-accent" ng-click="cancel()">\u0110\xF3ng</md-button><md-button class="md-warn" \nng-click="cancelBetting()">H\u1EE7y c\u01B0\u1EE3c</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/traditional/cancellation/tickets/tickets.html', '<div class="page-layout simple fullwidth cancel-betting report" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="row" layout-align="start center"><div \nclass="title padding-right-16">Phi\u1EBFu \u0111\xE3 hu\u1EF7</div><div><md-select ng-model="vm.Term" placeholder="K\u1EF3" \nng-change="vm.changeTerm()"><md-option ng-repeat="term in vm.termHistories" value="{{term}}" ng-selected="$index === 0">\n{{ term }}</md-option></md-select></div></div><div class="open-term" layout="row" layout-align="start center"><md-button\n class="md-raised md-warn" ui-sref="app.traditional_cancellation.tickets.new-task"><md-icon md-font-icon="icon-plus" \nclass="s20"></md-icon>H\u1EE7y phi\u1EBFu m\u1EDBi</md-button></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-1dp"><table class="simple report-table" ms-responsive-table><thead><tr><th>\nProcess ID</th><th>Username</th><th>Tickets</th><th style="width: 350px">Types</th><th>CreatedBy</th><th>CreatedDate\n</th><th>Status</th><th>Note</th></tr></thead><tbody><tr ng-repeat="item in vm.listTickets"><td>{{ item.Id }}</td><td>\n{{ item.Username }}</td><td>{{ item.TicketNumber }}</td><td>{{ item.GameType | gameXs }} - {{ item.BetType | bet }}</td>\n<td>{{ item.CreatedBy }}</td><td>{{ item.CreatedAt | amDateFormat : \'DD/MM/YY, h:mm:ss\' }}</td><td><span \nclass="{{item.status | status }}">{{item.Status | status }}</span></td><td>{{ item.Note }}</td></tr><tr \nclass="load-more" ng-if="vm.loadMore" ng-click="vm.listTicket(vm.lastID)"><td colspan="9">Xem ti\u1EBFp</td></tr></tbody>\n</table></div></div></div>');
    $templateCache.put('app/main/traditional/data-lake/bet-histories/bet-histories.html', '<div class="page-layout simple fullwidth data-lake"><div class="content" layout="column" layout-align="center center">\n<div class="simple-table-container md-whiteframe-4dp" layout="column"><div layout="column" class="term-content"><div \nclass="term" layout="row"><md-select ng-model="vm.Term" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option \nng-repeat="item in vm.termHistory" ng-value="item" ng-selected="$index === 0">{{item}}</md-option></md-select><md-select\n ng-model="vm.GameType" aria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" ng-change="vm.changeGame()"><md-option \nng-repeat="item in vm.games" ng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select>\n<md-select ng-model="vm.BetType" aria-label="Ch\u1ECDn ki\u1EC3u c\u01B0\u1EE3c"><md-option ng-repeat="item in vm.BetTypes" \nng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select></div><div layout="column" \nclass="cancel-numbers"><div class="title">S\u1ED1 h\u1EE7y</div><label><textarea ng-model="vm.cancelNumbers" name="cancelNumbers" \nrows="2" placeholder="M\u1ED7i s\u1ED1 c\xE1ch nhau b\u1EDFi d\u1EA5u ph\u1EA9y"></textarea></label></div><div layout="column" \nclass="doubt-numbers"><div class="title green-800-fg">S\u1ED1 ng\xE0y (1-30)</div><label><input name="HistoryDays" \nng-model="vm.HistoryDays" class="min-number-match" type="number" min="1"></label></div><div layout="column" \nclass="doubt-numbers"><md-button class="md-raised md-accent" ng-click="vm.PlayerTickets()" ng-disabled="vm.submitting">\nXu\u1EA5t d\u1EEF li\u1EC7u</md-button></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/data-lake/members/data-members.html', '<div class="page-layout simple fullwidth data-lake"><div class="content" layout="column" layout-align="center center">\n<div class="simple-table-container md-whiteframe-4dp" layout="column"><div layout="column" class="term-content"><div \nclass="term" layout="row"><md-select ng-model="vm.Term" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option \nng-repeat="item in vm.termHistory" ng-value="item" ng-selected="$index === 0">{{item}}</md-option></md-select><md-select\n ng-model="vm.GameType" aria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" ng-change="vm.changeGame()"><md-option \nng-repeat="item in vm.games" ng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select>\n<md-select ng-model="vm.BetType" aria-label="Ch\u1ECDn ki\u1EC3u c\u01B0\u1EE3c"><md-option ng-repeat="item in vm.BetTypes" \nng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select></div><div layout="column" \nclass="cancel-numbers"><div class="title">S\u1ED1 h\u1EE7y</div><label><textarea ng-model="vm.cancelNumbers" name="cancelNumbers" \nrows="2" placeholder="M\u1ED7i s\u1ED1 c\xE1ch nhau b\u1EDFi d\u1EA5u ph\u1EA9y"></textarea></label></div><div layout="column" \nclass="doubt-numbers"><div class="title green-800-fg">D\xE0n s\u1ED1</div><label><textarea ng-model="vm.doubtNumbers" \nname="doubtNumbers" rows="2" class="green" placeholder="M\u1ED7i s\u1ED1 c\xE1ch nhau b\u1EDFi d\u1EA5u ph\u1EA9y"></textarea></label></div><div \nlayout="column" class="doubt-numbers"><md-button class="md-raised md-accent" ng-click="vm.PlayerTotalBets()" \nng-disabled="vm.submitting">Xu\u1EA5t d\u1EEF li\u1EC7u</md-button></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/data-lake/tickets/data-tickets.html', '<div class="page-layout simple fullwidth data-lake"><div class="content" layout="column" layout-align="center center">\n<div class="simple-table-container md-whiteframe-4dp" layout="column"><div layout="column" class="term-content"><div \nclass="term" layout="row"><md-select ng-model="vm.Term" aria-label="Ch\u1ECDn k\u1EF3 m\u1EDF th\u01B0\u1EDFng"><md-option \nng-repeat="item in vm.termHistory" ng-value="item" ng-selected="$index === 0">{{item}}</md-option></md-select><md-select\n ng-model="vm.GameType" aria-label="Ch\u1ECDn \u0111\xE0i m\u1EDF th\u01B0\u1EDFng" ng-change="vm.changeGame()"><md-option \nng-repeat="item in vm.games" ng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select>\n<md-select ng-model="vm.BetType" aria-label="Ch\u1ECDn ki\u1EC3u c\u01B0\u1EE3c"><md-option ng-repeat="item in vm.BetTypes" \nng-value="item.id" ng-selected="$index === 0">{{item.name}}</md-option></md-select></div><div layout="column" \nclass="cancel-numbers"><div class="title">S\u1ED1 h\u1EE7y</div><label><textarea ng-model="vm.cancelNumbers" name="cancelNumbers" \nrows="2" placeholder="M\u1ED7i s\u1ED1 c\xE1ch nhau b\u1EDFi d\u1EA5u ph\u1EA9y"></textarea></label></div><div layout="column" \nclass="doubt-numbers"><div class="title green-800-fg">Tr\xF9ng t\u1ED1i thi\u1EC3u</div><label><input name="MinNumberMatch" \nng-model="vm.MinNumberMatch" class="min-number-match" type="number" min="1"></label></div><div layout="column" \nclass="doubt-numbers"><md-button class="md-raised md-accent" ng-click="vm.PlayerTickets()" ng-disabled="vm.submitting">\nXu\u1EA5t d\u1EEF li\u1EC7u</md-button></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/live/northern/live.northern.html', '<div class="page-layout simple fullwidth live-control" layout="column"><div class="content" layout-gt-md="row" \nlayout="column"><div flex class="content-wrapper"><div class="simple-table-container md-whiteframe-4dp" layout="column">\n<div class="title"><h3>Mi\u1EC1n B\u1EAFc 1</h3><div class="ping-error" ng-if="vm.liveCurrent[0].error === \'TimeExceeded\'">\nC\xF3 l\u1ED7i s\u1EA3y ra. M\u1EA1ng c\u1EE7a b\u1EA1n \u0111\xE3 b\u1ECB tr\u1EC5 qu\xE1 l\xE2u. Vui l\xF2ng x\xE1c nh\u1EADn l\u1EA1i nh\u1EEFng gi\u1EA3i \u0111\xE3 \u0111\xF3ng v\xE0 th\u1EF1c hi\u1EC7n m\u1EDF l\u1EA1i.</div></div>\n<div layout-gt-sm="row" layout="column" class="prize"><div layout="row"><md-button class="md-raised md-accent" \nng-click="vm.openBet(vm.liveCurrent[0])" ng-disabled="!vm.liveCurrent[0].MakeOdds || vm.liveCurrent[0].Active">M\u1EDF c\u01B0\u1EE3c\n</md-button><md-button class="md-raised md-accent" ng-click="vm.reOpen($event)" \nng-disabled="!vm.liveCurrent[0].MakeOdds" ng-if="vm.liveCurrent[0].error === \'TimeExceeded\'">M\u1EDF l\u1EA1i</md-button></div>\n<div layout="row" layout-align="space-between center"><md-button class="md-raised md-warn" \nng-click="vm.closeLotto(vm.liveCurrent[0], $event)" ng-disabled="vm.aTerms === undefined">\u0110\xF3ng l\xF4</md-button><md-button \nclass="md-raised md-warn" ng-click="vm.closeAll(0, $event)" ng-disabled="vm.aTerms === undefined">\u0110\xF3ng to\xE0n b\u1ED9\n</md-button><md-button class="md-accent" ng-click="vm.makeOdds(vm.liveCurrent[0])" ng-disabled="!vm.liveCurrent">\nChuy\u1EC3n gi\xE1</md-button></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 1</label><div class="flex-container">\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 26)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 27">\u0110\xF3ng 1</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 1, \'gi\u1EA3i 1\')" ng-class="{\'has-result\': vm.currentResult.First.length}"><span \nng-if="vm.currentResult.First.length">{{vm.currentResult.First}}</span> <span \nng-if="vm.currentResult.First.length === 0">KQ</span></md-button></div></div></div><div layout="column" class="prize">\n<label>Gi\u1EA3i 2</label><div class="flex-container c2"><div class="child"><md-button class="md-raised md-accent left" \nng-click="vm.closedPrize(vm.liveCurrent[0], 25)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 26">\u0110\xF3ng 2</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 2, \'gi\u1EA3i 2, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Second[0].length}"><span ng-if="vm.currentResult.Second[0].length">\n{{vm.currentResult.Second[0]}}</span> <span ng-if="vm.currentResult.Second[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 24)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 25">\u0110\xF3ng 3</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 3, \'gi\u1EA3i 2, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Second[1].length}"><span ng-if="vm.currentResult.Second[1].length">\n{{vm.currentResult.Second[1]}}</span> <span ng-if="vm.currentResult.Second[1].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 3</label><div class="flex-container c3"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 23)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 24">\u0110\xF3ng 4</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 4, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Third[0].length}"><span ng-if="vm.currentResult.Third[0].length">\n{{vm.currentResult.Third[0]}}</span> <span ng-if="vm.currentResult.Third[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 22)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 23">\u0110\xF3ng 5</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 5, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Third[1].length}"><span ng-if="vm.currentResult.Third[1].length">\n{{vm.currentResult.Third[1]}}</span> <span ng-if="vm.currentResult.Third[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 21)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 22">\u0110\xF3ng 6</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 6, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Third[2].length}"><span ng-if="vm.currentResult.Third[2].length">\n{{vm.currentResult.Third[2]}}</span> <span ng-if="vm.currentResult.Third[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 20)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 21">\u0110\xF3ng 7</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 7, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Third[3].length}"><span ng-if="vm.currentResult.Third[3].length">\n{{vm.currentResult.Third[3]}}</span> <span ng-if="vm.currentResult.Third[3].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 19)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 20">\u0110\xF3ng 8</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 8, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 5\')" \nng-class="{\'has-result\': vm.currentResult.Third[4].length}"><span ng-if="vm.currentResult.Third[4].length">\n{{vm.currentResult.Third[4]}}</span> <span ng-if="vm.currentResult.Third[4].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 18)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 19">\u0110\xF3ng 9</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 9, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 6\')" \nng-class="{\'has-result\': vm.currentResult.Third[5].length}"><span ng-if="vm.currentResult.Third[5].length">\n{{vm.currentResult.Third[5]}}</span> <span ng-if="vm.currentResult.Third[5].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 4</label><div class="flex-container c4"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 17)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 18">\u0110\xF3ng 10</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 10, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[0].length}"><span ng-if="vm.currentResult.Fourth[0].length">\n{{vm.currentResult.Fourth[0]}}</span> <span ng-if="vm.currentResult.Fourth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 16)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 17">\u0110\xF3ng 11</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 11, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[1].length}"><span ng-if="vm.currentResult.Fourth[1].length">\n{{vm.currentResult.Fourth[1]}}</span> <span ng-if="vm.currentResult.Fourth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 15)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 16">\u0110\xF3ng 12</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 12, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[2].length}"><span ng-if="vm.currentResult.Fourth[2].length">\n{{vm.currentResult.Fourth[2]}}</span> <span ng-if="vm.currentResult.Fourth[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 14)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 15">\u0110\xF3ng 13</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 13, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[3].length}"><span ng-if="vm.currentResult.Fourth[3].length">\n{{vm.currentResult.Fourth[3]}}</span> <span ng-if="vm.currentResult.Fourth[3].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 5</label><div class="flex-container c3"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 13)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 14">\u0110\xF3ng 14</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 14, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[0].length}"><span ng-if="vm.currentResult.Fiveth[0].length">\n{{vm.currentResult.Fiveth[0]}}</span> <span ng-if="vm.currentResult.Fiveth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 12)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 13">\u0110\xF3ng 15</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 15, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[1].length}"><span ng-if="vm.currentResult.Fiveth[1].length">\n{{vm.currentResult.Fiveth[1]}}</span> <span ng-if="vm.currentResult.Fiveth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 11)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 12">\u0110\xF3ng 16</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 16, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[2].length}"><span ng-if="vm.currentResult.Fiveth[2].length">\n{{vm.currentResult.Fiveth[2]}}</span> <span ng-if="vm.currentResult.Fiveth[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 10)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 11">\u0110\xF3ng 17</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 17, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[3].length}"><span ng-if="vm.currentResult.Fiveth[3].length">\n{{vm.currentResult.Fiveth[3]}}</span> <span ng-if="vm.currentResult.Fiveth[3].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 9)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 10">\u0110\xF3ng 18</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 18, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 5\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[4].length}"><span ng-if="vm.currentResult.Fiveth[4].length">\n{{vm.currentResult.Fiveth[4]}}</span> <span ng-if="vm.currentResult.Fiveth[4].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 8)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 9">\u0110\xF3ng 19</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 19, \'gi\u1EA3i 5, b\u1ED9 s\u1ED1 th\u1EE9 6\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth[5].length}"><span ng-if="vm.currentResult.Fiveth[5].length">\n{{vm.currentResult.Fiveth[5]}}</span> <span ng-if="vm.currentResult.Fiveth[5].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 6</label><div class="flex-container c3"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 7)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 8">\u0110\xF3ng 20</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 20, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[0].length}"><span ng-if="vm.currentResult.Sixth[0].length">\n{{vm.currentResult.Sixth[0]}}</span> <span ng-if="vm.currentResult.Sixth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 6)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 7">\u0110\xF3ng 21</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 21, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[1].length}"><span ng-if="vm.currentResult.Sixth[1].length">\n{{vm.currentResult.Sixth[1]}}</span> <span ng-if="vm.currentResult.Sixth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 5)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 6">\u0110\xF3ng 22</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 22, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[2].length}"><span ng-if="vm.currentResult.Sixth[2].length">\n{{vm.currentResult.Sixth[2]}}</span> <span ng-if="vm.currentResult.Sixth[2].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 7</label><div class="flex-container c4"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 4)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 5">\u0110\xF3ng 23</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 23, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[0].length}"><span ng-if="vm.currentResult.Seventh[0].length">\n{{vm.currentResult.Seventh[0]}}</span> <span ng-if="vm.currentResult.Seventh[0].length === 0">KQ</span></md-button>\n</div><div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 3)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 4">\u0110\xF3ng 24</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 24, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[1].length}"><span ng-if="vm.currentResult.Seventh[1].length">\n{{vm.currentResult.Seventh[1]}}</span> <span ng-if="vm.currentResult.Seventh[1].length === 0">KQ</span></md-button>\n</div><div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 2)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 3">\u0110\xF3ng 25</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 25, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[2].length}"><span ng-if="vm.currentResult.Seventh[2].length">\n{{vm.currentResult.Seventh[2]}}</span> <span ng-if="vm.currentResult.Seventh[2].length === 0">KQ</span></md-button>\n</div><div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(vm.liveCurrent[0], 1)" \nng-disabled="!vm.liveCurrent[0].Active || vm.submitting || vm.liveCurrent[0].PrizeNr !== 2">\u0110\xF3ng 26</md-button>\n<md-button class="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 26, \'gi\u1EA3i 7, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Seventh[3].length}"><span ng-if="vm.currentResult.Seventh[3].length">\n{{vm.currentResult.Seventh[3]}}</span> <span ng-if="vm.currentResult.Seventh[3].length === 0">KQ</span></md-button>\n</div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</label><div layout="row"><md-button \nclass="md-raised md-warn" aria-label="update Prize" ng-click="vm.updateResult($event, 0, \'gi\u1EA3i \u0111\u1EB7c bi\u1EC7t\')" \nng-class="{\'has-result\': vm.currentResult.Jackpot.length}"><span ng-if="vm.currentResult.Jackpot.length">\n{{vm.currentResult.Jackpot}}</span> <span ng-if="vm.currentResult.Jackpot.length === 0">KQ</span></md-button></div>\n</div><div layout="row" class="prize close" layout-xs="column"><md-button class="md-raised md-warn" \nng-click="vm.closeBet(vm.liveCurrent[0], $event)" ng-disabled="!vm.liveCurrent[0].Active">\u0110\xF3ng c\u01B0\u1EE3c</md-button></div>\n</div></div><div flex class="content-wrapper"><div class="simple-table-container md-whiteframe-4dp" layout="column"><div\n class="title" layout="column"><div layout="row" layout-align="space-between center"><div><h3>Mi\u1EC1n B\u1EAFc 2</h3></div><div \nhide><md-checkbox ng-model="vm.synchronized">\u0110\u1ED3ng b\u1ED9 v\u1EDBi Mi\u1EC1n B\u1EAFc 1</md-checkbox></div></div><div class="ping-error" \nng-if="vm.liveCurrent[1].error === \'TimeExceeded\'">\nC\xF3 l\u1ED7i s\u1EA3y ra. M\u1EA1ng c\u1EE7a b\u1EA1n \u0111\xE3 b\u1ECB tr\u1EC5 qu\xE1 l\xE2u. Vui l\xF2ng x\xE1c nh\u1EADn l\u1EA1i nh\u1EEFng gi\u1EA3i \u0111\xE3 \u0111\xF3ng v\xE0 th\u1EF1c hi\u1EC7n m\u1EDF l\u1EA1i.</div></div>\n<div layout="row" class="prize" layout-align="space-between center"><md-button class="md-raised md-accent" \nng-click="vm.openBet(vm.liveCurrent[1])" ng-disabled="!vm.liveCurrent[1].MakeOdds || vm.liveCurrent[1].Active">M\u1EDF c\u01B0\u1EE3c\n</md-button><md-button class="md-raised md-accent" ng-click="vm.reOpen($event)" \nng-disabled="!vm.liveCurrent[1].MakeOdds" ng-if="vm.liveCurrent[1].error === \'TimeExceeded\'">M\u1EDF l\u1EA1i</md-button><div \nflex></div><md-button class="md-raised md-warn" ng-click="vm.closeLotto(vm.liveCurrent[1], $event)" \nng-disabled="vm.aTerms === undefined">\u0110\xF3ng l\xF4</md-button><md-button class="md-accent" \nng-click="vm.makeOdds(vm.liveCurrent[1])" ng-disabled="!vm.liveCurrent">Chuy\u1EC3n gi\xE1</md-button></div><div \nlayout="column" class="prize"><label>Gi\u1EA3i 1</label><div layout="row" layout-xs="column"><md-button \nclass="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 26)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 27 || vm.synchronized">\u0110\xF3ng 1\n</md-button></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 2</label><div class="flex-container c2"><div \nclass="child"><md-button class="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 25)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 26 || vm.synchronized">\u0110\xF3ng 2\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 24)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 25 || vm.synchronized">\u0110\xF3ng 3\n</md-button></div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 3</label><div class="flex-container c3">\n<div class="child"><md-button class="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 23)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 24 || vm.synchronized">\u0110\xF3ng 4\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 22)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 23 || vm.synchronized">\u0110\xF3ng 5\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 21)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 22 || vm.synchronized">\u0110\xF3ng 6\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 20)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 21 || vm.synchronized">\u0110\xF3ng 7\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 19)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 20 || vm.synchronized">\u0110\xF3ng 8\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 18)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 19 || vm.synchronized">\u0110\xF3ng 9\n</md-button></div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 4</label><div class="flex-container c4">\n<div class="child"><md-button class="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 17)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 18 || vm.synchronized">\u0110\xF3ng 10\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 16)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 17 || vm.synchronized">\u0110\xF3ng 11\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 15)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 16 || vm.synchronized">\u0110\xF3ng 12\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 14)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 15 || vm.synchronized">\u0110\xF3ng 13\n</md-button></div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 5</label><div class="flex-container c3">\n<div class="child"><md-button class="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 13)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 14 || vm.synchronized">\u0110\xF3ng 14\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 12)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 13 || vm.synchronized">\u0110\xF3ng 15\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 11)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 12 || vm.synchronized">\u0110\xF3ng 16\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 10)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 11 || vm.synchronized">\u0110\xF3ng 17\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 9)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 10 || vm.synchronized">\u0110\xF3ng 18\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 8)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 9 || vm.synchronized">\u0110\xF3ng 19\n</md-button></div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 6</label><div class="flex-container c3">\n<div class="child"><md-button class="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 7)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 8 || vm.synchronized">\u0110\xF3ng 20\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 6)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 7 || vm.synchronized">\u0110\xF3ng 21\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 5)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 6 || vm.synchronized">\u0110\xF3ng 22\n</md-button></div></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 7</label><div class="flex-container c4">\n<div class="child"><md-button class="md-raised md-accent" ng-click="vm.closedPrize(vm.liveCurrent[1], 4)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 5 || vm.synchronized">\u0110\xF3ng 23\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 3)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 4 || vm.synchronized">\u0110\xF3ng 24\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 2)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 3 || vm.synchronized">\u0110\xF3ng 25\n</md-button></div><div class="child"><md-button class="md-raised md-accent" \nng-click="vm.closedPrize(vm.liveCurrent[1], 1)" \nng-disabled="!vm.liveCurrent[1].Active || vm.submitting || vm.liveCurrent[1].PrizeNr !== 2 || vm.synchronized">\u0110\xF3ng 26\n</md-button></div></div></div><div layout="row" class="prize close" layout-xs="column"><md-button \nclass="md-raised md-warn" ng-click="vm.closeBet(vm.liveCurrent[1], $event)" \nng-disabled="!vm.liveCurrent[1].Active || vm.synchronized">\u0110\xF3ng c\u01B0\u1EE3c</md-button></div></div></div></div></div>');
    $templateCache.put('app/main/traditional/live/southern/live.southern.html', '<div class="page-layout simple fullwidth live-control" layout="column"><div class="content" layout-gt-sm="row" \nlayout="column"><div flex class="content-wrapper"><div class="simple-table-container md-whiteframe-4dp" layout="column">\n<div class="title"><h3>Mi\u1EC1n Nam</h3><div class="ping-error" \nng-if="vm.liveCurrent.error === \'TimeExceeded\' && vm.liveCurrent.Active">\nC\xF3 l\u1ED7i s\u1EA3y ra. M\u1EA1ng c\u1EE7a b\u1EA1n \u0111\xE3 b\u1ECB tr\u1EC5 qu\xE1 l\xE2u. Vui l\xF2ng x\xE1c nh\u1EADn l\u1EA1i nh\u1EEFng gi\u1EA3i \u0111\xE3 \u0111\xF3ng v\xE0 th\u1EF1c hi\u1EC7n m\u1EDF l\u1EA1i.</div></div>\n<div layout-gt-sm="row" layout="column" class="prize"><div layout="row"><md-button class="md-raised md-accent" \nng-click="vm.openBet(vm.liveCurrent)" ng-disabled="vm.liveCurrent.Active">M\u1EDF c\u01B0\u1EE3c</md-button><md-button \nclass="md-raised md-accent" ng-click="vm.reOpen($event)" \nng-if="vm.liveCurrent.error === \'TimeExceeded\' && vm.liveCurrent.Active">M\u1EDF l\u1EA1i</md-button></div><div layout="row" \nlayout-align="space-between center"><md-button class="md-raised md-warn" \nng-click="vm.closeLotto(vm.liveCurrent, $event)" ng-disabled="vm.aTerms === undefined">\u0110\xF3ng l\xF4</md-button><md-button \nclass="md-raised md-warn" ng-click="vm.closeAll(2, $event)" ng-disabled="vm.aTerms === undefined">\u0110\xF3ng to\xE0n b\u1ED9\n</md-button><md-button class="md-accent" ng-click="vm.makeOdds(vm.liveCurrent)" ng-disabled="!vm.liveCurrent">Chuy\u1EC3n gi\xE1\n</md-button></div></div><div layout="column" class="prize"><label>Gi\u1EA3i 8</label><div class="flex-container"><div \nclass="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(17)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 18">\u0110\xF3ng 1</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" ng-click="vm.updateResult($event, 17, \'gi\u1EA3i 8\')" \nng-class="{\'has-result\': vm.currentResult.Eighth.length}"><span ng-if="vm.currentResult.Eighth.length">\n{{vm.currentResult.Eighth}}</span> <span ng-if="vm.currentResult.Eighth.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 7</label><div class="flex-container"><div class="child"><md-button \nclass="md-raised md-accent left" ng-click="vm.closedPrize(16)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 17">\u0110\xF3ng 2</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" ng-click="vm.updateResult($event, 16, \'gi\u1EA3i 7\')" \nng-class="{\'has-result\': vm.currentResult.Seventh.length}"><span ng-if="vm.currentResult.Seventh.length">\n{{vm.currentResult.Seventh}}</span> <span ng-if="vm.currentResult.Seventh.length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 6</label><div class="flex-container c3"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(15)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 16">\u0110\xF3ng 3</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 15, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[0].length}"><span ng-if="vm.currentResult.Sixth[0].length">\n{{vm.currentResult.Sixth[0]}}</span> <span ng-if="vm.currentResult.Sixth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(14)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 15">\u0110\xF3ng 4</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 14, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[1].length}"><span ng-if="vm.currentResult.Sixth[1].length">\n{{vm.currentResult.Sixth[1]}}</span> <span ng-if="vm.currentResult.Sixth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(13)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 14">\u0110\xF3ng 5</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 13, \'gi\u1EA3i 6, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Sixth[2].length}"><span ng-if="vm.currentResult.Sixth[2].length">\n{{vm.currentResult.Sixth[2]}}</span> <span ng-if="vm.currentResult.Sixth[2].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 5</label><div class="flex-container"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(12)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 13">\u0110\xF3ng 6</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" ng-click="vm.updateResult($event, 12, \'gi\u1EA3i 5\')" \nng-class="{\'has-result\': vm.currentResult.Fiveth.length}"><span ng-if="vm.currentResult.Fiveth.length">\n{{vm.currentResult.Fiveth}}</span> <span ng-if="vm.currentResult.Fiveth.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 4</label><div class="flex-container c3"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(11)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 12">\u0110\xF3ng 7</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 11, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[0].length}"><span ng-if="vm.currentResult.Fourth[0].length">\n{{vm.currentResult.Fourth[0]}}</span> <span ng-if="vm.currentResult.Fourth[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(10)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 11">\u0110\xF3ng 8</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 10, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[1].length}"><span ng-if="vm.currentResult.Fourth[1].length">\n{{vm.currentResult.Fourth[1]}}</span> <span ng-if="vm.currentResult.Fourth[1].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(9)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 10">\u0110\xF3ng 9</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 9, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 3\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[2].length}"><span ng-if="vm.currentResult.Fourth[2].length">\n{{vm.currentResult.Fourth[2]}}</span> <span ng-if="vm.currentResult.Fourth[2].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(8)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 9">\u0110\xF3ng 10</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 8, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 4\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[3].length}"><span ng-if="vm.currentResult.Fourth[3].length">\n{{vm.currentResult.Fourth[3]}}</span> <span ng-if="vm.currentResult.Fourth[3].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(7)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 8">\u0110\xF3ng 11</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 7, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 5\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[4].length}"><span ng-if="vm.currentResult.Fourth[4].length">\n{{vm.currentResult.Fourth[4]}}</span> <span ng-if="vm.currentResult.Fourth[4].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(6)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 7">\u0110\xF3ng 12</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 6, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 6\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[5].length}"><span ng-if="vm.currentResult.Fourth[5].length">\n{{vm.currentResult.Fourth[5]}}</span> <span ng-if="vm.currentResult.Fourth[5].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(5)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 6">\u0110\xF3ng 13</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 5, \'gi\u1EA3i 4, b\u1ED9 s\u1ED1 th\u1EE9 7\')" \nng-class="{\'has-result\': vm.currentResult.Fourth[6].length}"><span ng-if="vm.currentResult.Fourth[6].length">\n{{vm.currentResult.Fourth[6]}}</span> <span ng-if="vm.currentResult.Fourth[6].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 3</label><div class="flex-container c2"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(4)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 5">\u0110\xF3ng 14</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 4, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 1\')" \nng-class="{\'has-result\': vm.currentResult.Third[1].length}"><span ng-if="vm.currentResult.Third[0].length">\n{{vm.currentResult.Third[0]}}</span> <span ng-if="vm.currentResult.Third[0].length === 0">KQ</span></md-button></div>\n<div class="child"><md-button class="md-raised md-accent left" ng-click="vm.closedPrize(3)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 4">\u0110\xF3ng 15</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" \nng-click="vm.updateResult($event, 3, \'gi\u1EA3i 3, b\u1ED9 s\u1ED1 th\u1EE9 2\')" \nng-class="{\'has-result\': vm.currentResult.Third[0].length}"><span ng-if="vm.currentResult.Third[1].length">\n{{vm.currentResult.Third[1]}}</span> <span ng-if="vm.currentResult.Third[1].length === 0">KQ</span></md-button></div>\n</div></div><div layout="column" class="prize"><label>Gi\u1EA3i 2</label><div class="flex-container"><div class="child">\n<md-button class="md-raised md-accent left" ng-click="vm.closedPrize(2)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 3">\u0110\xF3ng 16</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" ng-click="vm.updateResult($event, 2, \'gi\u1EA3i 2\')" \nng-class="{\'has-result\': vm.currentResult.Second.length}"><span ng-if="vm.currentResult.Second.length">\n{{vm.currentResult.Second}}</span> <span ng-if="vm.currentResult.Second.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i 1</label><div class="flex-container"><div class="child"><md-button \nclass="md-raised md-accent left" ng-click="vm.closedPrize(1)" \nng-disabled="!vm.liveCurrent.Active || vm.liveCurrent.PrizeNr !== 2">\u0110\xF3ng 17</md-button><md-button \nclass="md-raised md-warn md-hue-1 right" aria-label="update Prize" ng-click="vm.updateResult($event, 1, \'gi\u1EA3i 1\')" \nng-class="{\'has-result\': vm.currentResult.First.length}"><span ng-if="vm.currentResult.First.length">\n{{vm.currentResult.First}}</span> <span ng-if="vm.currentResult.First.length === 0">KQ</span></md-button></div></div>\n</div><div layout="column" class="prize"><label>Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</label><div class="flex-container"><div class="child">\n<md-button class="md-raised md-warn" aria-label="update Prize" ng-click="vm.updateResult($event, 0, \'gi\u1EA3i \u0111\u1EB7c bi\u1EC7t\')" \nng-class="{\'has-result\': vm.currentResult.Jackpot.length}"><span ng-if="vm.currentResult.Jackpot.length">\n{{vm.currentResult.Jackpot}}</span> <span ng-if="vm.currentResult.Jackpot.length === 0">KQ</span></md-button></div>\n</div></div><div layout="row" class="prize close" layout-xs="column"><md-button class="md-raised md-warn" \nng-click="vm.closeBet($event)" ng-disabled="!vm.liveCurrent.Active">\u0110\xF3ng c\u01B0\u1EE3c</md-button></div></div></div></div></div>');
    $templateCache.put('app/main/traditional/settings/livePrice/livePrice.html', '<div class="page-layout simple fullwidth calculate-price" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">T\xEDnh gi\xE1 L\xF4 Live\n</div></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="vm.submitting">\n</md-progress-linear><div class="content" layout="column"><div class="simple-table-container md-whiteframe-4dp"><div \nclass="content-header" layout="row" layout-align="space-between center"><div layout="row" class="form"><div>\nL\u1EE3i nhu\u1EADn th\u1EA5p nh\u1EA5t</div><div><input ng-model="vm.prices.MinProfit" type="number" \nng-disabled="vm.reCal || !vm.hasWritePermission || vm.submitting"></div><div>L\u1EE3i nhu\u1EADn cao nh\u1EA5t</div><div><input \nng-model="vm.prices.MaxProfit" type="number" step="0.1" \nng-disabled="vm.reCal || !vm.hasWritePermission || vm.submitting"></div><div><md-button class="md-raised md-accent" \nng-click="vm.priceCalculation()" ng-disabled="vm.reCal || vm.submitting" ng-if="vm.hasWritePermission">T\xEDnh gi\xE1\n</md-button></div></div><div layout="row" ng-if="vm.hasWritePermission"><md-button class="md-raised md-accent" \nng-disabled="!vm.reCal" ng-click="vm.updatePrice()">S\u1EEDa \u0111\u1ED5i</md-button><md-button class="md-raised md-warn" \nng-disabled="!vm.reCal" ng-click="vm.resetPrice()">B\u1ECF</md-button></div></div><table class="simple" ms-responsive-table>\n<thead><tr><th>S\u1ED1 gi\u1EA3i</th><th>L\u1EE3i nhu\u1EADn %</th><th>X\xE1c xu\u1EA5t</th><th>Tr\u1EA3 th\u01B0\u1EDFng</th><th>L\u1EE3i nhu\u1EADn t\u01B0\u01A1ng \u1EE9ng</th><th>\nGi\xE1 t\u01B0\u01A1ng \u1EE9ng</th><th>Gi\xE1 b\xE1n</th></tr></thead><tbody><tr ng-repeat="item in vm.prices.Values" \nng-class="{\'blue\': vm.checkBlue($index) }"><td>{{item.PrizeNr}}</td><td>{{item.Profit}}</td><td>{{item.Probability}}\n</td><td>{{item.Payouts | currency : \'\' : 0 }}</td><td>{{item.EquivalentProfit}}</td><td>\n{{item.EquivalentPrice | currency : \'\' : 0 }}</td><td>{{item.Price | currency : \'\' : 0 }}</td></tr></tbody></table>\n</div></div></div>');
    $templateCache.put('app/main/traditional/settings/parameter/parameter.html', '<div class="page-layout simple fullwidth term-parameter" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="breadcrumb" hide><span \nclass="parent">breadcrumb</span></div><div class="title">Tham s\u1ED1</div></div></div><div class="content" layout="column">\n<div class="simple-table-container md-whiteframe-4dp"><table class="simple" ms-responsive-table><thead><tr><th></th><th>\nTham s\u1ED1</th><th>R\u1EE7i ro</th></tr></thead><tbody><tr ng-repeat="param in vm.TraditionalGames"><td>{{ param | gameXs }}\n</td><td><md-button class="md-icon-button" aria-label="More" \nui-sref="app.traditional_settings_parameter.base({id: param})"><md-icon md-font-icon="icon-dots-horizontal" class="s20">\n</md-icon></md-button></td><td><md-button class="md-icon-button" aria-label="More" \nui-sref="app.traditional_settings_parameter.risk({id: param})"><md-icon md-font-icon="icon-dots-horizontal" class="s20">\n</md-icon></md-button></td></tr></tbody></table></div></div><div class="content" layout="row"><div \nclass="ufBJacmA md-whiteframe-4dp" flex="30"><div layout="row" layout-align="end center" class="FlROrFsP"><md-button \nclass="md-raised md-accent" ng-click="vm.addProfile($event)" ng-disabled="vm.submitting">Th\xEAm Profile m\u1EDBi</md-button>\n</div><table class="simple profile" ms-responsive-table><thead><tr><th>#</th><th>T\xEAn</th><th>Schedule</th><th>Thao t\xE1c\n</th></tr></thead><tbody><tr ng-repeat="item in vm.Profiles"><td>{{ $index + 1 }}</td><td>{{item.Name}}</td><td>\n<md-button class="md-icon-button md-accent" ng-if="item.TimeApplication === undefined" ns-popover \nns-popover-template="timeUpdate" ns-popover-on-open="vm.loadCurrentTime(item)" ns-popover-placement="bottom" \nng-disabled="vm.submitting"><md-icon md-font-icon="icon-timer"></md-icon></md-button><div ng-if="item.TimeApplication" \nlayout="row" class="time-application"><p ns-popover ns-popover-template="timeUpdate" \nns-popover-on-open="vm.loadCurrentTime(item)" ns-popover-placement="bottom" class="update-time">{{item.TimeApplication}}\n</p><md-button class="md-icon-button md-warn" ng-click="vm.deleteTimer(item, $event)" ng-disabled="vm.submitting">\n<md-icon md-font-icon="icon-delete-variant"></md-icon></md-button></div></td><td><md-button \nclass="md-icon-button md-accent" ng-click="vm.detailsProfile(item)" ng-disabled="vm.submitting"><md-icon \nmd-font-icon="icon-arrow-down-bold-circle"></md-icon></md-button><md-button class="md-icon-button" \nng-class="{\'md-accent\': item.Status === \'running\'}" ng-click="vm.switchProfile(item, $event)" \nng-disabled="vm.submitting"><md-icon md-font-icon="icon-clipboard-check"></md-icon></md-button><md-button \nclass="md-icon-button md-warn" ng-click="vm.deleteProfile(item, $event)" ng-disabled="vm.submitting"><md-icon \nmd-font-icon="icon-delete"></md-icon></md-button></td></tr></tbody></table><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div><div class="details-profile" flex="70" \nng-show="vm.detailsProfiles.length"><div class="simple-table-container md-whiteframe-4dp"><table \nclass="simple term-open-parameter" ms-responsive-table><thead><tr><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>T\u0103ng gi\xE1 theo \u0111i\u1EC3m\n</th><th>T\u0103ng gi\xE1 theo r\u1EE7i ro</th><th>T\u0103ng gi\xE1 theo \u0110i\u1EC3m TB</th><th>Ki\u1EC3u t\u0103ng gi\xE1</th></tr></thead><tr \nng-repeat="item in vm.detailsProfiles"><td>{{item.GameType | gameXs }}</td><td>{{item.BetType | bet }}</td><td>\n<md-button class="md-icon-button" ng-click="vm.viewByPoint(item, $event)"><md-icon md-font-icon="icon-dots-horizontal">\n</md-icon></md-button></td><td><md-button class="md-icon-button" ng-click="vm.viewByRisk(item, $event)" \nng-if="vm.available(item.BetType)"><md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td>\n<md-button class="md-icon-button" ng-click="vm.viewPointAvg(item, $event)" ng-if="vm.available(item.BetType)"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><span>{{ item.Type | riskType }}</span></td></tr>\n</table></div></div></div><script type="text/ng-template" id="timeUpdate"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-term-update md-whiteframe-8dp">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>Th\u1EDDi gian ch\u1EA1y m\u1EABu</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <div layout="column">\n                        <div class="form-credit" layout="row">\n                            <input type="text" ng-model="vm.TimeApplication" ng-disabled="vm.updateInProcess">\n                            <md-button class="md-icon-button md-accent" aria-label="updateTime" ng-click="vm.updateTime(item)" ng-disabled="vm.updateInProcess">\n                                <md-icon md-font-icon="icon-check" class="s24" ng-if="!vm.updateInProcess"></md-icon>\n                                <md-icon md-svg-icon="assets/icons/reload10.svg" class="s24" ng-if="vm.updateInProcess"></md-icon>\n                            </md-button>\n                        </div>\n                    </div>\n                    <div class="note" ng-show="vm.notValid">\n                        <p class="warn">Th\u1EDDi gian kh\xF4ng h\u1EE3p l\u1EC7</p>\n                    </div>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/traditional/risk-management/agency/big.board.dialog.html', '<md-dialog aria-label="One789" class="company-board"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nTh\u1ED1ng k\xEA h\xE0ng \u0111ang v\xE0o</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="scrollable" ms-scroll><div \nclass="md-dialog-content"><md-tabs md-dynamic-height md-border-bottom><md-tab label="Mi\u1EC1n B\u1EAFc 1" \nmd-on-select="onTabSelected(0)"><md-content class=""><div layout="column"><div class="table-container"><table \nclass="table"><thead><tr><th>Th\u1EC3 lo\u1EA1i</th><th colspan="10"><div layout="row"><input ng-model="interval" type="number">\n {{count}}</div></th></tr></thead><tbody><tr ng-repeat="odd in oddData" ng-class="{\'live\': odd.BetType === 20}"><td><div\n class="" layout="column"><div>{{ odd.BetType | bet }}</div><div>{{ odd.Income/1000 | currency : \'\' : 0 }}</div><div \nclass="total-point">{{ odd.TotalPoint | currency : \'\' : 0 }}</div></div></td><td \nng-repeat="number in odd.Numbers | limitTo: 10 "><div class="number" layout="column" \nng-mouseover="hoverIn(number.Number)" ng-mouseleave="hoverOut()" \nng-class="{\'hover\': number.hover, \'highlightByPoint\': number.highlightByPoint, \'highlightByRisk\': number.highlightByRisk, \'disabled\': number.Stop}">\n<div layout="row" layout-align="center center"><div flex="50" class="num"><div \nng-style="{\'background-color\': colors[number.classIndex] }">{{ number.Number }}</div></div><div flex="50" class="price">\n{{ number.Price | currency : \'\' : 0 }}</div></div><div class="point">{{ number.CompanyPoint | currency : \'\' : 0 }}</div>\n<div class="risk">{{ number.CompanyRiskAmount/1000 | currency : \'\' : 0 }}</div></div></td></tr></tbody></table></div>\n<div class="setting-alarm"><table class="table simple"><thead><tr><th>C\xE0i \u0111\u1EB7t c\u1EA3nh b\xE1o <a ng-click="playSound()">\n(Test Sound)</a></th><th ng-repeat="item in monitorBets">{{ item | bet }}</th></tr></thead><tbody><tr><td>\u0110i\u1EC3m<br>\n<small>L\u1EDBn h\u01A1n</small></td><td ng-repeat="item in monitorBets"><input ng-model="alarmSetting.point[item]" ng-currency \ntype="tel" ng-blur="updateSetting();"></td></tr><tr class="risk"><td>R\u1EE7i ro<br><small>Nh\u1ECF h\u01A1n</small></td><td \nng-repeat="item in monitorBets"><input ng-model="alarmSetting.risk[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr></tbody></table></div></div></md-content></md-tab><md-tab label="Mi\u1EC1n B\u1EAFc 2" \nmd-on-select="onTabSelected(1)"><md-content class=""><div layout="column"><div class="table-container"><table \nclass="table"><thead><tr><th>Th\u1EC3 lo\u1EA1i</th><th colspan="10"><div layout="row"><input ng-model="interval" type="number">\n {{count}}</div></th></tr></thead><tbody><tr ng-repeat="odd in oddData" ng-class="{\'live\': odd.BetType === 20}"><td><div\n class="" layout="column"><div>{{ odd.BetType | bet }}</div><div>{{ odd.Income/1000 | currency : \'\' : 0 }}</div><div \nclass="total-point">{{ odd.TotalPoint | currency : \'\' : 0 }}</div></div></td><td \nng-repeat="number in odd.Numbers | limitTo: 10 "><div class="number" layout="column" \nng-mouseover="hoverIn(number.Number)" ng-mouseleave="hoverOut()" \nng-class="{\'hover\': number.hover, \'highlightByPoint\': number.highlightByPoint, \'highlightByRisk\': number.highlightByRisk, \'disabled\': number.Stop}">\n<div layout="row" layout-align="center center"><div flex="50" class="num"><div \nng-style="{\'background-color\': colors[number.classIndex] }">{{ number.Number }}</div></div><div flex="50" class="price">\n{{ number.Price | currency : \'\' : 0 }}</div></div><div class="point">{{ number.Point | currency : \'\' : 0 }}</div><div \nclass="risk">{{ number.RiskAmount/1000 | currency : \'\' : 0 }}</div></div></td></tr></tbody></table></div><div \nclass="setting-alarm"><table class="table simple"><thead><tr><th>C\xE0i \u0111\u1EB7t c\u1EA3nh b\xE1o <a ng-click="playSound()">(Test Sound)\n</a></th><th ng-repeat="item in monitorBets">{{ item | bet }}</th></tr></thead><tbody><tr><td>\u0110i\u1EC3m<br><small>L\u1EDBn h\u01A1n\n</small></td><td ng-repeat="item in monitorBets"><input ng-model="alarmSetting.point[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr><tr class="risk"><td>R\u1EE7i ro<br><small>Nh\u1ECF h\u01A1n</small></td><td \nng-repeat="item in monitorBets"><input ng-model="alarmSetting.risk[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr></tbody></table></div></div></md-content></md-tab></md-tabs></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/agency/risk-agency.html', '<div class="page-layout simple fullwidth priceBoard risk-management" layout="column"><div class="content" \nlayout="column"><div class="navigation-board md-whiteframe-1dp" layout="row"><div layout="column" class="user-id"><div \nclass="user-container agency" layout="column"><div class="user-list" layout="row" layout-wrap><div class="user" \nlayout="row" ng-repeat="item in vm.membersList"><div layout="column"><div layout="row"><span class="username" \nns-popover ns-popover-template="parentClass" ns-popover-on-open="vm.getAncestors(item)">{{ item.Username }}</span>\n<md-button class="btn-remove" ng-click="vm.removeMember(item)"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n</div><span class="level">{{ item.Level | group }}</span></div></div></div></div><div layout="row"><div layout="column" \nclass="user-group-container"><md-select ng-model="vm.level" aria-label="true" ng-change="vm.changeGroup()"><md-option \nng-repeat="item in vm.usersGroups" value="{{item.id}}" ng-selected="item.id === 2" ng-if="item.id !== 0">{{item.name}}\n</md-option></md-select></div><div flex layout="column" class="search-container"><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm t\xE0i kho\u1EA3n {{ vm.level | group }}"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div></div></div><div layout="row" class="actions md-warn" layout-align="center end"><md-button \nclass="md-raised md-warn" ng-click="vm.rendered()">Render</md-button><md-button class="md-warn" \nng-click="vm.companyBoard($event)">Xem h\xE0ng</md-button></div></div></div><div class="content secondary" layout="column">\n<div layout="column"><div class="navigation-board md-whiteframe-1dp" layout="column" ng-show="vm.betTypes.length"><div \nlayout="row"><md-select ng-model="vm.priceBoard.Term" placeholder="K\u1EF3" ng-change="vm.changeTerm()"><md-option \nng-repeat="term in vm.termHistory" value="{{term}}" ng-selected="term == vm.termHistory[0]">{{term}}</md-option>\n</md-select><md-select ng-model="vm.selected.GameType" ng-change="vm.changeGame()" aria-label="Change Game" \nclass="select-game"><md-option ng-repeat="game in vm.aTerms" value="{{ game.GameType }}" \nng-selected="game.GameType == 0">{{ game.GameType | gameXs }}</md-option></md-select><div flex class="select-bet">\n<md-button ng-repeat="bet in vm.betTypes" ng-model="vm.selected.BetType" ng-click="vm.changeBet(bet)" \nng-class="{\'md-accent md-raised\' : bet.BetType === vm.priceBoard.BetType }">{{ bet.BetType | bet }}</md-button></div>\n</div><div layout="row"><md-select ng-model="vm.viewPoint" ng-change="vm.sortNumber()" aria-label="View Point" \nng-if="vm.isCompany"><md-option ng-repeat="view in vm.viewPoints" value="{{view.id}}" ng-selected="view.id === 1">\n{{view.name}}</md-option></md-select><md-select ng-model="vm.selected.sort" aria-label="true" \nng-change="vm.sortNumber()" aria-label="Sort Number"><md-option ng-repeat="sort in vm.sortDefs" value="{{ sort.id }}" \nng-selected="sort.id === \'num\'">{{ sort.name }}</md-option></md-select><md-select ng-model="vm.denominator" \naria-label="true"><md-option ng-repeat="denominator in vm.denominators" value="{{denominator}}" \nng-selected="denominator === 1">{{ denominator | currency : \'\' : 0 }}</md-option></md-select><md-button \nng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.priceBoard.TermStatus !== 1 }" \nng-disabled="vm.priceBoard.TermStatus !== 1"><md-icon md-font-icon="icon-refresh" class="s20"></md-icon></md-button>\n<md-menu><md-button md-no-ink ng-click="$mdMenu.open()" class="md-accent countdown" \nng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }" ng-disabled="vm.priceBoard.TermStatus !== 1">\n{{vm.timer}}<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button><md-menu-content width="4" \nng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" class="md-warn">T\u1EAFt</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.refreshEvent(5)" \nclass="md-accent">5 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(10)" \nclass="md-accent">10 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(30)" \nclass="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(60)" \nclass="md-accent">60 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu><span class="menu">K\u1EF3: <b>\n{{vm.priceBoard.Term}}</b></span> <span class="menu">\u0110\xF3ng l\xF4: <b>\n{{ vm.priceBoard.deadLine | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu">\u0110\xF3ng \u0111\u1EC1: <b>\n{{ vm.priceBoard.deadLineJP | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu" \nng-show="vm.odds.CompanyTotalIncome">T\u1ED5ng ti\u1EC1n: <b>\n{{ vm.viewPoint === \'1\' ? vm.odds.CompanyTotalIncome : vm.TotalAmount | currency : \'\' : 0}}</b></span> <span \nclass="menu" ng-show="vm.odds.CompanyTotalPoint">T\u1ED5ng \u0111i\u1EC3m: <b>\n{{ vm.viewPoint === \'1\' ? vm.odds.CompanyTotalPoint : vm.TotalPoint | currency : \'\' : 0}}</b></span> <span class="menu" \nng-show="vm.priceBoard.averagePrice">Gi\xE1 trung b\xECnh: <b>{{ vm.priceBoard.averagePrice | currency : \'\' : 0}}</b></span> \n<span class="menu clipboard" ng-show="vm.riskNumbers" ngclipboard ngclipboard-success="vm.onSuccess(e);" \nngclipboard-error="vn.onError(e);" data-clipboard-text="{{ vm.riskNumbersString.toString() }}">T\u1ED5ng s\u1ED1 r\u1EE7i ro: <b>\n{{ vm.riskNumbers | currency : \'\' : 0}}</b></span></div></div><div class="md-whiteframe-1dp previous-term" layout="row" \nlayout-wrap><div class="single-term" layout="column" ng-repeat="item in vm.previousTerm" \nng-click="vm.getPreviousTerm(item)" ng-class="{\'active\': vm.priceBoard.Term === item.Term}"><div class="term">\n{{ item.Term }}</div><div class="money" ng-class="{\'active\': vm.priceBoard.Term === item.Term}">\n{{ item.Income | currency : \'\' : 0 }}</div></div><md-button class="md-fab" ng-click="vm.getNewTerm()"><md-icon \nmd-font-icon="icon-plus"></md-icon></md-button></div><div class="number-wrapper"><div class="spinner" layout="column" \nng-hide="vm.allSet || vm.loadDisabled"><md-progress-circular md-diameter="96"></md-progress-circular></div><div \nclass="number-board md-whiteframe-1dp" layout="column" ng-hide="!vm.allSet"><div layout="row" \nlayout-align="space-between center" class="number-header"><div layout="row" ng-if="vm.hasWritePermission"><div \nlayout="column" layout-gt-md="row" ng-if="vm.show3D" class="show3d"><div layout="column" \nlayout-align="space-between center"><div class="title">H\xE0ng tr\u0103m</div><div layout="row"><span class="label" \nng-class="{\'active\': vm.filterVal === 20}" ng-click="vm.createNumber3D(20)">0</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 21}" ng-click="vm.createNumber3D(21)">1</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 22}" ng-click="vm.createNumber3D(22)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 23}" ng-click="vm.createNumber3D(23)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 24}" ng-click="vm.createNumber3D(24)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 25}" ng-click="vm.createNumber3D(25)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 26}" ng-click="vm.createNumber3D(26)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 27}" ng-click="vm.createNumber3D(27)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 28}" ng-click="vm.createNumber3D(28)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 29}" ng-click="vm.createNumber3D(29)">9</span></div></div><div layout="column">\n<div class="title">H\xE0ng ch\u1EE5c</div><div layout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 10}" \nng-click="vm.createNumber3D(10)">0</span> <span class="label" ng-class="{\'active\': vm.filterVal === 11}" \nng-click="vm.createNumber3D(11)">1</span> <span class="label" ng-class="{\'active\': vm.filterVal === 12}" \nng-click="vm.createNumber3D(12)">2</span> <span class="label" ng-class="{\'active\': vm.filterVal === 13}" \nng-click="vm.createNumber3D(13)">3</span> <span class="label" ng-class="{\'active\': vm.filterVal === 14}" \nng-click="vm.createNumber3D(14)">4</span> <span class="label" ng-class="{\'active\': vm.filterVal === 15}" \nng-click="vm.createNumber3D(15)">5</span> <span class="label" ng-class="{\'active\': vm.filterVal === 16}" \nng-click="vm.createNumber3D(16)">6</span> <span class="label" ng-class="{\'active\': vm.filterVal === 17}" \nng-click="vm.createNumber3D(17)">7</span> <span class="label" ng-class="{\'active\': vm.filterVal === 18}" \nng-click="vm.createNumber3D(18)">8</span> <span class="label" ng-class="{\'active\': vm.filterVal === 19}" \nng-click="vm.createNumber3D(19)">9</span></div></div><div layout="column"><div class="title">H\xE0ng \u0111\u01A1n v\u1ECB</div><div \nlayout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 0}" ng-click="vm.createNumber3D(0)">0</span> \n<span class="label" ng-class="{\'active\': vm.filterVal === 1}" ng-click="vm.createNumber3D(1)">1</span> <span \nclass="label" ng-class="{\'active\': vm.filterVal === 2}" ng-click="vm.createNumber3D(2)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 3}" ng-click="vm.createNumber3D(3)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 4}" ng-click="vm.createNumber3D(4)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 5}" ng-click="vm.createNumber3D(5)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 6}" ng-click="vm.createNumber3D(6)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 7}" ng-click="vm.createNumber3D(7)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 8}" ng-click="vm.createNumber3D(8)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 9}" ng-click="vm.createNumber3D(9)">9</span></div></div><md-button \nclass="md-warn clear3d" ng-click="vm.createNumber3D(undefined)" ng-if="vm.filterVal !== undefined">X\xF3a b\u1ED9 l\u1ECDc\n</md-button></div><div layout="row" ng-if="vm.show4D" class="show4d"><md-button class="md-raised" ns-popover \nns-popover-template="popooxx" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OOXX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxxoo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button><md-button class="md-warn" \nng-click="vm.createNumber4D(undefined)" ng-if="vm.cond4d !== undefined">X\xF3a b\u1ED9 l\u1ECDc</md-button></div></div></div><div \nclass="number-content" ng-show="$mdMedia(\'gt-md\')"><table class="table-number" ms-responsive-table><tbody><tr><td \ncolspan="10" rowspan="10"><div class="number" ng-repeat="number in vm.numbers | limitTo: 100" \nng-click="vm.activeNumber(number)" \nng-class="{\'active\': number.active, \'highlight\': number.Point !== 0, \'active\': number.CompanyRiskAmount < 0 }"><div \nclass="number-content" layout="row" ng-class="{\'copied\': number.copied }"><div flex="25" flex-md="40" layout="column" \nlayout-align="space-between center"><div><span class="badge badge-white agency">{{number.num}}</span></div></div><div \nflex="75" flex-md="60" layout="column"><div layout="row" layout-align="space-between center" class="price"><span>\n{{ number.Price | currency : \'\' : 0}}</span></div><div class="risk" layout="column" layout-align="space-between center" \nng-click="vm.NumberAgents($event, number)"><span>\n{{vm.viewPoint === \'1\' ? number.CompanyPoint : number.Point | currency : \'\' : 0}}</span> <span \nng-class="{\'warn\': number.RiskAmount < 0}">\n{{ vm.viewPoint === \'1\' ? number.CompanyRiskAmount/vm.denominator : number.RiskAmount/vm.denominator | currency : \'\' : 0}}\n</span></div></div></div></div></td></tr></tbody></table></div></div></div></div></div><script type="text/ng-template" \nid="popooxx"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OOXX</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popooxx" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OXXO</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popoxxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OXOX</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popoxox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XOXO</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxoxo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XOOX</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxoox" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XXOO</h3>\n                    <md-button class="md-icon-button"><md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxxoo" md-no-ink ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">{{pop.name}}</md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="parentClass"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-ancestors full-name">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>L\u1EDBp cha</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()"><md-icon md-font-icon="icon-close"></md-icon></md-button>\n                </div>\n                <div class="content">\n                    <div layout="row" layout-align="center center" ng-if="!vm.parents.length">\n                        <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                    </div>\n                    <div layout="row" ng-repeat="item in vm.parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">\n                                {{item.Username}}\n                            </span>\n                            <span flex ng-if="$index !== 0">\n                                <a ui-sref="app.account.agency({match: item.Username, type: \'keyword\', page: 1})">{{item.Username}}</a>\n                                <span class="full-name" ng-if="item.FullName.length">({{item.FullName }})</span>\n                            </span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/traditional/risk-management/agency/view.betting.dialog.html', '<md-dialog aria-label="view-betting" class="view-betting"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<h2>Chi ti\u1EBFt \u0111\u1EB7t c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content" \nlayout="column"><table class="simple dataTable" datatable="ng" ms-responsive-table dt-options="dtOptions"><thead><tr>\n<th>#</th><th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th \nng-if="$root.User.Level !== 5"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level !== 5"><div class="table-header"><span class="column-title">T\xEAn</span></div></th><th><div \nclass="table-header"><span class="column-title">T\xE0i kho\u1EA3n</span></div></th><th>S\u1ED1</th><th><div class="table-header">\n<span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span class="column-title">Tr\u1EA3 th\u01B0\u1EDFng\n</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng l\u01B0\u1EE3ng h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1EF7 l\u1EC7 th\u1EA7u</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u CT\n</span></div></th><th hide><div class="table-header"><span class="column-title">Income</span></div></th><th \nng-if="$root.User.Level === 1 || $root.User.Level === 2"><div class="table-header"><span class="column-title">IP</span>\n</div></th></tr></thead><tbody><tr ng-repeat="item in bettingContents track by $index" ng-click="active = $index" \nng-class="{\'active\' : active === $index}"><td>{{ item.TicketNumber }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td ng-if="$root.User.Level !== 5">{{ item.ChildUsername }}</td><td\n ng-if="$root.User.Level !== 5">{{ item.ChildFullName }}</td><td><span ng-click="viewOutStanding(item)" \nclass="filterUser">{{ item.Username }}</span></td><td>{{ item.Numbers.toString() }}</td><td>\n{{ item.Price | currency : \'\' : 0 }}</td><td>{{ item.Payouts | currency : \'\' : 0 }}</td><td>\n{{ item.Point | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td>\n{{ item.ShareHolder.Percent }}%</td><td>{{ item.ShareHolder.Price | currency : \'\' : 0 }}</td><td hide>\n{{ item.ShareHolder.Income | currency : \'\' : 0 }}</td><td ng-if="$root.User.Level === 1 || $root.User.Level === 2" \nclass="item-ip"><a ng-click="viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody></table><div layout="row" \nlayout-align="space-between center" class="padding-8" ng-show="loadMore"><span flex></span><div flex layout="row" \nlayout-align="end center"><md-button class="md-accent" ng-click="loadBetList(lastID)">Xem ti\u1EBFp</md-button></div></div>\n</div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}">\n</md-progress-linear></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/settings/public-odds/public-odds.html', '<div class="page-layout simple fullwidth public-odds" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">Public Odds</div>\n</div></div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-show="vm.submitting"></md-progress-linear>\n<div class="content" layout-wrap layout="row"><div class="public-user md-whiteframe-2dp" layout="row"><md-icon \nmd-font-icon="icon-account"></md-icon><h2>{{ vm.publicUser.Username }}</h2></div><div \nclass="public-user new-public-user md-whiteframe-2dp"><div layout="row" class="new-tags"><div flex="80"><md-autocomplete\n md-input-minlength="4" md-search-text="vm.searchText" md-search-text-change="vm.searchTextChange(vm.searchText)" \nmd-items="item in vm.querySearch(vm.searchText)" md-selected-item-change="vm.selectedItemChange(item)" \nmd-item-text="item.Username" placeholder="\u0110\u1ED5i t\xE0i kho\u1EA3n"><md-item-template><span class="item-title"><strong \nmd-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template></md-autocomplete></div><div \nflex="20" layout="row"><md-button class="md-icon-button md-accent" aria-label="Save" ng-click="vm.updateUser()" \nng-disabled="vm.selectedItem === undefined || vm.searchText.length < 4"><md-icon \nmd-font-icon="icon-checkbox-marked-circle"></md-icon></md-button></div></div></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/duplicate-ip/duplicate-ip.html', '<div id="simple-table" class="page-layout simple fullwidth duplicate-ip"><div class="content"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="table-title"><div layout="row"><div class="title">K\u1EF3</div>\n<md-select ng-model="vm.Term" placeholder="K\u1EF3" ng-change="vm.changeTerm()"><md-option \nng-repeat="term in vm.termHistory" value="{{term}}" ng-selected="term == vm.termHistory[0]">{{term}}</md-option>\n</md-select><div class="title">S\u1ED1 Member t\u1ED1i thi\u1EC3u</div><input name="min-member" ng-model="vm.minMember" max="100" \nmin="2" type="number" class="min-member"><div class="title">IP Address</div><input name="ip-address" \nng-model="vm.ipAddress" type="text" class="ip-address"><md-button class="md-raised md-primary" \nng-click="vm.findingNemo()">Finding</md-button></div></div><table class="simple" ms-responsive-table><thead><tr><th>IP\n</th><th>Danh s\xE1ch t\xE0i kho\u1EA3n</th><th class="text-right">S\u1ED1 phi\u1EBFu</th><th class="text-right">\u0110i\u1EC3m</th><th \nclass="text-right">Ti\u1EC1n c\u01B0\u1EE3c</th><th class="text-right">\u0110i\u1EC3m (c\xF4ng ty)</th><th class="text-right">Ti\u1EC1n th\u1EA7u (c\xF4ng ty)\n</th><th class="text-right">% Th\u1EA7u</th></tr></thead><tbody><tr ng-repeat="item in vm.duplicateIps"><td class="map"><a \nng-click="vm.viewIp(item.IP)"><md-icon md-font-icon="icon-map-marker"></md-icon></a><a \nng-click="vm.getPlayersByIP(item, $event)">{{item.IP}}</a> ({{item.Players.length}})</td><td class="member"><div \nlayout="row" layout-wrap ng-click="item.wrap = !item.wrap" ng-class="{\'wrap\': item.wrap}">\n{{ item.Players | joinMember }}</div></td><td class="text-right">{{ item.Quantity | currency : \'\' : 0 }}</td><td \nclass="text-right">{{ item.Point | currency : \'\' : 0 }}</td><td class="text-right">{{ item.Amount | currency : \'\' : 0 }}\n</td><td class="text-right">{{ item.Company_Point | currency : \'\' : 0 }}</td><td class="text-right">\n{{ item.Company_Amount | currency : \'\' : 0 }}</td><td class="text-right">\n{{ item.Company_Point/item.Point*100 | currency : \'\' : 1 }}%</td></tr><tr><td colspan="8" \nng-if="vm.duplicateIps.length === 0" class="text-center">Ch\u01B0a c\xF3 d\u1EEF li\u1EC7u</td></tr></tbody><tfoot \nng-if="vm.hasMoreRecord"><tr><th colspan="8" class="text-right"><md-button class="md-accent" \nng-click="vm.findingNemo(vm.currentPage + 1)">Xem ti\u1EBFp</md-button></th></tr></tfoot></table><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/lookup-ip/lookup-ip.html', '<div id="simple-table" class="page-layout simple fullwidth duplicate-ip"><div class="content"><div \nclass="simple-table-container md-whiteframe-4dp"><div layout="column"><div layout="row"><div class="table-title" \nflex="20"><div layout="column"><div layout="row"><div class="title">K\u1EF3</div><md-select ng-model="vm.Term" \nplaceholder="K\u1EF3" ng-change="vm.changeTerm()"><md-option ng-repeat="term in vm.termHistory" value="{{term}}" \nng-selected="term == vm.termHistory[0]">{{term}}</md-option></md-select></div><div layout="row"><input name="username" \nng-model="vm.Username" type="text" class="username" placeholder="T\xE0i kho\u1EA3n"><md-button class="md-raised md-primary" \nng-click="vm.findIP()" ng-disabled="vm.submitting">T\xECm</md-button></div></div></div><div flex="30" class="table-title">\n<div class="ip-list" layout="column"><div class="ip" ng-repeat="ip in vm.IpList" ng-click="vm.copyIP(ip)">{{ ip }}</div>\n<div class="not-found" ng-show="vm.IpList && vm.IpList.length === 0"><span>Kh\xF4ng t\xECm th\u1EA5y IP n\xE0o trong k\u1EF3 n\xE0y</span>\n</div></div><div class="lookup-ip"><div class="lookup-content" layout="row"><div class="form"><textarea \nng-model="vm.ipAddressModel" name="ip" rows="10" placeholder="IP Address &#10;M\u1ED7i IP m\u1ED9t d\xF2ng&#10;T\u1ED1i \u0111a 10 IP">\n</textarea><md-button class="md-raised md-accent" ng-click="vm.lookupIp()" ng-disabled="vm.submitting">LOOKUP\n</md-button></div></div></div></div></div><div><table class="simple" ms-responsive-table><thead><tr><th>IP</th><th>\nCh\xE2u L\u1EE5c</th><th>City</th><th>Qu\u1ED1c gia</th><th class="">ISP</th><th class="">Organization</th><th class="text-center">\nisAnonymous</th><th class="text-center">isHostingProvider</th><th class="text-center">userType</th><th \nclass="text-center">Organization</th><th class="text-center">isProxy</th><th class="text-center">isVpn</th><th \nclass="text-center">isPublicProxy</th><th class="text-center">isResidentialProxy</th><th class="text-center">Maps</th>\n</tr></thead><tbody><tr ng-repeat="ip in vm.IpLists"><td class="text-bold">{{ip.ip}}</td><td class="">\n{{ip.data.continent}}</td><td class="">{{ip.data.city}}</td><td class="">{{ip.data.country}}</td><td class="">\n{{ip.data.isp}}</td><td class="">{{ip.data.organization}}</td><td class="text-center"><md-icon \nmd-font-icon="icon-check" class="s20" ng-if="ip.data.anonymous.isAnonymous"></md-icon><md-icon \nmd-font-icon="icon-close" class="s20" ng-if="!ip.data.anonymous.isAnonymous"></md-icon></td><td class="text-center">\n<md-icon md-font-icon="icon-check" class="s20" ng-if="ip.data.anonymous.isHostingProvider"></md-icon><md-icon \nmd-font-icon="icon-close" class="s20" ng-if="!ip.data.anonymous.isHostingProvider"></md-icon></td><td \nclass="text-center">{{ip.data.anonymous.userType}}</td><td class="text-center">\n{{ip.data.anonymous.autonomousSystemOrganization}}</td><td class="text-center"><md-icon md-font-icon="icon-check" \nclass="s20" ng-if="ip.data.anonymous.isAnonymousProxy"></md-icon><md-icon md-font-icon="icon-close" class="s20" \nng-if="!ip.data.anonymous.isAnonymousProxy"></md-icon></td><td class="text-center"><md-icon md-font-icon="icon-check" \nclass="s20" ng-if="ip.data.anonymous.isAnonymousVpn"></md-icon><md-icon md-font-icon="icon-close" class="s20" \nng-if="!ip.data.anonymous.isAnonymousVpn"></md-icon></td><td class="text-center"><md-icon md-font-icon="icon-check" \nclass="s20" ng-if="ip.data.anonymous.isPublicProxy"></md-icon><md-icon md-font-icon="icon-close" class="s20" \nng-if="!ip.data.anonymous.isPublicProxy"></md-icon></td><td class="text-center"><md-icon md-font-icon="icon-check" \nclass="s20" ng-if="ip.data.anonymous.isResidentialProxy"></md-icon><md-icon md-font-icon="icon-close" class="s20" \nng-if="!ip.data.anonymous.isResidentialProxy"></md-icon></td><td class="text-center"><a \nhref="https://www.google.com/maps/search/?api=1&query={{ ip.data.latitude }},{{ ip.data.longitude }}" target="_blank">\n<md-icon md-font-icon="icon-map" class="s20"></md-icon></a></td></tr></tbody></table></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/winLose.html', '<div class="page-layout simple fullwidth report temporary-statement" layout="column"><div class="content" \nlayout="column"><div class="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation">\n</div><div class="" ui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/members/risk-members.html', '<div class="page-layout simple fullwidth priceBoard risk-management" layout="column"><div class="content" \nlayout="column"><div class="navigation-board md-whiteframe-1dp" layout="row"><div layout="column" class="user-id"><div \nclass="user-container" layout="column"><div class="user-list" layout="row" layout-wrap><div class="user" \nng-repeat="item in vm.membersList track by $index"><span ns-popover ns-popover-template="parentClass" \nns-popover-on-open="vm.getAncestors(item)">{{ item.Username }}</span><md-button class="btn-remove" \nng-click="vm.removeMember(item)"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></div></div><div \nlayout="column" class="search-container"><md-autocomplete md-input-minlength="4" md-selected-item="vm.userSelected" \nmd-search-text="vm.searchText" md-search-text-change="vm.searchTextChange(vm.searchText)" \nmd-items="item in vm.querySearch(vm.searchText)" md-selected-item-change="vm.selectedItemChange(item)" \nmd-item-text="item.Username" md-menu-class="autocomplete-custom-template" placeholder="T\xECm t\xE0i kho\u1EA3n h\u1ED9i vi\xEAn">\n<md-item-template><span class="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span>\n</md-item-template></md-autocomplete></div></div><div layout="column" class="ip-address"><textarea \nng-model="vm.ipAddressModel" name="ip" rows="10" placeholder="IP Address &#10;One address per line"></textarea></div>\n<div layout="column" class="actions md-warn" layout-align="space-between left"><div><md-button \nclass="md-raised md-warn" ng-click="vm.rendered()">Render</md-button></div><div layout="column"><md-button \nclass="md-accent" ng-disabled="vm.ipAddressModel.length === 0" ng-click="vm.ipToUser($event)">ITU</md-button><md-button \nclass="md-warn" ng-click="vm.companyBoard($event)">Xem h\xE0ng</md-button></div></div><div layout="column"><table \nclass="simple" ms-responsive-table><thead><tr><th></th><th>\u0110i\u1EC3m</th><th>Ti\u1EC1n</th><th>T\u1EF7 l\u1EC7 th\u1EA7u</th></tr></thead><tbody>\n<tr><td class="">C\xF4ng ty</td><td class="point">{{vm.odds.UplineTotalPoint.Company | currency : \'\' : 0 }}</td><td \nclass="income">{{vm.odds.UplineTotalIncome.Company | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.IncomePercent.Company | currency : \'\' : 1 }}%</td></tr><tr><td class="">Manager</td><td class="point">\n{{vm.odds.UplineTotalPoint.Manager | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.UplineTotalIncome.Manager | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.IncomePercent.Manager | currency : \'\' : 1 }}%</td></tr><tr><td class="">Master</td><td class="point">\n{{vm.odds.UplineTotalPoint.Master | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.UplineTotalIncome.Master | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.IncomePercent.Master | currency : \'\' : 1 }}%</td></tr><tr><td class="">Super</td><td class="point">\n{{vm.odds.UplineTotalPoint.Super | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.UplineTotalIncome.Super | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.IncomePercent.Super | currency : \'\' : 1 }}%</td></tr><tr><td class="">Agent</td><td class="point">\n{{vm.odds.UplineTotalPoint.Agent | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.UplineTotalIncome.Agent | currency : \'\' : 0 }}</td><td class="income">\n{{vm.odds.IncomePercent.Agent | currency : \'\' : 1 }}%</td></tr><tr><td class="">T\u1ED5ng</td><td class="point">\n{{vm.odds.totalPoint | currency : \'\' : 0 }}</td><td class="income">{{vm.odds.totalIncome | currency : \'\' : 0 }}</td><td \nclass="income"></td></tr></tbody></table></div></div></div><div class="content secondary" layout="column"><div \nlayout="column"><div class="navigation-board md-whiteframe-1dp" layout="column" ng-show="vm.betTypes.length"><div \nlayout="row"><md-select ng-model="vm.priceBoard.Term" placeholder="K\u1EF3" ng-change="vm.changeTerm()"><md-option \nng-repeat="term in vm.termHistory" value="{{term}}" ng-selected="term == vm.termHistory[0]">{{term}}</md-option>\n</md-select><md-select ng-model="vm.selected.GameType" ng-change="vm.changeGame()" aria-label="Change Game" \nclass="select-game"><md-option ng-repeat="game in vm.aTerms" value="{{ game.GameType }}" \nng-selected="game.GameType == 0">{{ game.GameType | gameXs }}</md-option></md-select><div flex class="select-bet">\n<md-button ng-repeat="bet in vm.betTypes" ng-model="vm.selected.BetType" ng-click="vm.changeBet(bet)" \nng-class="{\'md-accent md-raised\' : bet.BetType === vm.priceBoard.BetType }">{{ bet.BetType | bet }}</md-button></div>\n</div><div layout="row"><md-select ng-model="vm.viewPoint" ng-change="vm.sortNumber()" aria-label="View Point" \nng-if="vm.isCompany"><md-option ng-repeat="view in vm.viewPoints" value="{{view.id}}" ng-selected="view.id === 1">\n{{view.name}}</md-option></md-select><md-select ng-model="vm.selected.sort" aria-label="true" \nng-change="vm.sortNumber()" aria-label="Sort Number"><md-option ng-repeat="sort in vm.sortDefs" value="{{ sort.id }}" \nng-selected="sort.id == \'num\'">{{ sort.name }}</md-option></md-select><md-select ng-model="vm.denominator" \naria-label="true"><md-option ng-repeat="denominator in vm.denominators" value="{{denominator}}" \nng-selected="denominator === 1">{{ denominator | currency : \'\' : 0 }}</md-option></md-select><md-button \nng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.priceBoard.TermStatus !== 1 }" \nng-disabled="vm.priceBoard.TermStatus !== 1"><md-icon md-font-icon="icon-refresh" class="s20"></md-icon></md-button>\n<md-menu><md-button md-no-ink ng-click="$mdMenu.open()" class="md-accent countdown" \nng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }" ng-disabled="vm.priceBoard.TermStatus !== 1">\n{{vm.timer}}<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button><md-menu-content width="4" \nng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" class="md-warn">T\u1EAFt</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.refreshEvent(5)" \nclass="md-accent">5 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(10)" \nclass="md-accent">10 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(30)" \nclass="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(60)" \nclass="md-accent">60 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu><span class="menu">K\u1EF3: <b>\n{{vm.priceBoard.Term}}</b></span> <span class="menu">\u0110\xF3ng l\xF4: <b>\n{{ vm.priceBoard.deadLine | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu">\u0110\xF3ng \u0111\u1EC1: <b>\n{{ vm.priceBoard.deadLineJP | amDateFormat : \'HH:mm:ss\' }}</b></span> <span class="menu" ng-show="vm.odds.totalIncome">\nT\u1ED5ng ti\u1EC1n: <b>{{vm.viewPoint === \'1\' ? vm.odds.UplineTotalIncome.Company : vm.odds.totalIncome | currency : \'\' : 0}}</b>\n</span> <span class="menu" ng-show="vm.odds.totalIncome">T\u1ED5ng \u0111i\u1EC3m: <b>\n{{vm.viewPoint === \'1\' ? vm.odds.UplineTotalPoint.Company : vm.odds.totalPoint | currency : \'\' : 0}}</b></span> <span \nclass="menu" ng-show="vm.odds.totalIncome">Gi\xE1 trung b\xECnh: <b>{{ vm.priceBoard.averagePrice | currency : \'\' : 0}}</b>\n</span> <span class="menu" ng-show="vm.riskNumbers">T\u1ED5ng s\u1ED1 r\u1EE7i ro: <b class="copied" ngclipboard \nngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="{{ vm.riskNumbers.toString() }}">{{ vm.riskNumbers.length | currency : \'\' : 0}}</b> / <b \nclass="copied" ngclipboard ngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="{{ vm.hasPoints.toString() }}">{{ vm.hasPoints.length | currency : \'\' : 0}}</b> / <b \nclass="copied" ngclipboard ngclipboard-success="vm.onSuccess(e);" ngclipboard-error="onError(e);" \ndata-clipboard-text="{{ vm.matchArr.toString() }}">{{ vm.matchArr.length | currency : \'\' : 0}}</b></span></div></div>\n<div class="md-whiteframe-1dp previous-term" layout="row" layout-wrap><div class="single-term" layout="column" \nng-repeat="item in vm.previousTerm" ng-click="vm.getPreviousTerm(item)" \nng-class="{\'active\': vm.priceBoard.Term === item.Term}"><div class="term">{{ item.Term }}</div><div class="money" \nng-class="{\'active\': vm.priceBoard.Term === item.Term}">{{ item.Income | currency : \'\' : 0 }}</div></div><md-button \nclass="md-fab" ng-click="vm.getNewTerm()"><md-icon md-font-icon="icon-plus"></md-icon></md-button></div><div \nclass="number-wrapper"><div class="spinner" layout="column" ng-hide="vm.allSet || vm.loadDisabled"><md-progress-circular\n md-diameter="96"></md-progress-circular></div><div class="number-board md-whiteframe-1dp" layout="column" \nng-hide="!vm.allSet"><div layout="row" layout-align="space-between center" class="number-header"><div layout="row" \nng-if="vm.hasWritePermission"><div layout="column" layout-gt-md="row" ng-if="vm.show3D" class="show3d"><div \nlayout="column" layout-align="space-between center"><div class="title">H\xE0ng tr\u0103m</div><div layout="row"><span \nclass="label" ng-class="{\'active\': vm.filterVal === 20}" ng-click="vm.createNumber3D(20)">0</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 21}" ng-click="vm.createNumber3D(21)">1</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 22}" ng-click="vm.createNumber3D(22)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 23}" ng-click="vm.createNumber3D(23)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 24}" ng-click="vm.createNumber3D(24)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 25}" ng-click="vm.createNumber3D(25)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 26}" ng-click="vm.createNumber3D(26)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 27}" ng-click="vm.createNumber3D(27)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 28}" ng-click="vm.createNumber3D(28)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 29}" ng-click="vm.createNumber3D(29)">9</span></div></div><div layout="column">\n<div class="title">H\xE0ng ch\u1EE5c</div><div layout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 10}" \nng-click="vm.createNumber3D(10)">0</span> <span class="label" ng-class="{\'active\': vm.filterVal === 11}" \nng-click="vm.createNumber3D(11)">1</span> <span class="label" ng-class="{\'active\': vm.filterVal === 12}" \nng-click="vm.createNumber3D(12)">2</span> <span class="label" ng-class="{\'active\': vm.filterVal === 13}" \nng-click="vm.createNumber3D(13)">3</span> <span class="label" ng-class="{\'active\': vm.filterVal === 14}" \nng-click="vm.createNumber3D(14)">4</span> <span class="label" ng-class="{\'active\': vm.filterVal === 15}" \nng-click="vm.createNumber3D(15)">5</span> <span class="label" ng-class="{\'active\': vm.filterVal === 16}" \nng-click="vm.createNumber3D(16)">6</span> <span class="label" ng-class="{\'active\': vm.filterVal === 17}" \nng-click="vm.createNumber3D(17)">7</span> <span class="label" ng-class="{\'active\': vm.filterVal === 18}" \nng-click="vm.createNumber3D(18)">8</span> <span class="label" ng-class="{\'active\': vm.filterVal === 19}" \nng-click="vm.createNumber3D(19)">9</span></div></div><div layout="column"><div class="title">H\xE0ng \u0111\u01A1n v\u1ECB</div><div \nlayout="row"><span class="label" ng-class="{\'active\': vm.filterVal === 0}" ng-click="vm.createNumber3D(0)">0</span> \n<span class="label" ng-class="{\'active\': vm.filterVal === 1}" ng-click="vm.createNumber3D(1)">1</span> <span \nclass="label" ng-class="{\'active\': vm.filterVal === 2}" ng-click="vm.createNumber3D(2)">2</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 3}" ng-click="vm.createNumber3D(3)">3</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 4}" ng-click="vm.createNumber3D(4)">4</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 5}" ng-click="vm.createNumber3D(5)">5</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 6}" ng-click="vm.createNumber3D(6)">6</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 7}" ng-click="vm.createNumber3D(7)">7</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 8}" ng-click="vm.createNumber3D(8)">8</span> <span class="label" \nng-class="{\'active\': vm.filterVal === 9}" ng-click="vm.createNumber3D(9)">9</span></div></div><md-button \nclass="md-warn clear3d" ng-click="vm.createNumber3D(undefined)" ng-if="vm.filterVal !== undefined">X\xF3a b\u1ED9 l\u1ECDc\n</md-button></div><div layout="row" ng-if="vm.show4D" class="show4d"><md-button class="md-raised" ns-popover \nns-popover-template="popooxx" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OOXX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popoxox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">OXOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoxo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOXO</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxoox" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XOOX</md-button><md-button class="md-raised" ns-popover \nns-popover-template="popxxoo" ns-popover-placement="bottom" ns-popover-hide-on-inside-click="true" \nns-popover-theme="ns-popover-tooltip-theme">XXOO</md-button><md-button class="md-warn" \nng-click="vm.createNumber4D(undefined)" ng-if="vm.cond4d !== undefined">X\xF3a b\u1ED9 l\u1ECDc</md-button></div></div></div><div \nclass="number-content"><div layout="row" class="input-number"><input name="input-number" ng-model="vm.inputNumbers" \ntype="text" class="input-number" placeholder="D\xE0n ma"><md-button class="md-raised md-primary" \nng-click="vm.updateBoard()">Update</md-button></div><div layout="row" class="input-number"><div class="form-group">\n<input name="input-number" ng-model="vm.results" type="text" class="input-number" placeholder="K\u1EBFt qu\u1EA3"><md-icon \nmd-font-icon="icon-arrow-down-bold-circle-outline" ng-hide="vm.filling" ng-click="vm.fillResult()"></md-icon><md-icon \nmd-font-icon="icon-refresh" ng-show="vm.filling"></md-icon></div><md-button class="md-raised md-primary" \nng-class="{ \'md-warn\': vm.isCompare }" ng-click="vm.compare()">So s\xE1nh</md-button><div class="matched-result" \nng-show="vm.matchCompare.length">Tr\xF9ng v\u1EDBi k\u1EBFt qu\u1EA3: <span>{{ vm.matchCompare.length }}</span></div></div><table \nclass="table-number" ms-responsive-table><tbody><tr><td colspan="10" rowspan="10"><div class="number" \nng-repeat="number in vm.numbers | limitTo: 100" ng-click="vm.activeNumber(number)" \nng-class="{\'highlight\': number.point !== 0, \'active\': number.risk < 0, \'matched\': number.matched, \'compared\': number.compared }">\n<div class="number-content" layout="row"><div flex="25" flex-md="40" layout="column" \nlayout-align="space-between center"><div><span class="badge badge-white agency">{{number.num}}</span></div></div><div \nflex="75" flex-md="60" layout="column"><div layout="row" layout-align="space-between center" class="price"><span>\n{{ number.price | currency : \'\' : 0}}</span></div><div class="risk" layout="column" layout-align="space-between center" \nng-click="vm.viewUpline($event, number)"><span>\n{{vm.viewPoint === \'1\' ? number.point : number.totalPoint | currency : \'\' : 0}}</span> <span \nng-class="{\'warn\': number.risk < 0}">\n{{ vm.viewPoint === \'1\' ? number.risk/vm.denominator : number.totalRisk/vm.denominator | currency : \'\' : 0}}</span>\n</div></div></div></div></td></tr></tbody></table></div></div></div></div></div><script type="text/ng-template" \nid="popooxx"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OOXX</h3>\n                    <md-button class="md-icon-button">\n                        <md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popooxx" md-no-ink\n                               ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">\n                        {{pop.name}}\n                    </md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popoxxo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OXXO</h3>\n                    <md-button class="md-icon-button">\n                        <md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popoxxo" md-no-ink\n                               ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">\n                        {{pop.name}}\n                    </md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popoxox"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>OXOX</h3>\n                    <md-button class="md-icon-button">\n                        <md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popoxox" md-no-ink\n                               ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">\n                        {{pop.name}}\n                    </md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxoxo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XOXO</h3>\n                    <md-button class="md-icon-button">\n                        <md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxoxo" md-no-ink\n                               ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">\n                        {{pop.name}}\n                    </md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxoox"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XOOX</h3>\n                    <md-button class="md-icon-button">\n                        <md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxoox" md-no-ink\n                               ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">\n                        {{pop.name}}\n                    </md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="popxxoo"><div class="triangle"></div>\n        <div class="ns-popover-tooltip">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>XXOO</h3>\n                    <md-button class="md-icon-button">\n                        <md-icon md-font-icon="icon-close" ng-click="hidePopover()"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <md-button ng-repeat="pop in vm.popxxoo" md-no-ink\n                               ng-class="{\'md-warn\': vm.cond4d.name === pop.name}" ng-click="vm.createNumber4D(pop)">\n                        {{pop.name}}\n                    </md-button>\n                </div>\n            </div>\n        </div></script><script type="text/ng-template" id="parentClass"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-ancestors full-name members-risk">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>L\u1EDBp cha</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()">\n                        <md-icon md-font-icon="icon-close"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <div layout="row" layout-align="center center" ng-if="!vm.parents.length">\n                        <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                    </div>\n                    <div layout="row" ng-repeat="item in vm.parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">\n                                {{item.Username}}\n                            </span>\n                            <span flex ng-if="$index !== 0">\n                                <a ui-sref="app.account.agency({match: item.Username, type: \'keyword\', page: 1})">{{item.Username}}</a>\n                                <span class="full-name" ng-if="item.FullName.length">({{item.FullName }})</span>\n\n\n                                <md-icon md-font-icon="icon-file-find" class="s20 find-ip" ng-click="vm.findIP(item)"></md-icon>\n                                <md-icon md-font-icon="icon-content-copy" class="s20 find-ip margin-right-16" ngclipboard data-clipboard-text="{{item.Username }}"></md-icon>\n                                <md-icon ng-if="item.Level === 9" md-font-icon="icon-book-open" class="s20 find-ip margin-right-16" ng-click="vm.viewOutStanding(item, $event)"></md-icon>\n                            </span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div></script></div>');
    $templateCache.put('app/main/traditional/price_table/dialog/betting.items.dialog.html', '<md-dialog aria-label="viewbetting" class="view-full-betting"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Xem to\xE0n b\u1ED9 h\xE0ng \u0111ang v\xE0o</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="scrollable" ms-scroll><div class="md-dialog-content"><div layout="column"><div layout="row"><div layout="row" \nclass="checkbox-group"><md-checkbox class="md-accent" ng-repeat="item in betGroups" \nng-checked="exists(item.id, selected)" ng-click="toggle(item.id, selected)" aria-label="true">{{item.name}}\n</md-checkbox></div><div layout="row" class="input-group"><input type="text" class="form-control account" \nautocomplete="off" ng-model="setting.account" placeholder="T\xE0i kho\u1EA3n"> <input type="number" \nclass="form-control min-point" autocomplete="off" ng-model="setting.point"> <input type="number" \nclass="form-control min-record" autocomplete="off" ng-model="setting.minrecord"><md-button type="submit" \nclass="md-raised md-accent" ng-click="currentBetting()">Xem h\xE0ng</md-button></div></div><div layout="row"><md-checkbox \nclass="md-warn" ng-model="filterGroup.userName" aria-label="true">T\xE0i kho\u1EA3n</md-checkbox><md-checkbox class="md-warn" \nng-model="filterGroup.number" aria-label="true">S\u1ED1</md-checkbox><md-checkbox class="md-warn" \nng-model="filterGroup.point" aria-label="true">\u0110i\u1EC3m</md-checkbox><md-checkbox class="md-warn" \nng-model="filterGroup.betType" aria-label="true">Th\u1EC3 lo\u1EA1i</md-checkbox><md-checkbox class="md-warn" \nng-model="filterGroup.ip" aria-label="true">IP</md-checkbox></div></div><table class="simple" ms-responsive-table>\n<thead><tr><th>Th\u1EDDi gian</th><th>T\xE0i kho\u1EA3n</th><th>Lo\u1EA1i h\xECnh</th><th>S\u1ED1</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>C\xF4ng ty</th><th>\nPayouts</th><th>IP</th></tr></thead><tbody><tr ng-repeat="item in dataBinds" \nstyle="background-color: {{colors[item.classIndex]}}"><td>\n{{item.betDate | amUtc | amLocal | amDateFormat: \'DD/MM HH:mm:ss\'}}</td><td>{{item.userName}}</td><td>\n{{item.gameType | game}} - {{item.betType | bet}}</td><td>{{item.numbers.toString()}}</td><td>\n{{item.point | currency : \'\' : 0}}</td><td>{{item.companyPoint | currency : \'\' : 0}}</td><td>\n{{item.payouts | currency : \'\' : 0}}</td><td>{{item.ipAddress}}</td></tr><tr ng-if="dataBinds.length === 0"><td \ncolspan="8">Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u ph\xF9 h\u1EE3p</td></tr></tbody></table></div></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/big.board.dialog.html', '<md-dialog aria-label="One789" class="company-board"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nTh\u1ED1ng k\xEA h\xE0ng \u0111ang v\xE0o</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="scrollable" ms-scroll><div \nclass="md-dialog-content"><md-tabs md-dynamic-height md-border-bottom><md-tab label="Mi\u1EC1n B\u1EAFc 1" \nmd-on-select="onTabSelected(0)"><md-content class=""><div layout="column"><div class="table-container"><table \nclass="table"><thead><tr><th>Th\u1EC3 lo\u1EA1i</th><th colspan="10"><div layout="row"><input ng-model="interval" type="number">\n {{count}}</div></th></tr></thead><tbody><tr ng-repeat="odd in oddData" ng-class="{\'live\': odd.BetType === 20}"><td><div\n class="" layout="column"><div>{{ odd.BetType | bet }}</div><div>{{ odd.Income/1000 | currency : \'\' : 0 }}</div><div \nclass="total-point">{{ odd.TotalPoint | currency : \'\' : 0 }}</div></div></td><td \nng-repeat="number in odd.Numbers | limitTo: 10 "><div class="number" layout="column" \nng-mouseover="hoverIn(number.Number)" ng-mouseleave="hoverOut()" \nng-class="{\'hover\': number.hover, \'highlightByPoint\': number.highlightByPoint, \'highlightByRisk\': number.highlightByRisk, \'disabled\': number.Stop}">\n<div layout="row" layout-align="center center"><div flex="50" class="num"><div \nng-style="{\'background-color\': colors[number.classIndex] }">{{ number.Number }}</div></div><div flex="50" class="price">\n{{ number.Price | currency : \'\' : 0 }}</div></div><div class="point">{{ number.Point | currency : \'\' : 0 }}</div><div \nclass="risk">{{ number.RiskAmount/1000 | currency : \'\' : 0 }}</div></div></td></tr></tbody></table></div><div \nclass="setting-alarm"><table class="table simple"><thead><tr><th>C\xE0i \u0111\u1EB7t c\u1EA3nh b\xE1o <a ng-click="playSound()">(Test Sound)\n</a></th><th ng-repeat="item in monitorBets">{{ item | bet }}</th></tr></thead><tbody><tr><td>\u0110i\u1EC3m<br><small>L\u1EDBn h\u01A1n\n</small></td><td ng-repeat="item in monitorBets"><input ng-model="alarmSetting.point[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr><tr class="risk"><td>R\u1EE7i ro<br><small>Nh\u1ECF h\u01A1n</small></td><td \nng-repeat="item in monitorBets"><input ng-model="alarmSetting.risk[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr></tbody></table></div></div></md-content></md-tab><md-tab label="Mi\u1EC1n B\u1EAFc 2" \nmd-on-select="onTabSelected(1)"><md-content class=""><div layout="column"><div class="table-container"><table \nclass="table"><thead><tr><th>Th\u1EC3 lo\u1EA1i</th><th colspan="10"><div layout="row"><input ng-model="interval" type="number">\n {{count}}</div></th></tr></thead><tbody><tr ng-repeat="odd in oddData" ng-class="{\'live\': odd.BetType === 20}"><td><div\n class="" layout="column"><div>{{ odd.BetType | bet }}</div><div>{{ odd.Income/1000 | currency : \'\' : 0 }}</div><div \nclass="total-point">{{ odd.TotalPoint | currency : \'\' : 0 }}</div></div></td><td \nng-repeat="number in odd.Numbers | limitTo: 10 "><div class="number" layout="column" \nng-mouseover="hoverIn(number.Number)" ng-mouseleave="hoverOut()" \nng-class="{\'hover\': number.hover, \'highlightByPoint\': number.highlightByPoint, \'highlightByRisk\': number.highlightByRisk, \'disabled\': number.Stop}">\n<div layout="row" layout-align="center center"><div flex="50" class="num"><div \nng-style="{\'background-color\': colors[number.classIndex] }">{{ number.Number }}</div></div><div flex="50" class="price">\n{{ number.Price | currency : \'\' : 0 }}</div></div><div class="point">{{ number.Point | currency : \'\' : 0 }}</div><div \nclass="risk">{{ number.RiskAmount/1000 | currency : \'\' : 0 }}</div></div></td></tr></tbody></table></div><div \nclass="setting-alarm"><table class="table simple"><thead><tr><th>C\xE0i \u0111\u1EB7t c\u1EA3nh b\xE1o <a ng-click="playSound()">(Test Sound)\n</a></th><th ng-repeat="item in monitorBets">{{ item | bet }}</th></tr></thead><tbody><tr><td>\u0110i\u1EC3m<br><small>L\u1EDBn h\u01A1n\n</small></td><td ng-repeat="item in monitorBets"><input ng-model="alarmSetting.point[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr><tr class="risk"><td>R\u1EE7i ro<br><small>Nh\u1ECF h\u01A1n</small></td><td \nng-repeat="item in monitorBets"><input ng-model="alarmSetting.risk[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr></tbody></table></div></div></md-content></md-tab></md-tabs></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/calculation.html', '<md-dialog aria-label="prompt_dialog" class="calculation_dialog"><form name="form" ng-submit="done()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>R\u1EE7i ro l\xF4</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div layout="column"><div \nlayout="row" class="mb-16"><div flex="30">D\xE0n s\u1ED1</div><div flex="70"><textarea rows="4" ng-model="selectedNumbers" \nname="assumptions">\n\n                      </textarea></div></div><div layout="row" class="mb-16"><div flex="30">S\u1ED1 l\u01B0\u1EE3ng gi\u1EA3 \u0111\u1ECBnh</div><div \nflex="70"><input type="number" max="27" min="1" ng-model="numbering"></div></div><div layout="row" class="mb-16"><div \nflex="30">T\u1ED5ng ti\u1EC1n (100)</div><div flex="70">{{ Income | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="mb-16"><div flex="30">T\u1ED5ng ti\u1EC1n ({{assumptions.length}})</div><div flex="70">{{totalMoney | currency : \'\' : 0 }}\n</div></div><div layout="row" class="mb-16"><div flex="30">Trung b\xECnh gi\xE1 ({{assumptions.length}})</div><div flex="70">\n{{averagePrice | currency : \'\' : 0 }}</div></div><div layout="row" class="mb-16"><div flex="30">\nTrung b\xECnh \u0111i\u1EC3m ({{assumptions.length}})</div><div flex="70">{{averagePoint | currency : \'\' : 0 }}</div></div><div \nlayout="row" class="mb-16"><div flex="30">Th\u1EAFng thua ({{numbering}}/{{assumptions.length}})</div><div flex="70" \nng-class="{\'red-500-fg\': winLoseAss < 0}">{{winLoseAss | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="mb-16"><div flex="30">Th\u1EAFng thua ({{numbering}}/{{baseNumber}})</div><div flex="70" \nng-class="{\'red-500-fg\': winLoseHundred < 0}">{{winLoseHundred | currency : \'\' : 0 }}</div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="green-700-fg" ng-click="done()">calculation\n</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/close.dialog.html', '<md-dialog aria-label="close.betting" class="open-betting"><form name="closebetting"><md-toolbar class="md-warn"><div \nclass="md-toolbar-tools"><h2>\u0110\xF3ng to\xE0n b\u1ED9</h2><span flex></span><md-button class="md-icon-button" aria-label="close" \nng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><p class="text-strong">\nCh\u1ECDn \u0111\xE0i \u0111\u1EC3 \u0111\xF3ng c\u01B0\u1EE3c</p><div layout="row" layout-xs="column" layout-wrap><div flex="50" flex-xs="100" \nng-repeat="regiron in gameList"><md-checkbox class="md-warn" ng-checked="exists(regiron.GameType, selected)" \nng-click="toggle(regiron.GameType, selected)" ng-disabled="submitting">{{ regiron.GameType | gameXs }}</md-checkbox>\n</div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="closeBetting(data)" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/closeExcept.dialog.html', '<md-dialog aria-label="close.betting" class="open-betting"><form name="closebetting"><md-toolbar class="md-warn"><div \nclass="md-toolbar-tools"><h2>\u0110\xF3ng c\u01B0\u1EE3c - L\xF4</h2><span flex></span><md-button class="md-icon-button" aria-label="close" \nng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><p class="text-strong">\nCh\u1ECDn \u0111\xE0i \u0111\u1EC3 \u0111\xF3ng c\u01B0\u1EE3c</p><div layout="row" layout-wrap><div flex="50" ng-repeat="regiron in gameList"><md-checkbox \nclass="md-warn" ng-checked="exists(regiron.GameType, selected)" ng-click="toggle(regiron.GameType, selected)" \nng-disabled="submitting">{{ regiron.GameType | gameXs }}</md-checkbox></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" ng-disabled="submitting">Cancel\n</md-button><md-button class="btn-w-md md-primary" ng-click="closeBettingExcept(data)" ng-disabled="submitting">OK\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/collection.dialog.html', '<md-dialog aria-label="collection.number" class="open-betting collection"><form name="collection" \nng-submit="submitForm"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Ch\u1ECDn nhanh</h2><span flex></span>\n<md-button class="md-icon-button" aria-label="close" ng-click="cancel()"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="md-dialog-lg"><div class="md-dialog-content"><div \nlayout="column"><md-radio-group class="ui-md-radio-group-inline" ng-model="radio.congiap" ng-change="chooseRadio()">\n<md-radio-button class="congiap" ng-repeat="item in dataCollection.congiap" value="{{item.id}}">{{item.name}}\n</md-radio-button></md-radio-group><md-radio-group class="ui-md-radio-group-inline" ng-model="radio.dauduoi" \nng-change="chooseRadio()"><md-radio-button class="dauduoi" value="{{item.id}}" \nng-repeat="item in dataCollection.dauduoi">{{item.name}}</md-radio-button></md-radio-group><md-radio-group \nclass="ui-md-radio-group-inline" ng-model="radio.tongba" ng-change="chooseRadio()"><md-radio-button class="tongba" \nvalue="{{item.id}}" ng-repeat="item in dataCollection.tongba">{{item.name}}</md-radio-button></md-radio-group>\n<md-radio-group class="ui-md-radio-group-inline" ng-model="radio.bodau" ng-change="chooseRadio()"><md-radio-button \nclass="bodau" value="{{item.id}}" ng-repeat="item in dataCollection.bodau">{{item.name}}</md-radio-button>\n</md-radio-group><div layout="row"><div flex="10">T\u1ED5ng</div><div flex="90"><md-radio-group \nclass="ui-md-radio-group-inline" ng-model="radio.tong" ng-change="chooseRadio()"><md-radio-button class="tong" \nvalue="{{item.id}}" ng-repeat="item in dataCollection.tong">{{item.id}}</md-radio-button></md-radio-group></div></div>\n<md-radio-group class="ui-md-radio-group-inline" ng-model="radio.kep" ng-change="chooseRadio()"><md-radio-button \nclass="kep" value="{{item.id}}" ng-repeat="item in dataCollection.kep">{{item.name}}</md-radio-button></md-radio-group>\n</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" \nng-click="radio = undefined; setting = []">Ch\u1ECDn l\u1EA1i</md-button><md-button class="md-accent" ng-click="cancel()">Xong\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/open.dialog.html', '<md-dialog aria-label="open.betting" class="open-betting"><form name="openbetting"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>M\u1EDF c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" aria-label="close" \nng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><p class="text-strong">\nCh\u1ECDn \u0111\xE0i \u0111\u1EC3 m\u1EDF c\u01B0\u1EE3c</p><div layout="row" layout-wrap layout-xs="column"><div flex-xs="100" flex="50" \nng-repeat="regiron in gameList"><md-checkbox class="md-accent" ng-checked="exists(regiron.GameType, selected)" \nng-click="toggle(regiron.GameType, selected)" ng-disabled="submitting">{{ regiron.GameType | gameXs }}</md-checkbox>\n</div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="openBetting(data)" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/price-exception.dialog.html', '<md-dialog aria-label="setting.price" class="open-betting"><form name="settingPrice" ng-submit="submitForm"><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i gi\xE1 ngo\u1EA1i l\u1EC7 s\u1ED1 {{ number.num }}</h2></div></md-toolbar>\n<md-dialog-content class="md-dialog-sm setting-price"><div class="md-dialog-content" layout="column"><div \nclass="message">Gi\xE1 ngo\u1EA1i l\u1EC7</div><div><input type="number" ng-model="number.PriceException" class="new-price" \nmd-autofocus></div><div class="warning" ng-show="warningMessage">{{ warningMessage }}</div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()" ng-disabled="submitting">Cancel\n</md-button><md-button class="btn-w-md md-primary" type="submit" ng-click="submitForm()" ng-disabled="submitting">OK\n</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/prompt.dialog.html', '<md-dialog aria-label="prompt_dialog" class="prompt_dialog"><form name="form" ng-submit="done()" novalidate>\n<md-dialog-content><h2>{{title}}</h2><div class="md-dialog-content-body"><p>{{textContent}}</p></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="md-warn" ng-click="cancel()">Cancel</md-button>\n<md-button class="green-700-fg" ng-click="done()">OK</md-button></md-dialog-actions></form><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/settingPercent.dialog.html', '<md-dialog aria-label="setting.price" class="open-betting"><form name="settingPrice" ng-submit="submitForm"><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i t\u1EF7 l\u1EC7 th\u1EA7u s\u1ED1 {{number}}</h2></div></md-toolbar>\n<md-dialog-content class="md-dialog-sm setting-price"><div class="md-dialog-content" layout="column"><div \nclass="message">T\u1EF7 l\u1EC7 th\u1EA7u t\u1ED1i \u0111a c\u1EE7a qu\xFD kh\xE1ch</div><div><input type="number" ng-model="percent" class="new-price" \nmd-autofocus ng-change="changePercent()"></div><div class="max-share" ng-click="setMaxPercent()"><span \nng-show="percent !== MaxPercent">C\xE0i th\u1EA7u t\u1ED1i \u0111a?</span></div><div class="warning" ng-show="warningMessage">\n{{ warningMessage }}</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" \nng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" type="submit" \nng-click="submitForm()" ng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/settingPrice.dialog.html', '<md-dialog aria-label="setting.price" class="open-betting"><form name="settingPrice" ng-submit="submitForm"><md-toolbar \nclass="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i gi\xE1 b\xE1n s\u1ED1 {{number}}</h2></div></md-toolbar>\n<md-dialog-content class="md-dialog-sm setting-price"><div class="md-dialog-content" layout="column"><div><input \ntype="number" ng-model="newPrice" class="new-price" md-autofocus></div><div class="warning" ng-show="warningMessage">\n{{ warningMessage }}</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" \nng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-primary" type="submit" \nng-click="submitForm()" ng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/setup-highlight.html', '<md-dialog aria-label="Setup" class="dialog-setup-highlight"><md-dialog-content><div class="md-dialog-content" \nlayout="column"><div flex layout="row" layout-align="start center"><div flex="60">Highlight</div><div flex="40">\n<md-switch ng-model="highlight.enabled" aria-label="Highlight" class="md-warn"></md-switch></div></div><div flex \nlayout="row" layout-align="start center"><div flex="60">Auto Selected</div><div flex="40"><md-switch \nng-model="highlight.auto" aria-label="Highlight" class="md-warn"></md-switch></div></div><div flex layout="row" \nlayout-align="start center"><div flex="60">Higher Point at</div><div flex="40"><input type="tel" maxlength="6" \nng-model="highlight.atPoint" ng-currency select-on-click numeric-only></div></div></div></md-dialog-content>\n<md-dialog-actions layout="row"><md-button class="md-accent" ng-click="done()">OK</md-button></md-dialog-actions>\n</md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/view.betting.dialog.html', '<md-dialog aria-label="view-betting" class="view-betting"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<h2>Chi ti\u1EBFt \u0111\u1EB7t c\u01B0\u1EE3c</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content" \nlayout="column"><div layout="row" ng-if="$root.User.Level === 1"><div flex="30" layout="row" \nlayout-align="start center"></div><div flex="70" class="highest-point" layout="row" layout-align="end center"><input \ntype="text" select-on-click ng-currency ng-model="config.MaxPoint" placeholder="\u0110i\u1EC3m l\u1EDBn nh\u1EA5t"><md-button \nng-click="FilterHighestPoint()">Filter</md-button></div></div><table class="simple dataTable" datatable="ng" \nms-responsive-table dt-options="dtOptions"><thead><tr><th>#</th><th><div class="table-header"><span \nclass="column-title">Th\u1EDDi gian</span></div></th><th ng-if="$root.User.Level !== 5"><div class="table-header"><span \nclass="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th ng-if="$root.User.Level !== 5"><div class="table-header"><span \nclass="column-title">T\xEAn</span></div></th><th><div class="table-header"><span class="column-title">T\xE0i kho\u1EA3n</span>\n</div></th><th>S\u1ED1</th><th><div class="table-header text-center"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th>\n<th><div class="table-header"><span class="column-title">Tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div class="table-header"><span\n class="column-title">T\u1ED5ng \u0111i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">\nT\u1ED5ng l\u01B0\u1EE3ng h\xE0ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1EF7 l\u1EC7 th\u1EA7u</span></div></th>\n<th><div class="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u CT</span></div></th><th hide><div \nclass="table-header"><span class="column-title">Income</span></div></th><th \nng-if="$root.User.Level === 1 || $root.User.Level === 2"><div class="table-header"><span class="column-title">IP</span>\n</div></th></tr></thead><tbody><tr ng-repeat="item in bettingContents track by $index" ng-click="active = $index" \nng-class="{\'active\' : active === $index}"><td>{{ item.TicketNumber }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td ng-if="$root.User.Level !== 5">{{ item.ChildUsername }}</td><td\n ng-if="$root.User.Level !== 5">{{ item.ChildFullName }}</td><td><div layout="row" layout-align="space-between center">\n<span ng-click="viewOutStanding(item)" class="filterUser">{{ item.Username }}</span> <span class="counts" \nng-if="item.counts">({{ item.counts }})</span><div flex></div><md-icon md-font-icon="icon-file-find" \nclass="s20 find-ip" ng-click="countNumbers(item)" ng-if="isCompany"></md-icon></div></td><td>\n{{ item.Numbers.toString() }}</td><td>{{ item.Price | currency : \'\' : 0 }}</td><td>\n{{ item.Payouts | currency : \'\' : 0 }}</td><td>{{ item.Point | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td>{{ item.ShareHolder.Percent }}%</td><td>\n{{ item.ShareHolder.Price | currency : \'\' : 0 }}</td><td hide>{{ item.ShareHolder.Income | currency : \'\' : 0 }}</td><td \nng-if="$root.User.Level === 1 || $root.User.Level === 2" class="item-ip"><a ng-click="viewIp(item.IP)">{{ item.IP }}</a>\n</td></tr></tbody></table><div layout="row" layout-align="space-between center" class="padding-16" ng-show="loadMore">\n<div flex ng-if="$root.User.Level === 1"><md-checkbox ng-model="config.isInfinity" aria-label="isInfinity">Infinity?\n</md-checkbox></div><span flex></span><div flex layout="row" layout-align="end center"><md-button class="md-accent" \nng-click="loadBetList(lastID)">Xem ti\u1EBFp</md-button></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/dialog/view.outstanding.dialog.html', '<md-dialog aria-label="view-outstanding" class="view-outstanding"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Ti\u1EC1n ch\u01B0a x\u1EED l\xFD - h\u1ED9i vi\xEAn: {{member.Username}}</h2><span flex></span><md-button \nclass="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content><div class="md-dialog-content" layout="column"><table \nclass="simple report-table member-report outstanding" datatable="ng" dt-options="OutDtOptions" ms-responsive-table>\n<thead><tr><th style="min-width: 120px"><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th>Th\u1EC3 lo\u1EA1i</th><th><div \nclass="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span></div></th><th><div class="table-header"><span \nclass="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u\n</span></div></th><th><div class="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EF1c thu</span></div></th><th ng-if="$root.User.Level <= 5"><div \nclass="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div></th><th ng-if="$root.User.Level <= 4"><div \nclass="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div></th><th ng-if="$root.User.Level <= 3"><div \nclass="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th ng-if="$root.User.Level <= 2"><div \nclass="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th ng-if="$root.User.Level <= 1"><div \nclass="table-header"><span class="column-title">C\xF4ng ty</span></div></th><th ng-if="$root.User.Level <= 2"><div \nclass="table-header"><span class="column-title">IP</span></div></th></tr></thead><tbody class="outstanding"><tr \nng-repeat="item in outStandingMembers"><td>{{ item.Term }}.{{ item.TicketNumber }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td>\n{{ priceBoard.GameType | gameXs }} - {{ priceBoard.BetType | bet }}</td><td>{{ item.Numbers.toString()}} <sup \nng-if="item.PrizeNr">[{{ item.PrizeNr }}]</sup></td><td>{{ item.Payouts | currency : \'\' : 0}}</td><td>\n{{ item.Price | currency : \'\' : 0}}</td><td>{{ item.Point | currency : \'\' : 0}}</td><td>\n{{ item.Amount | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td><td \nng-if="$root.User.Level <= 2"><a ng-click="viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot \nng-if="!hasRecord" class="outstanding"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>\n{{outStandingMembers | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{outStandingMembers | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table><div \nclass="outstanding-more" ng-if="hasRecord && !submitting"><a \nng-click="loadMemberReport(outStandingMembers[outStandingMembers.length - 1].Id)">Xem ti\u1EBFp</a></div></div>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/price_table/sidenavs/main-sidenav.html', '<div class="header" layout="column"><div layout="row"><div flex="40">K\u1EF3</div><div flex="60" class="text-bold">\n{{ vm.priceBoard.Term }}</div></div><div layout="row"><div flex="40">\u0110\xF3ng l\xF4</div><div flex="60" class="text-bold">\n{{ vm.priceBoard.deadLine | amDateFormat : \'HH:mm:ss\' }}</div></div><div layout="row"><div flex="40">\u0110\xF3ng \u0111\u1EC1</div><div \nflex="60" class="text-bold">{{ vm.priceBoard.deadLineJP | amDateFormat : \'HH:mm:ss\' }}</div></div><div layout="row"><div\n flex="40">T\u1ED5ng ti\u1EC1n</div><div flex="60" class="text-bold">\n{{vm.viewPoint === \'1\' ? vm.odds.Income : vm.odds.TotalIncome | currency : \'\' : 0}}</div></div><div layout="row"><div \nflex="40">T\u1ED5ng \u0111i\u1EC3m</div><div flex="60" class="text-bold">\n{{vm.viewPoint === \'1\' ? vm.priceBoard.point : vm.priceBoard.totalPoint | currency : \'\' : 0}}</div></div><div \nlayout="row"><div flex="40">Gi\xE1 trung b\xECnh</div><div flex="60" class="text-bold">\n{{ vm.priceBoard.averagePrice | currency : \'\' : 0}}</div></div></div><div class="content"><div \nclass="navigation-simple" layout="column"><div class="text-label">S\u1EAFp x\u1EBFp</div><md-button class="item" \naria-label="sort" ng-repeat="sort in vm.sortDefs" ng-click="vm.navChangeSortDefs(sort.id)"><div class="context" \nlayout="row" layout-align="start center" ng-class="{\'selected\' : vm.selected.sort === sort.id}"><md-icon \nmd-font-icon="icon-check md-accent" class="s20"></md-icon><div class="title">{{ sort.name }}</div></div></md-button>\n</div><div class="navigation-simple" layout="column"><div class="text-label">Xem r\u1EE7i ro theo t\u1EF7 l\u1EC7</div><md-button \nclass="item" aria-label="sort" ng-repeat="denominator in vm.denominators" ng-click="vm.denominator = denominator"><div \nclass="context" layout="row" layout-align="start center" ng-class="{\'selected\' : vm.denominator == denominator }">\n<md-icon md-font-icon="icon-check md-accent" class="s20"></md-icon><div class="title">\n{{ denominator | currency : \'\' : 0 }}</div></div></md-button></div><div class="navigation-simple" layout="column">\n<md-button class="item" aria-label="game" ng-repeat="game in vm.aTerms" ng-click="vm.navChangeGame(game.GameType)"><div \nclass="context" layout="row" layout-align="start center" \nng-class="{\'selected\' : vm.priceBoard.GameType === game.GameType}"><md-icon md-font-icon="icon-check md-accent" \nclass="s20"></md-icon><div class="title">{{ game.GameType | gameXs }}</div></div></md-button></div><div \nclass="navigation-simple" layout="column"><md-button class="item" aria-label="game" ng-repeat="bet in vm.betTypes" \nng-click="vm.changeBet(bet)"><div class="context" layout="row" layout-align="start center" \nng-class="{\'selected\' : bet.BetType === vm.priceBoard.BetType }"><md-icon md-font-icon="icon-check md-accent" \nclass="s20"></md-icon><div class="title">{{ bet.BetType | bet }}</div></div></md-button></div></div>');
    $templateCache.put('app/main/traditional/price_table/sidenavs/number-bottom-sheet-template.html', '<md-bottom-sheet class="md-list"><md-list ng-cloak><md-list-item ng-repeat="item in items"><md-button \nng-click="listItemClick($index)" class="md-list-item-content"><md-icon md-font-icon="{{item.icon}}"></md-icon><span \nclass="md-inline-list-icon-label">{{ item.name }}</span></md-button></md-list-item></md-list></md-bottom-sheet>');
    $templateCache.put('app/main/traditional/statement/canceled/canceled.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp navigation" ui-view="navigation"></div><div \nclass="simple-table-container md-whiteframe-4dp" ui-view="portView"></div></div></div>');
    $templateCache.put('app/main/traditional/statement/member/member.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="navigation" ui-view="navigation"></div><div \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/traditional/statement/outstanding/outstanding.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/traditional/statement/winLose/winLose.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div class="navigation" ui-view="navigation"></div><div class="" \nui-view="portView"></div></div></div></div>');
    $templateCache.put('app/main/traditional/term/dialog/term.change.dialog.html', '<md-dialog aria-label="Thay \u0111\u1ED5i th\xF4ng tin m\u1EDF th\u01B0\u1EDFng" style="min-width: 520px"><form><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>Thay \u0111\u1ED5i th\xF4ng tin m\u1EDF th\u01B0\u1EDFng</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-window-close" class="s20"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content class="md-dialog-md"><div class="md-dialog-content" ng-show="!change"><div layout="row" \nlayout-align="center center"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div><div \nclass="md-dialog-content" ng-show="change"><md-input-container class="md-block"><label>\u0110\xE0i m\u1EDF th\u01B0\u1EDFng</label> <input \nname="cityName" ng-model="change.CityName" disabled="disabled"></md-input-container><div layout="row">\n<md-input-container flex="50"><label>K\u1EF3</label> <input name="name" ng-model="change.Term" disabled="disabled">\n</md-input-container><md-input-container flex="50"><label>Ng\xE0y m\u1EDF th\u01B0\u1EDFng</label> <input name="openDate" \nng-model="change.Date" disabled="disabled"></md-input-container></div><div layout="row"><md-input-container flex="50">\n<label>\u0110\xF3ng L\xF4</label> <input name="deadlineBet" ng-model="change.deadlineBet"></md-input-container><md-input-container \nflex="50"><label>\u0110\xF3ng \u0110\u1EC1</label> <input name="deadlineBetJackpots" ng-model="change.deadlineBetJackpots">\n</md-input-container></div><div layout="row" ng-if="change.deadlineBetCaishen4"><md-input-container flex="50"><label>\n\u0110\xF3ng C\u01B0\u1EE3c Th\u1EA7n T\xE0i</label> <input name="deadlineBetCaishen4" ng-model="change.deadlineBetCaishen4"></md-input-container>\n</div></div></md-dialog-content><md-dialog-actions layout="row" ng-show="change"><md-button ng-click="updateTerm()">\nC\u1EADp nh\u1EADt</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/traditional/term/dialog/term.closing.dialog.html', '<md-dialog aria-label="K\u1EBFt s\u1ED5"><form name="closingTerm"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nK\u1EBFt s\u1ED5</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()"><md-icon \nmd-font-icon="icon-window-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><div layout="row" layout-wrap flex><div flex="50" ng-repeat="region in regions"><md-checkbox \nclass="md-accent" ng-checked="exists(region.GameType, selected)" ng-click="toggle(region.GameType, selected)" \nng-disabled="!region.BookKeepingReady || region.Status === 9">{{ region.GameType | gameXs }}</md-checkbox></div></div>\n</div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" ng-click="cancel()">Cancel\n</md-button><md-button class="btn-w-md md-accent" ng-click="startExecution()" \nng-disabled="!selected.length || submitted">OK</md-button></md-dialog-actions></form><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitted}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/term/dialog/term.history.dialog.html', '<md-dialog aria-label="L\u1ECBch s\u1EED thao t\xE1c" class="term-history"><form ng-cloak><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>L\u1ECBch s\u1EED thao t\xE1c</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-window-close"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content><div class="simple-table-container"><table class="simple" ms-responsive-table><thead><tr><th>\nT\xE0i kho\u1EA3n</th><th>IP</th><th>Th\u1EDDi gian</th><th>Chi ti\xEAt</th></tr></thead><tbody><tr ng-repeat="item in termHistory"><td>\n{{ item.Username }}</td><td>{{ item.IP }}</td><td>{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY H:mm:ss\'}}</td><td>\n{{ item.Describe }}</td></tr></tbody></table></div></md-dialog-content><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></form></md-dialog>');
    $templateCache.put('app/main/traditional/term/dialog/term.open.dialog.html', '<md-dialog aria-label="M\u1EDF k\u1EF3 m\u1EDBi"><form name="openterm"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nM\u1EDF k\u1EF3 m\u1EDBi</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()"><md-icon \nmd-font-icon="icon-window-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="md-dialog-md"><div \nclass="md-dialog-content"><div layout="row" layout-wrap flex><div flex="50" ng-repeat="regiron in regirons"><md-checkbox\n class="md-accent" ng-checked="exists(regiron.id, selected)" ng-click="toggle(regiron.id, selected)">{{ regiron.name }}\n</md-checkbox></div></div><div><md-radio-group ng-model="data.day"><md-radio-button flex="40" value="0" class="md-warn">\nNg\xE0y h\xF4m nay</md-radio-button><md-radio-button flex="40" value="1" class="md-warn">Ng\xE0y mai</md-radio-button>\n</md-radio-group></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md" \nng-click="cancel()" ng-disabled="submited">Cancel</md-button><md-button class="btn-w-md md-primary" \nng-click="submitTerm(data)" ng-disabled="submited">OK</md-button></md-dialog-actions></form><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submited}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/term/dialog/update.result.bac.html', '<md-dialog aria-label="K\u1EBFt qu\u1EA3 mi\u1EC1n b\u1EAFc" class="dialog-result"><form ng-cloak><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 \u0111\xE0i {{data.CityName}}</h2></div></md-toolbar><md-dialog-content \nclass="md-dialog-lg"><div class="md-dialog-content"><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><span>K\u1EF3 m\u1EDF th\u01B0\u1EDFng</span><div class="text">{{data.Term}}</div></div><div flex="20"><span>Ng\xE0y m\u1EDF th\u01B0\u1EDFng\n</span><div class="text">{{data.Date | amDateFormat : \'DD/MM/YYYY\' }}</div></div></div><div layout="row" \nlayout-align="start center"><div flex="20">Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</div><div flex="20"><input name="result-0" \nng-model="result.Jackpot" class="hight" autocomplete="off"></div></div><div layout="row" layout-align="start center">\n<div flex="20">Gi\u1EA3i nh\u1EA5t</div><div flex="20"><input name="result-1" ng-model="result.First" autocomplete="off"></div>\n</div><div layout="row" layout-align="start center"><div flex="20">Gi\u1EA3i nh\xEC</div><div flex="20"><input name="result-2" \nng-model="result.Second[0]" autocomplete="off"></div><div flex="20"><input name="result-3" ng-model="result.Second[1]" \nautocomplete="off"></div></div><div layout="row" layout-align="start center" class="no-border"><div flex="20">Gi\u1EA3i ba\n</div><div flex="20"><input name="result-4" ng-model="result.Third[0]" autocomplete="off"></div><div flex="20"><input \nname="result-5" ng-model="result.Third[1]" autocomplete="off"></div><div flex="20"><input name="result-6" \nng-model="result.Third[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><input name="result-7" ng-model="result.Third[3]" autocomplete="off"></div><div flex="20"><input \nname="result-8" ng-model="result.Third[4]" autocomplete="off"></div><div flex="20"><input name="result-9" \nng-model="result.Third[5]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i t\u01B0</div><div flex="20"><input name="result-10" ng-model="result.Fourth[0]" autocomplete="off"></div><div flex="20">\n<input name="result-11" ng-model="result.Fourth[1]" autocomplete="off"></div><div flex="20"><input name="result-12" \nng-model="result.Fourth[2]" autocomplete="off"></div><div flex="20"><input name="result-13" ng-model="result.Fourth[3]" \nautocomplete="off"></div></div><div layout="row" layout-align="start center" class="no-border"><div flex="20">Gi\u1EA3i n\u0103m\n</div><div flex="20"><input name="result-14" ng-model="result.Fiveth[0]" autocomplete="off"></div><div flex="20"><input \nname="result-15" ng-model="result.Fiveth[1]" autocomplete="off"></div><div flex="20"><input name="result-16" \nng-model="result.Fiveth[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><input name="result-17" ng-model="result.Fiveth[3]" autocomplete="off"></div><div flex="20"><input \nname="result-18" ng-model="result.Fiveth[4]" autocomplete="off"></div><div flex="20"><input name="result-19" \nng-model="result.Fiveth[5]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i s\xE1u</div><div flex="20"><input name="result-20" ng-model="result.Sixth[0]" autocomplete="off"></div><div flex="20">\n<input name="result-21" ng-model="result.Sixth[1]" autocomplete="off"></div><div flex="20"><input name="result-22" \nng-model="result.Sixth[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i b\u1EA3y</div><div flex="20"><input name="result-23" ng-model="result.Seventh[0]" autocomplete="off"></div><div \nflex="20"><input name="result-24" ng-model="result.Seventh[1]" autocomplete="off"></div><div flex="20"><input \nname="result-25" ng-model="result.Seventh[2]" autocomplete="off"></div><div flex="20"><input name="result-26" \nng-model="result.Seventh[3]" autocomplete="off"></div></div><div layout="row" class="no-border"><div ng-if="date">\n\u0110\xE2y l\xE0 k\u1EBFt qu\u1EA3 ng\xE0y <span class="hight">{{date}}</span> \u0111\u01B0\u1EE3c l\u1EA5y t\u1EEB Minh Ng\u1ECDc. H\xE3y ki\u1EC3m tra l\u1EA1i k\u1EF9 tr\u01B0\u1EDBc khi c\u1EADp nh\u1EADt\n</div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md md-warn" \nng-click="loadResult(data)">L\u1EA5y k\u1EBFt qu\u1EA3</md-button><span flex></span><md-button class="btn-w-md" ng-click="cancel()">\nCancel</md-button><md-button class="btn-w-md md-accent" ng-click="submitResult(true)" ng-disabled="!enabled">OK\n</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/traditional/term/dialog/update.result.caishen.html', '<md-dialog aria-label="K\u1EBFt qu\u1EA3 mi\u1EC1n b\u1EAFc" class="dialog-result caishen"><form ng-cloak><md-toolbar class="md-accent"><div\n class="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 x\u1ED5 s\u1ED1 Th\u1EA7n T\xE0i</h2></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><div layout="row" layout-align="start center"><div flex="40" flex-offset="20"><span>\nK\u1EF3 m\u1EDF th\u01B0\u1EDFng</span><div class="text">{{data.Term}}</div></div><div flex="40"><span>Ng\xE0y m\u1EDF th\u01B0\u1EDFng</span><div \nclass="text">{{data.Date | amDateFormat : \'DD/MM/YYYY\' }}</div></div></div><div layout="row" \nlayout-align="start center"><div flex="20">K\u1EBFt qu\u1EA3</div><div flex="60"><input name="result" ng-model="result" \nautocomplete="off"></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button \nclass="btn-w-md md-accent" ng-click="sample()" ng-disabled="!enabled" ng-if="debugOnly">sample</md-button><span flex>\n</span><md-button class="btn-w-md" ng-click="cancel()">Cancel</md-button><md-button class="btn-w-md md-accent" \nng-click="submitResult(result)" ng-disabled="!enabled">OK</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/traditional/term/dialog/update.result.nam.html', '<md-dialog aria-label="K\u1EBFt qu\u1EA3 x\u1ED5 s\u1ED1" class="dialog-result"><form ng-cloak><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 \u0111\xE0i {{data.CityName}}</h2></div></md-toolbar><md-dialog-content \nclass="md-dialog-lg"><div class="md-dialog-content"><div layout="row" layout-align="start center"><div flex="20" \nflex-offset="20"><span>K\u1EF3 m\u1EDF th\u01B0\u1EDFng</span><div class="text">{{data.Term}}</div></div><div flex="20"><span>Ng\xE0y m\u1EDF th\u01B0\u1EDFng\n</span><div class="text">{{data.Date | amDateFormat : \'DD/MM/YYYY\' }}</div></div></div><div layout="row" \nlayout-align="start center"><div flex="20">Gi\u1EA3i \u0111\u1EB7c bi\u1EC7t</div><div flex="20"><input name="result-0" \nng-model="result.Jackpot" class="hight" autocomplete="off"></div></div><div layout="row" layout-align="start center">\n<div flex="20">Gi\u1EA3i nh\u1EA5t</div><div flex="20"><input name="result-1" ng-model="result.First" autocomplete="off"></div>\n</div><div layout="row" layout-align="start center"><div flex="20">Gi\u1EA3i nh\xEC</div><div flex="20"><input name="result-2" \nng-model="result.Second" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i ba</div><div flex="20"><input name="result-3" ng-model="result.Third[0]" autocomplete="off"></div><div flex="20">\n<input name="result-4" ng-model="result.Third[1]" autocomplete="off"></div></div><div layout="row" \nlayout-align="start center" class="no-border"><div flex="20">Gi\u1EA3i t\u01B0</div><div flex="20"><input name="result-5" \nng-model="result.Fourth[0]" autocomplete="off"></div><div flex="20"><input name="result-6" ng-model="result.Fourth[1]" \nautocomplete="off"></div><div flex="20"><input name="result-7" ng-model="result.Fourth[2]" autocomplete="off"></div><div\n flex="20"><input name="result-8" ng-model="result.Fourth[3]" autocomplete="off"></div></div><div layout="row" \nlayout-align="start center"><div flex="20" flex-offset="20"><input name="result-9" ng-model="result.Fourth[4]" \nautocomplete="off"></div><div flex="20"><input name="result-10" ng-model="result.Fourth[5]" autocomplete="off"></div>\n<div flex="20"><input name="result-11" ng-model="result.Fourth[6]" autocomplete="off"></div></div><div layout="row" \nlayout-align="start center"><div flex="20">Gi\u1EA3i n\u0103m</div><div flex="20"><input name="result-12" \nng-model="result.Fiveth" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i s\xE1u</div><div flex="20"><input name="result-13" ng-model="result.Sixth[0]" autocomplete="off"></div><div flex="20">\n<input name="result-14" ng-model="result.Sixth[1]" autocomplete="off"></div><div flex="20"><input name="result-15" \nng-model="result.Sixth[2]" autocomplete="off"></div></div><div layout="row" layout-align="start center"><div flex="20">\nGi\u1EA3i b\u1EA3y</div><div flex="20"><input name="result-16" ng-model="result.Seventh" autocomplete="off"></div></div><div \nlayout="row" layout-align="start center"><div flex="20">Gi\u1EA3i t\xE1m</div><div flex="20"><input name="result-17" \nng-model="result.Eighth" autocomplete="off"></div></div><div layout="row" class="no-border"><div ng-if="date">\n\u0110\xE2y l\xE0 k\u1EBFt qu\u1EA3 ng\xE0y <span class="hight">{{date}}</span> \u0111\u01B0\u1EE3c l\u1EA5y t\u1EEB Minh Ng\u1ECDc. H\xE3y ki\u1EC3m tra l\u1EA1i k\u1EF9 tr\u01B0\u1EDBc khi c\u1EADp nh\u1EADt\n</div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md md-accent" \nng-click="sample()" ng-disabled="!enabled" ng-if="debugOnly">sample</md-button><span flex></span><md-button \nclass="btn-w-md" ng-click="cancel()">Cancel</md-button><md-button class="btn-w-md md-primary" ng-click="submitResult()" \nng-disabled="!enabled">OK</md-button></md-dialog-actions></form></md-dialog>');
    $templateCache.put('app/main/statistical/agent/lottery/lottery.html', '<div class="page-layout fullwidth statistical-lottery" layout="column"><div class="navigation" layout-gt-sm="row" \nlayout="column"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>T\u1EEB ng\xE0y\n</label><md-datepicker ng-model="vm.filter.FromDate" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.filter.ToDate" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div class="menu-button" layout-gt-sm="row" layout="column"><div layout="row"><md-input-container><md-select \nng-model="vm.filter.GameType" ng-change="vm.changeGame()"><md-option selected="selected" value="-1">T\u1EA5t c\u1EA3</md-option>\n<md-option ng-repeat="item in vm.localData" ng-value="item.GameType">{{ item.GameType | gameXs }}</md-option>\n</md-select></md-input-container><md-input-container ng-if="vm.BetTypes.length"><md-select ng-model="vm.filter.BetType">\n<md-option value="-1" selected="selected"><em>T\u1EA5t c\u1EA3</em></md-option><md-option \nng-repeat="item in vm.BetTypes[0].BetTypes" ng-value="item">{{ item | bet }}</md-option></md-select>\n</md-input-container></div><div layout="row" ng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" \nlayout-align-xs="space-between center"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.selectedLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item ng-repeat="item in vm.termLists"><md-button \nng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu>\n<md-button class="md-raised md-primary" ng-click="vm.renderStatistical()">Xem th\u1ED1ng k\xEA</md-button></div></div></div><div\n flex="100" layout="row" layout-wrap class="statistical-chart"><div flex-gt-sm="50" flex="100"><div class="chart"><div \nlayout="column" class="chart-content" id="TurnOver"></div></div></div><div flex-gt-sm="50" flex="100"><div \nclass="chart"><div layout="column" class="chart-content" id="WinLoss"></div></div></div></div></div>');
    $templateCache.put('app/main/statistical/agent/production/production.html', '<div class="page-layout fullwidth statistical-lottery" layout="column"><div class="navigation" layout-gt-sm="row" \nlayout="column"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>T\u1EEB ng\xE0y\n</label><md-datepicker ng-model="vm.filter.FromDate" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.filter.ToDate" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div class="menu-button" layout="row" layout-align-xs="end center"><md-menu><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu>\n<md-button class="md-raised md-primary" ng-click="vm.renderStatistical()">Xem th\u1ED1ng k\xEA</md-button></div></div><div \nflex="100" layout="row" layout-wrap class="statistical-chart"><div flex-gt-sm="50" flex="100" class="chart"><div \nlayout="column" class="chart-content" id="Turnover"></div></div><div flex-gt-sm="50" flex="100" class="chart"><div \nlayout="column" class="chart-content" id="WinLoss"></div></div></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-1/template-1.html', '<div class="template-1"><div class="media"><img class="image" ng-src="{{card.media.image.src}}" \nalt="{{card.media.image.alt}}" ng-show="card.media.image"></div><div class="content pv-24 ph-16"><div class="title h1" \nng-if="card.title">{{card.title}}</div><div class="subtitle secondary-text" ng-if="card.subtitle">{{card.subtitle}}\n</div><div class="text pt-16" ng-if="card.text">{{card.text}}</div></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-10/template-10.html', '<div class="template-10 p-16"><div class="pb-16" layout="row" layout-align="space-between center"><div class="info"><div\n class="title secondary-text" ng-if="card.title">{{card.title}}</div><div class="subtitle h2" ng-if="card.subtitle">\n{{card.subtitle}}</div></div><div class="media ml-16"><img class="image" ng-src="{{card.media.image.src}}" \nalt="{{card.media.image.alt}}" ng-show="card.media.image"></div></div><div class="text">{{card.text}}</div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-2/template-2.html', '<div class="template-2"><div class="header p-16" layout="row" layout-align="start center"><div ng-if="card.avatar"><img \nclass="avatar mr-16" ng-src="{{card.avatar.src}}" alt="{{card.avatar.alt}}"></div><div class="info"><div class="title" \nng-if="card.title">{{card.title}}</div><div class="subtitle secondary-text" ng-if="card.subtitle">{{card.subtitle}}\n</div></div></div><div class="media"><img class="image" ng-src="{{card.media.image.src}}" \nalt="{{card.media.image.alt}}" ng-show="card.media.image"></div><div class="text p-16" ng-if="card.text">{{card.text}}\n</div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-3/template-3.html', '<div class="template-3 p-16 teal-bg white-fg" layout="row" layout-align="space-between"><div layout="column" \nlayout-align="space-between"><div class="info"><div class="title h1" ng-if="card.title">{{card.title}}</div><div \nclass="subtitle h3 secondary-text" ng-if="card.subtitle">{{card.subtitle}}</div></div><div class="cta"><md-button \nclass="m-0">{{card.cta}}</md-button></div></div><div class="media pl-16"><img class="image" \nng-src="{{card.media.image.src}}" alt="{{card.media.image.alt}}" ng-show="card.media.image"></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-5/template-5.html', '<div class="template-5 p-16" layout="row" layout-align="space-between start"><div class="info"><div \nclass="title secondary-text" ng-if="card.title">{{card.title}}</div><div class="event h2" ng-if="card.event">\n{{card.event}}</div></div><div class="media ml-16"><img class="image" ng-src="{{card.media.image.src}}" \nalt="{{card.media.image.alt}}" ng-show="card.media.image"></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-4/template-4.html', '<div class="template-4"><div class="info white-fg ph-16 pv-24"><div class="title h1" ng-if="card.title">{{card.title}}\n</div><div class="text" ng-if="card.text">{{card.text}}</div></div><div class="media"><img class="image" \nng-src="{{card.media.image.src}}" alt="{{card.media.image.alt}}" ng-show="card.media.image"></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-6/template-6.html', '<div class="template-6"><div class="content pv-24 ph-16"><div class="subtitle secondary-text" ng-if="card.subtitle">\n{{card.subtitle}}</div><div class="title h2" ng-if="card.title">{{card.title}}</div><div class="text pt-8" \nng-if="card.text">{{card.text}}</div></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-7/template-7.html', '<div class="template-7" layout="row" layout-align="space-between"><div class="info" layout="column" \nlayout-align="space-between" layout-fill flex><div class="p-16"><div class="title h1" ng-if="card.title">{{card.title}}\n</div><div class="subtitle h4 secondary-text" ng-if="card.subtitle">{{card.subtitle}}</div><div class="text h4 pt-8" \nng-if="card.text">{{card.text}}</div></div><div><md-divider></md-divider><div class="p-8" layout="row"><md-icon \nmd-font-icon="icon-star-outline" class="mh-5"></md-icon><md-icon md-font-icon="icon-star-outline" class="mh-5">\n</md-icon><md-icon md-font-icon="icon-star-outline" class="mh-5"></md-icon><md-icon md-font-icon="icon-star-outline" \nclass="mh-5"></md-icon><md-icon md-font-icon="icon-star-outline" class="mh-5"></md-icon></div></div></div><div \nclass="media"><img class="image" ng-src="{{card.media.image.src}}" alt="{{card.media.image.alt}}" \nng-show="card.media.image"></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-8/template-8.html', '<div class="template-8"><div class="media"><img class="image" ng-src="{{card.media.image.src}}" \nalt="{{card.media.image.alt}}" ng-show="card.media.image"></div><div class="content pv-24 ph-16"><div class="title h1" \nng-if="card.title">{{card.title}}</div><div class="subtitle secondary-text" ng-if="card.subtitle">{{card.subtitle}}\n</div><div class="buttons pt-16"><md-button class="m-0">{{card.button1}}</md-button><md-button class="m-0 md-accent">\n{{card.button2}}</md-button></div><div class="text pt-16" ng-if="card.text">{{card.text}}</div></div></div>');
    $templateCache.put('app/core/directives/ms-card/templates/template-9/template-9.html', '<div class="template-9"><div class="header p-16" layout="row" layout-align="start center"><div ng-if="card.avatar"><img \nclass="avatar mr-16" ng-src="{{card.avatar.src}}" alt="{{card.avatar.alt}}"></div><div class="info"><div class="title" \nng-if="card.title">{{card.title}}</div><div class="subtitle secondary-text" ng-if="card.subtitle">{{card.subtitle}}\n</div></div></div><div class="text ph-16 pb-16" ng-if="card.text">{{card.text}}</div><div class="media"><img \nclass="image" ng-src="{{card.media.image.src}}" alt="{{card.media.image.alt}}" ng-show="card.media.image"></div><div \nclass="buttons m-8"><md-button class="md-icon-button mr-16" aria-label="Favorite"><md-icon \nmd-font-icon="icon-heart-outline" class="s24"></md-icon></md-button><md-button class="md-icon-button" \naria-label="Share"><md-icon md-font-icon="icon-share" class="s24"></md-icon></md-button></div></div>');
    $templateCache.put('app/core/directives/ms-stepper/templates/horizontal/horizontal.html', '<div class="ms-stepper-horizontal"><div class="ms-stepper-navigation-wrapper"><div class="ms-stepper-navigation" \nlayout="row" layout-align="center center"><md-button class="ms-stepper-navigation-item" \nng-class="{\'current\': MsStepper.isStepCurrent(step.stepNumber), \'valid\': MsStepper.isStepValid(step.stepNumber), \'disabled\': MsStepper.isStepDisabled(step.stepNumber), \'optional\': MsStepper.isStepOptional(step.stepNumber)}" \nng-click="MsStepper.gotoStep(step.stepNumber)" ng-disabled="MsStepper.isStepDisabled(step.stepNumber)" \nng-repeat="step in MsStepper.steps | filter:MsStepper.filterHiddenStep" layout="row" layout-align="start center"><div \nclass="step md-accent-bg" layout="row" layout-align="center center"><span \nng-if="!MsStepper.isStepValid(step.stepNumber) || MsStepper.isStepOptional(step.stepNumber)">{{$index + 1}} </span><span\n ng-if="MsStepper.isStepValid(step.stepNumber) && !MsStepper.isStepOptional(step.stepNumber)"><i \nclass="icon icon-check s18"></i></span></div><div layout="column" layout-align="start start"><div class="title" \ntranslate="{{step.stepTitleTranslate}}">{{step.stepTitle}}</div><div class="subtitle" \nng-if="MsStepper.isStepOptional(step.stepNumber)">Optional</div></div></md-button></div></div><div \nclass="ms-stepper-steps" ng-transclude></div><div class="ms-stepper-controls" layout="row" layout-align="center center">\n<md-button class="md-accent md-raised" ng-disabled="MsStepper.isFirstStep()" ng-click="MsStepper.gotoPreviousStep()">\nBack</md-button><div class="ms-stepper-dots"><span ng-repeat="step in MsStepper.steps" \nng-hide="MsStepper.isStepHidden(step.stepNumber)" \nng-class="{\'selected md-accent-bg\':MsStepper.currentStepNumber === $index + 1}"></span></div><md-button \nclass="md-accent md-raised" ng-if="!MsStepper.isLastStep()" \nng-disabled="!MsStepper.isStepValid(MsStepper.currentStepNumber)" ng-click="MsStepper.gotoNextStep()">Next</md-button>\n<md-button type="submit" class="md-accent md-raised" ng-click="MsStepper.resetForm()" ng-if="MsStepper.isLastStep()" \nng-disabled="!MsStepper.isFormValid()">Submit</md-button></div></div>');
    $templateCache.put('app/core/directives/ms-stepper/templates/vertical/vertical.html', '<div class="ms-stepper-vertical"><div class="ms-stepper-vertical-line"></div><div class="ms-stepper-steps" \nng-transclude></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/betting-limit-template-legend-casino.html', '<div layout="row" ng-if="LegendCasinoBettingLimit !== undefined"><div layout="column" class="wm-casino-betting-limit">\n<fieldset class="legend"><legend>Gi\u1EDBi h\u1EA1n th\u1EAFng thua</legend><div layout="row"><div flex="50">Ti\u1EC1n thua t\u1ED1i \u0111a</div><div\n class="input-wrap"><input type="tel" ng-currency name="share" select-on-click \nng-model="LegendCasinoBettingLimit.MaxLoseAmount" ng-readonly="!hasWritePermission" \nng-blur="LegendCasinoChangeBettingLimit(\'Lose\')" autocomplete="off"> <span class="label">\xD71,000</span></div></div><div \nlayout="row" layout-align="start center"><div flex="50">Ti\u1EC1n th\u1EAFng t\u1ED1i \u0111a</div><div class="input-wrap"><input \ntype="tel" ng-currency name="share" select-on-click ng-model="LegendCasinoBettingLimit.MaxWinAmount" \nng-readonly="!hasWritePermission" ng-blur="LegendCasinoChangeBettingLimit(\'Win\')" autocomplete="off"> <span \nclass="label">\xD71,000</span></div></div><div layout="row" layout-align="start center" flex-offset="50"><b>0</b>\n: Kh\xF4ng gi\u1EDBi h\u1EA1n</div><div layout="row" layout-align="start center">\nTi\u1EC1n th\u1EAFng/thua t\u1ED1i \u0111a ph\u1EA3i c\xE0i gi\xE1 tr\u1ECB nh\u1ECF nh\u1EA5t l\xE0 2 tri\u1EC7u</div><div layout="row" layout-align="start center" \nng-if="item.Level === 9"><md-checkbox ng-model="LegendCasinoBettingLimit.ResetStatsDaily" aria-label="ResetStatsDaily">\nReset th\u1ED1ng k\xEA h\xE0ng ng\xE0y</md-checkbox></div></fieldset></div><div layout="row" class="reset-player-win-lose" \nng-if="item.Level === 9 && LegendCasinoPLayerDone"><fieldset class="legend"><legend>Reset th\u1ED1ng k\xEA</legend><md-button \nclass="md-raised md-accent" ng-click="LegendCasinoResetPlayerWinLoseStats(item)" ng-disabled="$root.User.Level !== 5">\nReset</md-button><p>Ti\u1EC1n th\u1EAFng thua hi\u1EC7n t\u1EA1i: <b ng-class="{\'warn\' : LegendCasinoBettingLimit.WinLoseAmount < 0 }">\n{{ LegendCasinoBettingLimit.WinLoseAmount | currency : \'\' : 0 }}</b></p><p>\nL\u1EA7n Reset g\u1EA7n \u0111\xE2y: {{ LegendCasinoBettingLimit.LastResetAt | amDateFormat : \'DD-MM-YYYY HH:mm:ss\' }}</p></fieldset>\n</div></div><div layout="column" class="wm-casino-betting-limit-player" ng-if="LegendCasinoPLayerDone"><div \nlayout="row" layout-xs="column" class="wm-casino-game"><div class="wm-casino-game-limit"><div \nng-repeat="limit in LegendCasinoPlayersGames" class="badge" \nng-class="{\'active\': limit.active, \'forced\': limit.number === 3 }" \nng-click="LegendCasinoChangePlayerLimit(limit.number)">{{ limit.limit }}</div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/betting-limit-template-legend.html', '<div class="simple-table-container" ng-if="agencyLegendParams.length"><table class="simple" ms-responsive-table><tbody>\n<tr ng-repeat="game in agencyLegendParams"><td><div layout="row" layout-align="left center"><div layout="column" \nclass="wrap-bet-type first"><div class="header">{{ game.group[0].GameType | legendGame }}</div><div class="copy">\nT\u1ED1i \u0111a 1 l\u1EA7n c\u01B0\u1EE3c<md-icon md-font-icon="icon-content-copy" class="s16" ng-click="legendCopyRow(game.group[0])" \nng-if="hasWritePermission"></md-icon></div><div>T\u1ED1i \u0111a tr\xEAn 1 s\u1ED1</div></div><div layout="column" \nng-repeat="bet in game.group" class="wrap-bet-type"><div class="header">\n{{ bet.BetType | bet : true : game.group[0].GameType }}</div><div><input type="text" ng-model="bet.MaxPointPerNumber" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-change="lotteryChangeValues(bet, \'MaxPointPerNumber\')" \nng-class="{\'highlight\' : bet.highlight.MaxPointPerNumber, \'warn\' : bet.warn }"></div><div><input type="text" \nng-model="bet.TotalPointPerNumber" select-on-click ng-currency ng-disabled="!hasWritePermission" \nng-change="lotteryChangeValues(bet, \'TotalPointPerNumber\')" \nng-class="{\'highlight\' : bet.highlight.TotalPointPerNumber, \'warn\' : bet.warn }"></div></div></div></td></tr></tbody>\n</table></div>');
    $templateCache.put('app/main/account/agency/dialog/template/betting-limit-template-lottery.html', '<div class="simple-table-container" ng-if="agencyParams.length"><table class="simple" ms-responsive-table><tbody><tr \nng-repeat="game in agencyParams"><td><div layout="row" layout-align="left center"><div layout="column" \nclass="wrap-bet-type first"><div class="header">{{ game.group[0].GameType | gameXs }}</div><div class="copy">\nT\u1ED1i \u0111a 1 l\u1EA7n c\u01B0\u1EE3c<md-icon md-font-icon="icon-content-copy" class="s16" ng-click="lotteryCopyRow(game.group[0])" \nng-if="hasWritePermission"></md-icon></div><div>T\u1ED1i \u0111a tr\xEAn 1 s\u1ED1</div></div><div layout="column" \nng-repeat="bet in game.group" class="wrap-bet-type"><div class="header">{{ bet.BetType | bet : true }}</div><div><input \ntype="text" ng-model="bet.MaxPointPerNumber" select-on-click ng-currency ng-disabled="!hasWritePermission" \nng-change="lotteryChangeValues(bet, \'MaxPointPerNumber\')" \nng-class="{\'highlight\' : bet.highlight.MaxPointPerNumber, \'warn\' : bet.warn }"></div><div><input type="text" \nng-model="bet.TotalPointPerNumber" select-on-click ng-currency ng-disabled="!hasWritePermission" \nng-change="lotteryChangeValues(bet, \'TotalPointPerNumber\')" \nng-class="{\'highlight\' : bet.highlight.TotalPointPerNumber, \'warn\' : bet.warn }"></div></div></div></td></tr></tbody>\n</table></div>');
    $templateCache.put('app/main/account/agency/dialog/template/betting-limit-template-saba.html', '<div class="simple-table-container" ng-if="SabaBettingLimits.length"><table class="simple table-saba-bet-limit" \nms-responsive-table><tbody><tr><td colspan="4" class="saba-unit">T\u1EC9 l\u1EC7 1 : 1,000 (500 = 500,000 VND)</td></tr></tbody>\n<thead><tr><td>Th\u1EC3 Thao</td><td>Min Bet</td><td>Max Bet</td><td>Max Per Match</td></tr></thead><tbody><tr \nng-repeat="item in SabaBettingLimits track by $index" \nng-if="item.name !== \'NumberGame\' && item.name !== \'VirtualSports\' "><td><div layout="row" \nlayout-align="space-between center"><div>{{ item.name | sabaSportType : \'vn\' }}</div><div><md-icon \nng-show="item.process === \'processing\' && countError === 0" md-font-icon="icon-refresh" class="s40 rotate"></md-icon>\n<md-icon ng-if="hasWritePermission" ng-show="item.process !== \'processing\' && $index === 0" \nmd-font-icon="icon-content-copy" ng-click="sabaCopyRow(item)" class="s20"></md-icon></div></div></td><td><div \nlayout="row" layout-align="center center"><div class="input-wrap" flex="50"><input type="text" \nng-model="item.value.MinBet" select-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MinBet\')" \nng-class="{\'highlight\' : item.highlight.MinBet, \'warn\' : item.warn.MinBet }"></div><div flex="50" class="text-left">\n\u2265 {{ BackupSabaBettingLimits.Parent[item.name].MinBet/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MaxBet" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MaxBet\')" \nng-class="{\'highlight\' : item.highlight.MaxBet, \'warn\' : item.warn.MaxBet }"></div><div flex="50" class="text-left">\n\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBet/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MaxBetPerMatch" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MaxBetPerMatch\')" \nng-class="{\'highlight\' : item.highlight.MaxBetPerMatch, \'warn\' : item.warn.MaxBetPerMatch }"></div><div flex="50" \nclass="text-left">\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBetPerMatch/1000 | currency : \'\' : 0 }}</div></div>\n</td></tr></tbody></table><table class="simple table-saba-bet-limit" ms-responsive-table><thead><tr><td>Th\u1EC3 Thao \u1EA2o</td>\n<td>Min Bet</td><td>Max Bet</td><td>Max Per Match</td></tr></thead><tbody><tr ng-repeat="item in SabaBettingLimits" \nng-if="item.name === \'VirtualSports\'"><td><div layout="row" layout-align="space-between center"><div>\n{{ item.name | sabaSportType : \'vn\' }}</div><div><md-icon ng-show="item.process === \'processing\' && countError === 0" \nmd-font-icon="icon-refresh" class="s40 rotate"></md-icon></div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MinBet" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MinBet\')" \nng-class="{\'highlight\' : item.highlight.MinBet, \'warn\' : item.warn.MinBet }"></div><div flex="50" class="text-left">\n\u2265 {{ BackupSabaBettingLimits.Parent[item.name].MinBet/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MaxBet" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MaxBet\')" \nng-class="{\'highlight\' : item.highlight.MaxBet, \'warn\' : item.warn.MaxBet }"></div><div flex="50" class="text-left">\n\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBet/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MaxBetPerMatch" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MaxBetPerMatch\')" \nng-class="{\'highlight\' : item.highlight.MaxBetPerMatch, \'warn\' : item.warn.MaxBetPerMatch }"></div><div flex="50" \nclass="text-left">\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBetPerMatch/1000 | currency : \'\' : 0 }}</div></div>\n</td></tr></tbody></table><table class="simple table-saba-bet-limit number-game" ms-responsive-table><thead><tr><td>\nNumber Game</td><td>Min Bet</td><td>Max Bet</td><td>Max Per Match</td><td>Max Bet Per Ball</td></tr></thead><tbody><tr \nng-repeat="item in SabaBettingLimits" ng-if="item.name === \'NumberGame\'"><td><div layout="row" \nlayout-align="space-between center"><div>{{ item.name | sabaSportType : \'vn\' }}</div><div><md-icon \nng-show="item.process === \'processing\' && countError === 0" md-font-icon="icon-refresh" class="s40 rotate"></md-icon>\n</div></div></td><td><div layout="row" layout-align="center center"><div class="input-wrap" flex="50"><input \ntype="text" ng-model="item.value.MinBet" select-on-click ng-currency ng-disabled="!hasWritePermission" \nng-readonly="submitting" ng-change="sabaChangeValues(item, \'MinBet\')" \nng-class="{\'highlight\' : item.highlight.MinBet, \'warn\' : item.warn.MinBet }"></div><div flex="50" class="text-left">\n\u2265 {{ BackupSabaBettingLimits.Parent[item.name].MinBet/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MaxBet" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MaxBet\')" \nng-class="{\'highlight\' : item.highlight.MaxBet, \'warn\' : item.warn.MaxBet }"></div><div flex="50" class="text-left">\n\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBet/1000 | currency : \'\' : 0 }}</div></div></td><td><div layout="row" \nlayout-align="center center"><div class="input-wrap" flex="50"><input type="text" ng-model="item.value.MaxBetPerMatch" \nselect-on-click ng-currency ng-disabled="!hasWritePermission" ng-readonly="submitting" \nng-change="sabaChangeValues(item, \'MaxBetPerMatch\')" \nng-class="{\'highlight\' : item.highlight.MaxBetPerMatch, \'warn\' : item.warn.MaxBetPerMatch }"></div><div flex="50" \nclass="text-left">\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBetPerMatch/1000 | currency : \'\' : 0 }}</div></div>\n</td><td><div layout="row" layout-align="center center"><div class="input-wrap" flex="50"><input type="text" \nng-model="item.value.MaxBetPerBall" select-on-click ng-currency ng-disabled="!hasWritePermission" \nng-readonly="submitting" ng-change="sabaChangeValues(item, \'MaxBetPerBall\')" \nng-class="{\'highlight\' : item.highlight.MaxBetPerBall, \'warn\' : item.warn.MaxBetPerBall }"></div><div flex="50" \nclass="text-left">\u2264 {{ BackupSabaBettingLimits.Parent[item.name].MaxBetPerBall/1000 | currency : \'\' : 0 }}</div></div>\n</td></tr></tbody></table><div class="saba-username" ng-if="sabaPlayerUsername !== undefined">\nT\xE0i kho\u1EA3n Bong88: {{ sabaPlayerUsername }}</div><div class="saba-note" hide><p>* Qu\xFD kh\xE1ch l\u01B0u \xFD</p><h4><b>MinBet</b>\n ph\u1EA3i nh\u1ECF h\u01A1n <b>MaxBet</b></h4><h4><b>MaxBet</b> v\xE0 <b>MaxBetPerBall</b> ph\u1EA3i nh\u1ECF h\u01A1n <b>MaxBetPerMatch</b></h4></div>\n</div>');
    $templateCache.put('app/main/account/agency/dialog/template/betting-limit-template-wm-casino.html', '<div layout="row" ng-if="WMCasinoBettingLimit !== undefined"><div layout="column" class="wm-casino-betting-limit">\n<fieldset><legend>Gi\u1EDBi h\u1EA1n th\u1EAFng thua</legend><div layout="row"><div flex="50">Ti\u1EC1n thua t\u1ED1i \u0111a</div><div \nclass="input-wrap"><input type="tel" ng-currency name="share" select-on-click \nng-model="WMCasinoBettingLimit.MaxLoseAmount" ng-readonly="!hasWritePermission" \nng-blur="wmCasinoChangeBettingLimit(\'Lose\')" autocomplete="off"> <span class="label">\xD71,000</span></div></div><div \nlayout="row" layout-align="start center"><div flex="50">Ti\u1EC1n th\u1EAFng t\u1ED1i \u0111a</div><div class="input-wrap"><input \ntype="tel" ng-currency name="share" select-on-click ng-model="WMCasinoBettingLimit.MaxWinAmount" \nng-readonly="!hasWritePermission" ng-blur="wmCasinoChangeBettingLimit(\'Win\')" autocomplete="off"> <span class="label">\n\xD71,000</span></div></div><div layout="row" layout-align="start center" flex-offset="50"><b>0</b>: Kh\xF4ng gi\u1EDBi h\u1EA1n</div>\n<div layout="row" layout-align="start center">Ti\u1EC1n th\u1EAFng/thua t\u1ED1i \u0111a ph\u1EA3i c\xE0i gi\xE1 tr\u1ECB nh\u1ECF nh\u1EA5t l\xE0 2 tri\u1EC7u</div>\n</fieldset></div><div layout="row" class="reset-player-win-lose" ng-if="item.Level === 9 && WmCasinoPLayerDone">\n<fieldset><legend>Reset th\u1ED1ng k\xEA gi\u1EDBi h\u1EA1n th\u1EAFng/thua</legend><md-button class="md-raised md-accent" \nng-click="resetPlayerWinLoseStats(item)" ng-disabled="$root.User.Level !== 5">Reset</md-button><p>\nSau khi reset, qu\xFD kh\xE1ch c\u1EA7n th\u1EF1c hi\u1EC7n M\u1EDF C\u01B0\u1EE3c t\xE0i kho\u1EA3n h\u1ED9i vi\xEAn \u0111\u1EC3 c\xF3 th\u1EC3 ti\u1EBFp t\u1EE5c ch\u01A1i.</p></fieldset><fieldset>\n<legend>M\u1EDF c\u01B0\u1EE3c</legend><md-button class="md-raised md-accent" ng-click="enablePlayerBet(item)" \nng-disabled="$root.User.Level !== 5">M\u1EDF c\u01B0\u1EE3c</md-button><p>N\u1EBFu t\xE0i kho\u1EA3n h\u1ED9i vi\xEAn <span>{{item.Username}}</span>\n b\u1ECB \u0111\xF3ng b\u0103ng khi \u0111\u1EA1t m\u1EE9c gi\u1EDBi h\u1EA1n th\u1EAFng thua, qu\xFD kh\xE1ch c\u1EA7n n\xE2ng h\u1EA1ng m\u1EE9c th\u1EAFng thua ho\u1EB7c Reset th\u1ED1ng k\xEA tr\u01B0\u1EDBc khi \n<span>M\u1EDE C\u01AF\u1EE2C</span>.</p></fieldset></div></div><div layout="column" class="wm-casino-betting-limit-player" \nng-if="WmCasinoPLayerDone"><div layout="row" layout-xs="column" class="wm-casino-game" \nng-repeat="game in WmCasinoPlayerGames"><div class="wm-casino-game-name">{{ game.Id | WMGame }}</div><div \nclass="wm-casino-game-limit"><div ng-repeat="limit in game.Limits" class="badge" \nng-class="{\'active\': limit.active, \'forced\': WMCasinoRequired(limit.number) }" \nng-click="WMCasinoChangePlayerLimit(game.Id, limit.number)">{{ limit.limit }}</div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/contract.template.legend-casino.html', '<div class="" layout="column"><div layout="column" class="content-wraper"><div layout="column" class="wraper"><div \nclass="content" layout="row"><div class="bet-content" layout="column"><div class="content-header">T\xE0i kho\u1EA3n</div><div \nclass="bid-info" ng-repeat="account in LegendContractData">{{ account.Username }}</div></div><div class="bet-content" \nlayout="column"><div class="content-header">Nh\xF3m</div><div class="bid-info" ng-repeat="account in LegendContractData">\n{{ account.Level | group }}</div></div><div class="bet-content" layout="column"><div class="content-header values">\nKi\u1EC3u th\u1EA7u</div><div class="bid-info values" ng-repeat="account in LegendContractData"><md-icon \nmd-font-icon="icon-checkbox-marked-outline" class="s12 md-accent" ng-if="account.Fixed"></md-icon><md-icon \nmd-font-icon="icon-checkbox-blank-outline" class="s12 md-warn" ng-if="!account.Fixed"></md-icon></div></div><div \nclass="bet-content" layout="column"><div class="content-header values">T\u1EF7 l\u1EC7 th\u1EA7u</div><div class="bid-info values" \nng-repeat="account in LegendContractData"><span>{{ account.Percent }}</span></div></div><div class="bet-content last" \nlayout="column"><div class="content-header values">Hoa h\u1ED3ng</div><div class="bid-info values" \nng-repeat="account in LegendContractData"><span>{{ account.CommissionPercent }}</span></div></div></div></div></div>\n</div>');
    $templateCache.put('app/main/account/agency/dialog/template/contract.template.legend.html', '<div class="" layout="column"><div layout="row" class="game-list"><md-button class="md-raised" \nng-repeat="game in legendGameList" ng-class="{\'md-accent\' : game.active}" ng-click="loadMoreLegend(game)">\n{{ game.name }}</md-button></div><div layout="column" class="content-wraper"><div layout="column" class="wraper" \nng-repeat="contract in legendContractData"><div class="header">{{ contract.gameType | legendGame }}</div><div \nclass="content" layout="row"><div class="bet-content" layout="column"><div class="content-header">T\xE0i kho\u1EA3n</div><div \nclass="bid-info" ng-repeat="account in contract.content">{{ account.Username }}</div></div><div class="bet-content" \nlayout="column"><div class="content-header">Nh\xF3m</div><div class="bid-info" ng-repeat="account in contract.content">\n{{ account.Level | group }}</div></div><div class="bet-content" layout="column" \nng-repeat="bet in contract.content[0].ShareHolders track by $index" \nng-class="{\'last\': $index === contract.content[0].ShareHolders.length - 1 }"><div class="content-header values">\n{{ bet.BetType | bet : false : contract.gameType }}</div><div class="bid-info values" \nng-repeat="account in contract.content" layout="row" layout-align="space-between center"><md-icon \nmd-font-icon="icon-checkbox-marked-outline" class="s12 md-accent" ng-if="account.ShareHolders[$parent.$index].Fixed">\n</md-icon><md-icon md-font-icon="icon-checkbox-blank-outline" class="s12 md-warn" \nng-if="!account.ShareHolders[$parent.$index].Fixed"></md-icon><span>{{ account.ShareHolders[$parent.$index].Percent }}\n</span> <span class="price">{{ account.ShareHolders[$parent.$index].Price | currency : \'\' : 0 }}</span></div></div>\n</div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/contract.template.lottery.html', '<div class="" layout="column"><div layout="row" class="game-list"><md-button class="md-raised" \nng-repeat="game in gameList" ng-class="{\'md-accent\' : game.active}" ng-click="loadMore(game)">{{ game.name }}\n</md-button></div><div layout="column" class="content-wraper"><div layout="column" class="wraper" \nng-repeat="contract in contractData"><div class="header">{{ contract.gameType | gameXs }}</div><div class="content" \nlayout="row"><div class="bet-content" layout="column"><div class="content-header">T\xE0i kho\u1EA3n</div><div class="bid-info" \nng-repeat="account in contract.content">{{ account.Username }}</div></div><div class="bet-content" layout="column"><div \nclass="content-header">Nh\xF3m</div><div class="bid-info" ng-repeat="account in contract.content">\n{{ account.Level | group }}</div></div><div class="bet-content" layout="column" \nng-repeat="bet in contract.content[0].ShareHolders" \nng-class="{\'last\': $index === contract.content[0].ShareHolders.length - 1 }"><div class="content-header values">\n{{ bet.BetType | bet }}</div><div class="bid-info values" ng-repeat="account in contract.content" layout="row" \nlayout-align="space-between center"><md-icon md-font-icon="icon-checkbox-marked-outline" class="s12 md-accent" \nng-if="account.ShareHolders[$parent.$index].Fixed"></md-icon><md-icon md-font-icon="icon-checkbox-blank-outline" \nclass="s12 md-warn" ng-if="!account.ShareHolders[$parent.$index].Fixed"></md-icon><span>\n{{ account.ShareHolders[$parent.$index].Percent }}</span> <span class="price">\n{{ account.ShareHolders[$parent.$index].Price | currency : \'\' : 0 }}</span></div></div></div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/contract.template.saba.html', '<div class="" layout="column"><div layout="column" class="content-wraper"><div layout="column" class="wraper"><div \nclass="content" layout="row"><div class="bet-content" layout="column"><div class="content-header">T\xE0i kho\u1EA3n</div><div \nclass="bid-info" ng-repeat="account in SabaContractData">{{ account.Username }}</div></div><div class="bet-content" \nlayout="column"><div class="content-header">Nh\xF3m</div><div class="bid-info" ng-repeat="account in SabaContractData">\n{{ account.Level | group }}</div></div><div class="bet-content" layout="column"><div class="content-header values">\nKi\u1EC3u th\u1EA7u</div><div class="bid-info values" ng-repeat="account in SabaContractData"><md-icon \nmd-font-icon="icon-checkbox-marked-outline" class="s12 md-accent" ng-if="account.Fixed"></md-icon><md-icon \nmd-font-icon="icon-checkbox-blank-outline" class="s12 md-warn" ng-if="!account.Fixed"></md-icon></div></div><div \nclass="bet-content" layout="column"><div class="content-header values">T\u1EF7 l\u1EC7 th\u1EA7u</div><div class="bid-info values" \nng-repeat="account in SabaContractData"><span>{{ account.Percent }}</span></div></div><div class="bet-content last" \nlayout="column"><div class="content-header values">Hoa h\u1ED3ng 1</div><div class="bid-info values" \nng-repeat="account in SabaContractData"><span>{{ account.CommissionPercent1 }}</span></div></div><div \nclass="bet-content last" layout="column"><div class="content-header values">Hoa h\u1ED3ng 2</div><div \nclass="bid-info values" ng-repeat="account in SabaContractData"><span>{{ account.CommissionPercent2 }}</span></div>\n</div></div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/contract.template.wm-casino.html', '<div class="" layout="column"><div layout="column" class="content-wraper"><div layout="column" class="wraper"><div \nclass="content" layout="row"><div class="bet-content" layout="column"><div class="content-header">T\xE0i kho\u1EA3n</div><div \nclass="bid-info" ng-repeat="account in WMContractData">{{ account.Username }}</div></div><div class="bet-content" \nlayout="column"><div class="content-header">Nh\xF3m</div><div class="bid-info" ng-repeat="account in WMContractData">\n{{ account.Level | group }}</div></div><div class="bet-content" layout="column"><div class="content-header values">\nKi\u1EC3u th\u1EA7u</div><div class="bid-info values" ng-repeat="account in WMContractData"><md-icon \nmd-font-icon="icon-checkbox-marked-outline" class="s12 md-accent" ng-if="account.Fixed"></md-icon><md-icon \nmd-font-icon="icon-checkbox-blank-outline" class="s12 md-warn" ng-if="!account.Fixed"></md-icon></div></div><div \nclass="bet-content" layout="column"><div class="content-header values">T\u1EF7 l\u1EC7 th\u1EA7u</div><div class="bid-info values" \nng-repeat="account in WMContractData"><span>{{ account.Percent }}</span></div></div><div class="bet-content last" \nlayout="column"><div class="content-header values">Hoa h\u1ED3ng</div><div class="bid-info values" \nng-repeat="account in WMContractData"><span>{{ account.CommissionPercent }}</span></div></div></div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/share-holder-template-legend-casino.html', '<div layout="row"><div layout="column" class="wm-casino-share-holder" ng-if="LegendCasinoShareHolder !== undefined"><div\n layout="row"><div flex="50">{{ item.Level | group }}</div><div><input type="number" step="0.1" name="share" \nselect-on-click ng-model="LegendCasinoShareHolder.Percent" min="0" max="{{ LegendCasinoShareHolder.Parent.Percent }}" \nng-readonly="!hasWritePermission" ng-change="LegendCasinoChangePercent()"></div></div><div layout="row" \nlayout-align="start center"><div flex="50">C\xF2n l\u1EA1i</div><div><input type="number" step="0.1" name="share" \nselect-on-click ng-model="LegendCasinoShareHolder.ParentPercent" min="0" \nng-readonly="{{ LegendCasinoShareHolder.Parent.Fixed || !hasWritePermission }}"></div></div><div layout="row" \nlayout-align="start center"><div flex="50">M\u1EB7c \u0111\u1ECBnh</div><div class="text-bold">\n{{ LegendCasinoShareHolder.Parent.Percent }}</div></div><div layout="row" layout-align="start center"><div flex="50">\nHoa h\u1ED3ng (max: {{LegendCasinoShareHolder.Parent.CommissionPercent}}%)</div><div><select \nng-options="item as item for item in commissionOptions track by item" \nng-model="LegendCasinoShareHolder.CommissionPercent" ng-readonly="{{ !hasWritePermission }}"></select></div></div><div \nlayout="row" layout-align="start center" ng-show="item.Level !== 9"><div flex="50">Ki\u1EC3u th\u1EA7u</div><div><md-checkbox \nmd-no-ink aria-label="Checkbox" ng-model="LegendCasinoShareHolder.Fixed" class="md-accent" \nng-checked="{{ LegendCasinoShareHolder.Fixed }}" ng-disabled="!hasWritePermission"><span \nng-if="LegendCasinoShareHolder.Fixed" class="share fixed">C\u1EE9ng</span> <span ng-if="!LegendCasinoShareHolder.Fixed" \nclass="share">M\u1EC1m</span></md-checkbox></div></div></div><div layout="column" class="wm-casino-share-holder" \nng-if="PresidentialGames !== undefined" hide><div layout="row"><h4>C\xE0i \u0111\u1EB7t c\u01B0\u1EE3c b\u1EA7u c\u1EED</h4></div><div layout="row"><div \nflex="60">\u0110\u1EB7t c\u01B0\u1EE3c t\u1ED1i thi\u1EC3u</div><div><input type="text" ng-currency name="share" select-on-click \nng-model="PresidentialGames.MinBet" ng-blur="PresidentialChange(\'min\')" ng-readonly="!hasWritePermission"></div></div>\n<div layout="row"><div flex="60">\u0110\u1EB7t c\u01B0\u1EE3c t\u1ED1i \u0111a</div><div><input type="text" ng-currency name="share" select-on-click \nng-model="PresidentialGames.MaxBet" ng-blur="PresidentialChange(\'max\')" ng-readonly="!hasWritePermission"></div></div>\n<div layout="row" layout-align="start center"><div flex="60">\nHoa h\u1ED3ng c\u01B0\u1EE3c \u0110\u1EA3ng (max: {{PresidentialGames.Parent.HandicapCommission}}%)</div><div><select \nng-options="item as item for item in HandicapOptions track by item" ng-model="PresidentialGames.HandicapCommission" \nng-readonly="{{ !hasWritePermission }}"></select></div></div><div layout="row" layout-align="start center"><div \nflex="60">Hoa h\u1ED3ng c\u01B0\u1EE3c \u1EE8ng vi\xEAn (max: {{PresidentialGames.Parent.OutrightCommission}}%)</div><div><select \nng-options="item as item for item in OutrightOptions track by item" ng-model="PresidentialGames.OutrightCommission" \nng-readonly="{{ !hasWritePermission }}"></select></div></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/share-holder-template-legend.html', '<div class="simple-table-container"><div layout="column" class="member-template" \nng-if="item.Level === 9 && item.LegendPayoutTypes" hide><div>T\xE0i kho\u1EA3n h\u1ED9i vi\xEAn <b>{{ item.Username }}</b>\n \u0111ang s\u1EED d\u1EE5ng chu\u1EA9n c\u01B0\u1EE3c: <b>{{ item.LegendPayoutTypes.Title }}</b><md-button class="md-warn" \nng-click="legendChangePayoutTypes()" ng-disabled="submitting || legendPayoutTemplates.length">Thay \u0111\u1ED5i</md-button></div>\n<div ng-if="legendPayoutTemplates.length" layout="row"><div><md-input-container><label>Chu\u1EA9n c\u01B0\u1EE3c</label><md-select \nng-model="templateId"><md-option ng-repeat="template in legendPayoutTemplates" ng-value="template" \nng-selected="template.Id === item.LegendPayoutTypes.Id">{{template.Title}}</md-option></md-select></md-input-container>\n</div><div class="padding-top-8"><md-button class="md-accent" ng-click="legendViewTemplate(templateId)">Xem th\xF4ng s\u1ED1\n</md-button></div><div class="padding-top-8"><md-button class="md-accent md-raised" \nng-click="legendAssignPayout(templateId)" ng-disabled="submitting || templateId.Id === item.LegendPayoutTypes.Id">\nX\xE1c nh\u1EADn</md-button></div></div></div><table class="simple" ms-responsive-table ng-repeat="game in legendShareHolders">\n<thead><tr><th><div layout="row" layout-align="space-between center" class="game-header"><md-button \nclass="md-icon-button" ng-click="legendCopyGameType(game.group[0])" ng-if="hasWritePermission"><md-icon \nmd-font-icon="icon-content-copy" class="s16"></md-icon></md-button>{{ game.group[0].GameType | legendGame }} <span flex>\n</span><md-button ng-if="$index === 0 && hasWritePermission && item.Level !== 9" class="min-price md-accent" \nng-click="legendUpdateMinMaxPrice(\'min\')">Gi\xE1 t\u1ED1i thi\u1EC3u</md-button><md-button \nng-if="$index === 0 && hasWritePermission && item.Level !== 9" class="min-price md-warn" \nng-click="legendUpdateMinMaxPrice(\'max\')">Gi\xE1 t\u1ED1i \u0111a</md-button></div></th></tr></thead><tbody><tr><td><div \nlayout="row" layout-align="left center"><div class="share-content first-class" layout="column"><div class="head-line">\nKi\u1EC3u c\u01B0\u1EE3c</div><div class="base-line">{{ item.Level | group }}</div><div class="base-line">C\xF2n l\u1EA1i</div><div \nclass="base-line" ng-hide="item.Level === 9">Ki\u1EC3u th\u1EA7u</div><div class="base-line">Th\u1EA7u m\u1EB7c \u0111\u1ECBnh</div><div \nclass="base-line">Gi\xE1 b\xE1n</div><div class="base-line" ng-hide="item.Level === 9">Min/Max</div><div class="base-line">\nTr\u1EA3 th\u01B0\u1EDFng</div></div><div ng-repeat="bet in game.group" class="share-content" ng-class="{\'last-child\': $index === 16}">\n<div layout="column"><div class="head-line">{{ bet.BetType | bet : false : game.group[0].GameType }}<md-icon \nmd-font-icon="icon-content-copy" class="s16" ng-if="$index === 0 && hasWritePermission" \nng-click="legendCopyBetType(bet)"></md-icon></div><div layout="row" class="base-line"><div flex class="percent"><input \ntype="number" step="0.1" ng-model="bet.Percent" select-on-click tabindex="{{ ($parent.$index + 1) * 15 + $index + 1}}" \nng-readonly="item.Level === 9 || !hasWritePermission" ng-change="lotteryChangePercent(bet)" \nng-class="{\'highlight\' : bet.highlight}"></div></div><div layout="row" class="base-line"><div flex class="percent">\n<input type="number" step="0.1" ng-model="bet.ParentPercent" ng-readonly="{{bet.ParentBaseFixed}}"></div></div><div \nlayout="row" class="base-line" ng-hide="item.Level === 9"><div flex class="percent"><md-checkbox md-no-ink \naria-label="Checkbox" ng-model="bet.Fixed" class="md-accent" ng-checked="{{bet.Fixed}}" \nng-disabled="!hasWritePermission"><span ng-if="bet.Fixed" class="share fixed">C\u1EE9ng</span> <span ng-if="!bet.Fixed" \nclass="share">M\u1EC1m</span></md-checkbox></div></div><div layout="row" class="base-line"><div flex class="percent"><input \nreadonly="readonly" type="number" ng-model="bet.ParentBasePercent"></div></div><div layout="row" class="base-line"><div \nflex class="percent"><input type="tel" class="price" ng-model="bet.Price" select-on-click ng-currency \ntabindex="{{ ($parent.$index + 1) * 200 + $index + 1}}" ng-readonly="!hasWritePermission || item.Level === 9" \nng-change="lotteryChangePrice(bet)" ng-blur="lotteryCheckPrice(bet)" ng-class="{\'highlight\' : bet.PriceChange}"></div>\n</div><div layout="row" class="base-line" ng-hide="item.Level === 9"><div flex class="percent min">\n{{ bet.MinPrice | currency : \'\' : 0 }}/{{ bet.MaxPrice | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="base-line"><div flex class="percent">{{ bet.Payouts | currency : \'\' : 0 }}</div></div></div></div></div></td>\n</tr></tbody></table></div>');
    $templateCache.put('app/main/account/agency/dialog/template/share-holder-template-lottery.html', '<div class="simple-table-container"><div layout="column" class="member-template" \nng-if="item.Level === 9 && item.PayoutTypes"><div>T\xE0i kho\u1EA3n h\u1ED9i vi\xEAn <b>{{ item.Username }}</b>\n \u0111ang s\u1EED d\u1EE5ng chu\u1EA9n c\u01B0\u1EE3c: <b>{{ item.PayoutTypes.Title }}</b><md-button class="md-warn" \nng-click="lotteryChangePayoutTypes()" ng-disabled="submitting || payoutTemplates.length">Thay \u0111\u1ED5i</md-button></div><div \nng-if="payoutTemplates.length" layout="row"><div><md-input-container><label>Chu\u1EA9n c\u01B0\u1EE3c</label><md-select \nng-model="templateId"><md-option ng-repeat="template in payoutTemplates" ng-value="template" \nng-selected="template.Id === item.PayoutTypes.Id">{{template.Title}}</md-option></md-select></md-input-container></div>\n<div class="padding-top-8"><md-button class="md-accent" ng-click="lotteryViewTemplate(templateId)">Xem th\xF4ng s\u1ED1\n</md-button></div><div class="padding-top-8"><md-button class="md-accent md-raised" \nng-click="lotteryAssignPayout(templateId)" ng-disabled="submitting || templateId.Id === item.PayoutTypes.Id">X\xE1c nh\u1EADn\n</md-button></div></div></div><table class="simple" ms-responsive-table ng-repeat="game in lotteryShareHolders"><thead>\n<tr><th><div layout="row" layout-align="space-between center" class="game-header"><md-button class="md-icon-button" \nng-click="lotteryCopyGameType(game.group[0])" ng-if="hasWritePermission"><md-icon md-font-icon="icon-content-copy" \nclass="s16"></md-icon></md-button>{{ game.group[0].GameType | gameXs }} <span flex></span><md-button \nng-if="$index === 0 && hasWritePermission" class="min-price md-accent" ng-click="lotteryUpdateMinMaxPrice(\'min\')">\nGi\xE1 t\u1ED1i thi\u1EC3u</md-button><md-button ng-if="$index === 0 && hasWritePermission" class="min-price md-warn" \nng-click="lotteryUpdateMinMaxPrice(\'max\')">Gi\xE1 t\u1ED1i \u0111a</md-button></div></th></tr></thead><tbody><tr><td><div \nlayout="row" layout-align="left center"><div class="share-content first-class"><div class="head-line">Ki\u1EC3u c\u01B0\u1EE3c</div>\n<div class="base-line">{{ item.Level | group }}</div><div class="base-line">C\xF2n l\u1EA1i</div><div class="base-line" \nng-hide="item.Level === 9">Ki\u1EC3u th\u1EA7u</div><div class="base-line">Th\u1EA7u m\u1EB7c \u0111\u1ECBnh</div><div class="base-line">Gi\xE1 b\xE1n</div>\n<div class="base-line">Min/Max</div><div class="base-line">Tr\u1EA3 th\u01B0\u1EDFng</div></div><div ng-repeat="bet in game.group" \nclass="share-content" ng-class="{\'last-child\': $index === 13}"><div layout="column"><div class="head-line">\n{{ bet.BetType | bet }}<md-icon md-font-icon="icon-content-copy" class="s16" ng-if="$index === 0 && hasWritePermission" \nng-click="lotteryCopyBetType(bet)"></md-icon></div><div layout="row" class="base-line"><div flex class="percent"><input \ntype="number" step="0.1" ng-model="bet.Percent" select-on-click tabindex="{{ ($parent.$index + 1) * 15 + $index + 1}}" \nng-readonly="item.Level === 9 || !hasWritePermission" ng-change="lotteryChangePercent(bet)" \nng-class="{\'highlight\' : bet.highlight}"></div></div><div layout="row" class="base-line"><div flex class="percent">\n<input type="number" step="0.1" ng-model="bet.ParentPercent" ng-readonly="{{bet.ParentBaseFixed}}"></div></div><div \nlayout="row" class="base-line" ng-hide="item.Level === 9"><div flex class="percent"><md-checkbox md-no-ink \naria-label="Checkbox" ng-model="bet.Fixed" class="md-accent" ng-checked="{{bet.Fixed}}" \nng-disabled="!hasWritePermission"><span ng-if="bet.Fixed" class="share fixed">C\u1EE9ng</span> <span ng-if="!bet.Fixed" \nclass="share">M\u1EC1m</span></md-checkbox></div></div><div layout="row" class="base-line"><div flex class="percent"><input \nreadonly="readonly" type="number" ng-model="bet.ParentBasePercent"></div></div><div layout="row" class="base-line"><div \nflex class="percent"><input type="tel" class="price" ng-model="bet.Price" select-on-click ng-currency \ntabindex="{{ ($parent.$index + 1) * 200 + $index + 1}}" ng-readonly="!hasWritePermission || bet.BetType === 20" \nng-change="lotteryChangePrice(bet)" ng-blur="lotteryCheckPrice(bet)" ng-class="{\'highlight\' : bet.PriceChange}"></div>\n</div><div layout="row" class="base-line"><div flex class="percent min">\n{{ bet.MinPrice | currency : \'\' : 0 }}/{{ bet.MaxPrice | currency : \'\' : 0 }}</div></div><div layout="row" \nclass="base-line"><div flex class="percent">{{ bet.Payouts | currency : \'\' : 0 }}</div></div></div></div></div></td>\n</tr></tbody></table></div>');
    $templateCache.put('app/main/account/agency/dialog/template/share-holder-template-saba.html', '<div layout="column" class="wm-casino-share-holder" ng-if="SabaShareHolder !== undefined"><div layout="row"><div \nflex="50">{{ item.Level | group }}</div><div><input type="number" step="0.1" name="share" select-on-click \nng-model="SabaShareHolder.Percent" min="0" max="{{ SabaShareHolder.Parent.Percent }}" ng-readonly="!hasWritePermission" \nng-change="sabaChangePercent()"></div></div><div layout="row" layout-align="start center"><div flex="50">C\xF2n l\u1EA1i</div>\n<div><input type="number" step="0.1" name="share" select-on-click ng-model="SabaShareHolder.ParentPercent" min="0" \nng-readonly="{{ SabaShareHolder.Parent.Fixed || !hasWritePermission }}"></div></div><div layout="row" \nlayout-align="start center"><div flex="50">M\u1EB7c \u0111\u1ECBnh</div><div class="text-bold">{{ SabaShareHolder.Parent.Percent }}\n</div></div><div layout="row" layout-align="start center"><div flex="50">\nHoa h\u1ED3ng 1 (max: {{SabaShareHolder.Parent.CommissionPercent1}}%)</div><div><select \nng-options="item as item for item in sabaOptions1 track by item" ng-model="SabaShareHolder.CommissionPercent1" \nng-readonly="{{ !hasWritePermission }}"></select></div></div><div layout="row" layout-align="start center"><div \nflex="50">Hoa h\u1ED3ng 2 (max: {{SabaShareHolder.Parent.CommissionPercent2}}%)</div><div><select \nng-options="item as item for item in sabaOptions2 track by item" ng-model="SabaShareHolder.CommissionPercent2" \nng-readonly="{{ !hasWritePermission }}"></select></div></div><div layout="row" layout-align="start center" \nng-show="item.Level !== 9"><div flex="50">Ki\u1EC3u th\u1EA7u</div><div><md-checkbox md-no-ink aria-label="Checkbox" \nng-model="SabaShareHolder.Fixed" class="md-accent" ng-checked="{{ SabaShareHolder.Fixed }}" \nng-disabled="!hasWritePermission"><span ng-if="SabaShareHolder.Fixed" class="share fixed">C\u1EE9ng</span> <span \nng-if="!SabaShareHolder.Fixed" class="share">M\u1EC1m</span></md-checkbox></div></div></div>');
    $templateCache.put('app/main/account/agency/dialog/template/share-holder-template-wm-casino.html', '<div layout="column" class="wm-casino-share-holder" ng-if="WMShareHolder !== undefined"><div layout="row"><div \nflex="50">{{ item.Level | group }}</div><div><input type="number" step="0.1" name="share" select-on-click \nng-model="WMShareHolder.Percent" min="0" max="{{ WMShareHolder.Parent.Percent }}" ng-readonly="!hasWritePermission" \nng-change="wmCasinoChangePercent()"></div></div><div layout="row" layout-align="start center"><div flex="50">C\xF2n l\u1EA1i\n</div><div><input type="number" step="0.1" name="share" select-on-click ng-model="WMShareHolder.ParentPercent" min="0" \nng-readonly="{{ WMShareHolder.Parent.Fixed || !hasWritePermission }}"></div></div><div layout="row" \nlayout-align="start center"><div flex="50">M\u1EB7c \u0111\u1ECBnh</div><div class="text-bold">{{ WMShareHolder.Parent.Percent }}</div>\n</div><div layout="row" layout-align="start center"><div flex="50">\nHoa h\u1ED3ng (max: {{WMShareHolder.Parent.CommissionPercent}}%)</div><div><select \nng-options="item as item for item in commissionOptions track by item" ng-model="WMShareHolder.CommissionPercent" \nng-readonly="{{ !hasWritePermission }}"></select></div></div><div layout="row" layout-align="start center" \nng-show="item.Level !== 9"><div flex="50">Ki\u1EC3u th\u1EA7u</div><div><md-checkbox md-no-ink aria-label="Checkbox" \nng-model="WMShareHolder.Fixed" class="md-accent" ng-checked="{{ WMShareHolder.Fixed }}" \nng-disabled="!hasWritePermission"><span ng-if="WMShareHolder.Fixed" class="share fixed">C\u1EE9ng</span> <span \nng-if="!WMShareHolder.Fixed" class="share">M\u1EC1m</span></md-checkbox></div></div></div>');
    $templateCache.put('app/main/accounting/casino789/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.GameType)">{{ item.GameType | LegendGame }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType)">{{ item.Company | currency : \'\' : 0 }}\n</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/casino789/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Game</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th \nrowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr>\n<tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GameType | LegendGame }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GrossCommission | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Player.WinLose < 0}">\n<a ng-click="vm.classify(item.GameType)">{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/casino789/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Game</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th \nrowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng\n</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GameType | LegendGame }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.GrossCommission | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="highlight sum" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.My.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.My.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : item.My.Commission < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.My.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.My.Total < 0}"><a ng-click="vm.classify(item.GameType)">{{ item.My.Total | currency : \'\' : 0 }}\n</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.GrossCommission | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : vm.SumTotal.Player.Commission < 0}">{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">{{vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">{{ vm.SumTotal.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">{{ vm.SumTotal.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/casino789/member/presidential/presidential.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><table class="simple wm-casino" ms-responsive-table \nng-if="vm.members.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>C\u01B0\u1EE3c/T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th \nng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.members"><td><div \nclass="padding-4 text-bold">{{ item.BetNumber }}</div><div class="padding-4">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td class="game-bet"><div \nng-bind-html="item.BetType | candidate"></div><div class="padding-4" ng-class="{\'warn\' : item.Odds < 0 }">\n{{ item.Odds }}</div></td><td class="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div \nclass="font-size-10 padding-4">{{ item.IP }}</div></td><td class="text-center"><div class="padding-4 text-bold" \nng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.CommissionPercent }}% - {{ item.Commission | currency : \'\' : 0 }}</div></td><td class="share" \nng-if="$root.User.Level <= 5"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.WinLose < 0 }">\n{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.WinLose < 0 }">\n{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting">\n<tr><td colspan="12" ng-click="vm.loadMemberDetails(vm.responseByMember[vm.responseByMember.length - 1].Id)">Xem ti\u1EBFp\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/accounting/casino789/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3" \nng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th \ncolspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\nHoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th \nng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span>\n</div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight" \nng-class="{ \'warn\' : item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">\n{{ item.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum" \nng-class="{ \'warn\' : item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.WinLose < 0 }">{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.Commission < 0 }">{{ item.My.Commission | currency : \'\' : 0 }}</td><td \nclass="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="12" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td>T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">\n{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">\n{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Commission < 0 }">{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/casino789/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2"><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th \nrowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td>\n<td class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td\n class="sum" ng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.Commission < 0 }">{{ item.Company.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot ng-if="vm.hasRecord"><tr><td colspan="12" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td>T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Commission < 0 }">\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/casino789/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Game</th><th><div class="table-header"><span \nclass="column-title">\u0110\u01A1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports"><td><a \nng-click="vm.viewMemberReport(item)">{{ vm.report.name }}</a></td><td>{{ item.GameType | LegendGame }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td>\n{{ item.NetAmount | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td></td><td>{{ vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'NetAmount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/group/general/general.html', '<div ng-if="vm.report.level === 2" ng-include="\'app/main/accounting/combination/group/general/template/company.html\'">\n</div><div ng-if="vm.report.level !== 2" \nng-include="\'app/main/accounting/combination/group/general/template/agency.html\'"></div>');
    $templateCache.put('app/main/accounting/legendary/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">\nC\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports.Records"><td><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td></td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/accounting/legendary/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2" class="head">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr>\n<tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">\nTh\u1EAFng thua</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th>\n<div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td class="head"><a ng-click="vm.viewReport(item)">{{ item.Username }}</a>\n</td><td>{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}\n</td><td class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}\n</td><td class="sum" ng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ item.Company.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="12" \nclass="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td class="head">T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/legendary/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">{{vm.report.name}}</a></td><td>\n{{item.GameType | legendGame }} - {{item.BetType | bet : false : item.GameType }}</td><td>\n{{item.Quantity | currency : \'\' : 0 }}</td><td>{{item.Point | currency : \'\' : 0 }}</td><td>\n{{item.Amount | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : item.WinLose < 0 }">\n{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{vm.dataReports | sumOfValue : \'Point\' | currency : \'\' : 0 }}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/legendary/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}\n</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : bet.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0 }}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}\n</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/legendary/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : bet.Agent.WinLose < 0}">\n<a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}\n</a></td><td class="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0 }}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}\n</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/legendary/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nTh\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}\n</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td class="highlight sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.WinLose | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Commission | currency : \'\' : 0 }}</a>\n</td><td class="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Total | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0 }}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{item.GameType | legendGame }}</td>\n<td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.WinLose < 0}">{{ item.SumByGame.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Commission < 0}">{{ item.SumByGame.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Total < 0}">{{ item.SumByGame.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">\n{{ vm.SumTotal.My.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">\n{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">\n{{ vm.SumTotal.My.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/group/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nname="dateField" md-min-date="vm.minDate" md-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" ng-disabled="vm.submitting">X\xE1c nh\u1EADn\n</md-button></div></div><div layout="row" layout-align="start start" class="padding-top-16" hide><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p t\xE0i kho\u1EA3n</md-radio-button><md-radio-button value="1">\nPh\xE2n lo\u1EA1i s\u1EA3n ph\u1EA9m</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" \nng-click="vm.loadReport()" ng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" \nlayout-align="start center"><div class="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span \nng-repeat="b in vm.breadcrumbs" ng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon \nmd-font-icon="icon-chevron-right" class="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/accounting/combination/win-lose/classification/classification.html', '<div ng-if="$root.User.Level === 1" \nng-include="\'app/main/accounting/combination/win-lose/classification/template/company.html\'"></div><div \nng-if="$root.User.Level === 5" \nng-include="\'app/main/accounting/combination/win-lose/classification/template/agent.html\'"></div><div \nng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/accounting/combination/win-lose/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/accounting/combination/win-lose/general/general.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/accounting/combination/win-lose/general/template/company.html\'"></div><div \nng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/accounting/combination/win-lose/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/accounting/combination/win-lose/general/template/member.html\'">\n</div>');
    $templateCache.put('app/main/accounting/combination/win-lose/navigation/alarm-setting-dialog.html', '<md-dialog aria-label="alarmSetting" class="alarm-setting"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<h2>Alarm Setting</h2><span flex></span><md-button class="md-icon-button" ng-click="close()"><md-icon \nmd-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><p>B\u1EADt c\u1EA3nh b\xE1o khi h\u1ED9i vi\xEAn th\u1EAFng thua:</p><div layout="column"><div layout="row" \nclass="margin-bottom-16"><div flex="30">L\u1EDBn h\u01A1n</div><div flex="70"><input type="tel" name="WinMax" \nng-model="alarm.WinMax" autocomplete="off" ng-currency></div></div><div layout="row" class="margin-bottom-16"><div \nflex="30">Ho\u1EB7c Nh\u1ECF h\u01A1n</div><div flex="70"><input type="tel" name="LoseMax" ng-model="alarm.LoseMax" autocomplete="off" \nng-currency class="md-warn"></div></div></div><p>Ho\u1EB7c Turnover:</p><div layout="column"><div layout="row" \nclass="margin-bottom-16"><div flex="30">L\u1EDBn h\u01A1n</div><div flex="70"><input type="tel" name="WinMax" \nng-model="alarm.TurnOverMax" autocomplete="off" ng-currency></div></div><div layout="row" class="margin-bottom-16"><div \nflex="30">Ho\u1EB7c Nh\u1ECF h\u01A1n</div><div flex="70"><input type="tel" name="LoseMax" ng-model="alarm.TurnOverMin" \nautocomplete="off" ng-currency class="md-warn"></div></div><div layout="row" class="margin-bottom-16"><div flex="30">\nNgo\u1EA1i tr\u1EEB</div><div flex="70"><textarea ng-model="alarm.Excludes" name="string"></textarea></div></div></div><div \nlayout="column"><div layout="row" class="margin-bottom-16"><div flex="30">Refresh Interval</div><div flex="70"><input \ntype="tel" name="Refresh" ng-model="alarm.Refresh" autocomplete="off" ng-currency ng-blur="updateRefresh()"></div></div>\n<div layout="row" class="refresh" flex-offset="30"><span>Value = 0 will be disabled</span></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="cancel()" class="md-warn">Disable All\n</md-button><span flex></span><md-button ng-click="update()" class="md-accent">OK</md-button></md-dialog-actions>\n</md-dialog>');
    $templateCache.put('app/main/accounting/combination/win-lose/navigation/navigation.html', '<div layout="column"><div layout="column" class="padding-bottom-8"><div layout="row" layout-xs="column" \nlayout-align="start start"><div layout="row" layout-align-xs="space-between center"><div class="padding-right-8"><label>\nT\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus name="dateField" md-min-date="vm.minDate" \nmd-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" ng-change="vm.changeDate($event)"></md-datepicker></div><div \nclass="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label><md-datepicker ng-model="vm.report.to" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" md-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div>\n<div layout="row" ng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div \nclass="menu-button"><md-menu md-position-mode="right bottom"><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu md-position-mode="right bottom"><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button \nng-click="vm.selectAllProduct($index)" md-prevent-menu-close="md-prevent-menu-close"><md-icon \nmd-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item ng-repeat="item in vm.productions"><md-button ng-click="vm.selectProduct(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="space-between center" class="padding-top-16" flex="100"><div\n layout="row"><div><md-radio-group ng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button>\n<md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div><div><md-button \nclass="md-raised md-accent" ng-click="vm.loadReport()" ng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div><div \nflex></div><div><md-button class="md-icon-button button-sound" ng-click="vm.alarmSetting($event)" \nng-class="{\'md-accent\' : $root.alsc}" ng-if="$root.User.Level === 1"><md-icon md-font-icon="icon-volume-off" \nng-if="!$root.alsc"></md-icon><md-icon md-font-icon="icon-volume" ng-if="$root.alsc"></md-icon></md-button><md-button \nclass="md-accent" ng-disabled="vm.submitting" ngclipboard data-clipboard-target="#portView">Copy</md-button></div></div>\n</div><div layout="row" layout-align="start center"><div class="breadcrumb" ng-show="vm.breadcrumbs.length">\nXem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" ng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">\n{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" class="s16" ng-hide="$last"></md-icon></span></div></div>\n</div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear>');
    $templateCache.put('app/main/accounting/saba/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3" \nng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th \ncolspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\nHoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th \nng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span>\n</div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight" \nng-class="{ \'warn\' : item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">\n{{ item.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum" \nng-class="{ \'warn\' : item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.WinLose < 0 }">{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.Commission < 0 }">{{ item.My.Commission | currency : \'\' : 0 }}</td><td \nclass="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="12" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">\n{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">\n{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Commission < 0 }">{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2"><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th \nrowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td>\n<td class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td\n class="sum" ng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.Commission < 0 }">{{ item.Company.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot ng-if="vm.hasRecord"><tr><td colspan="15" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Commission < 0 }">\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Nh\xF3m</th><th><div class="table-header"><span \nclass="column-title">\u0110\u01A1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports"><td><a \nng-click="vm.viewMemberReport(item)">{{ vm.report.name }}</a></td><td>{{ item.SportGroup | SportGroup }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td>\n{{ item.NetAmount | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'NetAmount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/traditional/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a>\n</td><td class="sum highlight" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0 }}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td>\n<td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/traditional/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : bet.Agent.WinLose < 0}">\n<a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}\n</a></td><td class="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0 }}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td>\n<td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/traditional/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nTh\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a>\n</td><td class="highlight sum" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0 }}</a></td><td \nclass="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.My.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.My.Total | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0 }}</a></td></tr><tr \nclass="sumany"><td>T\u1ED5ng c\u1ED9ng {{item.GameType | gameXs }}</td><td>\n{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.WinLose < 0}">\n{{ item.SumByGame.My.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Commission < 0}">\n{{ item.SumByGame.My.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Total < 0}">\n{{ item.SumByGame.My.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">{{vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">{{ vm.SumTotal.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">{{ vm.SumTotal.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/member/template/arcadia-gaming.html', '<div layout="column" layout-align="space-between end" class="arcadia-gaming"><div class="system-parlay" layout="row">\n<div class="box" ng-click="vm.getRNGBetItems(item)" ng-class="{\'processing\' : item.betItemUpdating}"><md-icon \nng-if="!item.showBetItem && !item.betItemUpdating" md-font-icon="icon-menu-down" class="s20"></md-icon><md-icon \nng-if="item.showBetItem && !item.betItemUpdating" md-font-icon="icon-menu-right" class="s20"></md-icon>\n<md-progress-circular ng-show="item.betItemUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="bet-type">{{ item.BetTypeTrans }}</span></div><div>{{ item.SportType | sabaSportsBet }}</div><div \nclass="table-game">Table Games</div><div class="parlay-data" layout="column"><div class="parlay-wrap" \nng-repeat="bet in item.RNGBetItems" ng-show="item.showBetItem"><div class="parlay" layout="column"><div \nclass="sport-type"><span>{{ bet.BetTypeTrans }}</span></div><div class="bet-team" layout="column"><div layout="row" \nclass="parlay-hdp"><span>Ti\u1EC1n c\u01B0\u1EE3c: </span><span class="favorite">{{bet.Stake | currency : \'\' : 0 }}</span> <span \nclass="favorite" ng-hide="bet.Stake = bet.BetAmount">/ {{bet.BetAmount | currency : \'\' : 0 }}</span></div></div><div \nclass="league">Th\u1EAFng thua: {{ bet.WinLose | currency : \'\' : 0 }}</div><div class="match-at">\n{{ bet.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ bet.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/dialog.parlay.html', '<md-dialog aria-label="saba-parlay" class="saba-parlay-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>C\xE1 c\u01B0\u1EE3c t\u1ED5ng h\u1EE3p chi ti\u1EBFt</h2><span flex></span><md-button class="md-icon-button" \nng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content><div class="md-dialog-content"><div><table class="simple"><thead><tr><th>L\u1EF1a ch\u1ECDn</th>\n<th>T\u1EF7 l\u1EC7 c\u01B0\u1EE3c</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody ng-if="MixParlay"><tr>\n<td><div class="parlay-data"><div class="parlay" ng-repeat="item in ticket.ParlayData"><div class="content"><span>\n{{item.HomeTeamNameEn}}</span> - <span>{{item.AwayTeamNameEn}}</span></div></div></div></td><td><div class="odd" \nng-class="{\'warn\' : ticket.nOdds < 0 }">{{ ticket.nOdds | currency : \'\' : 4 }}</div></td><td><div class="stake">\n{{ ticket.Stake | currency : \'\' : 0 }}</div></td><td><div class="win-lose" ng-class="{\'warn\' : ticket.WinLose < 0 }">\n{{ ticket.WinLose | currency : \'\' : 0 }}</div></td><td><div class="ticket-status">\n{{ ticket.TicketStatus | SabaTicketStatus }}</div></td></tr></tbody><tbody ng-if="!MixParlay"><tr \nng-repeat="ticket in SystemParlay"><td><div class="parlay-data"><div class="parlay" \nng-repeat="item in ticket.SystemParlayDetail"><div class="content"><span>{{item.HomeTeamNameEn}}</span> - <span>\n{{item.AwayTeamNameEn}}</span></div></div></div></td><td><div class="odd" ng-class="{\'warn\' : ticket.nOdds < 0 }">\n{{ ticket.nOdds | currency : \'\' : 4 }}</div></td><td><div class="stake">{{ ticket.Stake | currency : \'\' : 0 }}</div>\n</td><td><div class="win-lose" ng-class="{\'warn\' : ticket.WinLose < 0 }">{{ ticket.WinLose | currency : \'\' : 0 }}</div>\n</td><td><div class="ticket-status">{{ ticket.TicketStatus | SabaTicketStatus }}</div></td></tr></tbody><tfoot \nng-if="!MixParlay"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ SystemParlay | sumByKey : \'Stake\' | currency : \'\' : 0 }}\n</td><td>{{ SystemParlay | sumByKey : \'WinLose\' | currency : \'\' : 0 }}</td><td></td></tr></tfoot></table></div></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/accounting/saba/member/template/keno.html', '<div layout="column" layout-align="space-between end" class="saba-club"><div class="keno-bet-type">{{ item.BetTeam }}\n</div><div class="saba-sport-type capitalize">{{ item.LotteryBetType }}</div><div layout="row" class="keno-game"><div \nclass="keno-game-type">{{ item.SportType | sabaSportsBet }}</div><div class="keno-bet-type">{{ item.BetTypeTrans }}\n</div><div class="keno-match-id">[{{ item.MatchId }}]</div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/mix-parlay.html', '<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="vm.showParlayData(item)" ng-class="{\'processing\' : item.parlayUpdating}"><md-icon \nng-if="!item.parlayUpdating && !item.showParlay" md-font-icon="icon-menu-right" class="s20"></md-icon><md-icon \nng-if="!item.parlayUpdating && item.showParlay" md-font-icon="icon-menu-down" class="s20"></md-icon>\n<md-progress-circular ng-show="item.parlayUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="favorite">{{ item.ParlayType }}</span></div><div class="combo-type-mix"><span>{{item.ComboType}}</span> \n<span class="odds">@ {{item.nOdds | currency : \'\' : 4}}</span></div><div class="parlay-data" layout="column"><div \nclass="parlay-wrap" ng-repeat="parlay in item.ParlayData" ng-show="item.showParlay"><div class="parlay" layout="column">\n<div class="sport-type"><span>{{ parlay.SportType | sabaSportsBet }}</span> / <span>{{ parlay.BetTypeTrans }}</span>\n</div><div class="bet-team" layout="column"><div>{{ parlay.BetTeamTrans }}</div><div layout="row" class="parlay-hdp">\n<span class="handicap" ng-if="parlay.HomeHdp >= parlay.AwayHdp">{{parlay.HomeHdp}}</span> <span class="handicap" \nng-if="parlay.AwayHdp > parlay.HomeHdp">{{parlay.AwayHdp}}</span> <span class="favorite" \nng-show="parlay.HomeScore && parlay.AwayScore">[{{parlay.HomeScore}}-{{parlay.AwayScore}}]</span> <span class="odds">\n@ {{ parlay.Odds }}</span></div></div><div>{{ parlay.HomeTeamNameEn }} - {{ parlay.AwayTeamNameEn }}</div><div \nclass="league">{{ parlay.LeagueNameEn }}</div><div class="match-at">\n{{ parlay.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ parlay.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/number-game.html', '<div layout="column" layout-align="space-between end" class="number-game"><div layout="row"><div class="box" \nng-click="vm.updateLeagueInfo(item)"><md-icon ng-if="!item.LeagueName" md-font-icon="icon-menu-right" class="s20">\n</md-icon><md-icon ng-if="item.LeagueName" md-font-icon="icon-menu-down" class="s20"></md-icon></div><span \nclass="sport-type">{{ item.SportType | sabaSportsBet }}</span> / <span class="bet-type">{{ item.BetTypeTrans }}</span>\n</div><div class="league"><span ng-if="item.LeagueName" class="name">{{ item.LeagueName }}</span></div><div \nclass="odds" layout="column"><span class="bet-team">{{ item.BetTeamTrans }}</span> <span class="ball">\n[{{ item.LastBallNo }}]</span></div><div>S\u1ED1. {{ item.MatchDetails.GameNo }}</div><div class="match-at">\n{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/saba-club.html', '<div layout="column" layout-align="space-between end" class="saba-club"><div class="club-bet-type">\n{{ item.BetTypeTrans }}</div><div class="saba-sport-type">{{ item.SportType | sabaSportsBet }}</div><div \nclass="system-parlay" layout="row"><div class="box" ng-click="vm.getRNGBetItems(item)" \nng-class="{\'processing\' : item.betItemUpdating}"><md-icon ng-if="!item.showBetItem && !item.betItemUpdating" \nmd-font-icon="icon-menu-down" class="s20"></md-icon><md-icon ng-if="item.showBetItem && !item.betItemUpdating" \nmd-font-icon="icon-menu-right" class="s20"></md-icon><md-progress-circular ng-show="item.betItemUpdating" \nclass="md-warn" md-diameter="20px"></md-progress-circular></div><span class="bet-type">Chi ti\u1EBFt</span></div><div \nclass="parlay-data" layout="column"><div class="parlay-wrap" ng-repeat="bet in item.RNGBetItems" \nng-show="item.showBetItem"><div class="parlay" layout="column"><div class="sport-type"><span>{{ bet.BetTypeTrans }}\n</span></div><div class="bet-team" layout="column"><div layout="row" class="parlay-hdp"><span>Ti\u1EC1n c\u01B0\u1EE3c: </span><span \nclass="favorite">{{bet.Stake | currency : \'\' : 0 }}</span> <span class="favorite" ng-hide="bet.Stake = bet.BetAmount">\n/ {{bet.BetAmount | currency : \'\' : 0 }}</span></div></div><div class="league">\nTh\u1EAFng thua: {{ bet.WinLose | currency : \'\' : 0 }}</div><div class="match-at">Ref: {{ bet.Tx }}</div><div \nclass="match-at">{{ bet.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ bet.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/single-parlay.html', '<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="item.showParlay = !item.showParlay"><md-icon md-font-icon="icon-menu-right" class="s20" \nng-show="!item.showParlay"></md-icon><md-icon md-font-icon="icon-menu-down" class="s20" ng-show="item.showParlay">\n</md-icon></div><span class="bet-type">{{ item.BetTypeTrans }}</span></div><div>\n{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div><span class="sport-type">\n{{ item.SportType | sabaSportsBet }}</span> {{ item.LeagueNameEn }}</div><div class="match-at">\n{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="single-parlay-data" layout="column" \nng-show="item.showParlay"><div class="parlay-wrap" ng-repeat="parlay in item.SingleParlayData"><div class="parlay" \nlayout="column"><div class="league">{{ parlay.SelectionName }}</div><div class="ticket-status"><span>\n{{ parlay.Status | SabaTicketStatus }}</span></div></div></div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/sport-dead.html', '<div layout="column" layout-align="space-between end"><div><span class="favorite" \nng-class="{ \'advantage\' : item.Hdp > 0, \'over\': item.BetTeamTrans === \'over\', \'under\': item.BetTeamTrans === \'under\' }">\n{{ item.BetTeamTrans }}</span> <span class="handicap">{{item.Hdp}}</span></div><div class="bet-type text-right">\n{{ item.BetTypeTrans | BetTag : item.BetTag }}</div><div class="text-right" ng-if="item.HomeTeamNameEn !== undefined">\n{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div class="text-right"><span class="sport-type">\n{{ item.SportType | sabaSportsBet }}</span> {{ item.LeagueNameEn }}</div><div class="match-at">\n{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/sport-live.html', '<div layout="column" layout-align="space-between end"><div><span class="favorite" \nng-class="{ \'advantage\' : item.Hdp > 0, \'over\': item.BetTeamTrans === \'over\', \'under\': item.BetTeamTrans === \'under\' }">\n{{ item.BetTeamTrans }}</span> <span class="handicap">{{item.Hdp}}</span> <span class="favorite" \nng-if="vm.showScore(item)">[{{item.HomeScore}}-{{item.AwayScore}}]</span> <span class="favorite" \nng-if="!vm.showScore(item)">[Live]</span></div><div class="bet-type">{{ item.BetTypeTrans | BetTag : item.BetTag }}\n</div><div class="text-right">{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div class="text-right"><span \nclass="sport-type">{{ item.SportType | sabaSportsBet }}</span> {{ item.LeagueNameEn }}</div><div class="match-at">\n{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/system-parlay.html', '<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="vm.showParlayData(item)" ng-class="{\'processing\' : item.parlayUpdating}"><md-icon \nng-if="!item.parlayUpdating && !item.showParlay" md-font-icon="icon-menu-right" class="s20"></md-icon><md-icon \nng-if="!item.parlayUpdating && item.showParlay" md-font-icon="icon-menu-down" class="s20"></md-icon>\n<md-progress-circular ng-show="item.parlayUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="favorite">{{ item.ParlayType }} <span ng-if="item.IsLucky === \'True\'">(Via Lucky)</span></span></div><div \nclass="combo-type">{{item.ComboType}}</div><div class="parlay-data" layout="column"><div class="parlay-wrap" \nng-repeat="parlay in item.ParlayData" ng-show="item.showParlay"><div class="parlay" layout="column"><div \nclass="sport-type"><span>{{ parlay.SportType | sabaSportsBet }}</span> / <span>{{ parlay.BetTypeTrans }}</span></div>\n<div class="bet-team" layout="column"><div>{{ parlay.BetTeamTrans }}</div><div layout="row" class="parlay-hdp"><span \nclass="handicap" ng-if="parlay.HomeHdp >= parlay.AwayHdp">{{parlay.HomeHdp}}</span> <span class="handicap" \nng-if="parlay.AwayHdp > parlay.HomeHdp">{{parlay.AwayHdp}}</span> <span class="favorite" \nng-show="parlay.HomeScore && parlay.AwayScore">[{{parlay.HomeScore}}-{{parlay.AwayScore}}]</span> <span class="odds">\n@ {{ parlay.Odds }}</span></div></div><div>{{ parlay.HomeTeamNameEn }} - {{ parlay.AwayTeamNameEn }}</div><div \nclass="league">{{ parlay.LeagueNameEn }}</div><div class="match-at">\n{{ parlay.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ parlay.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/virtual-mix-parlay.html', '<div layout="column" layout-align="space-between end"><div class="system-parlay" layout="row"><div class="box" \nng-click="vm.showParlayData(item)" ng-class="{\'processing\' : item.parlayUpdating}"><md-icon \nng-if="!item.parlayUpdating && !item.showParlay" md-font-icon="icon-menu-right" class="s20"></md-icon><md-icon \nng-if="!item.parlayUpdating && item.showParlay" md-font-icon="icon-menu-down" class="s20"></md-icon>\n<md-progress-circular ng-show="item.parlayUpdating" class="md-warn" md-diameter="20px"></md-progress-circular></div>\n<span class="favorite">{{ item.BetTypeTrans }}</span></div><div class="combo-type-mix"><span>\nC\u01B0\u1EE3c {{item.ParlayData.length }} </span><span class="odds">@ {{item.Odds | currency : \'\' : 4}}</span></div><div \nclass="parlay-data" layout="column"><div class="parlay-wrap" ng-repeat="parlay in item.ParlayData" \nng-show="item.showParlay"><div class="parlay" layout="column"><div class="sport-type"><span>\n{{ parlay.SportType | sabaSportsBet }}</span> / <span>{{ parlay.BetTypeTrans }}</span></div><div class="bet-team" \nlayout="column"><div>{{ parlay.BetTeamTrans }}</div><div layout="row" class="parlay-hdp"><span class="handicap" \nng-if="parlay.HomeHdp >= parlay.AwayHdp">{{parlay.HomeHdp}}</span> <span class="handicap" \nng-if="parlay.AwayHdp > parlay.HomeHdp">{{parlay.AwayHdp}}</span> <span class="favorite" \nng-show="parlay.HomeScore && parlay.AwayScore">[{{parlay.HomeScore}}-{{parlay.AwayScore}}]</span> <span class="odds">\n@ {{ parlay.Odds }}</span></div></div><div>{{ parlay.HomeTeamNameEn }} - {{ parlay.AwayTeamNameEn }}</div><div \nclass="league">{{ parlay.LeagueNameEn }}</div><div class="match-at">\n{{ parlay.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div class="ticket-status"><span>\n{{ parlay.TicketStatus | SabaTicketStatus }}</span></div></div></div></div></div>');
    $templateCache.put('app/main/accounting/saba/member/template/virtual-sport.html', '<div layout="column" layout-align="space-between end"><div><span class="favorite">{{ item.SportType | sabaSportsBet }}\n</span> / <span class="favorite">{{ item.BetTypeTrans }}</span></div><div class="hdp" layout="column"><span>\n{{ item.BetTeamTrans }}</span> <span>{{ item.Hdp }}</span></div><div>\n{{ item.HomeTeamNameEn }} - {{ item.AwayTeamNameEn }}</div><div class="text-right"><span class="sport-type">\n{{ vm.data.SportGroup | SportGroup }}</span> <span>{{ item.MatchDetails.VirtualSportInfo }}</span></div><div \nclass="match-at">{{ item.MatchAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div></div>');
    $templateCache.put('app/main/accounting/saba/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Nh\xF3m</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.SportGroup | SportGroup }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent.Total < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.SportGroup)">{{ item.Company | currency : \'\' : 0 }}\n</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Nh\xF3m</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th \nrowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr>\n<tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.SportGroup | SportGroup }}</a></td><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.GrossCommission | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.WinLose < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.Player.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Nh\xF3m</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th \nrowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng\n</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.SportGroup)">\n{{ item.SportGroup | SportGroup }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Player.GrossCommission | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.SportGroup)">{{ item.Player.Commission | currency : \'\' : 0 }}</a></td>\n<td class="highlight sum" ng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent.Total < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.My.WinLose < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.My.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : item.My.Commission < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.My.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.My.Total < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.My.Total | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.Player.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">{{ vm.SumTotal.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">{{ vm.SumTotal.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/traditional/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">\nC\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports.Records"><td><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td></td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/accounting/traditional/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2" class="head">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr>\n<tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">\nTh\u1EAFng thua</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th>\n<div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td class="head"><a ng-click="vm.viewReport(item)">{{ item.Username }}</a>\n</td><td>{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}\n</td><td class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}\n</td><td class="sum" ng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ item.Company.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="12" \nclass="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td class="head">T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/traditional/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">{{vm.report.name}}</a></td><td>\n{{item.GameType | gameXs }} - {{item.BetType | bet }}</td><td>{{item.Quantity | currency : \'\' : 0 }}</td><td>\n{{item.Point | currency : \'\' : 0 }}</td><td>{{item.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng\n</td><td></td><td>{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{vm.dataReports | sumOfValue : \'Point\' | currency : \'\' : 0 }}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.GameType)">{{ item.GameType | WMGame }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType)">{{ item.Company | currency : \'\' : 0 }}\n</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Game</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th \nrowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr>\n<tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GameType | WMGame }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GrossCommission | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Player.WinLose < 0}">\n<a ng-click="vm.classify(item.GameType)">{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Game</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th \nrowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng\n</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GameType | WMGame }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.GrossCommission | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="highlight sum" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.My.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.My.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : item.My.Commission < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.My.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.My.Total < 0}"><a ng-click="vm.classify(item.GameType)">{{ item.My.Total | currency : \'\' : 0 }}\n</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.GrossCommission | currency : \'\' : 0 }}\n</td><td>{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">{{vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">{{ vm.SumTotal.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">{{ vm.SumTotal.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3" \nng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th \ncolspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\nHoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th \nng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span>\n</div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight" \nng-class="{ \'warn\' : item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">\n{{ item.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum" \nng-class="{ \'warn\' : item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.WinLose < 0 }">{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.Commission < 0 }">{{ item.My.Commission | currency : \'\' : 0 }}</td><td \nclass="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="12" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td>T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">\n{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">\n{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Commission < 0 }">{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2"><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th \nrowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td>\n<td class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td\n class="sum" ng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.Commission < 0 }">{{ item.Company.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot ng-if="vm.hasRecord"><tr><td colspan="12" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td>T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Commission < 0 }">\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/wm-casino/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Game</th><th><div class="table-header"><span \nclass="column-title">\u0110\u01A1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports"><td><a \nng-click="vm.viewMemberReport(item)">{{ vm.report.name }}</a></td><td>{{ item.GameType | WMGame }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td>\n{{ item.NetAmount | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td></td><td>{{ vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'NetAmount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/announcements/views/classic/detail/detail.html', '<div class="thread-content"><div ng-bind-html="vm.currentThread.Message"></div></div>');
    $templateCache.put('app/main/announcements/views/classic/list/list.html', '<div class="no-threads" ng-if="vm.threads.length === 0 && !vm.loadingThreads">\nThere are no messages in \'{{vm.currentFilter.filter}}\'!</div><div class="loading-threads" layout="column" \nlayout-align="center center" ng-if="vm.loadingThreads"><md-progress-circular class="md-accent" md-mode="indeterminate" \nmd-diameter="64"></md-progress-circular><div>Loading your mails...</div></div><div class="thread {{thread.status}}" \nmd-ink-ripple ng-if="!vm.loadingThreads" ng-repeat="thread in vm.threads" ng-click="vm.openThread(thread)" \nng-class="{\'unread\': !thread.Read, \'current-thread\': vm.currentThread === thread, \'selected\': vm.isSelected(thread)}">\n<div layout="row" layout-align="start center"><div class="info" flex layout="column"><div class="name" layout="row" \nlayout-align="start center"><div class="time">{{ thread.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div \nclass="code">{{ thread.Code }}</div></div><div class="subject text-truncate">{{thread.Message | htmlToPlaintext }}</div>\n</div></div></div>');
    $templateCache.put('app/main/announcements/views/outlook/detail/detail.html', '<div ng-if="!vm.currentThread" class="no-thread-selected" layout="column" layout-align="center center" flex><md-icon \nmd-font-icon="icon-email" class="s120 grey-400-fg"></md-icon><span class="hint-text">Select a message to read</span>\n</div><div ng-if="vm.currentThread"><div class="thread-content"><div ng-bind-html="vm.currentThread.Message"></div>\n</div><div ng-if="vm.currentThread.attachments" class="thread-attachments"><div class="title"><span>Attachments</span>\n ({{vm.currentThread.attachments.length}})</div><div class="attachment-list" layout-wrap layout="row"><div \nclass="attachment" layout="column" ng-repeat="attachment in vm.currentThread.attachments"><img class="preview" \nng-src="{{attachment.preview}}"><div layout="column"><a href="#" class="md-accent-color link">View</a> <a href="#" \nclass="md-accent-color link">Download</a><div class="size">({{attachment.size}})</div></div></div></div></div></div>');
    $templateCache.put('app/main/announcements/views/outlook/list/list.html', '<div class="no-threads" ng-if="vm.threads.length === 0 && !vm.loadingThreads">\nThere are no messages in \'{{vm.currentFilter.filter}}\'!</div><div class="loading-threads" layout="column" \nlayout-align="center center" ng-if="vm.loadingThreads"><md-progress-circular class="md-accent" md-mode="indeterminate" \nmd-diameter="64"></md-progress-circular><div>Loading your mails...</div></div><div class="thread {{thread.status}}" \nmd-ink-ripple ng-if="!vm.loadingThreads" ng-repeat="thread in vm.threads" ng-click="vm.openThread(thread)" \nng-class="{\'unread\': !thread.Read, \'current-thread\': vm.currentThread === thread, \'selected\': vm.isSelected(thread)}">\n<div layout="row" layout-align="start center"><div class="info" flex layout="column"><div class="name" layout="row" \nlayout-align="start center"><div class="time">{{ thread.PublishedAt | amDateFormat : \'DD/MM/YYYY HH:mm\' }}</div><div \nclass="code">{{ thread.Code }}</div></div><div class="subject text-truncate">{{ thread.Message | htmlToPlaintext }}\n</div></div></div></div>');
    $templateCache.put('app/main/legendary/settings/parameter/base/base.html', '<div class="page-layout simple fullwidth term-base-parameter" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="column" layout-align="center start"><div \nclass="breadcrumb" layout="row" layout-align="start center"><span class="parent">{{ vm.gameID | legendGame }}</span>\n</div><div class="title">Tham s\u1ED1 c\u01A1 b\u1EA3n</div></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><table class="simple" ms-responsive-table><thead><tr><th>K\xE8o</th><th>\nS\u1ED1 gi\u1EA3i</th><th>Min/Tic</th><th>Max/Tic</th><th>Multi</th><th>X\xE1c su\u1EA5t</th><th>T\u1EF7 l\u1EC7</th><th>Ph\xE1t th\u01B0\u1EDFng</th><th>V\u1ED1n\n</th><th>BetTimes</th><th>Auto Close</th><th class="help">MEP<md-tooltip md-direction="top">Gi\xE1 \u0111\u01B0\u1EE3c t\u0103ng t\u1ED1i \u0111a\n</md-tooltip></th><th class="help">MEP/Level<md-tooltip md-direction="top">Gi\xE1 \u0111\u01B0\u1EE3c t\u0103ng t\u1ED1i \u0111a qua m\u1ED7i c\u1EA5p</md-tooltip>\n</th><th class="help">MIP<md-tooltip md-direction="top">Manual Inc Point</md-tooltip></th><th class="help">Max MIP/Level\n<md-tooltip md-direction="top">Manual Inc Point Per Level</md-tooltip></th><th class="help">MP NoShare<md-tooltip \nmd-direction="top">Max Point For No Share</md-tooltip></th><th class="help">MP MaxShare<md-tooltip md-direction="top">\nMax Point For Max Share</md-tooltip></th><th class="help">MP Group<md-tooltip md-direction="top">\nMax Point For Number Group</md-tooltip></th><th ng-if="vm.hasWritePermission">S\u1EEDa</th></tr></thead><tbody><tr \nng-repeat="param in vm.parameters" ng-class="{\'edit\': param.editMode}"><td>{{ param.BetType | bet : false : 0 }}</td>\n<td>{{param.AwardNumber}}</td><td>{{param.MinItemPerTicket}}</td><td>{{param.MaxItemPerTicket}}</td><td><md-icon \nmd-font-icon="icon-check" class="md-accent s20" ng-if="param.MultiPay"></md-icon><md-icon md-font-icon="icon-close" \nclass="md-warn s20" ng-if="!param.MultiPay"></md-icon></td><td>{{ param.Probability }}</td><td>{{ param.Payouts/1000 }}\n</td><td>{{ param.Payouts | currency : \'\' : 0 }}</td><td>{{ param.Price | currency : \'\' : 0 }}</td><td>\n{{ param.BetTimes }}</td><td><input ng-model="param.AutoClose" type="text" ng-disabled="!param.editMode"></td><td><input\n ng-model="param.MaxExtraPrice" ng-currency type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.MaxExtraPricePerLevel" ng-currency type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.ManualIncPoint" ng-currency type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.MaxManualIncPointPerLevel" ng-currency type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.MaxPointForNoShare" ng-currency type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.MaxPointForMaxShare" ng-currency type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.MaxPointForNumberGroup" ng-currency type="text" ng-disabled="!param.editMode"></td><td \nng-if="vm.hasWritePermission"><md-button class="md-icon-button" ng-click="vm.editParam(param)" ng-hide="param.editMode">\n<md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button><md-button class="md-icon-button md-accent s20" \nng-click="vm.save(param)" ng-hide="!param.editMode"><md-icon md-font-icon="icon-check"></md-icon></md-button><md-button \nclass="md-icon-button md-warn s20" ng-click="vm.cancel(param)" ng-hide="!param.editMode"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></td></tr></tbody></table></div></div></div>');
    $templateCache.put('app/main/legendary/settings/parameter/risk/risk.html', '<div class="page-layout simple fullwidth term-open-parameter" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="column" layout-align="center start"><div \nclass="breadcrumb" layout="row" layout-align="start center"><span class="parent">{{ vm.gameID | gameXs }}</span></div>\n<div class="title">C\u1EA5u h\xECnh r\u1EE7i ro</div></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><table class="simple term-open-parameter" ms-responsive-table><thead>\n<tr><th>Game</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>T\u0103ng gi\xE1 theo \u0111i\u1EC3m</th><th>T\u0103ng gi\xE1 theo r\u1EE7i ro</th><th>T\u0103ng gi\xE1 theo \u0110i\u1EC3m TB\n</th><th>Ki\u1EC3u t\u0103ng gi\xE1</th><th ng-if="vm.hasWritePermission">S\u1EEDa</th></tr></thead><tr \nng-repeat="param in vm.parameters"><td>{{param.GameType | legendGame }}</td><td>{{param.BetType | bet }}</td><td>\n<md-button class="md-icon-button" ng-click="vm.changeByPointConf(param, $event)"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><md-button class="md-icon-button" \nng-click="vm.changeByRiskConf(param, $event)" ng-if="vm.available(param.BetType)"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><md-button class="md-icon-button" \nng-click="vm.changePointAvgConf(param, $event)" ng-if="vm.available(param.BetType)"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><span ng-if="!param.editMode">\n{{ param.Type | riskType }}</span><md-select ng-model="param.Type" aria-label="changePointType" ng-if="param.editMode">\n<md-option ng-repeat="item in vm.changePointType" ng-value="item.id">{{item.name}}</md-option></md-select></td><td \nng-if="vm.hasWritePermission"><md-button class="md-icon-button" ng-click="vm.editParam(param)" ng-hide="param.editMode">\n<md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button><md-button class="md-icon-button md-accent" \nng-click="vm.save(param)" ng-hide="!param.editMode"><md-icon md-font-icon="icon-check"></md-icon></md-button><md-button \nclass="md-icon-button md-warn" ng-click="vm.cancel(param)" ng-hide="!param.editMode"><md-icon md-font-icon="icon-close">\n</md-icon></md-button></td></tr></table></div></div></div>');
    $templateCache.put('app/main/legendary/settings/template/modify/modify.legend.template.html', '<div class="page-layout simple fullwidth modify-template" layout="column"><div class="header md-accent-bg" \nng-class="{\'red-300-bg\': !vm.newTemplate}" layout="row" layout-align="space-between center"><div layout="row" \nlayout-align="start center"><div class="title">M\u1EABu c\u1EA5u h\xECnh t\xE0i kho\u1EA3n</div></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><div class="content" \nlayout="column"><form name="modifyTemplate" ng-submit="vm.updateTemplate()" novalidate><div \nclass="simple-table-container md-whiteframe-4dp"><div layout="column"><div layout="row" class="game-content" \nng-repeat="item in vm.templates.Values"><div class="bet-content first-class" layout="column"><div class="title">\n{{ item[0].GameType | legendGame }}</div><div>Gi\xE1 b\xE1n</div><div>Tr\u1EA3 th\u01B0\u1EDFng</div><div \nng-if="!vm.newTemplate && vm.templates.Default">Hoa h\u1ED3ng</div></div><div class="bet-content" layout="column" \nng-repeat="bet in item" ng-class="{\'edit-template\': !vm.newTemplate && bet.BetType !== 20 && bet.BetType !== 26 }" \nng-click="vm.changePrice(vm.templates, bet, $event)"><div class="title">\n{{ bet.BetType | bet : false : item[0].GameType }}</div><div><input ng-model="bet.Price" type="text" ng-currency \nng-disabled="bet.BetType === 20 || bet.BetType === 26 || !vm.newTemplate" ng-change="vm.changeValues(bet, \'price\')" \nng-class="{\'highlight\': bet.highlight.Price }"></div><div><input ng-model="bet.Payouts" type="text" ng-currency \nng-disabled="bet.BetType === 20 || bet.BetType === 26 || !vm.newTemplate" ng-change="vm.changeValues(bet, \'payout\')" \nng-class="{\'highlight\': bet.highlight.Payouts }"></div><div ng-if="!vm.newTemplate && vm.templates.Default"><input \nng-model="bet.Commission" type="text" ng-currency \nng-disabled="bet.BetType === 20 || bet.BetType === 26 || !vm.newTemplate"></div></div></div><div layout="column" \nclass="input-bottom"><input type="text" ng-model="vm.templates.Title" placeholder="T\xEAn m\u1EABu" required minlength="4"> \n<input type="text" ng-model="vm.templates.Description" placeholder="M\xF4 t\u1EA3"></div><div layout="row" \nlayout-align="start center" class="bottom"><md-button class="md-raised md-accent" type="submit" \nng-disabled="modifyTemplate.$invalid || modifyTemplate.$pristine || vm.submitting" ng-if="!vm.newTemplate">C\u1EADp nh\u1EADt\n</md-button><md-button class="md-raised md-warn" type="submit" \nng-disabled="modifyTemplate.$invalid || modifyTemplate.$pristine || vm.submitting" ng-if="vm.newTemplate">T\u1EA1o m\u1EABu m\u1EDBi\n</md-button></div></div></div></form></div></div>');
    $templateCache.put('app/main/legendary/settings/template/modify/price-change.dialog.html', '<md-dialog aria-label="setting_price" class="price-change-dialog"><form name="settingPrice" ng-submit="submitForm">\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>Thay \u0111\u1ED5i tham s\u1ED1</h2></div></md-toolbar>\n<md-dialog-content class="md-dialog-sm setting-price"><div class="md-dialog-content" layout="column"><div layout="row" \nclass="title"><div flex="100">{{ priceInfo.BetType | bet }}, {{ priceInfo.GameType | legendGame }}</div></div><div \nlayout="row"><label flex="40">Gi\xE1 b\xE1n</label> <input type="text" ng-currency ng-model="priceInfo.Price" md-autofocus>\n</div><div layout="row"><label flex="40">Tr\u1EA3 th\u01B0\u1EDFng</label> <input type="text" ng-currency ng-model="priceInfo.Payouts">\n</div><div layout="row" ng-if="Default"><label flex="40">Hoa h\u1ED3ng</label> <input type="text" ng-currency \nng-model="priceInfo.Commission"></div><div class="warning" ng-show="warningMessage">{{ warningMessage }}</div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button class="btn-w-md md-warn" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="btn-w-md md-accent" type="submit" ng-click="submitForm()" \nng-disabled="submitting">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/legendary/statement/outstanding/classification/classification.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/legendary/statement/outstanding/classification/template/company.html\'"></div><div \nng-if="vm.report.level === 5" \nng-include="\'app/main/legendary/statement/outstanding/classification/template/agent.html\'"></div><div \nng-if="vm.report.level !== 5 && vm.report.level !== 1" \nng-include="\'app/main/legendary/statement/outstanding/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/legendary/statement/outstanding/general/general.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/legendary/statement/outstanding/general/template/company.html\'"></div><div \nng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/legendary/statement/outstanding/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/legendary/statement/outstanding/general/template/member.html\'">\n</div>');
    $templateCache.put('app/main/legendary/statement/outstanding/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.report.name}}</h3><div></div></div><table \nclass="simple report-table member-report outstanding" ms-responsive-table ng-if="vm.members.length"><thead><tr><th>\nM\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th>Th\u1EC3 lo\u1EA1i</th><th>S\u1ED1 ch\u1ECDn</th><th>T.L tr\u1EA3 th\u01B0\u1EDFng</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th>\u0110i\u1EC3m</th><th>\nTh\u1EF1c thu</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.members"><td>\n{{ item.Term | term }}.{{ item.TicketNumber }}</td><td>{{ item.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td>\n{{ vm.report.game | legendGame }} - {{ vm.report.bet | bet : false : vm.report.game }}</td><td>\n{{ item.Numbers.toString()}} <sup \nng-if="item.PrizeNr && (vm.report.bet === 20 || vm.report.bet === 27 || vm.report.bet === 28)">[{{ item.PrizeNr }}]\n</sup> <sup ng-if="item.PrizeNr && vm.report.bet === 26">[{{ item.PrizeNr-4 }}]</sup></td><td>\n{{ item.Payouts | currency : \'\' : 0}}</td><td>{{ item.Price | currency : \'\' : 0}}</td><td>\n{{ item.Point | currency : \'\' : 0}}</td><td>{{ item.Amount | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td></tr></tbody><tfoot \nng-if="vm.hasRecord && !vm.submitting"><tr><td colspan="17" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}\n</td><td>{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legendary/statement/outstanding/navigation/navigation.html', '<div layout="column" class="outstanding"><div layout="row" layout-align="start center"><div class="menu-button">\n<md-menu><md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">\n{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content \nwidth="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" md-prevent-menu-close="md-prevent-menu-close">\n<md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button ng-click="vm.selectProduct(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div><div layout="row" class="first-class"><md-radio-group ng-model="vm.report.category"><md-radio-button \nvalue="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div></div>\n<div layout="row" class="check-term"><md-autocomplete md-input-minlength="4" md-selected-item="vm.userSelected" \nmd-search-text="vm.searchText" md-search-text-change="vm.searchTextChange(vm.searchText)" \nmd-items="item in vm.querySearch(vm.searchText)" md-selected-item-change="vm.selectedItemChange(item)" \nmd-item-text="item.Username" md-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n">\n<md-item-template><span class="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span>\n</md-item-template></md-autocomplete><md-button class="md-raised md-accent" ng-click="vm.loadReport()">X\xE1c nh\u1EADn\n</md-button></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legendary/statement/member/byMember/byMember.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.responseByMember.length"><thead>\n<tr><th>H\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>\nTh\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.responseByMember" ng-click="vm.viewReport(item)" \nclass="cursor-pointer"><td>{{ vm.report.name}}</td><td>{{ item.GameType | legendGame }}</td><td>\n{{ item.BetType | bet : false : item.GameType }}</td><td>{{ item.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Point | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td colspan="3">\nT\u1ED5ng c\u1ED9ng</td><td>{{vm.responseByMember | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.responseByMember | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.responseByMember | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.responseByMember | sumOfValue : \'WinLose\') < 0}">\n{{vm.responseByMember | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/member/executive/executive.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.memberWinLoses.length"><thead>\n<tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="4">H\u1ED9i vi\xEAn</th><th colspan="2" \nng-if="$root.User.Level === 1">C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua\n</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th ng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr></thead>\n<tbody><tr ng-repeat="item in vm.memberWinLoses" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>\n{{item.Username}}</td><td>{{item.FullName}}</td><td class="highlight">{{item.Quantity | currency : \'\' : 0}}</td><td \nclass="highlight">{{item.Point | currency : \'\' : 0}}</td><td class="highlight">{{item.NetAmount | currency : \'\' : 0}}\n</td><td class="highlight" ng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td \nng-if="$root.User.Level === 1">{{item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="8" class="hasRecord"><a ng-click="vm.loadMemberWinLose(vm.nextPage)">Xem ti\u1EBFp</a>\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legendary/statement/member/details/details.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.report.name}}</h3><div></div></div><table class="simple report-table member-report" \nms-responsive-table ng-if="vm.memberDetails.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>S\u1ED1 k\u1EF3</th><th>Th\u1EDDi gian</th><th>\u0110\xE0i\n</th><th>Th\u1EC3 lo\u1EA1i</th><th>S\u1ED1 ch\u1ECDn</th><th>T.L tr\u1EA3 th\u01B0\u1EDFng</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th>\u0110i\u1EC3m</th><th>Th\u1EF1c thu</th><th>\nTh\u1EAFng / Thua</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.memberDetails"><td>\n{{item.TicketNumber}}</td><td>{{item.Term | term}}</td><td>{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td>\n<td>{{vm.report.game | legendGame }}</td><td>{{vm.report.bet | bet : false : vm.report.game }}</td><td \nng-if="vm.report.bet !== 5 && vm.report.bet !== 6" ng-class="{\'blue\' : item.WinLose > 0}">{{item.Numbers.toString()}} \n<sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup ng-if="item.PrizeNr && vm.report.bet !== 26">\n[{{ item.PrizeNr }}]</sup> <sup ng-if="item.PrizeNr && vm.report.bet === 26">[{{ item.PrizeNr-4 }}]</sup></td><td \nng-if="vm.report.bet === 5 || vm.report.bet === 6" ng-class="{\'blue\' : item.WinLose < 0}">{{item.Numbers.toString()}} \n<sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub></td><td>{{item.Payouts | currency : \'\' : 0}}</td><td>\n{{item.Price | currency : \'\' : 0}}</td><td>{{item.Point | currency : \'\' : 0}}</td><td>\n{{item.Amount | currency : \'\' : 0}}</td><td class="sum" ng-class="{\'warn\' : item.WinLose < 0}">\n{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td></tr><tr \nng-if="vm.loadmore && !vm.submitting"><td colspan="17" \nng-click="vm.loadMemberDetails(vm.memberDetails[vm.memberDetails.length - 1].id)">Xem ti\u1EBFp</td></tr></tbody><tfoot \nng-if="!vm.loadmore"><tr><td colspan="8">T\u1ED5ng c\u1ED9ng</td><td>\n{{vm.memberDetails | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.memberDetails | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.memberDetails | sumOfValue : \'WinLose\') < 0 }">\n{{vm.memberDetails | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/member/general/general.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.response.length"><thead><tr><th \nrowspan="2">H\u1ED9i vi\xEAn</th><th rowspan="2">K\u1EF3</th><th colspan="4">H\u1ED9i vi\xEAn</th><th colspan="2" \nng-if="$root.User.Level === 1">C\xF4ng ty</th></tr><tr><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>\nTh\u1EAFng thua</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th ng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.response"><td>{{ item.Username }}</td><td>{{ item.Term }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Point | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.WinLose < 0}">\n{{ item.WinLose | currency : \'\' : 0 }}</td><td ng-if="$root.User.Level === 1">\n{{ item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" class="sum" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{ item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.response | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{ vm.response | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{ vm.response | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : 0-(vm.response | sumOfValue : \'WinLose\') < 0}">\n{{0-(vm.response | sumOfValue : \'WinLose\') | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : (vm.response | sumOfTwoKey : \'Company\' : \'Commission\') < 0}">\n{{ vm.response | sumOfTwoKey : \'Company\' : \'Commission\' | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : (vm.response | sumOfTwoKey : \'Company\' : \'WinLose\') < 0}">\n{{ vm.response | sumOfTwoKey : \'Company\' : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/member/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" name="dateField" ng-blur="vm.closeFromDate()" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category" ng-disabled="!vm.username"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button>\n<md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div><div><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legendary/statement/term/classification/classification.html', '<div ng-if="$root.User.Level === 1" \nng-include="\'app/main/legendary/statement/term/classification/template/company.html\'"></div><div \nng-if="$root.User.Level === 5" ng-include="\'app/main/legendary/statement/term/classification/template/agent.html\'">\n</div><div ng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/legendary/statement/term/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/legendary/statement/term/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/legendary/statement/term/general/template/company.html\'"></div>\n<div ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/legendary/statement/term/general/template/agency.html\'"></div><div ng-if="vm.report.level === 9" \nng-include="\'app/main/legendary/statement/term/general/template/member.html\'"></div>');
    $templateCache.put('app/main/legendary/statement/term/date/date.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/legendary/statement/term/date/template/company.html\'"></div>\n<div ng-if="vm.report.level !== 1 && vm.report.level !== 5" \nng-include="\'app/main/legendary/statement/term/date/template/super.html\'"></div><div ng-if="vm.report.level === 5" \nng-include="\'app/main/legendary/statement/term/date/template/agent.html\'"></div>');
    $templateCache.put('app/main/legendary/statement/term/navigation/navigation.html', '<div layout="column" class="outstanding"><div layout="row" layout-align="start center"><div class="menu-button">\n<md-menu><md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">\n{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content \nwidth="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" md-prevent-menu-close="md-prevent-menu-close">\n<md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button ng-click="vm.selectProduct(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div><div class="padding-right-8"><label>Ng\xE0y</label><md-datepicker ng-model="vm.report.date" \nmd-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" name="dateField"></md-datepicker></div><div \nlayout="row" ng-show="vm.term">K\u1EF3 m\u1EDF th\u01B0\u1EDFng: <b>{{vm.term}}</b></div><div layout="row" hide><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legendary/statement/term/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><table \nclass="simple report-table member-report" ms-responsive-table ng-if="vm.members.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>\nTh\u1EDDi gian</th><th>Th\u1EC3 lo\u1EA1i</th><th>S\u1ED1 ch\u1ECDn</th><th>T.L tr\u1EA3 th\u01B0\u1EDFng</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th>\u0110i\u1EC3m</th><th>Th\u1EF1c thu</th>\n<th>Th\u1EAFng / Thua</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.members"><td>\n{{item.Term | term}}.{{item.TicketNumber}}</td><td>{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.data.GameType | legendGame }} - {{vm.data.BetType | bet : false : vm.data.GameType }}</td><td \nng-if="vm.data.betType !== 5 && vm.data.betType !== 6" ng-class="{\'blue\' : item.WinLose > 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup \nng-if="item.PrizeNr && vm.data.BetType !== 26">[{{ item.PrizeNr }}]</sup> <sup \nng-if="item.PrizeNr && vm.data.BetType === 26">[{{ item.PrizeNr-4 }}]</sup></td><td \nng-if="vm.data.betType === 5 || vm.data.betType === 6" ng-class="{\'blue\' : item.WinLose < 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub></td><td>\n{{item.Payouts | currency : \'\' : 0}}</td><td>{{item.Price | currency : \'\' : 0}}</td><td>\n{{item.Point | currency : \'\' : 0}}</td><td>{{item.Amount | currency : \'\' : 0}}</td><td class="sum" \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="14" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}\n</td><td>{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.members | sumOfValue : \'WinLose\') < 0 }">\n{{vm.members | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td><td colspan="5"></td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/classification/classification.html', '<div ng-if="$root.User.Level === 1" \nng-include="\'app/main/legendary/statement/winLose/classification/template/company.html\'"></div><div \nng-if="$root.User.Level === 5" ng-include="\'app/main/legendary/statement/winLose/classification/template/agent.html\'">\n</div><div ng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/legendary/statement/winLose/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/legendary/statement/winLose/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/legendary/statement/winLose/general/template/company.html\'">\n</div><div ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/legendary/statement/winLose/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/legendary/statement/winLose/general/template/member.html\'"></div>');
    $templateCache.put('app/main/legendary/statement/winLose/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><table \nclass="simple report-table member-report" ms-responsive-table ng-if="vm.members.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span>\n</div></th><th><div class="table-header"><span class="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EF1c thu</span>\n</div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng / Thua</span></div></th><th \nng-if="$root.User.Level <= 5"><div class="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 4"><div class="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 3"><div class="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level <= 1"><div class="table-header"><span class="column-title">C\xF4ng ty</span></div></th></tr>\n</thead><tbody><tr ng-repeat="item in vm.members"><td>{{item.Term | term}}.{{item.TicketNumber}}</td><td>\n{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.data.GameType | legendGame }} - {{vm.data.BetType | bet : false : vm.data.GameType }}</td><td \nng-if="vm.data.betType !== 5 && vm.data.betType !== 6" ng-class="{\'blue\' : item.WinLose > 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup \nng-if="item.PrizeNr && vm.data.BetType !== 26">[{{ item.PrizeNr }}]</sup> <sup \nng-if="item.PrizeNr && vm.data.BetType === 26">[{{ item.PrizeNr-4 }}]</sup></td><td \nng-if="vm.data.betType === 5 || vm.data.betType === 6" ng-class="{\'blue\' : item.WinLose < 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub></td><td>\n{{item.Payouts | currency : \'\' : 0}}</td><td>{{item.Price | currency : \'\' : 0}}</td><td>\n{{item.Point | currency : \'\' : 0}}</td><td>{{item.Amount | currency : \'\' : 0}}</td><td class="sum" \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="14" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}\n</td><td>{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.members | sumOfValue : \'WinLose\') < 0 }">\n{{vm.members | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td><td colspan="5"></td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" name="dateField" ng-blur="vm.closeFromDate()" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legendary/tickets/cancellation/new-task/new-task.html', 'new-task');
    $templateCache.put('app/main/legend-casino/statement/member/byMember/byMember.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.responseByMember.length"><thead>\n<tr><th rowspan="2">H\u1ED9i vi\xEAn</th><th rowspan="2">Game</th><th rowspan="2">\u0110\u01A1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th\n rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="2" ng-if="$root.User.Level === 1">C\xF4ng ty</th>\n</tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th \nng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.responseByMember" \nng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{ vm.report.name }}</td><td>{{ item.GameType | casinoGame }}\n</td><td>{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td>\n{{ item.NetAmount | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1">\n{{item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot \nhide><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.responseByMember | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td>\n<td>{{vm.responseByMember | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td>\n{{vm.responseByMember | sumOfValue : \'NetAmount\' | currency : \'\' : 0}}</td><td>\n{{vm.responseByMember | sumOfValue : \'Commission\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.responseByMember | sumOfValue : \'WinLose\') < 0}">\n{{vm.responseByMember | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/member/details/details.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.report.name}}</h3><div></div></div><table class="simple wm-casino" ms-responsive-table \nng-if="vm.memberDetails.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>C\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\nTh\u1EAFng thua</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.memberDetails"><td><div \nclass="padding-4 text-bold">{{ item.GameNumber }}.{{ item.GameRound }}</div><div class="padding-4">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td class="game-bet"><div \nng-bind-html="item.BetType | LegendBet"></div></td><td class="text-center"><div ng-show="item.WinLose > 0" \nclass="text-bold blue-900-fg padding-4">{{ item.GameResult }} - Th\u1EAFng</div><div ng-show="item.WinLose < 0" \nclass="padding-4">{{ item.GameResult }} - Thua</div><div class="font-size-10 padding-4">{{ item.IP }}</div></td><td \nclass="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.NetAmount | currency : \'\' : 0 }}</div></td><td class="text-center"><div class="padding-4 text-bold" \nng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.CommissionPercent }} % - {{ item.Commission | currency : \'\' : 0 }}</div></td><td class="share" \nng-if="$root.User.Level <= 5"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.WinLose < 0 }">\n{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.WinLose < 0 }">\n{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting">\n<tr><td colspan="12" ng-click="vm.loadMemberDetails(vm.responseByMember[vm.responseByMember.length - 1].Id)">Xem ti\u1EBFp\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legend-casino/statement/member/executive/executive.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.memberWinLoses.length"><thead>\n<tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\u0110\u01A1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th\n rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="2" ng-if="$root.User.Level === 1">C\xF4ng ty</th>\n</tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th \nng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.memberWinLoses" \nng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{ item.Username }}</td><td>{{ item.FullName }}</td><td \nclass="highlight">{{item.Quantity | currency : \'\' : 0}}</td><td class="highlight">{{item.Amount | currency : \'\' : 0}}\n</td><td class="highlight">{{item.NetAmount | currency : \'\' : 0}}</td><td class="highlight">\n{{item.Commission | currency : \'\' : 0}}</td><td class="highlight" ng-class="{\'warn\' : item.WinLose < 0}">\n{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1">\n{{item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="8" class="hasRecord"><a ng-click="vm.loadMemberWinLose(vm.nextPage)">Xem ti\u1EBFp</a>\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legend-casino/statement/member/general/general.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.response.length"><thead><tr><th \nrowspan="2">H\u1ED9i vi\xEAn</th><th rowspan="2">K\u1EF3</th><th colspan="4">H\u1ED9i vi\xEAn</th><th colspan="2" \nng-if="$root.User.Level === 1">C\xF4ng ty</th></tr><tr><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>\nTh\u1EAFng thua</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th ng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.response"><td>{{ item.Username }}</td><td>{{ item.Term }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Point | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.WinLose < 0}">\n{{ item.WinLose | currency : \'\' : 0 }}</td><td ng-if="$root.User.Level === 1">\n{{ item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" class="sum" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{ item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.response | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{ vm.response | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{ vm.response | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : 0-(vm.response | sumOfValue : \'WinLose\') < 0}">\n{{0-(vm.response | sumOfValue : \'WinLose\') | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : (vm.response | sumOfTwoKey : \'Company\' : \'Commission\') < 0}">\n{{ vm.response | sumOfTwoKey : \'Company\' : \'Commission\' | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : (vm.response | sumOfTwoKey : \'Company\' : \'WinLose\') < 0}">\n{{ vm.response | sumOfTwoKey : \'Company\' : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/classification/classification.html', '<div ng-if="$root.User.Level === 1" \nng-include="\'app/main/legend-casino/statement/winLose/classification/template/company.html\'"></div><div \nng-if="$root.User.Level === 5" \nng-include="\'app/main/legend-casino/statement/winLose/classification/template/agent.html\'"></div><div \nng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/legend-casino/statement/winLose/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/legend-casino/statement/member/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" name="dateField" ng-blur="vm.closeFromDate()" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div hide>\n<md-radio-group ng-model="vm.report.category" ng-disabled="!vm.username"><md-radio-button value="0">T\u1ED5ng h\u1EE3p\n</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div><div><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legend-casino/statement/winLose/general/general.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/legend-casino/statement/winLose/general/template/company.html\'"></div><div \nng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/legend-casino/statement/winLose/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/legend-casino/statement/winLose/general/template/member.html\'">\n</div>');
    $templateCache.put('app/main/legend-casino/statement/winLose/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><table class="simple wm-casino" ms-responsive-table \nng-if="vm.members.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>C\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua\n</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th><th ng-if="$root.User.Level <= 2">IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.members"><td><div class="padding-4 text-bold">{{ item.GameNumber }}.{{ item.GameRound }}</div><div\n class="padding-4">{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td class="game-bet"><div \nng-bind-html="item.BetType | LegendBet"></div></td><td class="text-center"><div ng-show="item.WinLose > 0" \nclass="text-bold blue-900-fg padding-4">{{ item.GameResult }} - Th\u1EAFng</div><div ng-show="item.WinLose < 0" \nclass="padding-4">{{ item.GameResult }} - Thua</div><div class="font-size-10 padding-4">{{ item.IP }}</div></td><td \nclass="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.NetAmount | currency : \'\' : 0 }}</div></td><td class="text-center"><div class="padding-4 text-bold" \nng-class="{\'warn\' : item.WinLose < 0 }">{{ item.WinLose | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.CommissionPercent }} % - {{ item.Commission | currency : \'\' : 0 }}</div></td><td class="share" \nng-if="$root.User.Level <= 5"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.WinLose < 0 }">\n{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.WinLose < 0 }">\n{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td><td ng-if="$root.User.Level <= 2"><a \nng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting"><tr><td \ncolspan="11" ng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</td></tr></tfoot></table>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/legend-casino/statement/winLose/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" name="dateField" ng-blur="vm.closeFromDate()" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/saba/statement/member/byMember/byMember.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.responseByMember.length"><thead>\n<tr><th>H\u1ED9i vi\xEAn</th><th>Nh\xF3m</th><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead>\n<tbody><tr ng-repeat="item in vm.responseByMember" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>\n{{ vm.report.name}}</td><td>{{ item.SportGroup | SportGroup }}</td><td>{{ item.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td>{{ item.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.responseByMember | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{vm.responseByMember | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{vm.responseByMember | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.responseByMember | sumOfValue : \'WinLose\') < 0}">\n{{vm.responseByMember | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/member/classification/classification.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.response.length"><thead><tr><th>\nH\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>Th\u1EAFng thua\n</th><th>C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.response"><td>{{vm.report.name}}</td><td>\n{{item.gameType | game}}</td><td>{{item.betType | bet}}</td><td>{{item.quantity | currency : \'\' : 0 }}</td><td>\n{{item.point | currency : \'\' : 0 }}</td><td>{{item.amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{\'warn\' : item.winLose < 0}">{{item.winLose | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{\'warn\' : item.companyWinLose < 0}">{{item.companyWinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr>\n<td colspan="3">T\u1ED5ng c\u1ED9ng</td><td>{{vm.response | sumOfValue : \'quantity\' | currency : \'\' : 0 }}</td><td>\n{{vm.response | sumOfValue : \'point\' | currency : \'\' : 0 }}</td><td>\n{{vm.response | sumOfValue : \'amount\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.response | sumOfValue : \'winLose\') < 0}">\n{{vm.response | sumOfValue : \'winLose\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.response | sumOfValue : \'companyWinLose\') < 0}">\n{{vm.response | sumOfValue : \'companyWinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/member/executive/executive.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.memberWinLoses.length"><thead>\n<tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2" \nclass="text-uppercase">{{ $root.User.Username }}</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nHoa h\u1ED3ng</th><th>Th\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.memberWinLoses" \nng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{item.Username}}</td><td>{{item.FullName}}</td><td \nclass="highlight">{{item.Quantity | currency : \'\' : 0 }}</td><td class="highlight">\n{{item.NetAmount | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{\'warn\' : item.WinLose < 0}">\n{{item.WinLose | currency : \'\' : 0 }}</td><td>{{item.Self.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : item.Self.WinLose < 0}">{{item.Self.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="8" class="hasRecord"><a ng-click="vm.loadMemberWinLose(vm.nextPage)">Xem ti\u1EBFp</a>\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/saba/statement/outstanding/classification/classification.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/saba/statement/outstanding/classification/template/company.html\'"></div><div \nng-if="vm.report.level === 5" ng-include="\'app/main/saba/statement/outstanding/classification/template/agent.html\'">\n</div><div ng-if="vm.report.level !== 5 && vm.report.level !== 1" \nng-include="\'app/main/saba/statement/outstanding/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/saba/statement/member/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" name="dateField" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/saba/statement/outstanding/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/saba/statement/outstanding/general/template/company.html\'">\n</div><div ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/saba/statement/outstanding/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/saba/statement/outstanding/general/template/member.html\'"></div>');
    $templateCache.put('app/main/saba/statement/outstanding/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><table class="simple saba" ms-responsive-table \nng-if="vm.members.length"><thead><tr><th>#</th><th>Th\u1EDDi gian</th><th>L\u1EF1a ch\u1ECDn</th><th ng-if="vm.data.SportGroup !== 3">\nT\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th \nng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th ng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr \nng-repeat="item in vm.members track by $index"><td><div class="td-wrap"><div>{{ $index + 1 }}</div></div></td><td \nclass="time"><div class="td-wrap"><div>Ref: {{item.Tx}}</div><div class="TxAt">\n{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div></td><td class="event"><div \nng-if="vm.data.SportGroup === 99" ng-include="\'app/main/accounting/saba/member/template/sport-live.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'1\'" \nng-include="\'app/main/accounting/saba/member/template/sport-live.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'0\' && item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/sport-dead.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'System Parlay\'" \nng-include="\'app/main/accounting/saba/member/template/system-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/mix-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData !== undefined" \nng-include="\'app/main/accounting/saba/member/template/single-parlay.html\'"></div><div ng-if="vm.data.SportGroup === 2" \nng-include="\'app/main/accounting/saba/member/template/virtual-sport.html\'"></div><div ng-if="vm.data.SportGroup === 1" \nng-include="\'app/main/accounting/saba/member/template/number-game.html\'"></div><div ng-if="vm.data.SportGroup === 3" \nng-include="\'app/main/accounting/saba/member/template/arcadia-gaming.html\'"></div></td><td class="odds" \nng-if="vm.data.SportGroup !== 3"><div class="td-wrap"><div class="box" layout="row" layout-align="end center" \nng-if="item.ParlayType === \'System Parlay\' || item.ParlayType === \'MixParlay\'" \nng-click="vm.ParlayDetails(item, $event)"><span><md-icon md-font-icon="icon-information" class="s24"></md-icon></span>\n</div><div layout="column" layout-align="space-between end" \nng-if="item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'"><div class="odd" \nng-class="{\'warn\' : item.Odds < 0 }">{{ item.Odds }}</div><div class="odd-type">{{ item.OddsType | SabaOddsType }}</div>\n</div></div></td><td><div class="stake td-wrap">{{ item.Stake | currency : \'\' : 0 }}</div></td><td \nclass="ticket-status"><div class="td-wrap"><div class="ticket-status">{{ item.TicketStatus | SabaTicketStatus }}</div>\n<div class="fiscal-date">{{ item.FiscalDate | amDateFormat : \'DD/MM/YYYY\' }}</div><div class="ticket-result" \nng-if="item.MatchId" ng-click="vm.ticketResult(item, $event)" \nng-if="vm.data.SportGroup !== 1 && vm.data.SportGroup !== 3">K\u1EBFt qu\u1EA3</div><div class="ip-address"><a \nng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></div></div></td><td class="share" ng-if="$root.User.Level <= 5"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span\n flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Master.Commission < 0 }">\n{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 3"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Super.WinLose < 0 }">{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span\n flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Manager.Commission < 0 }">\n{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 1"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Company.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting">\n<tr><td colspan="12" ng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Tx)">Xem ti\u1EBFp</td></tr></tfoot>\n</table><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear>');
    $templateCache.put('app/main/saba/statement/outstanding/navigation/navigation.html', '<div layout="column" class="outstanding"><div layout="row" layout-align="start center"><div class="menu-button">\n<md-menu><md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">\n{{vm.textSportLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content \nwidth="3"><md-menu-item><md-button ng-click="vm.selectAllSport($index)" md-prevent-menu-close="md-prevent-menu-close">\n<md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item ng-repeat="item in vm.sportGroups"><md-button ng-click="vm.selectSport(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div><div layout="row" class="first-class"><md-radio-group ng-model="vm.report.category"><md-radio-button \nvalue="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div>\n<md-autocomplete md-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nng-disabled="vm.report.category === \'0\' || vm.report.category === 0" md-menu-class="autocomplete-custom-template" \nplaceholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span class="item-title"><strong md-highlight-text="vm.searchText">\n{{item.Username}}</strong></span></md-item-template></md-autocomplete><md-button class="md-raised md-accent" \nng-click="vm.loadReport()">X\xE1c nh\u1EADn</md-button><div class="in-completed-fiscal-date" layout="row"><div class="label" \nng-repeat="item in vm.inCompleted" ng-class="{\'warn\' : item.Status === 0}">\n{{ item.Date | amDateFormat : \'DD/MM/YYYY\' }} | {{ item.Status | SabaInCompleted }}</div></div></div></div>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/saba/statement/risk-control/1x2/1x2.html', '<div class="page-layout simple fullwidth legend-term r1x2" layout="column" layout-align="start"><div class="content" \nlayout="column"><div layout="column" class="term-wrap md-whiteframe-2dp"><div class="header" layout="row" \nlayout-align="space-between center"><div flex="50" class="title">Th\u1ED1ng k\xEA c\u01B0\u1EE3c 1X2</div><div flex="40" class="league" \nlayout="row" layout-align="end"><md-menu ng-show="vm.leagueArr.length"><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.textLeagueLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3" class="league"><md-menu-item><md-button \nng-click="vm.selectAllLeague($index)" md-prevent-menu-close="md-prevent-menu-close"><md-icon \nmd-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item ng-repeat="item in vm.leagueArr"><md-button ng-click="vm.selectLeague(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-circle-outline"></md-icon>{{item.LeagueNameEn}}</md-button></md-menu-item>\n</md-menu-content></md-menu></div><div flex="10" class="refresh" layout="row" layout-align="end center"><md-button \nng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.timer === \'OFF\' }"><md-icon md-font-icon="icon-refresh" \nclass="s20"></md-icon></md-button><md-menu class="0"><md-button md-no-ink ng-click="$mdMenu.open()" \nclass="md-accent countdown" ng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }">{{vm.timer}}\n<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button><md-menu-content width="4" \nng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" class="md-warn">T\u1EAFt</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.refreshEvent(30)" \nclass="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(45)" \nclass="md-accent">45 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(60)" \nclass="md-accent">60 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(75)" \nclass="md-accent">75 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu></div></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><div \nclass="data-not-found" ng-if="vm.outStandings.length === 0">Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u ph\xF9 h\u1EE3p</div><div class="content-wrapper" \nflex="100" ng-repeat="league in vm.outStandings"><div class="term-by-game" layout="column"><table \nclass="table simple r1x2" ms-responsive-table><thead><tr><th>{{ league.group[0].LeagueNameEn }}</th><th colspan="3">\nTo\xE0n tr\u1EADn</th><th colspan="3">Hi\u1EC7p 1</th></tr></thead><tbody ng-repeat="match in league.group" \nng-class="{\'next\': $index !== 0}"><tr class="match"><td><div layout="row" layout-align="space-between center"><div>\n{{ match.HomeTeamNameEn }} - {{ match.AwayTeamNameEn }}</div><span class="text-transparent">{{ match.MatchId }}</span>\n</div></td><td colspan="6" ng-if="$index !== 0"></td><td ng-if="$index === 0">1</td><td ng-if="$index === 0">X</td><td \nng-if="$index === 0">2</td><td ng-if="$index === 0">1</td><td ng-if="$index === 0">X</td><td ng-if="$index === 0">2</td>\n</tr><tr ng-repeat="item in match.fineOutstanding track by $index"><td><div ng-if="item.Live"><span class="score">\n{{ item.Score }}</span> <span class="live">Live!</span></div><div ng-if="!item.Live && match.Today"><span class="today">\nLive</span> <span class="match-at">{{ match.MatchAt | amDateFormat : \'h:mm A z\' }}</span></div><div \nng-if="!item.Live && !match.Today"><span class="match-at">{{ match.MatchAt | amDateFormat : \'DD/MM h:mm A z\' }}</span>\n</div></td><td class="highlight"><div ng-if="item.FHome !== undefined" layout="column" class="income"><div flex \nclass="a" ng-class="{\'warn\': item.FHome.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 5, $event)">\n{{ item.FHome.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ item.FHome.Income/item.FHome.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': item.FHome.Stake < 0 }">{{ item.FHome.Stake | currency : \'\' : 0 }}</span></div></div></td><td \nclass="highlight"><div ng-if="item.FEven !== undefined" layout="column" class="income"><div flex class="a" \nng-class="{\'warn\': item.FEven.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 5, $event)">\n{{ item.FEven.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ item.FEven.Income/item.FEven.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': item.FEven.Stake < 0 }">{{ item.FEven.Stake | currency : \'\' : 0 }}</span></div></div></td><td \nclass="highlight"><div ng-if="item.FAway !== undefined" layout="column" class="income"><div flex class="a" \nng-class="{\'warn\': item.FAway.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 5, $event)">\n{{ item.FAway.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ item.FAway.Income/item.FAway.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': item.FAway.Stake < 0 }">{{ item.FAway.Stake | currency : \'\' : 0 }}</span></div></div></td><td><div \nng-if="item.HHome !== undefined" layout="column" class="income"><div flex class="a" \nng-class="{\'warn\': item.HHome.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 15, $event)">\n{{ item.HHome.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ item.HHome.Income/item.HHome.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': item.HHome.Stake < 0 }">{{ item.HHome.Stake | currency : \'\' : 0 }}</span></div></div></td><td><div \nng-if="item.HEven !== undefined" layout="column" class="income"><div flex class="a" \nng-class="{\'warn\': item.HEven.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 15, $event)">\n{{ item.HEven.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ item.HEven.Income/item.HEven.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': item.HEven.Stake < 0 }">{{ item.HEven.Stake | currency : \'\' : 0 }}</span></div></div></td><td><div \nng-if="item.HAway !== undefined" layout="column" class="income"><div flex class="a" \nng-class="{\'warn\': item.HAway.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 15, $event)">\n{{ item.HAway.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ item.HAway.Income/item.HAway.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': item.HAway.Stake < 0 }">{{ item.HAway.Stake | currency : \'\' : 0 }}</span></div></div></td></tr>\n</tbody></table></div></div></div></div></div>');
    $templateCache.put('app/main/saba/statement/risk-control/bet-items/bet-items-dialog.html', '<md-dialog aria-label="share-holder-dialog" class="share-holder-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" \nng-disabled="submitting"><md-icon md-font-icon="icon-keyboard-backspace"></md-icon></md-button><h2>\nChi ti\u1EBFt b\xE1o bi\u1EC3u theo tr\u1EADn</h2><span flex></span><md-button class="md-warn md-raised long-btn" aria-label="close" \nng-click="update($event)" ng-disabled="submitting || hasError" ng-if="$mdMedia(\'gt-xs\') && hasWritePermission"><md-icon \nmd-font-icon="icon-content-save"></md-icon>C\u1EADp nh\u1EADt</md-button></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-toolbar><md-dialog-content class=""><div \nclass="md-dialog-content"><div class="page-layout simple fullwidth report" layout="column"><div class="content" \nlayout="column"><div class="simple-table-container md-whiteframe-2dp"><table class="simple saba bet-items" \nms-responsive-table ng-if="members.length"><thead><tr><th>#</th><th>H\u1ED9i vi\xEAn</th><th>Th\u1EDDi gian</th><th>L\u1EF1a ch\u1ECDn</th><th \nng-if="data.SportGroup !== 3">T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD\n</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th \nng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th ng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr \nng-repeat="item in members track by $index"><td><div>{{ $index + 1 }}</div></td><td class="member"><div>\n{{ item.Username }}</div></td><td class="time"><div class="td-wrap"><div>Ref: {{item.Tx}}</div><div class="TxAt">\n{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div></td><td class="event"><div \nng-if="data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'1\'" \nng-include="\'app/main/accounting/saba/member/template/sport-live.html\'"></div><div \nng-if="data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'0\' && item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/sport-dead.html\'"></div><div \nng-if="data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'System Parlay\'" \nng-include="\'app/main/accounting/saba/member/template/system-parlay.html\'"></div><div \nng-if="data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/mix-parlay.html\'"></div><div \nng-if="data.SportGroup === 0 && item.SingleParlayData !== undefined" \nng-include="\'app/main/accounting/saba/member/template/single-parlay.html\'"></div></td><td class="odds" \nng-if="data.SportGroup !== 3"><div class="td-wrap"><div class="box" layout="row" layout-align="end center" \nng-if="item.ParlayType === \'System Parlay\' || item.ParlayType === \'MixParlay\'" ng-click="ParlayDetails(item, $event)">\n<span><md-icon md-font-icon="icon-information" class="s24"></md-icon></span></div><div layout="column" \nlayout-align="space-between end" ng-if="item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'"><div \nclass="odd" ng-class="{\'warn\' : item.Odds < 0 }">{{ item.Odds }}</div><div class="odd-type">\n{{ item.OddsType | SabaOddsType }}</div></div></div></td><td><div class="stake td-wrap">\n{{ item.Stake | currency : \'\' : 0 }}</div></td><td class="ticket-status"><div class="td-wrap"><div \nclass="ticket-status">{{ item.TicketStatus | SabaTicketStatus }}</div><div class="fiscal-date">\n{{ item.FiscalDate | amDateFormat : \'DD/MM/YYYY\' }}</div><div class="ticket-result" ng-if="item.MatchId" \nng-click="ticketResult(item, $event)" ng-if="data.SportGroup !== 1 && data.SportGroup !== 3">K\u1EBFt qu\u1EA3</div></div></td><td\n class="share" ng-if="$root.User.Level <= 5"><div flex="100" layout="column" layout-align="start stretch" \nclass="td-wrap padding-0"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Agent.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 4"><div flex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0">\n<div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Master.Commission < 0 }">\n{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 3"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Super.WinLose < 0 }">{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span\n flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Manager.Commission < 0 }">\n{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 1"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Company.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="loadMore && !submitting"><tr>\n<td colspan="12" ng-click="loadMemberReport(members[members.length - 1].Tx)">Xem ti\u1EBFp</td></tr></tfoot></table></div>\n</div></div></div></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/saba/statement/risk-control/bet-items/bet-items.html', '<div class="page-layout simple fullwidth report" layout="column"><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-2dp"><div layout="row" layout-align="space-between center" \nclass="member-header"><h3>Chi ti\u1EBFt b\xE1o bi\u1EC3u theo tr\u1EADn</h3><div></div></div><table class="simple saba bet-items" \nms-responsive-table ng-if="vm.members.length"><thead><tr><th>#</th><th>H\u1ED9i vi\xEAn</th><th>Th\u1EDDi gian</th><th>L\u1EF1a ch\u1ECDn</th>\n<th ng-if="vm.data.SportGroup !== 3">T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Tr\u1EA1ng th\xE1i</th><th ng-if="$root.User.Level <= 5">\n\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th \nng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th ng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr \nng-repeat="item in vm.members track by $index"><td><div>{{ $index + 1 }}</div></td><td class="member"><div>\n{{ item.Username }}</div></td><td class="time"><div class="td-wrap"><div>Ref: {{item.Tx}}</div><div class="TxAt">\n{{ item.TxAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></div></td><td class="event"><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'1\'" \nng-include="\'app/main/accounting/saba/member/template/sport-live.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.IsLive === \'0\' && item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/sport-dead.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'System Parlay\'" \nng-include="\'app/main/accounting/saba/member/template/system-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData === undefined && item.ParlayType === \'MixParlay\'" \nng-include="\'app/main/accounting/saba/member/template/mix-parlay.html\'"></div><div \nng-if="vm.data.SportGroup === 0 && item.SingleParlayData !== undefined" \nng-include="\'app/main/accounting/saba/member/template/single-parlay.html\'"></div></td><td class="odds" \nng-if="vm.data.SportGroup !== 3"><div class="td-wrap"><div class="box" layout="row" layout-align="end center" \nng-if="item.ParlayType === \'System Parlay\' || item.ParlayType === \'MixParlay\'" \nng-click="vm.ParlayDetails(item, $event)"><span><md-icon md-font-icon="icon-information" class="s24"></md-icon></span>\n</div><div layout="column" layout-align="space-between end" \nng-if="item.ParlayType !== \'System Parlay\' && item.ParlayType !== \'MixParlay\'"><div class="odd" \nng-class="{\'warn\' : item.Odds < 0 }">{{ item.Odds }}</div><div class="odd-type">{{ item.OddsType | SabaOddsType }}</div>\n</div></div></td><td><div class="stake td-wrap">{{ item.Stake | currency : \'\' : 0 }}</div></td><td \nclass="ticket-status"><div class="td-wrap"><div class="ticket-status">{{ item.TicketStatus | SabaTicketStatus }}</div>\n<div class="fiscal-date">{{ item.FiscalDate | amDateFormat : \'DD/MM/YYYY\' }}</div><div class="ticket-result" \nng-if="item.MatchId" ng-click="vm.ticketResult(item, $event)" \nng-if="vm.data.SportGroup !== 1 && vm.data.SportGroup !== 3">K\u1EBFt qu\u1EA3</div></div></td><td class="share" \nng-if="$root.User.Level <= 5"><div flex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0">\n<div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span\n flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.WinLose < 0 }">{{ item.Master.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Master.Commission < 0 }">\n{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 3"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Super.WinLose < 0 }">{{ item.Super.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span\n flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.WinLose < 0 }">{{ item.Manager.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Manager.Commission < 0 }">\n{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 1"><div \nflex="100" layout="column" layout-align="start stretch" class="td-wrap padding-0"><div \nclass="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Company.Percent }} %</span></div><div class="commission" layout="row">\n<span flex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting">\n<tr><td colspan="12" ng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Tx)">Xem ti\u1EBFp</td></tr></tfoot>\n</table><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear></div></div></div>');
    $templateCache.put('app/main/saba/statement/risk-control/handicap-over-under/handicap-over-under.html', '<div class="page-layout simple fullwidth report hdp" layout="column"><div class="content" layout="column"><div \nclass="content-wrapper md-whiteframe-2dp"><div class="header" layout="row" layout-align="space-between center"><div \nflex="50" class="title">Th\u1ED1ng k\xEA c\u01B0\u1EE3c ch\u1EA5p v\xE0 t\xE0i x\u1EC9u</div><div flex="40" class="league" layout="row" \nlayout-align="end"><md-menu ng-show="vm.leagueArr.length"><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textLeagueLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3" class="league"><md-menu-item><md-button ng-click="vm.selectAllLeague($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.leagueArr"><md-button \nng-click="vm.selectLeague(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-check-circle"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-circle-outline"></md-icon>{{item.LeagueNameEn}}</md-button></md-menu-item>\n</md-menu-content></md-menu></div><div flex="10" class="refresh" layout="row" layout-align="end center"><md-button \nng-click="vm.immediatePrice()" class="md-icon-button md-accent refresh-button" \nng-class="{\'md-warn\' : vm.timer <= 5, \'stop-spin\': vm.timer === \'OFF\' }"><md-icon md-font-icon="icon-refresh" \nclass="s20"></md-icon></md-button><md-menu class="0"><md-button md-no-ink ng-click="$mdMenu.open()" \nclass="md-accent countdown" ng-class="{\'md-warn\' : vm.timer <= 5, \'timer-off\': vm.timer === \'OFF\' }">{{vm.timer}}\n<md-icon md-font-icon="icon-menu-down" class="s20"></md-icon></md-button><md-menu-content width="4" \nng-mouseleave="$mdMenu.close()"><md-menu-item><md-button ng-click="vm.refreshEvent(0)" class="md-warn">T\u1EAFt</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item><md-button ng-click="vm.refreshEvent(30)" \nclass="md-accent">30 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(45)" \nclass="md-accent">45 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(60)" \nclass="md-accent">60 gi\xE2y</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.refreshEvent(75)" \nclass="md-accent">75 gi\xE2y</md-button></md-menu-item></md-menu-content></md-menu></div></div><div \nclass="simple-table-container"><table class="simple risk-control" ms-responsive-table><thead><tr><th rowspan="2">#</th>\n<th rowspan="2">Th\u1EDDi gian</th><th rowspan="2">S\u1EF1 ki\u1EC7n</th><th colspan="2">To\xE0n tr\u1EADn</th><th colspan="2">Hi\u1EC7p 1</th></tr>\n<tr><th>C\u01B0\u1EE3c Ch\u1EA5p</th><th>T\xE0i/X\u1EC9u</th><th>C\u01B0\u1EE3c Ch\u1EA5p</th><th>T\xE0i/X\u1EC9u</th></tr></thead><tbody \nng-if="vm.outStandings.length === 0"><tr><td colspan="7" class="data-not-found">Kh\xF4ng c\xF3 d\u1EEF li\u1EC7u ph\xF9 h\u1EE3p</td></tr>\n</tbody><tbody ng-repeat="item in vm.outStandings"><tr class="game-name"><td colspan="7">\n{{ item.group[0].LeagueNameEn }}</td></tr><tr ng-repeat="match in item.group" ng-class="{ \'live\': match.Live }"><td>\n{{ match.index }}</td><td class="time"><div class="live" layout="column" ng-if="match.Live"><span class="score">\n{{ match.Outstanding[0].Score }} </span><span class="live">Live!</span></div><div layout="row" layout-align="center" \nng-if="!match.Live && match.Today"><span class="today">LIVE</span> <span>{{ match.MatchAt | amDateFormat : \'h:mm A z\' }}\n</span></div><div layout="row" layout-align="center" ng-if="!match.Live && !match.Today"><span>\n{{ match.MatchAt | amDateFormat : \'DD/MM h:mm A z\' }}</span></div></td><td><div>\n{{ match.HomeTeamNameEn }} vs {{ match.AwayTeamNameEn }}</div></td><td class="income"><div layout="column" \nlayout-align="center" ng-if="match.hdp !== undefined"><div class="a" flex ng-class="{\'warn\': match.hdp.Income < 0 }" \nng-click="vm.BetItemsByMatch(match, 1, $event)">{{ match.hdp.Income | currency : \'\' : 0 }}</div><div flex \nclass="percent" layout="row" layout-align="space-between center"><span>\n{{ match.hdp.Income/match.hdp.Stake | percentage : 1 }}</span> <span ng-class="{\'warn\': match.hdp.Stake < 0 }">\n{{ match.hdp.Stake | currency : \'\' : 0 }}</span></div></div></td><td class="income"><div layout="column" \nlayout-align="center" ng-if="match.ou !== undefined"><div class="a" flex ng-class="{\'warn\': match.ou.Income < 0 }" \nng-click="vm.BetItemsByMatch(match, 3, $event)">{{ match.ou.Income | currency : \'\' : 0 }}</div><div flex \nclass="percent" layout="row" layout-align="space-between center"><span>\n{{ match.ou.Income/match.ou.Stake | percentage : 1 }}</span> <span ng-class="{\'warn\': match.ou.Stake < 0 }">\n{{ match.ou.Stake | currency : \'\' : 0 }}</span></div></div></td><td class="income"><div layout="column" \nlayout-align="center" ng-if="match.h_hdp !== undefined"><div class="a" flex \nng-class="{\'warn\': match.h_hdp.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 7, $event)">\n{{ match.h_hdp.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ match.h_hdp.Income/match.h_hdp.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': match.h_hdp.Stake < 0 }">{{ match.h_hdp.Stake | currency : \'\' : 0 }}</span></div></div></td><td \nclass="income"><div layout="column" layout-align="center" ng-if="match.h_ou !== undefined"><div class="a" flex \nng-class="{\'warn\': match.h_ou.Income < 0 }" ng-click="vm.BetItemsByMatch(match, 8, $event)">\n{{ match.h_ou.Income | currency : \'\' : 0 }}</div><div flex class="percent" layout="row" \nlayout-align="space-between center"><span>{{ match.h_ou.Income/match.h_ou.Stake | percentage : 1 }}</span> <span \nng-class="{\'warn\': match.h_ou.Stake < 0 }">{{ match.h_ou.Stake | currency : \'\' : 0 }}</span></div></div></td></tr>\n</tbody></table><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear></div></div></div></div>');
    $templateCache.put('app/main/saba/statement/winlose/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" name="dateField" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/presidential/statement/outstanding/classification/classification.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/presidential/statement/outstanding/classification/template/company.html\'"></div><div \nng-if="vm.report.level === 5" \nng-include="\'app/main/presidential/statement/outstanding/classification/template/agent.html\'"></div><div \nng-if="vm.report.level !== 5 && vm.report.level !== 1" \nng-include="\'app/main/presidential/statement/outstanding/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/presidential/statement/outstanding/general/general.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/presidential/statement/outstanding/general/template/company.html\'"></div><div \nng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/presidential/statement/outstanding/general/template/agency.html\'"></div>');
    $templateCache.put('app/main/presidential/statement/outstanding/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.report.name}}</h3><div></div></div><table class="simple wm-casino" ms-responsive-table \nng-if="vm.memberDetails.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>C\u01B0\u1EE3c/T\u1EF7 l\u1EC7</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th \nng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.memberDetails"><td><div \nclass="padding-4 text-bold">{{ item.BetNumber }}</div><div class="padding-4">\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</div></td><td class="game-bet"><div \nng-bind-html="item.BetType | candidate"></div><div class="padding-4" ng-class="{\'warn\' : item.Odds < 0 }">\n{{ item.Odds }}</div></td><td class="text-right"><div class="padding-4">{{ item.Amount | currency : \'\' : 0 }}</div><div \nclass="font-size-10 padding-4">{{ item.IP }}</div></td><td class="text-center"><div class="padding-4">\n{{ item.CommissionPercent }}% - {{ item.Commission | currency : \'\' : 0 }}</div><div class="padding-4">\n{{ item.GrossCommission | currency : \'\' : 0 }}</div></td><td class="share" ng-if="$root.User.Level <= 5"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center">{{ item.Agent.Income | currency : \'\' : 0 }}</span> <span flex layout="row" \nlayout-align="end center">{{ item.Agent.Percent }} %</span></div><div class="commission" layout="row"><span flex \nlayout="row" layout-align="end center" ng-class="{\'warn\' : item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Agent.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 4"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Master.Income < 0 }">{{ item.Master.Income | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Master.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Master.Commission < 0 }">{{ item.Master.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Master.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 3"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Super.Income < 0 }">\n{{ item.Super.Income | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Super.Commission < 0 }">\n{{ item.Super.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Super.CommissionPercent }} %</span></div></div></td><td class="share" ng-if="$root.User.Level <= 2"><div \nlayout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Manager.Income < 0 }">{{ item.Manager.Income | currency : \'\' : 0 }}\n</span> <span flex layout="row" layout-align="end center">{{ item.Manager.Percent }} %</span></div><div \nclass="commission" layout="row"><span flex layout="row" layout-align="end center" \nng-class="{\'warn\' : item.Manager.Commission < 0 }">{{ item.Manager.Commission | currency : \'\' : 0 }}</span> <span flex \nlayout="row" layout-align="end center">{{ item.Manager.CommissionPercent }} %</span></div></div></td><td class="share" \nng-if="$root.User.Level <= 1"><div layout="column"><div class="share-holder md-deep-orange-50-bg" layout="row"><span \nflex layout="row" layout-align="end center" ng-class="{\'warn\' : item.Company.Income < 0 }">\n{{ item.Company.Income | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.Percent }} %</span></div><div class="commission" layout="row"><span flex layout="row" \nlayout-align="end center" ng-class="{\'warn\' : item.Company.Commission < 0 }">\n{{ item.Company.Commission | currency : \'\' : 0 }}</span> <span flex layout="row" layout-align="end center">\n{{ item.Company.CommissionPercent }} %</span></div></div></td></tr></tbody><tfoot ng-if="vm.loadMore && !vm.submitting">\n<tr><td colspan="12" ng-click="vm.loadMemberDetails(vm.responseByMember[vm.responseByMember.length - 1].Id)">Xem ti\u1EBFp\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/presidential/statement/outstanding/navigation/navigation.html', '<div layout="column" class="outstanding"><div layout="row" layout-align="start center"><div layout="row" \nclass="first-class"><md-radio-group ng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button>\n<md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div><md-autocomplete md-input-minlength="4" \nmd-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nng-disabled="vm.report.category === \'0\' || vm.report.category === 0" md-menu-class="autocomplete-custom-template" \nplaceholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span class="item-title"><strong md-highlight-text="vm.searchText">\n{{item.Username}}</strong></span></md-item-template></md-autocomplete><md-button class="md-raised md-accent" \nng-click="vm.loadReport()">X\xE1c nh\u1EADn</md-button></div></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/cancellation/numbers/dialog/confirm-start.html', '<md-dialog class="confirm-term"><md-dialog-content><div class="md-dialog-content"><div class="title">\nX\xE1c nh\u1EADn ch\u1EA1y l\u1EC7nh h\u1EE7y c\u01B0\u1EE3c?</div><div class="context"><p>H\xE3y \u0111\u1EA3m b\u1EA3o m\u1ECDi th\u1EE9 ch\xEDnh x\xE1c tr\u01B0\u1EDBc khi th\u1EF1c hi\u1EC7n h\u1EE7y phi\u1EBFu.\n</p><p>Vui l\xF2ng x\xE1c nh\u1EADn m\xE3 k\u1EF3 m\u1EDF th\u01B0\u1EDFng tr\u01B0\u1EDBc khi h\u1EE7y phi\u1EBFu</p></div><div class="confirm"><input \nng-model="confirmTerm" name="confirmTerm" class="confirm-term" id="confirm-term" ng-keyup="checkTerm()" \nng-class="{\'warn\' : warn}" placeholder="X\xE1c nh\u1EADn m\xE3 k\u1EF3"></div></div></md-dialog-content><md-dialog-actions layout="row">\n<md-button ng-click="cancel()" class="md-primary" ng-disabled="submitting">Cancel</md-button><span flex></span>\n<md-button ng-click="confirm()" class="md-accent" ng-disabled="submitting || !correctTerm">X\xE1c nh\u1EADn</md-button>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog-actions></md-dialog>');
    $templateCache.put('app/main/traditional/cancellation/numbers/dialog/open-task.html', '<md-dialog class="open-task"><md-toolbar class="md-warn"><div class="md-toolbar-tools"><h2>Chi ti\u1EBFt phi\u1EBFu h\u1EE7y</h2><span \nflex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class=""><div \nclass="md-dialog-content"><table class="simple" ms-responsive-table><tbody><tr><td class="">\u0110\xE0i</td><td>\n{{ task.GameType | gameXs }}</td></tr><tr><td class="">K\u1EC3u c\u01B0\u1EE3c</td><td>{{ task.BetType | bet }}</td></tr><tr><td \nclass="">S\u1ED1</td><td><div class="" layout="row" layout-wrap><span ng-repeat="number in task.Numbers" class="number" \nng-click="getTaskDetails(task, number)">{{ number }}</span></div></td></tr><tr><td class="">H\u1ED9i vi\xEAn</td><td><div \nclass="member" layout="row" layout-wrap><span ng-repeat="player in task.CancelPlayers" class="player" ns-popover \nns-popover-template="parentClass" ns-popover-on-open="getAncestors(player)">{{ player.Username }}</span></div></td></tr>\n<tr><td class="">\u0110\u1EA1i l\xFD</td><td><div class="member" layout="column"><span ng-repeat="player in task.CancelAgents" \nclass="player" ns-popover ns-popover-template="parentClass" ns-popover-on-open="getAncestors(player)"><span \nclass="level">{{ player.Level | group }}: </span>{{ player.Username }} <span class="full-name" \nng-if="player.FullName.length">({{ player.FullName }})</span></span></div></td></tr><tr><td class="">H\u1ED9i vi\xEAn (lo\u1EA1i tr\u1EEB)\n</td><td><div class="member" layout="row" layout-wrap><span ng-repeat="player in task.ExceptPlayers" \nclass="player except" ns-popover ns-popover-template="parentClass" ns-popover-on-open="getAncestors(player)">\n{{ player.Username }}</span></div></td></tr></tbody></table></div></md-dialog-content><md-dialog-actions layout="row">\n<md-button class="md-raised md-warn" ng-disabled="submitting || task.Status !== \'new\'" ng-click="cancelTask(task)">\nH\u1EE7y task</md-button><span flex></span><md-button class="md-raised md-accent" \nng-disabled="submitting || task.Status !== \'new\'" ng-click="startTask(task, $event)">Ch\u1EA1y Task</md-button>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog-actions><script type="text/ng-template" id="parentClass"><div class="triangle"></div>\n        <div class="ns-popover-tooltip ns-popover-ancestors full-name">\n            <div layout="column" class="panel">\n                <div class="header" layout="row" layout-align="space-between center">\n                    <h3>L\u1EDBp cha</h3>\n                    <md-button class="md-icon-button" ng-click="hidePopover()">\n                        <md-icon md-font-icon="icon-close"></md-icon>\n                    </md-button>\n                </div>\n                <div class="content">\n                    <div layout="row" layout-align="center center" ng-if="!parents.length">\n                        <md-progress-circular class="md-hue-2" md-diameter="20px"></md-progress-circular>\n                    </div>\n                    <div layout="row" ng-repeat="item in parents track by $index" class="padding-top-8 parents">\n                        <span flex class="child">\n                            <span flex class="level">{{item.Level | group}}</span>\n                            <span flex ng-if="$index === 0">\n                                {{item.Username}}\n                            </span>\n                            <span flex ng-if="$index !== 0">\n                                <a ui-sref="app.account.agency({match: item.Username, type: \'keyword\', page: 1})">{{item.Username}}</a>\n                                <span class="full-name" ng-if="item.FullName.length">({{item.FullName }})</span>\n                            </span>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div></script></md-dialog>');
    $templateCache.put('app/main/traditional/cancellation/numbers/dialog/task-details.html', '<md-dialog class="open-task-details"><md-toolbar class=""><div class="md-toolbar-tools"><h2>Chi ti\u1EBFt phi\u1EBFu h\u1EE7y</h2><span\n flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class=""><div \nclass="md-dialog-content"><div class="table-title" layout="column"><div class="numbers" layout="row" layout-wrap><span \nclass="number" ng-repeat="number in taskDetails.Numbers" ng-class="{\'active\': currentNumber === number}" \nng-click="newNumberTask(number, currentStatus)">{{ number }}</span></div><div class="status-container"><span \nclass="status" ng-class="{\'active\' : currentStatus === undefined}" ng-click="newNumberTask(currentNumber)">T\u1EA5t c\u1EA3</span>\n <span class="status new" ng-class="{\'active\' : currentStatus === \'new\'}" \nng-click="newNumberTask(currentNumber, \'new\')">New</span> <span class="status pending" \nng-class="{\'active\' : currentStatus === \'pending\'}" ng-click="newNumberTask(currentNumber, \'pending\')">pending</span> \n<span class="status processing" ng-class="{\'active\' : currentStatus === \'processing\'}" \nng-click="newNumberTask(currentNumber, \'processing\')">processing</span> <span class="status completed" \nng-class="{\'active\' : currentStatus === \'completed\'}" ng-click="newNumberTask(currentNumber, \'completed\')">completed\n</span> <span class="status failed" ng-class="{\'active\' : currentStatus === \'failed\'}" \nng-click="newNumberTask(currentNumber, \'failed\')">failed</span> <span class="status cancelled" \nng-class="{\'active\' : currentStatus === \'cancelled\'}" ng-click="newNumberTask(currentNumber, \'cancelled\')">cancelled\n</span></div></div><table class="simple" ms-responsive-table><thead><tr><th \nng-if="DetailsByNumbers[0].ExceptPlayers === undefined">T\xE0i kho\u1EA3n</th><th \nng-if="DetailsByNumbers[0].ExceptPlayers !== undefined">Lo\u1EA1i tr\u1EEB t\xE0i kho\u1EA3n</th><th>K\u1EF3</th><th>\u0110\xE0i</th><th class="">\nKi\u1EC3u c\u01B0\u1EE3c</th><th class="">S\u1ED1</th><th class="">Tr\u1EA1ng th\xE1i</th></tr></thead><tbody><tr \nng-show="DetailsByNumbers.length === 0"><td colspan="6">Ch\u01B0a c\xF3 d\u1EEF li\u1EC7u</td></tr><tr \nng-repeat="item in DetailsByNumbers"><td class="" ng-if="item.ExceptPlayers === undefined">{{item.Username}}</td><td \nclass="with-except" ng-if="item.ExceptPlayers !== undefined"><div layout="row" layout-wrap><span \nng-repeat="player in item.ExceptPlayers">{{ player.Username }}</span></div></td><td class="">{{item.Term}}</td><td \nclass="">{{item.GameType | gameXs }}</td><td class="">{{item.BetType | bet }}</td><td class="">{{item.Number }}</td><td \nclass="status" ng-class="{\n                        \'pending\': item.Status === \'pending\',\n                        \'new\': item.Status === \'new\',\n                        \'failed\': item.Status === \'failed\',\n                        \'cancelled\': item.Status === \'cancelled\',\n                        \'processing\': item.Status === \'processing\',\n                        \'completed\': item.Status === \'completed\'}">{{ item.Status }}</td></tr></tbody></table></div>\n</md-dialog-content><md-dialog-actions layout="row"><span flex></span><md-button class="md-accent" \nng-disabled="submitting" ng-click="getDetails(DetailsByNumbers[DetailsByNumbers.length - 1].Id)" ng-if="hasRecord">\nXem ti\u1EBFp</md-button><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}">\n</md-progress-linear></md-dialog-actions></md-dialog>');
    $templateCache.put('app/main/traditional/cancellation/tickets/new-task/new-task.html', '<div class="page-layout simple fullwidth new-task report" layout="column"><div class="header md-accent-bg" layout="row" \nlayout-align="space-between center"><div layout="row" layout-align="start center"><div class="title">H\u1EE7y c\u01B0\u1EE3c</div>\n</div></div><div class="content" layout="column"><div class="simple-table-container md-whiteframe-1dp"><div \nlayout="row" layout-align="start center" class="task-form"><div><md-autocomplete md-input-minlength="4" \nng-disabled="vm.memberTickets.length" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div><div class="term-selector"><md-select ng-model="vm.Term" placeholder="K\u1EF3" \nng-disabled="vm.memberTickets.length"><md-option ng-repeat="term in vm.termHistories" value="{{term}}" \nng-selected="$index === 0">{{ term }}</md-option></md-select></div><div flex="20" class="tickets-ar"><input \nng-model="vm.Tickets" type="text" autocomplete="off" \nplaceholder="M\xE3 c\u01B0\u1EE3c mu\u1ED1n h\u1EE7y, m\u1ED7i m\xE3 c\u01B0\u1EE3c c\xE1ch nhau b\u1EB1ng 1 d\u1EA5u ph\u1EA9y (,)" ng-disabled="vm.memberTickets.length"></div>\n<div layout="row"><md-button class="md-raised md-accent" ng-click="vm.search()" \nng-disabled="vm.UserId === undefined || !vm.Tickets.length || vm.submitting || vm.memberTickets.length">T\xECm ki\u1EBFm\n</md-button><md-button class="md-raised md-warn" ng-click="vm.memberTickets.length = 0" \nng-show="vm.memberTickets.length">Clear</md-button><md-progress-circular md-diameter="20px" ng-show="vm.submitting">\n</md-progress-circular></div></div><div layout="row" class="task-table"><table class="simple report-table" \nms-responsive-table flex ng-show="vm.memberTickets.length"><thead><tr><th>Ticket</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>\u0110i\u1EC3m</th><th>\nS\u1ED1 phi\u1EBFu</th><th>T\u1ED5ng ti\u1EC1n</th><th>Tr\u1EA1ng th\xE1i</th><th>S\u1ED1 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian</th><th>Hu\u1EF7</th></tr></thead><tbody><tr \nng-repeat="item in vm.memberTickets"><td><span ng-click="vm.getItemsByTicket(item)">{{ item.TicketNumber }}</span></td>\n<td>{{ item.GameType | gameXs }} - {{ item.BetType | bet }}</td><td>{{ item.Point | currency : \'\' : 0 }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td><td><span \nng-if="item.Status === 9">\u0110\xE3 hu\u1EF7</span></td><td>{{ item.Numbers.toString() }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</td><td><a ng-click="vm.cancelTicket(item, $event)">\nHu\u1EF7 phi\u1EBFu</a></td></tr></tbody></table></div></div></div></div>');
    $templateCache.put('app/main/traditional/data-lake/members/dialog/download.html', '<md-dialog class="download-player-total-bets"><md-toolbar class=""><div class="md-toolbar-tools"><h2>Xu\u1EA5t d\u1EEF li\u1EC7u</h2>\n<span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting">\n<md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class=""><div \nclass="md-dialog-content"><div layout="column" class="content"><div layout="row"><div class="title">Query Id</div><div \nclass="data">{{ QueryId }}</div></div><div layout="row" ng-show="response.Status.State"><div class="title">Tr\u1EA1ng th\xE1i\n</div><div class="data">{{ response.Status.State }}</div></div><div layout="row" \nng-show="response.Status.SubmissionDateTime"><div class="title">Th\u1EDDi gian b\u1EAFt \u0111\u1EA7u</div><div class="data">\n{{ response.Status.SubmissionDateTime | amDateFormat : \'HH:mm:ss\' }}</div></div><div layout="row" \nng-show="response.Status.CompletionDateTime"><div class="title">Th\u1EDDi gian k\u1EBFt th\xFAc</div><div class="data">\n{{ response.Status.CompletionDateTime | amDateFormat : \'HH:mm:ss\' }}</div></div></div><div layout="column" \nlayout-align="center center"><md-progress-circular ng-show="submitting" class="md-warn" md-diameter="70">\n</md-progress-circular><md-button class="md-raised md-accent" ng-show="!submitting" ng-href="{{DownloadFile}}" \ntarget="_blank">T\u1EA3i v\u1EC1</md-button></div></div></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/base/base.html', '<div class="page-layout simple fullwidth term-base-parameter" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="column" layout-align="center start"><div \nclass="breadcrumb" layout="row" layout-align="start center"><span class="parent">{{ vm.gameID | gameXs }}</span></div>\n<div class="title">Tham s\u1ED1 c\u01A1 b\u1EA3n</div></div></div><div class="content" layout="column"><div \nclass="simple-table-container md-whiteframe-4dp"><table class="simple" ms-responsive-table><thead><tr><th>K\xE8o</th><th>\nS\u1ED1 gi\u1EA3i</th><th>Min/Tic</th><th>Max/Tic</th><th>Multi</th><th>X\xE1c su\u1EA5t</th><th>T\u1EF7 l\u1EC7</th><th>Ph\xE1t th\u01B0\u1EDFng</th><th>V\u1ED1n\n</th><th>BetTimes</th><th class="help">Cancel Lim<md-tooltip md-direction="top">\nTh\u1EDDi gian (gi\xE2y) cho ph\xE9p suy ngh\u0129 tr\u01B0\u1EDBc khi th\u1EF1c hi\u1EC7n h\u1EE7y phi\u1EBFu</md-tooltip></th><th>Auto Close</th><th class="help">\nMEP<md-tooltip md-direction="top">Gi\xE1 \u0111\u01B0\u1EE3c t\u0103ng t\u1ED1i \u0111a</md-tooltip></th><th class="help">MEP/Level<md-tooltip \nmd-direction="top">Gi\xE1 \u0111\u01B0\u1EE3c t\u0103ng t\u1ED1i \u0111a qua m\u1ED7i c\u1EA5p</md-tooltip></th><th class="help">MIP<md-tooltip md-direction="top">\nManual Inc Point</md-tooltip></th><th class="help">Max MIP/Level<md-tooltip md-direction="top">\nManual Inc Point Per Level</md-tooltip></th><th class="help">MP NoShare<md-tooltip md-direction="top">\nMax Point For No Share</md-tooltip></th><th class="help">MP MaxShare<md-tooltip md-direction="top">\nMax Point For Max Share</md-tooltip></th><th class="help">MP Group<md-tooltip md-direction="top">\nMax Point For Number Group</md-tooltip></th><th ng-if="vm.gameID === 0 || vm.gameID === 1 || vm.gameID === 2">\nRemove Price</th><th ng-if="vm.hasWritePermission">S\u1EEDa</th></tr></thead><tbody><tr ng-repeat="param in vm.parameters" \nng-class="{\'edit\': param.editMode}"><td>{{ param.BetType | bet }}</td><td>{{param.AwardNumber}}</td><td>\n{{param.MinItemPerTicket}}</td><td>{{param.MaxItemPerTicket}}</td><td><md-icon md-font-icon="icon-check" \nclass="md-accent s20" ng-if="param.MultiPay"></md-icon><md-icon md-font-icon="icon-close" class="md-warn s20" \nng-if="!param.MultiPay"></md-icon></td><td>{{ param.Probability }}</td><td>{{ param.Payouts/1000 }}</td><td>\n{{ param.Payouts | currency : \'\' : 0 }}</td><td>{{ param.Price | currency : \'\' : 0 }}</td><td>{{ param.BetTimes }}</td>\n<td><input ng-model="param.CancelLimit" type="text" ng-disabled="!param.editMode"></td><td><input \nng-model="param.AutoCloseAt" type="text" ng-disabled="!param.editMode"></td><td><input ng-model="param.MaxExtraPrice" \nng-currency type="text" ng-disabled="!param.editMode"></td><td><input ng-model="param.MaxExtraPricePerLevel" \nng-currency type="text" ng-disabled="!param.editMode"></td><td><input ng-model="param.ManualIncPoint" ng-currency \ntype="text" ng-disabled="!param.editMode"></td><td><input ng-model="param.MaxManualIncPointPerLevel" ng-currency \ntype="text" ng-disabled="!param.editMode"></td><td><input ng-model="param.MaxPointForNoShare" ng-currency type="text" \nng-disabled="!param.editMode"></td><td><input ng-model="param.MaxPointForMaxShare" ng-currency type="text" \nng-disabled="!param.editMode"></td><td><input ng-model="param.MaxPointForNumberGroup" ng-currency type="text" \nng-disabled="!param.editMode"></td><td ng-if="vm.gameID === 0 || vm.gameID === 1 || vm.gameID === 2"><div \nng-if="param.BetType === 20 || param.BetType === 27" layout="column"><md-checkbox aria-label="Checkbox" \nng-model="param.RemoveExtraPrice.Automatic" ng-disabled="!param.editMode">T\u1EF1 \u0111\u1ED9ng</md-checkbox><md-checkbox \naria-label="Checkbox" ng-model="param.RemoveExtraPrice.Manual" ng-disabled="!param.editMode">Th\u1EE7 c\xF4ng</md-checkbox>\n<md-checkbox aria-label="Checkbox" ng-model="param.RemoveExtraPrice.Relationship" ng-disabled="!param.editMode">\nChuy\u1EC3n gi\xE1</md-checkbox></div></td><td ng-if="vm.hasWritePermission"><md-button class="md-icon-button" \nng-click="vm.editParam(param)" ng-hide="param.editMode"><md-icon md-font-icon="icon-dots-horizontal"></md-icon>\n</md-button><md-button class="md-icon-button md-accent s20" ng-click="vm.save(param)" ng-hide="!param.editMode"><md-icon\n md-font-icon="icon-check"></md-icon></md-button><md-button class="md-icon-button md-warn s20" \nng-click="vm.cancel(param)" ng-hide="!param.editMode"><md-icon md-font-icon="icon-close"></md-icon></md-button></td>\n</tr></tbody></table></div></div></div>');
    $templateCache.put('app/main/traditional/settings/parameter/dialog/by-point-avg.html', '<md-dialog aria-label="change-by-point" class="change-by-point"><form name="formPrice" \nng-submit="changePricePointAvg()" novalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nC\u1EA5u h\xECnh t\u0103ng gi\xE1 theo \u0111i\u1EC3m trung b\xECnh cho {{ param.BetType | bet }}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="md-change-by-point-dialog avg"><div class="md-dialog-content" layout="column"><div layout="row" class="label">\n<div flex="33">Start</div><div flex="33">Step</div><div flex="33">Point</div></div><div layout="row" class="rUlIdfFX">\n<div flex="33"><input type="text" ng-currency required ng-model="pointAvg.Start" ng-disabled="!writePermission"></div>\n<div flex="33"><input type="text" ng-currency required ng-model="pointAvg.Step" ng-disabled="!writePermission"></div>\n<div flex="33"><input type="text" ng-currency required ng-model="pointAvg.Point" ng-disabled="!writePermission"></div>\n</div></div></md-dialog-content></form></md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/dialog/by-point.html', '<md-dialog aria-label="change-by-point" class="change-by-point"><form name="formPrice" ng-submit="changePricePoint()" \nnovalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nC\u1EA5u h\xECnh t\u0103ng gi\xE1 theo \u0111i\u1EC3m cho {{ param.BetType | bet }}</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="md-change-by-point-dialog"><div class="md-dialog-content" \nlayout="column"><div layout="row" class="label"><div flex="25">B\u1EAFt \u0111\u1EA7u</div><div flex="25">K\u1EBFt th\xFAc</div><div flex="25">\nB\u01B0\u1EDBc nh\u1EA3y</div><div flex="25">\u0110i\u1EC3m</div></div><div layout="row" class="rUlIdfFX" \nng-repeat="item in pricePoints track by $index"><div flex="25"><input type="text" ng-currency required \nng-model="item.Start" ng-disabled="!writePermission"></div><div flex="25"><input type="text" ng-currency required \nng-model="item.End" ng-disabled="!writePermission"></div><div flex="25"><input type="text" ng-currency required \nng-model="item.Step" ng-disabled="!writePermission"></div><div flex="25"><input type="text" ng-currency required \nng-model="item.Point" ng-disabled="!writePermission"></div></div><div layout="row" class="rUlIdfFX"><div flex="25" \nclass="text-right">T\u1ED5ng th\u1EA7u c\xF4ng ty</div><div flex="25"><input type="text" ng-currency required \nng-model="param.TotalCompanyPointAvg" ng-disabled="!writePermission"></div><div flex="50" class="note">\n\u0110i\u1EC3m trung b\xECnh c\xF4ng ty th\u1EA7u m\u1ED7i phi\xEAn</div></div><div layout="row" class="rUlIdfFX"><div flex="25" class="text-right">\n\u0110\xF3ng s\u1ED1 d\u01B0\u1EDBi trung b\xECnh</div><div flex="25"><input type="text" ng-currency required ng-model="param.CloseAtPoint" \nng-disabled="!writePermission"></div><div flex="50" class="note">N\u1EBFu t\u1ED5ng \u0111i\u1EC3m v\u1EC1 c\xF4ng ty d\u01B0\u1EDBi m\u1EE9c trung b\xECnh</div>\n</div><div layout="row" class="rUlIdfFX"><div flex="25" class="text-right">\u0110\xF3ng s\u1ED1 tr\xEAn trung b\xECnh</div><div flex="25">\n<input type="text" ng-currency required ng-model="param.CloseAtPointAboveAvg" ng-disabled="!writePermission"></div><div \nflex="50" class="note">N\u1EBFu t\u1ED5ng \u0111i\u1EC3m v\u1EC1 c\xF4ng ty tr\xEAn m\u1EE9c trung b\xECnh</div></div><div layout="row" class="rUlIdfFX"><div \nflex="25" class="text-right">\xC1p d\u1EE5ng cho t\u1EA5t c\u1EA3</div><div flex="25"><md-checkbox ng-model="param.CloseAtPointForAll" \naria-label="Close At Point For All" ng-disabled="!writePermission"></md-checkbox></div><div flex="50" class="note">\nCh\u1ECDn n\u1EBFu mu\u1ED1n \u0111\xF3ng s\u1ED1 theo \u0111i\u1EC3m \u1EDF c\xE1c ki\u1EC3u ch\u1EA1y gi\xE1 t\u1EF1 \u0111\u1ED9ng kh\xE1c</div></div></div></md-dialog-content></form>\n</md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/dialog/by-risk.html', '<md-dialog aria-label="change-by-point" class="change-by-point"><form name="formRisk" ng-submit="changePriceRisk()" \nnovalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nC\u1EA5u h\xECnh t\u0103ng gi\xE1 theo r\u1EE7i ro cho {{ param.BetType | bet }}</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="md-change-by-point-dialog"><div class="md-dialog-content" \nlayout="column"><div layout="row" class="label"><div flex="25">B\u1EAFt \u0111\u1EA7u</div><div flex="25">K\u1EBFt th\xFAc</div><div flex="25">\nB\u01B0\u1EDBc nh\u1EA3y</div><div flex="25">\u0110i\u1EC3m</div></div><div layout="row" class="rUlIdfFX" \nng-repeat="item in priceRisks track by $index"><div flex="25"><input type="text" ng-currency required \nng-model="item.Start" ng-disabled="!writePermission"></div><div flex="25"><input type="text" ng-currency required \nng-model="item.End" ng-disabled="!writePermission"></div><div flex="25"><input type="text" ng-currency required \nng-model="item.Step" ng-disabled="!writePermission"></div><div flex="25"><input type="text" ng-currency required \nng-model="item.Point" ng-disabled="!writePermission"></div></div><div layout="row" class="rUlIdfFX"><div flex="25">\n\u0110\xF3ng s\u1ED1 t\u1EA1i</div><div flex="25"><input type="text" ng-currency required ng-model="param.CloseAtRisk" \nng-disabled="!writePermission"></div></div></div></md-dialog-content></form></md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/dialog/profile.dialog.html', '<md-dialog aria-label="new-profile" class="new-profile"><form name="formProfile" ng-submit="newProfile()" novalidate>\n<md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>T\u1EA1o Profile m\u1EDBi</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content><div class="md-dialog-content">\n<md-input-container class="md-block"><label>T\xEAn</label> <input ng-model="profileName" autocomplete="off" required>\n</md-input-container></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="formProfile.$invalid || formProfile.$pristine || submitting">OK</md-button></md-dialog-actions></form>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear>\n</md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/risk/risk.html', '<div class="page-layout simple fullwidth term-open-parameter" layout="column"><div class="header md-accent-bg" \nlayout="row" layout-align="space-between center"><div layout="column" layout-align="center start"><div \nclass="breadcrumb" layout="row" layout-align="start center"><span class="parent">{{ vm.gameID | gameXs }}</span></div>\n<div class="title" layout="row" layout-align="space-between center"><div class="text">C\u1EA5u h\xECnh t\u0103ng gi\xE1 t\u1EF1 \u0111\u1ED9ng</div>\n<md-button class="md-fab md-mini md-primary" aria-label="Use Android" ng-click="vm.init()" ng-disabled="vm.processing">\n<md-icon md-font-icon="icon-refresh" ng-class="{\'processing\': vm.processing}"></md-icon></md-button></div></div></div>\n<div class="content" layout="column"><div class="simple-table-container md-whiteframe-4dp"><table \nclass="simple term-open-parameter" ms-responsive-table><thead><tr><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>T\u0103ng gi\xE1 theo \u0111i\u1EC3m\n</th><th>T\u0103ng gi\xE1 theo r\u1EE7i ro</th><th>T\u0103ng gi\xE1 theo \u0110i\u1EC3m TB</th><th>Ki\u1EC3u t\u0103ng gi\xE1</th><th ng-if="vm.hasWritePermission">\nS\u1EEDa</th></tr></thead><tr ng-repeat="param in vm.parameters"><td>{{param.GameType | gameXs }}</td><td>\n{{param.BetType | bet }}</td><td><md-button class="md-icon-button" ng-click="vm.changeByPointConf(param, $event)">\n<md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><md-button class="md-icon-button" \nng-click="vm.changeByRiskConf(param, $event)" ng-if="vm.available(param.BetType)"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><md-button class="md-icon-button" \nng-click="vm.changePointAvgConf(param, $event)" ng-if="vm.available(param.BetType)"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button></td><td><span ng-if="!param.editMode">\n{{ param.Type | riskType }}</span><md-select ng-model="param.Type" aria-label="changePointType" ng-if="param.editMode">\n<md-option ng-repeat="item in vm.changePointType" ng-value="item.id">{{item.name}}</md-option></md-select></td><td><div \nng-if="vm.hasWritePermission && param.BetType !== 27"><md-button class="md-icon-button" ng-click="vm.editParam(param)" \nng-hide="param.editMode"><md-icon md-font-icon="icon-dots-horizontal"></md-icon></md-button><md-button \nclass="md-icon-button md-accent" ng-click="vm.save(param)" ng-hide="!param.editMode"><md-icon md-font-icon="icon-check">\n</md-icon></md-button><md-button class="md-icon-button md-warn" ng-click="vm.cancel(param)" ng-hide="!param.editMode">\n<md-icon md-font-icon="icon-close"></md-icon></md-button></div></td></tr></table></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/duplicate-ip/dialog/member-by-ip.html', '<md-dialog class="member-by-ip"><form name="close-betting"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<h2>{{item.IP}}</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" \nng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass=""><div class="md-dialog-content"><table class="simple" ms-responsive-table><thead><tr><th>T\xE0i kho\u1EA3n</th><th>\nS\u1ED1 phi\u1EBFu</th><th>\u0110i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\u0110i\u1EC3m (c\xF4ng ty)</th><th>Ti\u1EC1n th\u1EA7u (c\xF4ng ty)</th><th>% Th\u1EA7u</th><th \ncolspan="2"></th></tr></thead><tbody><tr ng-repeat="item in membersByIp"><td class="">{{ item.Username }}</td><td \nclass="">{{ item.Quantity | currency : \'\' : 0 }}</td><td class="">{{ item.Point | currency : \'\' : 0 }}</td><td class="">\n{{ item.Amount | currency : \'\' : 0 }}</td><td class="">{{ item.Company_Point | currency : \'\' : 0 }}</td><td class="">\n{{ item.Company_Amount | currency : \'\' : 0 }}</td><td class="">\n{{ item.Company_Point/item.Point*100 | currency : \'\' : 1 }}%</td><td class=""><a \nui-sref="app.traditional.statement.outstanding.general({game: \'0,1,2,3,4,5\', name: item.Username, level: 9, matchId: item.UserId})">\nTi\u1EC1n ch\u01B0a x\u1EED l\xFD</a></td><td class=""><a \nui-sref="app.traditional.statement.member.general({from: Term, to: Term, uid: item.UserId, name: item.Username, level: 9, game: \'0,1,2,3,4,5\'})">\nSao k\xEA</a></td></tr></tbody></table></div><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog-content></form></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/max-betting/parameter/parameter.html', '<div id="simple-table" class="page-layout simple fullwidth max-betting"><div class="content"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="table-title"><div layout="row"><div flex></div><md-button \nclass="md-raised md-accent" ng-click="vm.updateAll()" ng-disabled="vm.selected.length === 0">C\u1EADp nh\u1EADt</md-button></div>\n</div><table class="simple" ms-responsive-table><thead><tr><th></th><th><md-checkbox aria-label="Select All" \nng-checked="vm.isChecked()" md-indeterminate="vm.isIndeterminate()" ng-click="vm.toggleAll()"></md-checkbox></th><th>\n\u0110\xE0i m\u1EDF th\u01B0\u1EDFng</th><th class="text-right">Ki\u1EC3u c\u01B0\u1EE3c</th><th class="text-right">Max/Number</th><th class="text-right">\nTotal/Number</th><th class="text-right">Max/No Share</th><th class="text-right">Max/Max Share</th><th \nclass="text-right">Action</th></tr></thead><tbody><tr ng-repeat="item in vm.parameters"><td><md-button \nclass="md-icon-button md-accent s20" ng-hide="vm.exists(item.Id, vm.selected)" ng-disabled="vm.selected.length === 0" \nng-click="vm.copy(item)"><md-icon md-font-icon="icon-content-copy"></md-icon></md-button></td><td class=""><md-checkbox \nng-checked="vm.exists(item.Id, vm.selected)" ng-click="vm.toggle(item.Id, vm.selected)"></md-checkbox></td><td class="">\n{{ item.GameType | gameXs }}</td><td class="text-right">{{ item.BetType | bet }}</td><td class="text-right"><input \nng-model="item.MaxPointPerNumber" ng-currency type="text" ng-disabled="!item.editMode"></td><td class="text-right">\n<input ng-model="item.TotalPointPerNumber" ng-currency type="text" ng-disabled="!item.editMode"></td><td \nclass="text-right"><input ng-model="item.MaxPointForNoShare" ng-currency type="text" ng-disabled="!item.editMode"></td>\n<td class="text-right"><input ng-model="item.MaxPointForMaxShare" ng-currency type="text" ng-disabled="!item.editMode">\n</td><td class="text-right"><md-progress-circular ng-show="item.updating" class="md-hue-2" md-diameter="20px">\n</md-progress-circular><md-button class="md-icon-button" ng-click="vm.edit(item)" ng-hide="item.editMode"><md-icon \nmd-font-icon="icon-dots-horizontal"></md-icon></md-button><md-button class="md-icon-button md-accent s20" \nng-click="vm.save(item, 1)" ng-hide="!item.editMode"><md-icon md-font-icon="icon-check"></md-icon></md-button><md-button\n class="md-icon-button md-warn s20" ng-click="vm.cancel(item.Id)" ng-hide="!item.editMode"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></td></tr><tr><td colspan="8" ng-if="vm.parameters.length === 0" \nclass="text-center">Ch\u01B0a c\xF3 d\u1EEF li\u1EC7u</td></tr></tbody></table><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/max-betting/member/add-members.html', '<md-dialog aria-label="" class="add-members"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nTh\xEAm t\xE0i kho\u1EA3n</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" \nng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content>\n<div class="md-dialog-content"><textarea ng-model="listMembers" name="listMembers" rows="10" ng-disabled="submitting" \nplaceholder="Danh s\xE1ch t\xE0i kho\u1EA3n, c\xE1ch nhau b\u1EB1ng d\u1EA5u ph\u1EA9y. T\u1ED1i \u0111a 100 t\xE0i kho\u1EA3n m\u1ED7i l\u1EA7n."></textarea></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="check()" ng-disabled="submitting">\u0110\u1EBFm\n</md-button><span class="member-length" ng-show="memberLength">{{ memberLength }} t\xE0i kho\u1EA3n</span> <span flex></span>\n<md-button ng-click="update()" ng-disabled="submitting">C\u1EADp nh\u1EADt</md-button></md-dialog-actions></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/max-betting/member/member.html', '<div id="simple-table" class="page-layout simple fullwidth max-betting-member"><div class="content"><div \nclass="simple-table-container md-whiteframe-4dp"><div class="table-title"><div layout="row" \nlayout-align="space-between center"><md-button class="md-raised md-warn" ng-click="vm.deleteMembers($ev)" \nng-disabled="vm.selected.length === 0">X\xF3a</md-button><md-button class="md-raised md-accent" ng-click="vm.addMembers()">\nTh\xEAm t\xE0i kho\u1EA3n</md-button></div></div><table class="simple" ms-responsive-table><thead><tr><th><md-checkbox \naria-label="Select All" ng-checked="vm.isChecked()" md-indeterminate="vm.isIndeterminate()" ng-click="vm.toggleAll()">\n</md-checkbox></th><th class="text-left">T\xE0i kho\u1EA3n</th><th class="text-left">Full Name</th><th class="text-left">Level\n</th></tr></thead><tbody><tr ng-repeat="item in vm.members"><td class=""><md-checkbox \nng-checked="vm.exists(item.Username, vm.selected)" ng-click="vm.toggle(item.Username, vm.selected)"></md-checkbox></td>\n<td class="text-left">{{ item.Username }}</td><td class="text-left">{{ item.FullName }}</td><td class="text-left">\n{{ item.Level | group }}</td></tr><tr><td colspan="8" ng-if="vm.members.length === 0" class="text-center">\nCh\u01B0a c\xF3 d\u1EEF li\u1EC7u</td></tr></tbody><tfoot ng-if="vm.hasMoreRecord"><tr><th colspan="8" class="text-right"><md-button \nclass="md-accent" ng-click="vm.loadMembers(vm.currentPage + 1)" ng-disabled="vm.submitting">Xem ti\u1EBFp</md-button></th>\n</tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear></div></div></div>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/classification/classification.html', '<div ng-if="$root.User.Level === 1" \nng-include="\'app/main/traditional/statement/winLose/classification/template/company.html\'"></div><div \nng-if="$root.User.Level === 5" ng-include="\'app/main/traditional/statement/winLose/classification/template/agent.html\'">\n</div><div ng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/traditional/statement/winLose/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/traditional/statement/winLose/general/template/company.html\'">\n</div><div ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/traditional/statement/winLose/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/traditional/statement/winLose/general/template/member.html\'"></div>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8 navigation"><div \nlayout="row" layout-xs="column" layout-align="start start"><div layout="row"><md-select ng-model="vm.Term" \nplaceholder="K\u1EF3" ng-change="vm.changeTerm()"><md-option ng-repeat="term in vm.termHistory" value="{{term}}" \nng-selected="term === vm.report.term">{{term}}</md-option></md-select><md-menu><md-button aria-label="Open menu" \nclass="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin \nmd-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button \nng-click="vm.selectAllProduct($index)" md-prevent-menu-close="md-prevent-menu-close"><md-icon \nmd-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider></md-menu-divider>\n<md-menu-item ng-repeat="item in vm.productions"><md-button ng-click="vm.selectProduct(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><table \nclass="simple report-table member-report" ms-responsive-table ng-if="vm.members.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span>\n</div></th><th><div class="table-header"><span class="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EF1c thu</span>\n</div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng / Thua</span></div></th><th \nng-if="$root.User.Level <= 5"><div class="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 4"><div class="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 3"><div class="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level <= 1"><div class="table-header"><span class="column-title">C\xF4ng ty</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">IP</span></div></th></tr></thead>\n<tbody><tr ng-repeat="item in vm.members"><td>{{item.Term}}.{{item.TicketNumber}}</td><td>\n{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.data.GameType | gameXs }} - {{vm.data.BetType | bet }}</td><td \nng-if="vm.data.betType !== 5 && vm.data.betType !== 6" ng-class="{\'blue\' : item.WinLose > 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup ng-if="item.PrizeNr">\n[{{ item.PrizeNr }}]</sup></td><td ng-if="vm.data.betType === 5 || vm.data.betType === 6" \nng-class="{\'blue\' : item.WinLose < 0}">{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub>\n</td><td>{{item.Payouts | currency : \'\' : 0}}</td><td>{{item.Price | currency : \'\' : 0}}</td><td>\n{{item.Point | currency : \'\' : 0}}</td><td>{{item.Amount | currency : \'\' : 0}}</td><td class="sum" \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td><td \nng-if="$root.User.Level <= 2"><a ng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="15" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="7">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}\n</td><td>{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.members | sumOfValue : \'WinLose\') < 0 }">\n{{vm.members | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td><td colspan="5"></td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/risk-management/members/dialog/big.board.dialog.html', '<md-dialog aria-label="One789" class="company-board"><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nTh\u1ED1ng k\xEA h\xE0ng \u0111ang v\xE0o</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content class="scrollable" ms-scroll><div \nclass="md-dialog-content"><md-tabs md-dynamic-height md-border-bottom><md-tab label="Mi\u1EC1n B\u1EAFc 1" \nmd-on-select="onTabSelected(0)"><md-content class=""><div layout="column"><div class="table-container"><table \nclass="table"><thead><tr><th>Th\u1EC3 lo\u1EA1i</th><th colspan="10"><div layout="row"><input ng-model="interval" type="number">\n {{count}}</div></th></tr></thead><tbody><tr ng-repeat="odd in oddData" ng-class="{\'live\': odd.BetType === 20}"><td><div\n class="" layout="column"><div>{{ odd.BetType | bet }}</div><div>{{ odd.Income/1000 | currency : \'\' : 0 }}</div><div \nclass="total-point">{{ odd.TotalPoint | currency : \'\' : 0 }}</div></div></td><td \nng-repeat="number in odd.Numbers | limitTo: 10 "><div class="number" layout="column" \nng-mouseover="hoverIn(number.Number)" ng-mouseleave="hoverOut()" \nng-class="{\'hover\': number.hover, \'highlightByPoint\': number.highlightByPoint, \'highlightByRisk\': number.highlightByRisk, \'disabled\': number.Stop}">\n<div layout="row" layout-align="center center"><div flex="50" class="num"><div \nng-style="{\'background-color\': colors[number.classIndex] }">{{ number.Number }}</div></div><div flex="50" class="price">\n{{ number.Price | currency : \'\' : 0 }}</div></div><div class="point">\n{{ number.UplinePoint.Company | currency : \'\' : 0 }}</div><div class="risk">\n{{ number.CompanyRiskAmount/1000 | currency : \'\' : 0 }}</div></div></td></tr></tbody></table></div><div \nclass="setting-alarm"><table class="table simple"><thead><tr><th>C\xE0i \u0111\u1EB7t c\u1EA3nh b\xE1o <a ng-click="playSound()">(Test Sound)\n</a></th><th ng-repeat="item in monitorBets">{{ item | bet }}</th></tr></thead><tbody><tr><td>\u0110i\u1EC3m<br><small>L\u1EDBn h\u01A1n\n</small></td><td ng-repeat="item in monitorBets"><input ng-model="alarmSetting.point[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr><tr class="risk"><td>R\u1EE7i ro<br><small>Nh\u1ECF h\u01A1n</small></td><td \nng-repeat="item in monitorBets"><input ng-model="alarmSetting.risk[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr></tbody></table></div></div></md-content></md-tab><md-tab label="Mi\u1EC1n B\u1EAFc 2" \nmd-on-select="onTabSelected(1)"><md-content class=""><div layout="column"><div class="table-container"><table \nclass="table"><thead><tr><th>Th\u1EC3 lo\u1EA1i</th><th colspan="10"><div layout="row"><input ng-model="interval" type="number">\n {{count}}</div></th></tr></thead><tbody><tr ng-repeat="odd in oddData" ng-class="{\'live\': odd.BetType === 20}"><td><div\n class="" layout="column"><div>{{ odd.BetType | bet }}</div><div>{{ odd.Income/1000 | currency : \'\' : 0 }}</div><div \nclass="total-point">{{ odd.TotalPoint | currency : \'\' : 0 }}</div></div></td><td \nng-repeat="number in odd.Numbers | limitTo: 10 "><div class="number" layout="column" \nng-mouseover="hoverIn(number.Number)" ng-mouseleave="hoverOut()" \nng-class="{\'hover\': number.hover, \'highlightByPoint\': number.highlightByPoint, \'highlightByRisk\': number.highlightByRisk, \'disabled\': number.Stop}">\n<div layout="row" layout-align="center center"><div flex="50" class="num"><div \nng-style="{\'background-color\': colors[number.classIndex] }">{{ number.Number }}</div></div><div flex="50" class="price">\n{{ number.Price | currency : \'\' : 0 }}</div></div><div class="point">{{ number.Point | currency : \'\' : 0 }}</div><div \nclass="risk">{{ number.RiskAmount/1000 | currency : \'\' : 0 }}</div></div></td></tr></tbody></table></div><div \nclass="setting-alarm"><table class="table simple"><thead><tr><th>C\xE0i \u0111\u1EB7t c\u1EA3nh b\xE1o <a ng-click="playSound()">(Test Sound)\n</a></th><th ng-repeat="item in monitorBets">{{ item | bet }}</th></tr></thead><tbody><tr><td>\u0110i\u1EC3m<br><small>L\u1EDBn h\u01A1n\n</small></td><td ng-repeat="item in monitorBets"><input ng-model="alarmSetting.point[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr><tr class="risk"><td>R\u1EE7i ro<br><small>Nh\u1ECF h\u01A1n</small></td><td \nng-repeat="item in monitorBets"><input ng-model="alarmSetting.risk[item]" ng-currency type="tel" \nng-blur="updateSetting();"></td></tr></tbody></table></div></div></md-content></md-tab></md-tabs></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/members/dialog/choose-ip.html', '<md-dialog class="choose-ip"><md-toolbar class="md-warn"><div class="md-toolbar-tools"><h2>\nCh\u1ECDn m\u1ED9t \u0111\u1ECBa ch\u1EC9 IP c\u1EA7n t\xECm h\u1ED9i vi\xEAn</h2><span flex></span><md-button class="md-icon-button" aria-label="close" \nng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><div layout="row" layout-wrap><div \nclass="ip" ng-repeat="ip in IPs"><span ng-click="chooseIP(ip)">{{ ip }}</span></div></div></div></md-dialog-content>\n</md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/members/dialog/ip.dialog.html', '<md-dialog class="found-ip"><md-toolbar class="md-warn"><div class="md-toolbar-tools"><h2>T\xECm th\u1EA5y {{ IPs.length }} IP\n</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" \nng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="md-dialog-md"><div class="md-dialog-content"><div layout="column"><div class="ip" ng-repeat="ip in IPs">{{ ip }}\n</div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="replace()" \nclass="md-raised md-accent">Thay th\u1EBF</md-button></md-dialog-actions></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/members/dialog/member-by-ip.html', '<md-dialog class="choose-ip"><md-toolbar class="md-warn"><div class="md-toolbar-tools"><h2>Danh s\xE1ch h\u1ED9i vi\xEAn theo IP\n</h2><span flex></span><md-button class="md-icon-button" aria-label="close" ng-click="cancel()" \nng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="md-dialog-md"><div class="md-dialog-content"><div layout="row" layout-wrap><div class="ip" \nng-repeat="item in membersByIp"><span ng-click="chooseMember(item)">{{ item.Username }}</span></div><div \nclass="not-found" ng-show="membersByIp.length === 0">Kh\xF4ng c\xF3 h\u1ED9i vi\xEAn n\xE0o theo IP n\xE0y</div></div></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/members/dialog/upline-dialog.html', '<md-dialog class="up-line-point"><form name="close-betting"><md-toolbar class="md-warn"><div class="md-toolbar-tools">\n<h2>Upline Point - {{ item.num }}</h2><span flex></span><md-button class="md-icon-button" aria-label="close" \nng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon></md-button></div>\n</md-toolbar><md-dialog-content class="md-dialog-md"><div class="md-dialog-content"><table class="simple" \nms-responsive-table><thead><tr><th></th><th>\u0110i\u1EC3m</th></tr></thead><tbody><tr><td class="">C\xF4ng ty</td><td class="point">\n{{ item.UplinePoint.Company | currency : \'\' : 0 }} <span>({{ item.UplinePoint.Company/total*100 | currency : \'\' : 1 }}%)\n</span></td></tr><tr><td class="">Manager</td><td class="point">{{ item.UplinePoint.Manager | currency : \'\' : 0 }} \n<span>({{ item.UplinePoint.Manager/total*100 | currency : \'\' : 1 }}%)</span></td></tr><tr><td class="">Master</td><td \nclass="point">{{ item.UplinePoint.Master | currency : \'\' : 0 }} <span>\n({{ item.UplinePoint.Master/total*100 | currency : \'\' : 1 }}%)</span></td></tr><tr><td class="">Super</td><td \nclass="point">{{ item.UplinePoint.Super | currency : \'\' : 0 }} <span>\n({{ item.UplinePoint.Super/total*100 | currency : \'\' : 1 }}%)</span></td></tr><tr><td class="">Agent</td><td \nclass="point">{{ item.UplinePoint.Agent | currency : \'\' : 0 }} <span>\n({{ item.UplinePoint.Agent/total*100 | currency : \'\' : 1 }}%)</span></td></tr><tr><td class="">T\u1ED5ng</td><td \nclass="point">{{ total | currency : \'\' : 0 }}</td></tr></tbody></table></div></md-dialog-content></form></md-dialog>');
    $templateCache.put('app/main/traditional/statement/canceled/classification/classification.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="2">H\u1ED9i vi\xEAn</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>T\u1ED5ng ti\u1EC1n</th></tr></thead><tbody \nng-repeat="game in vm.classifications track by $index"><tr class="game-name"><td colspan="8">\n{{ game.GameType | gameXs }}</td></tr><tr ng-repeat="bet in game.Values track by $index" \nng-click="vm.classify(game.GameType, bet.BetType)" class="cursor-pointer"><td>{{ bet.BetType | bet }}</td><td>\n{{ bet.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ bet.Player.Amount | currency : \'\' : 0 }}</td></tr><tr \nclass="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>\n{{ game.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ game.SumByGame.Player.Amount | currency : \'\' : 0 }}\n</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/canceled/general/general.html', '<table class="simple report-table" ms-responsive-table ng-if="vm.report.level !== 9 && vm.response.length"><thead><tr>\n<th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="2">H\u1ED9i vi\xEAn</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>\nT\u1ED5ng ti\u1EC1n</th></tr></thead><tbody><tr ng-repeat="item in vm.response" ng-click="vm.viewReport(item)" \nclass="cursor-pointer"><td>{{item.Username}}</td><td>{{item.FullName}}</td><td>\n{{item.Player.Quantity | currency : \'\' : 0}}</td><td>{{item.Player.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.response | sumOfTwoKey : \'Player\' : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.response | sumOfTwoKey : \'Player\' : \'Amount\' | currency : \'\' : 0}}</td></tr></tfoot></table><table \nclass="simple report-table" ms-responsive-table ng-if="vm.report.level === 9 && vm.response.length"><thead><tr><th>\nH\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>S\u1ED1 ti\u1EC1n c\u01B0\u1EE3c</th></tr></thead><tbody><tr \nng-repeat="item in vm.response" ng-click="vm.memberReport(item, vm.report.name)" class="cursor-pointer"><td>\n{{ vm.report.name }}</td><td>{{ item.GameType | gameXs }}</td><td>{{ item.BetType | bet }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Amount | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="3">T\u1ED5ng c\u1ED9ng</td><td>{{vm.response | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.response | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/canceled/classify/classify.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classify.length"><thead><tr><th>H\u1ED9i vi\xEAn\n</th><th>\u0110\xE0i</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th>S\u1ED1 \u0111\u01A1n</th><th>Th\xE0nh ti\u1EC1n</th></tr></thead><tbody><tr \nng-repeat="item in vm.classify track by $index" ng-click="vm.memberReport(item)" class="cursor-pointer"><td>\n{{ item.Username }}</td><td>{{ vm.report.game | gameXs }}</td><td>{{ vm.report.bet | bet }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td colspan="3">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.classify | sumOfTwoKey : \'Player\' : \'Quantity\' | currency : \'\' : 0 }}\n</td><td>{{ vm.classify | sumOfTwoKey : \'Player\' : \'Amount\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/member/byMember/byMember.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.responseByMember.length"><thead>\n<tr><th>H\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>\nTh\u1EAFng thua</th></tr></thead><tbody><tr ng-repeat="item in vm.responseByMember" ng-click="vm.viewReport(item)" \nclass="cursor-pointer"><td>{{ vm.report.name}}</td><td>{{ item.GameType | gameXs }}</td><td>{{ item.BetType | bet }}\n</td><td>{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Point | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.WinLose < 0}">\n{{item.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td colspan="3">T\u1ED5ng c\u1ED9ng</td><td>\n{{vm.responseByMember | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.responseByMember | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.responseByMember | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.responseByMember | sumOfValue : \'WinLose\') < 0}">\n{{vm.responseByMember | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/canceled/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nname="dateField" md-min-date="vm.minDate" md-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/statement/canceled/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt \u0111\u01A1n h\xE0ng \u0111\xE3 h\u1EE7y h\u1ED9i vi\xEAn: {{vm.report.name}} - {{ vm.report.game | gameXs }} - {{ vm.report.bet | bet }}</h3>\n<div></div></div><table class="simple report-table member-report" ms-responsive-table ng-if="vm.members.length"><thead>\n<tr><th>M\xE3 c\u01B0\u1EE3c</th><th>Th\u1EDDi gian h\u1EE7y</th><th>S\u1ED1 ch\u1ECDn</th><th>T.L tr\u1EA3 th\u01B0\u1EDFng</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th>\u0110i\u1EC3m</th><th>\nTh\u1EF1c thu</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th><th ng-if="$root.User.Level <= 2">IP</th></tr></thead><tbody><tr \nng-repeat="item in vm.members" ng-class="{\'company-cancel\' : item.CancelType === 1 }"><td>\n{{ item.Term}}.{{ item.TicketNumber}} <sub>{{ item.CancelType | cancelType }}</sub></td><td>\n{{ item.CancelledAt | amDateFormat : \'DD/MM/YYYY HH:mm:ss\' }}</td><td ng-class="{\'blue\' : item.winLose > 0}">\n{{ item.Numbers.toString() }}</td><td>{{ item.Payouts | currency : \'\' : 0}}</td><td>{{ item.Price | currency : \'\' : 0}}\n</td><td>{{ item.Point | currency : \'\' : 0}}</td><td>{{ item.Amount | currency : \'\' : 0}}</td><td \nng-if="$root.User.Level <= 5">{{ item.Agent.Percent }} %</td><td ng-if="$root.User.Level <= 4">\n{{ item.Master.Percent }} %</td><td ng-if="$root.User.Level <= 3">{{ item.Super.Percent }} %</td><td \nng-if="$root.User.Level <= 2">{{ item.Manager.Percent }} %</td><td ng-if="$root.User.Level <= 1">\n{{ item.Company.Percent }} %</td><td ng-if="$root.User.Level <= 2">{{ item.IP }}</td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="17" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="5">T\u1ED5ng c\u1ED9ng</td><td class="text-center">\n{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table>\n<md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/statement/member/classification/classification.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.response.length"><thead><tr><th>\nH\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>Th\u1EAFng thua\n</th><th>C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.response"><td>{{vm.report.name}}</td><td>\n{{item.gameType | game}}</td><td>{{item.betType | bet}}</td><td>{{item.quantity | currency : \'\' : 0}}</td><td>\n{{item.point | currency : \'\' : 0}}</td><td>{{item.amount | currency : \'\' : 0}}</td><td class="sum" \nng-class="{\'warn\' : item.winLose < 0}">{{item.winLose | currency : \'\' : 0}}</td><td class="sum" \nng-class="{\'warn\' : item.companyWinLose < 0}">{{item.companyWinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr>\n<td colspan="3">T\u1ED5ng c\u1ED9ng</td><td>{{vm.response | sumOfValue : \'quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.response | sumOfValue : \'point\' | currency : \'\' : 0}}</td><td>\n{{vm.response | sumOfValue : \'amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.response | sumOfValue : \'winLose\') < 0}">\n{{vm.response | sumOfValue : \'winLose\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.response | sumOfValue : \'companyWinLose\') < 0}">\n{{vm.response | sumOfValue : \'companyWinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/member/details/details.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.report.name}}</h3><div></div></div><table class="simple report-table member-report" \nms-responsive-table ng-if="vm.memberDetails.length"><thead><tr><th>M\xE3 c\u01B0\u1EE3c</th><th>S\u1ED1 k\u1EF3</th><th>Th\u1EDDi gian</th><th>\u0110\xE0i\n</th><th>Th\u1EC3 lo\u1EA1i</th><th>S\u1ED1 ch\u1ECDn</th><th>T.L tr\u1EA3 th\u01B0\u1EDFng</th><th>Ti\u1EC1n \u0111\u1EA7u</th><th>\u0110i\u1EC3m</th><th>Th\u1EF1c thu</th><th>\nTh\u1EAFng / Thua</th><th ng-if="$root.User.Level <= 5">\u0110\u1EA1i l\xFD</th><th ng-if="$root.User.Level <= 4">T\u1ED5ng \u0111\u1EA1i l\xFD</th><th \nng-if="$root.User.Level <= 3">C\u1ED5 \u0111\xF4ng</th><th ng-if="$root.User.Level <= 2">Qu\u1EA3n tr\u1ECB</th><th \nng-if="$root.User.Level <= 1">C\xF4ng ty</th></tr></thead><tbody><tr ng-repeat="item in vm.memberDetails"><td>\n{{item.TicketNumber}}</td><td>{{item.Term}}</td><td>{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.report.game | gameXs }}</td><td>{{vm.report.bet | bet }}</td><td \nng-if="vm.report.bet !== 5 && vm.report.bet !== 6" ng-class="{\'blue\' : item.WinLose > 0}">{{item.Numbers.toString()}} \n<sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup ng-if="item.PrizeNr">[{{ item.PrizeNr }}]</sup></td><td \nng-if="vm.report.bet === 5 || vm.report.bet === 6" ng-class="{\'blue\' : item.WinLose < 0}">{{item.Numbers.toString()}} \n<sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub></td><td>{{item.Payouts | currency : \'\' : 0}}</td><td>\n{{item.Price | currency : \'\' : 0}}</td><td>{{item.Point | currency : \'\' : 0}}</td><td>\n{{item.Amount | currency : \'\' : 0}}</td><td class="sum" ng-class="{\'warn\' : item.WinLose < 0}">\n{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td></tr></tbody><tfoot \nng-if="vm.hasRecord && !vm.submitting"><tr><td colspan="17" class="hasRecord"><a \nng-click="vm.loadMemberDetails(vm.memberDetails[vm.memberDetails.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="8">T\u1ED5ng c\u1ED9ng</td><td>\n{{vm.memberDetails | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.memberDetails | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.memberDetails | sumOfValue : \'WinLose\') < 0 }">\n{{vm.memberDetails | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/member/general/general.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.response.length"><thead><tr><th \nrowspan="2">H\u1ED9i vi\xEAn</th><th rowspan="2">K\u1EF3</th><th colspan="4">H\u1ED9i vi\xEAn</th><th colspan="2" \nng-if="$root.User.Level === 1">C\xF4ng ty</th></tr><tr><th>S\u1ED1 m\xE3 c\u01B0\u1EE3c</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>T\u1ED5ng ti\u1EC1n</th><th>\nTh\u1EAFng thua</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th ng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.response"><td>{{ item.Username }}</td><td>{{ item.Term }}</td><td>\n{{ item.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Point | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.WinLose < 0}">\n{{ item.WinLose | currency : \'\' : 0 }}</td><td ng-if="$root.User.Level === 1">\n{{ item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" class="sum" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{ item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.response | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{ vm.response | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{ vm.response | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : 0-(vm.response | sumOfValue : \'WinLose\') < 0}">\n{{0-(vm.response | sumOfValue : \'WinLose\') | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : (vm.response | sumOfTwoKey : \'Company\' : \'Commission\') < 0}">\n{{ vm.response | sumOfTwoKey : \'Company\' : \'Commission\' | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : (vm.response | sumOfTwoKey : \'Company\' : \'WinLose\') < 0}">\n{{ vm.response | sumOfTwoKey : \'Company\' : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/member/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" name="dateField" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category" ng-disabled="!vm.username"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button>\n<md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div><div><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/statement/member/executive/executive.html', '<table class="simple report-table member-winlose-report" ms-responsive-table ng-if="vm.memberWinLoses.length"><thead>\n<tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="4">H\u1ED9i vi\xEAn</th><th colspan="2" \nng-if="$root.User.Level === 1">C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua\n</th><th ng-if="$root.User.Level === 1">Hoa h\u1ED3ng</th><th ng-if="$root.User.Level === 1">Th\u1EAFng thua</th></tr></thead>\n<tbody><tr ng-repeat="item in vm.memberWinLoses" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>\n{{item.Username}}</td><td>{{item.FullName}}</td><td class="highlight">{{item.Quantity | currency : \'\' : 0}}</td><td \nclass="highlight">{{item.Point | currency : \'\' : 0}}</td><td class="highlight">{{item.NetAmount | currency : \'\' : 0}}\n</td><td class="highlight" ng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td \nng-if="$root.User.Level === 1">{{item.Company.Commission | currency : \'\' : 0}}</td><td ng-if="$root.User.Level === 1" \nng-class="{\'warn\' : item.Company.WinLose < 0}">{{item.Company.WinLose | currency : \'\' : 0}}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="8" class="hasRecord"><a ng-click="vm.loadMemberWinLose(vm.nextPage)">Xem ti\u1EBFp</a>\n</td></tr></tfoot></table><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/statement/outstanding/classification/classification.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/traditional/statement/outstanding/classification/template/company.html\'"></div><div \nng-if="vm.report.level === 5" \nng-include="\'app/main/traditional/statement/outstanding/classification/template/agent.html\'"></div><div \nng-if="vm.report.level !== 5 && vm.report.level !== 1" \nng-include="\'app/main/traditional/statement/outstanding/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/traditional/statement/outstanding/general/general.html', '<div ng-if="vm.report.level === 1" \nng-include="\'app/main/traditional/statement/outstanding/general/template/company.html\'"></div><div \nng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/traditional/statement/outstanding/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/traditional/statement/outstanding/general/template/member.html\'">\n</div>');
    $templateCache.put('app/main/traditional/statement/outstanding/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.report.name}}</h3><div></div></div><table \nclass="simple report-table member-report outstanding" ms-responsive-table datatable="ng" dt-options="vm.dtOptions">\n<thead><tr><th><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span>\n</div></th><th><div class="table-header"><span class="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EF1c thu</span>\n</div></th><th ng-if="$root.User.Level <= 5"><div class="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div>\n</th><th ng-if="$root.User.Level <= 4"><div class="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div>\n</th><th ng-if="$root.User.Level <= 3"><div class="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th\n ng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level <= 1"><div class="table-header"><span class="column-title">C\xF4ng ty</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">IP</span></div></th></tr></thead>\n<tbody><tr ng-repeat="item in vm.members"><td>{{ item.Term }}.{{ item.TicketNumber }}</td><td>\n{{ item.CreatedAt | amDateFormat : \'HH:mm:ss\' }}</td><td>{{ vm.report.game | gameXs }} - {{ vm.report.bet | bet }}</td>\n<td>{{ item.Numbers.toString()}} <sup ng-if="item.PrizeNr">[{{ item.PrizeNr }}]</sup></td><td>\n{{ item.Payouts | currency : \'\' : 0}}</td><td>{{ item.Price | currency : \'\' : 0}}</td><td>\n{{ item.Point | currency : \'\' : 0}}</td><td>{{ item.Amount | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td><td \nng-if="$root.User.Level <= 2"><a ng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}\n</td><td>{{vm.members | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table><div \nng-if="vm.hasRecord && !vm.submitting" class="outstanding-more"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></div><md-progress-linear \nmd-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/main/traditional/statement/winLose/classification/classification.html', '<div ng-if="$root.User.Level === 1" \nng-include="\'app/main/traditional/statement/winLose/classification/template/company.html\'"></div><div \nng-if="$root.User.Level === 5" ng-include="\'app/main/traditional/statement/winLose/classification/template/agent.html\'">\n</div><div ng-if="$root.User.Level !== 5 && $root.User.Level !== 1" \nng-include="\'app/main/traditional/statement/winLose/classification/template/super.html\'"></div>');
    $templateCache.put('app/main/traditional/statement/outstanding/navigation/alarm-setting-dialog.html', '<md-dialog aria-label="alarmSetting" class="alarm-setting"><md-toolbar class="md-accent"><div class="md-toolbar-tools">\n<h2>Alarm Setting</h2><span flex></span><md-button class="md-icon-button" ng-click="close()"><md-icon \nmd-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content><div \nclass="md-dialog-content"><p>B\u1EADt c\u1EA3nh b\xE1o khi ti\u1EC1n c\u01B0\u1EE3c h\u1ED9i vi\xEAn:</p><div layout="column"><div layout="row" \nclass="margin-bottom-16"><div flex="30">L\u1EDBn h\u01A1n</div><div flex="70"><input type="tel" name="WinMax" \nng-model="alarm.Amount" autocomplete="off" ng-currency></div></div><div layout="row" class="margin-bottom-16"><div \nflex="30">Ngo\u1EA1i tr\u1EEB</div><div flex="70"><textarea ng-model="alarm.Excludes" name="string"></textarea></div></div></div>\n<div layout="column"><div layout="row" class="margin-bottom-16"><div flex="30">Refresh Interval</div><div flex="70">\n<input type="tel" name="Refresh" ng-model="alarm.Refresh" autocomplete="off" ng-currency ng-blur="updateRefresh()">\n</div></div><div layout="row" class="refresh" flex-offset="30"><span>Value = 0 will be disabled</span></div></div></div>\n</md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="cancel()" class="md-warn">Disable All\n</md-button><span flex></span><md-button ng-click="update()" class="md-accent">OK</md-button></md-dialog-actions>\n</md-dialog>');
    $templateCache.put('app/main/traditional/statement/outstanding/navigation/navigation.html', '<div layout="column" class="outstanding"><div layout="row" layout-align="start center"><div class="menu-button">\n<md-menu><md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">\n{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content \nwidth="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" md-prevent-menu-close="md-prevent-menu-close">\n<md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button></md-menu-item><md-menu-divider>\n</md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button ng-click="vm.selectProduct(item)" \nmd-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}"><md-icon ng-if="item.active" \nmd-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div><div layout="row" class="first-class"><md-radio-group ng-model="vm.report.category"><md-radio-button \nvalue="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i</md-radio-button></md-radio-group></div></div>\n<div layout="row" layout-align="space-between center" class="check-term"><div layout="row"><md-autocomplete \nmd-input-minlength="4" md-selected-item="vm.userSelected" md-search-text="vm.searchText" \nmd-search-text-change="vm.searchTextChange(vm.searchText)" md-items="item in vm.querySearch(vm.searchText)" \nmd-selected-item-change="vm.selectedItemChange(item)" md-item-text="item.Username" \nmd-menu-class="autocomplete-custom-template" placeholder="T\xECm theo t\xE0i kho\u1EA3n"><md-item-template><span \nclass="item-title"><strong md-highlight-text="vm.searchText">{{item.Username}}</strong></span></md-item-template>\n</md-autocomplete><md-button class="md-raised md-accent" ng-click="vm.loadReport()">X\xE1c nh\u1EADn</md-button></div><div flex>\n</div><div><md-button class="md-icon-button button-sound" ng-click="vm.outAlarmSetting($event)" \nng-class="{\'md-accent\' : $root.alsc}" ng-if="$root.User.Level === 1"><md-icon md-font-icon="icon-volume-off" \nng-if="!$root.alsc"></md-icon><md-icon md-font-icon="icon-volume" ng-if="$root.alsc"></md-icon></md-button></div></div>\n</div><md-progress-linear md-mode="indeterminate" class="md-warn" ng-class="{\'hide\' : !vm.submitting}">\n</md-progress-linear>');
    $templateCache.put('app/main/traditional/statement/winLose/general/general.html', '<div ng-if="vm.report.level === 1" ng-include="\'app/main/traditional/statement/winLose/general/template/company.html\'">\n</div><div ng-if="vm.report.level !== 1 && vm.report.level !== 9" \nng-include="\'app/main/traditional/statement/winLose/general/template/agency.html\'"></div><div \nng-if="vm.report.level === 9" ng-include="\'app/main/traditional/statement/winLose/general/template/member.html\'"></div>');
    $templateCache.put('app/main/traditional/statement/winLose/member/member.html', '<div layout="row" layout-align="space-between center" class="member-header"><h3>\nChi ti\u1EBFt b\xE1o bi\u1EC3u h\u1ED9i vi\xEAn: {{vm.data.name}}</h3><div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear><table \nclass="simple report-table member-report" ms-responsive-table ng-if="vm.members.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th><div class="table-header"><span class="column-title">M\xE3 c\u01B0\u1EE3c</span></div></th>\n<th><div class="table-header"><span class="column-title">Th\u1EDDi gian</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EC3 lo\u1EA1i</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ch\u1ECDn</span>\n</div></th><th><div class="table-header"><span class="column-title">T.L tr\u1EA3 th\u01B0\u1EDFng</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n \u0111\u1EA7u</span></div></th><th><div class="table-header"><span \nclass="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EF1c thu</span>\n</div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng / Thua</span></div></th><th \nng-if="$root.User.Level <= 5"><div class="table-header"><span class="column-title">\u0110\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 4"><div class="table-header"><span class="column-title">T\u1ED5ng \u0111\u1EA1i l\xFD</span></div></th><th \nng-if="$root.User.Level <= 3"><div class="table-header"><span class="column-title">C\u1ED5 \u0111\xF4ng</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">Qu\u1EA3n tr\u1ECB</span></div></th><th \nng-if="$root.User.Level <= 1"><div class="table-header"><span class="column-title">C\xF4ng ty</span></div></th><th \nng-if="$root.User.Level <= 2"><div class="table-header"><span class="column-title">IP</span></div></th></tr></thead>\n<tbody><tr ng-repeat="item in vm.members"><td>{{item.Term}}.{{item.TicketNumber}}</td><td>\n{{item.CreatedAt | amDateFormat : \'DD/MM HH:mm:ss\' }}</td><td>\n{{vm.data.GameType | gameXs }} - {{vm.data.BetType | bet }}</td><td \nng-if="vm.data.betType !== 5 && vm.data.betType !== 6" ng-class="{\'blue\' : item.WinLose > 0}">\n{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub> <sup ng-if="item.PrizeNr">\n[{{ item.PrizeNr }}]</sup></td><td ng-if="vm.data.betType === 5 || vm.data.betType === 6" \nng-class="{\'blue\' : item.WinLose < 0}">{{item.Numbers.toString()}} <sub ng-if="item.MultiPay">x{{ item.MultiPay }}</sub>\n</td><td>{{item.Payouts | currency : \'\' : 0}}</td><td>{{item.Price | currency : \'\' : 0}}</td><td>\n{{item.Point | currency : \'\' : 0}}</td><td>{{item.NetAmount | currency : \'\' : 0}}</td><td class="sum" \nng-class="{\'warn\' : item.WinLose < 0}">{{item.WinLose | currency : \'\' : 0}}</td><td ng-if="$root.User.Level <= 5">\n{{item.Agent.Percent = item.Agent.Percent == undefined ? 0 : item.Agent.Percent}} %</td><td \nng-if="$root.User.Level <= 4">{{item.Master.Percent = item.Master.Percent == undefined ? 0 : item.Master.Percent}} %\n</td><td ng-if="$root.User.Level <= 3">\n{{item.Super.Percent = item.Super.Percent == undefined ? 0 : item.Super.Percent}} %</td><td \nng-if="$root.User.Level <= 2">{{item.Manager.Percent = item.Manager.Percent == undefined ? 0 : item.Manager.Percent}} %\n</td><td ng-if="$root.User.Level <= 1">\n{{item.Company.Percent = item.Company.Percent == undefined ? 0 : item.Company.Percent}} %</td><td \nng-if="$root.User.Level <= 2"><a ng-click="vm.viewIp(item.IP)">{{ item.IP }}</a></td></tr></tbody><tfoot \nng-if="vm.loadMore && !vm.submitting"><tr><td colspan="15" class="hasRecord"><a \nng-click="vm.loadMemberReport(vm.members[vm.members.length - 1].Id)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.loadMore"><tr><td colspan="6">T\u1ED5ng c\u1ED9ng</td><td>{{vm.members | sumOfValue : \'Point\' | currency : \'\' : 0}}\n</td><td>{{vm.members | sumOfValue : \'NetAmount\' | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : (vm.members | sumOfValue : \'WinLose\') < 0 }">\n{{vm.members | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td><td colspan="6"></td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/navigation/navigation.html', '<div layout="column"><div layout="column" layout-align="start start" class="padding-bottom-8"><div layout="row" \nlayout-xs="column" layout-align="start start"><div layout="row" layout-align-xs="space-between center"><div \nclass="padding-right-8"><label>T\u1EEB ng\xE0y</label><md-datepicker ng-model="vm.report.from" md-open-on-focus \nmd-min-date="vm.minDate" md-max-date="vm.maxDate" ng-blur="vm.closeFromDate()" name="dateField" \nng-change="vm.changeDate($event)"></md-datepicker></div><div class="padding-right-8"><label>\u0110\u1EBFn ng\xE0y</label>\n<md-datepicker ng-model="vm.report.to" md-open-on-focus md-min-date="vm.minDate" md-max-date="vm.maxDate" \nmd-is-open="vm.isOpenTo" name="dateField"></md-datepicker></div></div><div layout="row" \nng-class="{\'padding-top-16\': $mdMedia(\'xs\') }" layout-align-xs="space-between center"><div class="menu-button"><md-menu>\n<md-button aria-label="Open menu" class="md-raised md-accent" ng-click="$mdMenu.open($event)">{{vm.selectedLabel}}\n<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon></md-button><md-menu-content width="3"><md-menu-item \nng-repeat="item in vm.termLists"><md-button ng-click="vm.changeRange(item)" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="!item.active" md-font-icon="icon-checkbox-blank-circle-outline"></md-icon><md-icon ng-if="item.active" \nmd-font-icon="icon-check-circle"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content></md-menu></div>\n<div class="menu-button"><md-menu><md-button aria-label="Open menu" class="md-raised md-accent" \nng-click="$mdMenu.open($event)">{{vm.textProductLabel}}<md-icon md-menu-origin md-font-icon="icon-menu-down"></md-icon>\n</md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="vm.selectAllProduct($index)" \nmd-prevent-menu-close="md-prevent-menu-close"><md-icon md-font-icon="icon-check-all"></md-icon>Ch\u1ECDn t\u1EA5t c\u1EA3</md-button>\n</md-menu-item><md-menu-divider></md-menu-divider><md-menu-item ng-repeat="item in vm.productions"><md-button \nng-click="vm.selectProduct(item)" md-prevent-menu-close="md-prevent-menu-close" ng-class="{\'md-accent\': item.active}">\n<md-icon ng-if="item.active" md-font-icon="icon-checkbox-marked-outline"></md-icon><md-icon ng-if="!item.active" \nmd-font-icon="icon-checkbox-blank-outline"></md-icon>{{item.name}}</md-button></md-menu-item></md-menu-content>\n</md-menu></div></div></div><div layout="row" layout-align="start start" class="padding-top-16"><div><md-radio-group \nng-model="vm.report.category"><md-radio-button value="0">T\u1ED5ng h\u1EE3p</md-radio-button><md-radio-button value="1">Ph\xE2n lo\u1EA1i\n</md-radio-button></md-radio-group></div><div><md-button class="md-raised md-accent" ng-click="vm.loadReport()" \nng-disabled="vm.submitting">X\xE1c nh\u1EADn</md-button></div></div></div><div layout="row" layout-align="start center"><div \nclass="breadcrumb" ng-show="vm.breadcrumbs.length">Xem b\xE1o bi\u1EC3u: <span ng-repeat="b in vm.breadcrumbs" \nng-class="{\'first\' : $first}"><b ng-click="vm.jumpTo(b)">{{ b.name }}</b><md-icon md-font-icon="icon-chevron-right" \nclass="s16" ng-hide="$last"></md-icon></span></div></div></div><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !vm.submitting}"></md-progress-linear>');
    $templateCache.put('app/core/directives/ms-stepper/templates/vertical/step/vertical-step.html', '<md-button class="ms-stepper-navigation-item" \nng-class="{\'current\': MsStepper.isStepCurrent(stepInfo.stepNumber), \'valid\': MsStepper.isStepValid(stepInfo.stepNumber), \'disabled\': MsStepper.isStepDisabled(stepInfo.stepNumber), \'optional\': MsStepper.isStepOptional(stepInfo.stepNumber)}" \nng-click="MsStepper.gotoStep(stepInfo.stepNumber)" ng-disabled="MsStepper.isStepDisabled(stepInfo.stepNumber)" \nng-hide="MsStepper.isStepHidden(stepInfo.stepNumber)" aria-label="Stepper navigation button" layout="row" \nlayout-align="start center"><div class="step" layout="row" layout-align="center center"><span \nng-if="!MsStepper.isStepValid(stepInfo.stepNumber) || MsStepper.isStepOptional(stepInfo.stepNumber)"><i \nclass="icon icon-checkbox-blank-circle-outline s18 md-accent-fg"></i> </span><span \nng-if="MsStepper.isStepValid(stepInfo.stepNumber) && !MsStepper.isStepOptional(stepInfo.stepNumber)"><i \nclass="icon icon-check-circle s18 md-accent-fg"></i></span></div><div layout="column" layout-align="start start"><div \nclass="title" ng-if="stepInfo.stepTitleTranslate">{{stepInfo.stepTitleTranslate | translate }}</div><div class="title" \nng-if="!stepInfo.stepTitleTranslate">{{stepInfo.stepTitle}}</div><div class="subtitle" \nng-if="MsStepper.isStepOptional(stepInfo.stepNumber)">Optional</div></div></md-button><div \nclass="ms-stepper-step-content" ng-transclude></div><div class="ms-stepper-controls" layout="row" \nlayout-align="start center" ng-show="MsStepper.isStepCurrent(stepInfo.stepNumber)"><md-button \nclass="md-accent md-raised" ng-disabled="MsStepper.isFirstStep()" ng-click="MsStepper.gotoPreviousStep()">Back\n</md-button><md-button class="md-accent md-raised" ng-if="!MsStepper.isLastStep()" \nng-disabled="!MsStepper.isStepValid(MsStepper.currentStepNumber)" ng-click="MsStepper.gotoNextStep()">Next</md-button>\n<md-button type="submit" class="md-accent md-raised" ng-click="MsStepper.resetForm()" ng-if="MsStepper.isLastStep()" \nng-disabled="!MsStepper.isFormValid()">Submit</md-button></div>');
    $templateCache.put('app/main/accounting/combination/group/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="4">\nH\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">\n{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng\n</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.WinLose < 0 }">{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.My.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">\n{{ item.My.Total | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\' : item.Company < 0 }">\n{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/accounting/combination/group/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="4">H\u1ED9i vi\xEAn</th>\n<th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span>\n</div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/accounting/combination/win-lose/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.ProductType)">{{ item.ProductType | Production }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a\n ng-click="vm.classify(item.ProductType)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.ProductType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.ProductType)">{{ item.Company | currency : \'\' : 0}}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/win-lose/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">S\u1EA3n ph\u1EA9m</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th>\n<th rowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th>\n</tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th>\n</tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index" ng-class="{\'over\': item.over}"><td><a \nng-click="vm.classify(item.ProductType)">{{ item.ProductType | Production }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.GrossCommission | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.WinLose < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.Commission < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.ProductType)">{{ item.Company | currency : \'\' : 0}}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0}}</td>\n<td>{{ vm.SumTotal.GrossCommission | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Commission | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Commission < 0}">{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/win-lose/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">S\u1EA3n ph\u1EA9m</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th>\n<th rowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng\n</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.ProductType)">\n{{ item.ProductType | Production }}</a></td><td class="highlight"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.ProductType)">{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td class="highlight">\n<a ng-click="vm.classify(item.ProductType)">{{ item.GrossCommission | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.ProductType)">{{ item.Player.Commission | currency : \'\' : 0 }}</a></td>\n<td class="highlight sum" ng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.ProductType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.ProductType)">{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.Agent.Total | currency : \'\' : 0 }}</a></td><td class="highlight" ng-class="{\'warn\' : item.My.WinLose < 0}"><a \nng-click="vm.classify(item.ProductType)">{{ item.My.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.ProductType)">{{ item.My.Commission | currency : \'\' : 0}}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.My.Total < 0}"><a ng-click="vm.classify(item.ProductType)">\n{{ item.My.Total | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.ProductType)">{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">{{ vm.SumTotal.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">{{ vm.SumTotal.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/win-lose/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3" \nng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th \ncolspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\nHoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th \nng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span>\n</div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records" ng-class="{\'over\': item.over}"><td><a ng-click="vm.viewReport(item)">\n{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight" \nng-class="{ \'warn\' : item.Agent.Commission < 0 }">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum highlight" ng-class="{ \'warn\': item.Agent.Total < 0 }">\n{{ item.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum" \nng-class="{ \'warn\' : item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.WinLose < 0 }">{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\' : item.My.Commission < 0 }">{{ item.My.Commission | currency : \'\' : 0 }}</td><td \nclass="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 11 : 15 }}" class="hasRecord"><a \nng-click="vm.getChildrenReportGroupByUser(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr>\n<td>T\u1ED5ng c\u1ED9ng</td><td></td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">\n{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">\n{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Commission < 0 }">{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/win-lose/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2" class="head">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th \nrowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records" ng-class="{\'over\': item.over}"><td class="head"><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>{{ item.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Player.WinLose < 0 }">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\': item.Agent.Commission < 0 }">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td \nclass="highlight" ng-class="{ \'warn\': item.Company.Commission < 0 }">{{ item.Company.Commission | currency : \'\' : 0 }}\n</td><td class="highlight sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="15" \nclass="hasRecord"><a ng-click="vm.getChildrenReportGroupByUser(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td class="head">T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Commission < 0 }">\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Commission < 0 }">\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/combination/win-lose/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>S\u1EA3n ph\u1EA9m</th><th><div class="table-header"><span \nclass="column-title">\u0110\u01A1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports" \nng-class="{\'over\': item.over}"><td><a ng-click="vm.viewMemberReport(item)">{{ vm.report.name }}</a></td><td>\n{{ item.ProductType | Production }}</td><td>{{ item.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Amount | currency : \'\' : 0 }}</td><td>{{ item.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.Commission | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : item.WinLose < 0 }">\n{{ item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td></td><td>\n{{ vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'NetAmount\' | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{ vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/accounting/saba/member/template/result/blank.html', '<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()">\n<md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar>\n<md-dialog-content><div class="md-dialog-content"><div><table class="simple"><thead><tr><th>L\u1EF1a ch\u1ECDn</th><th>T\u1EF7 l\u1EC7 c\u01B0\u1EE3c\n</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng thua</th><th>Tr\u1EA1ng th\xE1i</th></tr></thead><tbody><tr><td></td><td></td><td></td><td>\n</td><td></td></tr></tbody></table></div></div></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/accounting/saba/member/template/result/single-parlay.html', '<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 {{ item.SportType | sabaSportsBet }}</h2><span flex></span><md-button \nclass="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="single-parlay"><div class="md-dialog-content"><div \nclass="match"><div class="home-away" layout="row" layout-align="center center"><div class="home">\n{{ item.HomeTeamNameEn }}</div><div class="score"><span>\n{{ item.MatchDetails.HomeScore }} - {{ item.MatchDetails.AwayScore }}</span></div><div class="away">\n{{ item.AwayTeamNameEn }}</div></div></div><div><table class="simple"><thead><tr><th>L\u1EF1a ch\u1ECDn</th><th>Tr\u1EA1ng th\xE1i</th>\n</tr></thead><tbody><tr ng-repeat="parlay in item.SingleParlayData"><td>{{ parlay.SelectionName }}</td><td>\n{{ parlay.Status | SabaTicketStatus }}</td></tr></tbody><tfoot><tr><td>K\u1EBFt qu\u1EA3 cu\u1ED1i c\xF9ng</td><td>\n{{ item.TicketStatus | SabaTicketStatus }}</td></tr></tfoot></table></div></div></md-dialog-content></md-dialog>');
    $templateCache.put('app/main/accounting/saba/member/template/result/sport-live.html', '<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3 {{ item.SportType | sabaSportsBet }}</h2><span flex></span><md-button \nclass="md-icon-button" ng-click="cancel()"><md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="sport-live"><div class="md-dialog-content"><div class="match">\n<div class="home-away" layout="row" layout-align="center center"><div class="home" \nng-class="{\'win\' : item.MatchDetails.HomeScore > item.MatchDetails.AwayScore }">{{ item.HomeTeamNameEn }}</div>-<div \nclass="away" ng-class="{\'win\' : item.MatchDetails.HomeScore < item.MatchDetails.AwayScore }">{{ item.AwayTeamNameEn }}\n</div></div></div><div class="result" layout="row" layout-align="space-between center"><div flex class="half-time" \nlayout="column"><div class="header">Hi\u1EC7p 1</div><div class="score"><span>\n{{ item.MatchDetails.HtHomeScore }} - {{ item.MatchDetails.HtAwayScore }}</span></div></div><div flex class="full-time">\n<div class="header">C\u1EA3 tr\u1EADn</div><div class="score"><span>\n{{ item.MatchDetails.HomeScore }} - {{ item.MatchDetails.AwayScore }}</span></div></div></div></div></md-dialog-content>\n</md-dialog>');
    $templateCache.put('app/main/accounting/saba/member/template/result/system-parlay.html', '<md-dialog aria-label="saba-parlay" class="saba-result-dialog"><md-toolbar class="md-accent"><div \nclass="md-toolbar-tools"><h2>K\u1EBFt qu\u1EA3</h2><span flex></span><md-button class="md-icon-button" ng-click="cancel()">\n<md-icon md-font-icon="icon-close" aria-label="Close dialog"></md-icon></md-button></div></md-toolbar><md-dialog-content\n class="sport-live system-parlay"><div class="md-dialog-content" ng-repeat="parlay in item.ParlayData"><div \nclass="match"><div class="sport-type">{{ parlay.SportType | sabaSportsBet }}</div><div class="home-away" layout="row" \nlayout-align="center center"><div class="home" ng-class="{\'win\' : parlay.HomeScore > parlay.AwayScore }">\n{{ parlay.HomeTeamNameEn }}</div>-<div class="away" ng-class="{\'win\' : parlay.HomeScore < parlay.AwayScore }">\n{{ parlay.AwayTeamNameEn }}</div></div></div><div class="result" layout="row" layout-align="space-between center"><div \nflex class="half-time" layout="column"><div class="header">Hi\u1EC7p 1</div><div class="score"><span>\n{{ parlay.HtHomeScore }} - {{ parlay.HtAwayScore }}</span></div></div><div flex class="full-time"><div class="header">\nC\u1EA3 tr\u1EADn</div><div class="score"><span>{{ parlay.HomeScore }} - {{ parlay.AwayScore }}</span></div></div></div></div>\n</md-dialog-content></md-dialog>');
    $templateCache.put('app/main/legendary/statement/outstanding/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">{{ vm.report.name }}</th><th colspan="2">C\xF4ng ty\n</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>\u0110i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Income</th></tr>\n</thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="8">\n{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index" \nng-click="vm.classify({GameType: item.GameType, BetType: bet.BetType})" class="cursor-pointer"><td>\n{{ bet.BetType | bet : false : item.GameType }}</td><td>{{ bet.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ bet.Player.Point | currency : \'\' : 0}}</td><td>{{ bet.Player.Amount | currency : \'\' : 0}}</td><td class="highlight">\n{{ bet.Agent.Commission | currency : \'\' : 0}}</td><td class="highlight">{{ bet.Agent.Income | currency : \'\' : 0}}</td>\n<td class="sum">{{ (bet.Company.Income + bet.Company.Commission) | currency : \'\' : 0}}</td></tr><tr class="sumany"><td>\nT\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Point | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td>\n<td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Agent.Income | currency : \'\' : 0}}</td><td>\n{{ (item.SumByGame.Company.Income + item.SumByGame.Company.Commission) | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.Point | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Agent.Income | currency : \'\' : 0}}</td><td>\n{{ (vm.SumTotal.Company.Income + vm.SumTotal.Company.Commission) | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/outstanding/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">C\xF4ng ty\n</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Hoa h\u1ED3ng</th><th>\nIncome</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index" \nng-click="vm.classify({GameType: item.GameType, BetType: bet.BetType})" class="cursor-pointer"><td>\n{{ bet.BetType | bet : false : item.GameType }}</td><td>{{ bet.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ bet.Player.Point | currency : \'\' : 0}}</td><td>{{ bet.Player.Amount | currency : \'\' : 0}}</td><td class="highlight">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</td><td class="highlight">{{ bet.Agent.Income | currency : \'\' : 0 }}</td>\n<td>{{ bet.Company.Commission | currency : \'\' : 0 }}</td><td class="sum">{{ bet.Company.Income | currency : \'\' : 0 }}\n</td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>\n{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Player.Point | currency : \'\' : 0}}\n</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Income | currency : \'\' : 0}}\n</td><td>{{ item.SumByGame.Company.Commission | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Company.Income | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Point | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td>\n<td>{{ vm.SumTotal.Agent.Income | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Company.Commission | currency : \'\' : 0}}\n</td><td>{{ vm.SumTotal.Company.Income | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/outstanding/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">\n{{ vm.report.name }}</th><th colspan="2">C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>\u0110i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\nHoa h\u1ED3ng</th><th>Income</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Income</th></tr></thead><tbody \nng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index" \nng-click="vm.classify({GameType: item.GameType, BetType: bet.BetType})" class="cursor-pointer"><td>\n{{ bet.BetType | bet : false : item.GameType }}</td><td class="highlight">{{ bet.Player.Quantity | currency : \'\' : 0}}\n</td><td class="highlight">{{ bet.Player.Point | currency : \'\' : 0}}</td><td class="highlight">\n{{ bet.Player.Amount | currency : \'\' : 0}}</td><td>{{ bet.Agent.Commission | currency : \'\' : 0}}</td><td>\n{{ bet.Agent.Income | currency : \'\' : 0}}</td><td class="highlight">{{ bet.My.Commission | currency : \'\' : 0}}</td><td \nclass="highlight">{{ bet.My.Income | currency : \'\' : 0}}</td><td>\n{{ (bet.Company.Income + bet.Company.Commission) | currency : \'\' : 0}}</td></tr><tr class="sumany"><td>\nT\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Point | currency : \'\' : 0 }}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}\n</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Agent.Income | currency : \'\' : 0}}</td><td>{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td>\n<td>{{ item.SumByGame.My.Income | currency : \'\' : 0}}</td><td>\n{{ (item.SumByGame.Company.Income + item.SumByGame.Company.Commission) | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Point | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Income | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.My.Income | currency : \'\' : 0 }}</td><td>\n{{ (vm.SumTotal.Company.Income + vm.SumTotal.Company.Commission) | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/outstanding/general/template/agency.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th ng-if="vm.report.level !== 5" colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">{{ vm.report.name }}</th><th \ncolspan="2">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th>\n<div class="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Income</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span>\n</div></th><th><div class="table-header"><span class="column-title">Income</span></div></th><th><div \nclass="table-header"><span class="column-title">Income</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.outstandingReports" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{item.Username}}\n</td><td>{{item.FullName}}</td><td class="highlight">{{item.Player.Quantity | currency : \'\' : 0}}</td><td \nclass="highlight">{{item.Player.Point | currency : \'\' : 0}}</td><td class="highlight">\n{{item.Player.Amount | currency : \'\' : 0}}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Commission + item.Commission) | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Income + item.Amount) | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.Parent.Commission | currency : \'\' : 0 }}</td><td class="highlight">{{ item.Parent.Income | currency : \'\' : 0 }}\n</td><td class="sum">\n{{ ((item.Ancestor.Income - item.Parent.Income) + (item.Ancestor.Commission - item.Parent.Commission)) | currency : \'\' : 0 }}\n</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="{{vm.report.level !== 5 ? 10 : 8}}" class="hasRecord"><a \nng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Point | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5">{{ vm.Total.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ vm.Total.Agent.Income | currency : \'\' : 0 }}</td><td>{{ vm.Total.My.Commission | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.My.Income | currency : \'\' : 0 }}</td><td>{{ vm.Total.Company.Income | currency : \'\' : 0 }}</td></tr></tfoot>\n</table>');
    $templateCache.put('app/main/legendary/statement/outstanding/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.outstandingReports.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2"><div class="table-header"><span class="column-title">T\xE0i kho\u1EA3n\n</span></div></th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">C\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">\nC\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div \nclass="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span>\n</div></th><th><div class="table-header"><span class="column-title">Income</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Income</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.outstandingReports" \nng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{item.Username}}</td><td>{{item.FullName}}</td><td \nclass="highlight">{{item.Player.Quantity | currency : \'\' : 0}}</td><td class="highlight">\n{{item.Player.Point | currency : \'\' : 0}}</td><td class="highlight">{{item.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ item.Descendant.Commission + item.Commission | currency : \'\' : 0}}</td><td>\n{{ (item.Descendant.Income + item.Amount) | currency : \'\' : 0}}</td><td class="highlight">\n{{ item.Ancestor.Commission | currency : \'\' : 0}}</td><td class="highlight sum">\n{{ item.Ancestor.Income | currency : \'\' : 0}}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="9" \nclass="hasRecord"><a ng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord">\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Point | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Agent.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Agent.Income | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Company.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Company.Income | currency : \'\' : 0 }}</td>\n</tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/outstanding/general/template/member.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th><div class="table-header">\n<span class="column-title">S\u1ED1 m\xE3 c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">\nT\u1ED5ng \u0111i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ti\u1EC1n c\u01B0\u1EE3c</span></div></th></tr>\n</thead><tbody><tr ng-repeat="item in vm.outstandingReports" ng-click="vm.memberReport(item, vm.report.name)" \nclass="cursor-pointer"><td>{{vm.report.name}}</td><td>{{item.GameType | legendGame }}</td><td>\n{{item.BetType | bet : false : item.GameType }}</td><td>{{item.Quantity | currency : \'\' : 0}}</td><td>\n{{item.Point | currency : \'\' : 0}}</td><td>{{item.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td \ncolspan="3">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.outstandingReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}\n</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)" layout="row" layout-align="end center"><span>\n{{ bet.Player.Amount | currency : \'\' : 0 }}</span></a></td><td class="sum" ng-class="{\'warn\' : bet.Player.WinLose < 0}">\n<a ng-click="vm.classify(item.GameType, bet.BetType)" layout="row" layout-align="end center"><span>\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</span></a></td><td class="highlight" \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nTh\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0}}</a>\n</td><td class="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.Amount | currency : \'\' : 0}}</a></td><td class="highlight sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0}}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0}}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0}}</a></td><td \nclass="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.WinLose | currency : \'\' : 0}}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Commission | currency : \'\' : 0}}</a>\n</td><td class="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Total | currency : \'\' : 0}}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{item.GameType | legendGame }}</td>\n<td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.WinLose < 0}">{{ item.SumByGame.My.WinLose | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Total < 0}">\n{{ item.SumByGame.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0}}</td><td>\n{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">\n{{ vm.SumTotal.My.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">\n{{ vm.SumTotal.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">\n{{ vm.SumTotal.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">\nC\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports.Records"><td><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td layout="row" \nlayout-align="end center"><span>{{ item.Player.Amount | currency : \'\' : 0 }}</span></td><td class="sum"><div \nlayout="row" layout-align="end center"><span ng-class="{ \'warn\': item.Player.WinLose < 0 }">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td class="highlight" \nng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ item.Company.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="12" \nclass="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">\n{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Game</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">{{vm.report.name}}</a></td><td>\n{{item.GameType | legendGame }} - {{item.BetType | bet }}</td><td>{{item.Quantity | currency : \'\' : 0 }}</td><td>\n{{item.Point | currency : \'\' : 0 }}</td><td>{{item.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/date/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">K\u1EF3</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3" class="text-uppercase">{{$root.User.Username}}</th><th>\nC\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>\nT\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr \nclass="game-name"><td colspan="8">{{ item.GameType | legendGame }}</td></tr><tr \nng-repeat="bet in item.Values track by $index"><td><a ng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Term }}\n</a></td><td class="highlight"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/date/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">K\u1EF3</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr><th>\n\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="8">\n{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Term | term }}</a></td><td><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.viewReport(bet.Term, item.GameType)" layout="row" layout-align="end center"><span class="company" hide>\n{{ bet.Player.Company.Income | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ bet.Player.Amount | currency : \'\' : 0 }}</span></a></td><td class="sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)" layout="row" \nlayout-align="end center"><span class="company" hide>\n{{ bet.Player.Company.WinLose | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.WinLose | percentage : 1 }})</span> \n<span>{{ bet.Player.WinLose | currency : \'\' : 0 }}</span></a></td><td class="highlight" \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/term/date/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">K\u1EF3</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3" \nclass="text-uppercase">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\nTh\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng\n</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr \nclass="game-name"><td colspan="11">{{item.GameType | legendGame }}</td></tr><tr \nng-repeat="bet in item.Values track by $index"><td><a ng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Term }}\n</a></td><td class="highlight"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Player.Quantity | currency : \'\' : 0}}</a></td><td class="highlight"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Player.Amount | currency : \'\' : 0}}</a></td><td \nclass="highlight sum" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Player.WinLose | currency : \'\' : 0}}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Agent.WinLose | currency : \'\' : 0}}</a></td><td><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Agent.Commission | currency : \'\' : 0}}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.My.WinLose | currency : \'\' : 0}}</a></td><td class="highlight">\n<a ng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.My.Commission | currency : \'\' : 0}}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a ng-click="vm.viewReport(bet.Term, item.GameType)">\n{{ bet.My.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.viewReport(bet.Term, item.GameType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.WinLose < 0}">{{ item.SumByGame.My.WinLose | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Total < 0}">\n{{ item.SumByGame.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0}}</td><td>\n{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">\n{{ vm.SumTotal.My.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">\n{{ vm.SumTotal.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">\n{{ vm.SumTotal.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}\n</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)" layout="row" layout-align="space-between center"><span \nclass="company">\n{{ bet.Player.Company.Income | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ bet.Player.Amount | currency : \'\' : 0 }}</span></a></td><td class="sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)" layout="row" \nlayout-align="space-between center"><span class="company">\n{{ bet.Player.Company.WinLose | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.WinLose | percentage : 1 }})</span> \n<span>{{ bet.Player.WinLose | currency : \'\' : 0 }}</span></a></td><td class="highlight" \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | legendGame }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td \nlayout="row" layout-align="space-between center"><span class="company">\n{{ item.SumByGame.Player.Company.Income | currency : \'\' : 0 }} ({{ (item.SumByGame.Player.Company.Income/item.SumByGame.Player.Amount) | percentage : 1 }})\n</span> <span>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</span></td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.SumByGame.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (item.SumByGame.Player.Company.WinLose/item.SumByGame.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.Income | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.Income/vm.SumTotal.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</span></div></td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.WinLose | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.WinLose/vm.SumTotal.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}\n</span></div></td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nTh\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{item.GameType | legendGame }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet : false : item.GameType }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0}}</a>\n</td><td class="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.Amount | currency : \'\' : 0}}</a></td><td class="highlight sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Player.WinLose | currency : \'\' : 0}}</a></td><td ng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.WinLose | currency : \'\' : 0}}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0}}</a></td><td \nclass="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.WinLose | currency : \'\' : 0}}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Commission | currency : \'\' : 0}}</a>\n</td><td class="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Total | currency : \'\' : 0}}</a></td><td class="sum" \nng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{item.GameType | legendGame }}</td>\n<td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.WinLose < 0}">{{ item.SumByGame.My.WinLose | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Total < 0}">\n{{ item.SumByGame.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0}}</td><td>\n{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">\n{{ vm.SumTotal.My.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">\n{{ vm.SumTotal.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">\n{{ vm.SumTotal.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">\nC\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports.Records"><td><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.Income | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ item.Player.Amount | currency : \'\' : 0 }}</span></td><td class="sum"><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.WinLose | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.WinLose | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</span></div>\n</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}\n</td><td class="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ item.Company.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="12" \nclass="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}\n</td><td><div layout="row" layout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.Income | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.Income/vm.dataReports.Sum.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</span></div></td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.WinLose/vm.dataReports.Sum.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/legendary/statement/winLose/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Ki\u1EC3u c\u01B0\u1EE3c</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">{{vm.report.name}}</a></td><td>\n{{item.GameType | legendGame }} - {{item.BetType | bet : false: item.GameType }}</td><td>\n{{item.Quantity | currency : \'\' : 0 }}</td><td>{{item.Point | currency : \'\' : 0 }}</td><td>\n{{item.Amount | currency : \'\' : 0 }}</td><td ng-class="{ \'warn\' : item.WinLose < 0 }">\n{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th>\n<th rowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty\n</th></tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.GameType)">{{ item.GameType | casinoGame }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.GrossCommission | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType)">{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.WinLose | currency : \'\' : 0 }}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum highlight" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Company | currency : \'\' : 0}}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0}}</td>\n<td>{{ vm.SumTotal.Player.GrossCommission | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th>\n<th rowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th>\n</tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th>\n</tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td><a \nng-click="vm.classify(item.GameType)">{{ item.GameType | casinoGame }}</a></td><td><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType)" layout="row" layout-align="space-between center"><span class="company">\n{{ item.Player.Company.Income | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ item.Player.Amount | currency : \'\' : 0 }}</span></a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.NetAmount | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.GrossCommission | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Player.WinLose < 0}">\n<a ng-click="vm.classify(item.GameType)" layout="row" layout-align="space-between center"><span class="company">\n{{ item.Player.Company.WinLose | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.WinLose | percentage : 1 }})\n</span> <span>{{ item.Player.WinLose | currency : \'\' : 0 }}</span></a></td><td class="highlight" \nng-class="{\'warn\' : item.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Company | currency : \'\' : 0}}</a></td></tr></tbody><tfoot><tr><td>\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.Income | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.Income/vm.SumTotal.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</span></div></td><td>\n{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0 }}</td><td><div layout="row" layout-align="space-between center">\n<span>\n{{ vm.SumTotal.Player.Company.WinLose | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.WinLose/vm.SumTotal.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}\n</span></div></td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th rowspan="2">\u0110\u01A1n h\xE0ng</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c</th><th rowspan="2">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</th>\n<th rowspan="2">T\u1ED5ng hoa h\u1ED3ng</th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>Hoa h\u1ED3ng</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng\n</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.GameType)">\n{{ item.GameType | casinoGame }}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Quantity | currency : \'\' : 0}}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.Amount | currency : \'\' : 0}}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.NetAmount | currency : \'\' : 0}}</a></td><td class="highlight"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.GrossCommission | currency : \'\' : 0}}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.Player.Commission | currency : \'\' : 0}}</a></td><td class="highlight sum" \nng-class="{\'warn\' : item.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Player.WinLose | currency : \'\' : 0}}</a></td><td ng-class="{\'warn\' : item.Agent.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.WinLose | currency : \'\' : 0}}</a></td><td><a \nng-click="vm.classify(item.GameType)">{{ item.Agent.Commission | currency : \'\' : 0}}</a></td><td class="sum" \nng-class="{\'warn\' : item.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Agent.Total | currency : \'\' : 0}}</a></td><td class="highlight" ng-class="{\'warn\' : item.My.WinLose < 0}"><a \nng-click="vm.classify(item.GameType)">{{ item.My.WinLose | currency : \'\' : 0}}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType)">{{ item.My.Commission | currency : \'\' : 0}}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.My.Total < 0}"><a ng-click="vm.classify(item.GameType)">{{ item.My.Total | currency : \'\' : 0}}\n</a></td><td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.GameType)">\n{{ item.Company | currency : \'\' : 0}}</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.NetAmount | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.GrossCommission | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">\n{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0}}</td><td>{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">{{ vm.SumTotal.My.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">{{ vm.SumTotal.My.Commission | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">{{ vm.SumTotal.My.Total | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2">\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div \nclass="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3" \nng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th \ncolspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\nHoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th \nng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th \nng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span>\n</div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0 }}</td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ item.Player.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th rowspan="2"><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th rowspan="2"><div class="table-header">\n<span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th rowspan="2"><div class="table-header"><span \nclass="column-title">T\u1ED5ng hoa h\u1ED3ng</span></div></th><th colspan="2">H\u1ED9i vi\xEAn</th><th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th \nrowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.Income | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ item.Player.Amount | currency : \'\' : 0 }}</span></td><td>{{ item.Player.NetAmount | currency : \'\' : 0 }}</td>\n<td>{{ item.Player.GrossCommission | currency : \'\' : 0 }}</td><td>{{ item.Player.Commission | currency : \'\' : 0 }}</td>\n<td class="sum"><div layout="row" layout-align="space-between center"><span class="company">\n{{ item.Player.Company.WinLose | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.WinLose | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</span></div>\n</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}\n</td><td class="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.Commission < 0 }">{{ item.Company.Commission | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot ng-if="vm.hasRecord"><tr><td colspan="12" class="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">\nXem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.Income | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.Income/vm.dataReports.Sum.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</span></div></td><td>\n{{ vm.dataReports.Sum.Player.NetAmount | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.GrossCommission | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Commission | currency : \'\' : 0 }}</td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.WinLose/vm.dataReports.Sum.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/legend-casino/statement/winLose/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Game</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c th\u1EF1c</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">K\u1EBFt qu\u1EA3</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span>\n</div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">\n{{vm.report.name}}</a></td><td>{{item.GameType | casinoGame }}</td><td>{{item.Quantity | currency : \'\' : 0 }}</td><td>\n{{item.Amount | currency : \'\' : 0 }}</td><td>{{item.NetAmount | currency : \'\' : 0 }}</td><td>\n{{item.Commission | currency : \'\' : 0 }}</td><td>{{item.Result | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'NetAmount\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Commission\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Result\' | currency : \'\' : 0}}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/outstanding/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Nh\xF3m</th><th colspan="2">H\u1ED9i vi\xEAn</th><th>{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng\n</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Ti\u1EC1n th\u1EA7u</th><th>Ti\u1EC1n th\u1EA7u</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.SportGroup)">\n{{ item.SportGroup | SportGroup }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.SportGroup)">{{ item.Company | currency : \'\' : 0 }}\n</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent < 0}">\n{{ vm.SumTotal.Agent | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/outstanding/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Nh\xF3m</th><th colspan="2">H\u1ED9i vi\xEAn</th><th>T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th>\n<th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Ti\u1EC1n th\u1EA7u</th><th>Ti\u1EC1n th\u1EA7u</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.SportGroup)">\n{{ item.SportGroup | SportGroup }}</a></td><td><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum highlight" ng-class="{\'warn\' : item.Agent < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent | currency : \'\' : 0 }}</a></td><td class="sum" \nng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.SportGroup)">{{ item.Company | currency : \'\' : 0 }}\n</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent < 0}">\n{{ vm.SumTotal.Agent | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/outstanding/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Nh\xF3m</th><th colspan="2">H\u1ED9i vi\xEAn</th><th>T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>{{vm.report.name}}</th><th>C\xF4ng ty</th>\n</tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Ti\u1EC1n th\u1EA7u</th><th>Ti\u1EC1n th\u1EA7u</th><th>Ti\u1EC1n th\u1EA7u</th></tr></thead><tbody>\n<tr ng-repeat="item in vm.classifications track by $index"><td><a ng-click="vm.classify(item.SportGroup)">\n{{ item.SportGroup | SportGroup }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Quantity | currency : \'\' : 0 }}</a></td><td class="highlight"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Player.Amount | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : item.Agent < 0}"><a \nng-click="vm.classify(item.SportGroup)">{{ item.Agent | currency : \'\' : 0 }}</a></td><td class="sum highlight" \nng-class="{\'warn\' : item.My < 0}"><a ng-click="vm.classify(item.SportGroup)">{{ item.My | currency : \'\' : 0 }}</a></td>\n<td class="sum" ng-class="{\'warn\' : item.Company < 0}"><a ng-click="vm.classify(item.SportGroup)">\n{{ item.Company | currency : \'\' : 0 }}</a></td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent < 0}">{{ vm.SumTotal.Agent | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.My < 0}">{{ vm.SumTotal.My | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/outstanding/general/template/agency.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="2">H\u1ED9i vi\xEAn</th>\n<th ng-if="vm.report.level !== 5">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Ti\u1EC1n th\u1EA7u</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n th\u1EA7u\n</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n th\u1EA7u</span></div></th></tr></thead>\n<tbody><tr ng-repeat="item in vm.outstandingReports" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>\n{{item.Username}}</td><td>{{item.FullName}}</td><td class="highlight">{{item.Player.Quantity | currency : \'\' : 0 }}</td>\n<td class="highlight">{{item.Player.Amount | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Income + item.Income) | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.Parent.Income | currency : \'\' : 0 }}</td><td class="sum">\n{{ (item.Ancestor.Income - item.Parent.Income) | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr>\n<td colspan="{{vm.report.level !== 5 ? 10 : 8}}" class="hasRecord"><a ng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp\n</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5">{{ vm.Total.Agent | currency : \'\' : 0 }}</td><td>{{ vm.Total.My | currency : \'\' : 0 }}\n</td><td>{{ vm.Total.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/outstanding/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.outstandingReports.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2"><div class="table-header"><span class="column-title">T\xE0i kho\u1EA3n\n</span></div></th><th rowspan="2">T\xEAn</th><th colspan="2">H\u1ED9i vi\xEAn</th><th>C\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr><th>\n<div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n th\u1EA7u\n</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n th\u1EA7u</span></div></th></tr></thead>\n<tbody><tr ng-repeat="item in vm.outstandingReports" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>\n{{item.Username}}</td><td>{{item.FullName}}</td><td class="highlight">{{item.Player.Quantity | currency : \'\' : 0 }}</td>\n<td class="highlight">{{item.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ (item.Descendant.Income + item.Income) | currency : \'\' : 0 }}</td><td class="highlight sum">\n{{ item.Ancestor.Income | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="9" \nclass="hasRecord"><a ng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord">\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td>{{ vm.Total.Agent | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/saba/statement/outstanding/general/template/member.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Nh\xF3m th\u1EC3 thao</th><th><div class="table-header"><span \nclass="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span>\n</div></th></tr></thead><tbody><tr ng-repeat="item in vm.outstandingReports" \nng-click="vm.memberReport(item, vm.report.name)" class="cursor-pointer"><td>{{vm.report.name}}</td><td>\n{{item.SportGroup | SportGroup }}</td><td>{{item.Quantity | currency : \'\' : 0 }}</td><td>\n{{item.Amount | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/presidential/statement/outstanding/general/template/agency.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th ng-if="vm.report.level !== 5" colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">{{ vm.report.name }}</th><th \ncolspan="2">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th>\n<div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Income</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span>\n</div></th><th><div class="table-header"><span class="column-title">Income</span></div></th><th><div \nclass="table-header"><span class="column-title">Income</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.outstandingReports" ng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{item.Username}}\n</td><td>{{item.FullName}}</td><td class="highlight">{{item.Player.Quantity | currency : \'\' : 0}}</td><td \nclass="highlight">{{item.Player.Commission | currency : \'\' : 0}}</td><td class="highlight">\n{{item.Player.Amount | currency : \'\' : 0}}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Commission + item.Commission) | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Income + item.Amount) | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.Parent.Commission | currency : \'\' : 0 }}</td><td class="highlight">{{ item.Parent.Income | currency : \'\' : 0 }}\n</td><td class="sum">\n{{ ((item.Ancestor.Income - item.Parent.Income) + (item.Ancestor.Commission - item.Parent.Commission)) | currency : \'\' : 0 }}\n</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="{{vm.report.level !== 5 ? 10 : 8}}" class="hasRecord"><a \nng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5">{{ vm.Total.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ vm.Total.Agent.Income | currency : \'\' : 0 }}</td><td>{{ vm.Total.My.Commission | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.My.Income | currency : \'\' : 0 }}</td><td>{{ vm.Total.Company.Income | currency : \'\' : 0 }}</td></tr></tfoot>\n</table>');
    $templateCache.put('app/main/presidential/statement/outstanding/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.outstandingReports.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2"><div class="table-header"><span class="column-title">T\xE0i kho\u1EA3n\n</span></div></th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">C\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">\nC\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span>\n</div></th><th><div class="table-header"><span class="column-title">Income</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Income</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.outstandingReports" \nng-click="vm.viewReport(item)" class="cursor-pointer"><td>{{item.Username}}</td><td>{{item.FullName}}</td><td \nclass="highlight">{{item.Player.Quantity | currency : \'\' : 0}}</td><td class="highlight">\n{{item.Player.Commission | currency : \'\' : 0}}</td><td class="highlight">{{item.Player.Amount | currency : \'\' : 0}}</td>\n<td>{{ item.Descendant.Commission + item.Commission | currency : \'\' : 0}}</td><td>\n{{ (item.Descendant.Income + item.Amount) | currency : \'\' : 0}}</td><td class="highlight">\n{{ item.Ancestor.Commission | currency : \'\' : 0}}</td><td class="highlight sum">\n{{ item.Ancestor.Income | currency : \'\' : 0}}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="9" \nclass="hasRecord"><a ng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord">\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Agent.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Agent.Income | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Company.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Company.Income | currency : \'\' : 0 }}</td>\n</tr></tfoot></table>');
    $templateCache.put('app/main/presidential/statement/outstanding/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">{{ vm.report.name }}</th><th colspan="2">C\xF4ng ty\n</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Hoa h\u1ED3ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Income</th></tr>\n</thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td>{{ item.BetType | candidate }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0}}</td><td>{{ item.Player.Commission | currency : \'\' : 0}}</td><td>\n{{ item.Player.Amount | currency : \'\' : 0}}</td><td class="highlight">{{ item.Commission | currency : \'\' : 0}}</td><td \nclass="highlight">{{ item.Amount | currency : \'\' : 0}}</td><td class="sum">\n{{ (item.Ancestor.Income + item.Ancestor.Commission) | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng\n</td><td>{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Amount\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.classifications | sumOfValue : \'Commission\') < 0}">\n{{ vm.classifications | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{ ((vm.classifications | sumOfTwoKey : \'Ancestor\' : \'Income\') + (vm.classifications | sumOfTwoKey : \'Ancestor\' : \'Commission\')) | currency : \'\' : 0}}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/presidential/statement/outstanding/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">C\xF4ng ty\n</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Hoa h\u1ED3ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Hoa h\u1ED3ng</th><th>\nIncome</th></tr></thead><tbody><tr ng-repeat="item in vm.classifications track by $index"><td>\n{{ item.BetType | candidate }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.Player.Commission | currency : \'\' : 0}}</td><td>{{ item.Player.Amount | currency : \'\' : 0}}</td><td \nclass="highlight" ng-class="{\'warn\' : item.Descendant.Commission < 0}">\n{{ item.Descendant.Commission | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.Descendant.Income | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : item.Commission < 0}">\n{{ item.Commission | currency : \'\' : 0 }}</td><td class="sum">{{ item.Amount | currency : \'\' : 0 }}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Quantity\' | currency : \'\' : 0 }}</td>\n<td>{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Amount\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.classifications | sumOfTwoKey : \'Descendant\' : \'Commission\') < 0}">\n{{ vm.classifications | sumOfTwoKey : \'Descendant\' : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Descendant\' : \'Income\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.classifications | sumOfValue : \'Commission\') < 0}">\n{{ vm.classifications | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/presidential/statement/outstanding/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">\n{{ vm.report.name }}</th><th colspan="2">C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Hoa h\u1ED3ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\nHoa h\u1ED3ng</th><th>Income</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Income</th></tr></thead><tbody><tr \nng-repeat="item in vm.classifications track by $index"><td>{{ item.BetType | candidate }}</td><td class="highlight">\n{{ item.Player.Quantity | currency : \'\' : 0}}</td><td class="highlight">{{ item.Player.Commission | currency : \'\' : 0}}\n</td><td class="highlight">{{ item.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ item.Descendant.Commission | currency : \'\' : 0}}</td><td>{{ item.Descendant.Income | currency : \'\' : 0}}</td><td \nclass="highlight">{{ item.Commission | currency : \'\' : 0}}</td><td class="highlight">\n{{ item.Amount | currency : \'\' : 0}}</td><td>{{ (item.Ancestor.Income + item.Ancestor.Commission) | currency : \'\' : 0}}\n</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Quantity\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Player\' : \'Amount\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.classifications | sumOfTwoKey : \'Descendant\' : \'Commission\') < 0}">\n{{ vm.classifications | sumOfTwoKey : \'Descendant\' : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfTwoKey : \'Descendant\' : \'Income\' | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : (vm.classifications | sumOfValue : \'Commission\') < 0}">\n{{ vm.classifications | sumOfValue : \'Commission\' | currency : \'\' : 0 }}</td><td>\n{{ vm.classifications | sumOfValue : \'Amount\' | currency : \'\' : 0 }}</td><td>\n{{ ((vm.classifications | sumOfTwoKey : \'Ancestor\' : \'Income\') + (vm.classifications | sumOfTwoKey : \'Ancestor\' : \'Commission\') ) | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/settings/parameter/risk/dialog/change.by.point.avg.html', '<md-dialog aria-label="change-by-point" class="change-by-point"><form name="formPrice" \nng-submit="changePricePointAvg()" novalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nC\u1EA5u h\xECnh t\u0103ng gi\xE1 theo \u0111i\u1EC3m trung b\xECnh cho {{ param.BetType | bet }}</h2><span flex></span><md-button \nclass="md-icon-button" aria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button></div></md-toolbar><md-dialog-content \nclass="md-change-by-point-dialog avg"><div class="md-dialog-content" layout="column"><div layout="row" class="label">\n<div flex="25">Start</div><div flex="25">Step</div><div flex="25">Point</div></div><div layout="row" class="rUlIdfFX">\n<div flex="25"><input type="text" ng-currency required ng-model="pointAvg.Start" ng-disabled="!writePermission"></div>\n<div flex="25"><input type="text" ng-currency required ng-model="pointAvg.Step" ng-disabled="!writePermission"></div>\n<div flex="25"><input type="text" ng-currency required ng-model="pointAvg.Point" ng-disabled="!writePermission"></div>\n</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="" ng-click="cancel()" \nng-disabled="submitting">Cancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="formPrice.$invalid || formPrice.$pristine || submitting" ng-if="writePermission">OK</md-button>\n</md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/risk/dialog/change.by.point.html', '<md-dialog aria-label="change-by-point" class="change-by-point"><form name="formPrice" ng-submit="changePricePoint()" \nnovalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nC\u1EA5u h\xECnh t\u0103ng gi\xE1 theo \u0111i\u1EC3m cho {{ param.BetType | bet }}</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="md-change-by-point-dialog"><div class="md-dialog-content" \nlayout="column"><div layout="row" class="label"><div flex="20">B\u1EAFt \u0111\u1EA7u</div><div flex="20">K\u1EBFt th\xFAc</div><div flex="20">\nB\u01B0\u1EDBc nh\u1EA3y</div><div flex="20">\u0110i\u1EC3m</div><div flex="20"></div></div><div layout="row" class="rUlIdfFX" \nng-repeat="item in pricePoints track by $index"><div flex="20"><input type="text" ng-currency required \nng-model="item.Start" ng-disabled="!writePermission"></div><div flex="20"><input type="text" ng-currency required \nng-model="item.End" ng-disabled="!writePermission"></div><div flex="20"><input type="text" ng-currency required \nng-model="item.Step" ng-disabled="!writePermission"></div><div flex="20"><input type="text" ng-currency required \nng-model="item.Point" ng-disabled="!writePermission"></div><div flex="20" ng-if="writePermission" class="icon-button">\n<md-button class="md-icon-button md-warn" ng-click="delete($event, item)" ng-show="$index != 0"><md-icon \nmd-font-icon="icon-close"></md-icon></md-button><md-button class="md-icon-button md-accent" ng-click="add($index)" \nng-show="$last"><md-icon md-font-icon="icon-playlist-plus"></md-icon></md-button></div></div><div layout="row" \nclass="rUlIdfFX"><div flex="20" class="text-right">T\u1ED5ng th\u1EA7u c\xF4ng ty</div><div flex="20"><input type="text" ng-currency \nrequired ng-model="param.TotalCompanyPointAvg" ng-disabled="!writePermission"></div><div flex="60" class="note">\n\u0110i\u1EC3m trung b\xECnh c\xF4ng ty th\u1EA7u m\u1ED7i phi\xEAn</div></div><div layout="row" class="rUlIdfFX"><div flex="20" class="text-right">\n\u0110\xF3ng s\u1ED1 d\u01B0\u1EDBi trung b\xECnh</div><div flex="20"><input type="text" ng-currency required ng-model="param.CloseAtPoint" \nng-disabled="!writePermission"></div><div flex="60" class="note">N\u1EBFu t\u1ED5ng \u0111i\u1EC3m v\u1EC1 c\xF4ng ty d\u01B0\u1EDBi m\u1EE9c trung b\xECnh</div>\n</div><div layout="row" class="rUlIdfFX"><div flex="20" class="text-right">\u0110\xF3ng s\u1ED1 tr\xEAn trung b\xECnh</div><div flex="20">\n<input type="text" ng-currency required ng-model="param.CloseAtPointAboveAvg" ng-disabled="!writePermission"></div><div \nflex="60" class="note">N\u1EBFu t\u1ED5ng \u0111i\u1EC3m v\u1EC1 c\xF4ng ty tr\xEAn m\u1EE9c trung b\xECnh</div></div><div layout="row" class="rUlIdfFX"><div \nflex="20" class="text-right">\xC1p d\u1EE5ng cho t\u1EA5t c\u1EA3</div><div flex="20"><md-checkbox ng-model="param.CloseAtPointForAll" \naria-label="Close At Point For All" ng-disabled="!writePermission"></md-checkbox></div><div flex="60" class="note">\nCh\u1ECDn n\u1EBFu mu\u1ED1n \u0111\xF3ng s\u1ED1 theo \u0111i\u1EC3m \u1EDF c\xE1c ki\u1EC3u ch\u1EA1y gi\xE1 t\u1EF1 \u0111\u1ED9ng kh\xE1c</div></div></div></md-dialog-content><md-dialog-actions\n layout="row"><md-button class="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button \nclass="md-accent" type="submit" ng-disabled="formPrice.$invalid || formPrice.$pristine || submitting" \nng-if="writePermission">OK</md-button></md-dialog-actions></form><md-progress-linear md-mode="indeterminate" \nclass="md-warn" ng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/settings/parameter/risk/dialog/change.by.risk.html', '<md-dialog aria-label="change-by-point" class="change-by-point"><form name="formRisk" ng-submit="changePriceRisk()" \nnovalidate><md-toolbar class="md-accent"><div class="md-toolbar-tools"><h2>\nC\u1EA5u h\xECnh t\u0103ng gi\xE1 theo r\u1EE7i ro cho {{ param.BetType | bet }}</h2><span flex></span><md-button class="md-icon-button" \naria-label="close" ng-click="cancel()" ng-disabled="submitting"><md-icon md-font-icon="icon-close"></md-icon>\n</md-button></div></md-toolbar><md-dialog-content class="md-change-by-point-dialog"><div class="md-dialog-content" \nlayout="column"><div layout="row" class="label"><div flex="20">B\u1EAFt \u0111\u1EA7u</div><div flex="20">K\u1EBFt th\xFAc</div><div flex="20">\nB\u01B0\u1EDBc nh\u1EA3y</div><div flex="20">\u0110i\u1EC3m</div><div flex="20"></div></div><div layout="row" class="rUlIdfFX" \nng-repeat="item in priceRisks track by $index"><div flex="20"><input type="text" ng-currency required \nng-model="item.Start" ng-disabled="!writePermission"></div><div flex="20"><input type="text" ng-currency required \nng-model="item.End" ng-disabled="!writePermission"></div><div flex="20"><input type="text" ng-currency required \nng-model="item.Step" ng-disabled="!writePermission"></div><div flex="20"><input type="text" ng-currency required \nng-model="item.Point" ng-disabled="!writePermission"></div><div flex="20" ng-if="writePermission"><md-button \nclass="md-icon-button md-warn" ng-click="delete($event, item)" ng-show="$index != 0"><md-icon md-font-icon="icon-close">\n</md-icon></md-button><md-button class="md-icon-button md-accent" ng-click="add($index)" ng-show="$last"><md-icon \nmd-font-icon="icon-playlist-plus"></md-icon></md-button></div></div><div layout="row" class="rUlIdfFX"><div flex="20">\n\u0110\xF3ng s\u1ED1 t\u1EA1i</div><div flex="20"><input type="text" ng-currency required ng-model="param.CloseAtRisk" \nng-disabled="!writePermission"></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button \nclass="" ng-click="cancel()" ng-disabled="submitting">Cancel</md-button><md-button class="md-accent" type="submit" \nng-disabled="formRisk.$invalid || formRisk.$pristine || submitting" ng-if="writePermission">OK</md-button>\n</md-dialog-actions></form><md-progress-linear md-mode="indeterminate" class="md-warn" \nng-class="{\'hide\' : !submitting}"></md-progress-linear></md-dialog>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a>\n</td><td class="sum highlight" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>\n{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)" layout="row" layout-align="space-between center"><span \nclass="company">\n{{ bet.Player.Company.Income | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ bet.Player.Amount | currency : \'\' : 0 }}</span></a></td><td class="sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)" layout="row" \nlayout-align="space-between center"><span class="company">\n{{ bet.Player.Company.WinLose | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.WinLose | percentage : 1 }})</span> \n<span>{{ bet.Player.WinLose | currency : \'\' : 0 }}</span></a></td><td class="highlight" \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td \nlayout="row" layout-align="space-between center"><span class="company">\n{{ item.SumByGame.Player.Company.Income | currency : \'\' : 0 }} ({{ (item.SumByGame.Player.Company.Income/item.SumByGame.Player.Amount) | percentage : 1 }})\n</span> <span>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</span></td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.SumByGame.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (item.SumByGame.Player.Company.WinLose/item.SumByGame.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.Income | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.Income/vm.SumTotal.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</span></div></td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.WinLose | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.WinLose/vm.SumTotal.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}\n</span></div></td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nTh\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0}}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0}}</a>\n</td><td class="highlight sum" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.WinLose | currency : \'\' : 0}}</a></td><td \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0}}</a></td><td><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td \nclass="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.My.WinLose | currency : \'\' : 0}}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Commission | currency : \'\' : 0}}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.My.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{item.GameType | gameXs }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.WinLose < 0}">{{ item.SumByGame.My.WinLose | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Total < 0}">\n{{ item.SumByGame.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0}}</td><td>\n{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">\n{{ vm.SumTotal.My.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">\n{{ vm.SumTotal.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">\n{{ vm.SumTotal.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">\nC\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports.Records"><td><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.Income | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ item.Player.Amount | currency : \'\' : 0 }}</span></td><td class="sum"><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.WinLose | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.WinLose | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</span></div>\n</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}\n</td><td class="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ item.Company.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="12" \nclass="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}\n</td><td><div layout="row" layout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.Income | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.Income/vm.dataReports.Sum.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</span></div></td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.WinLose/vm.dataReports.Sum.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/risk-management/temporary-statement/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Game</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">{{vm.report.name}}</a></td><td>\n{{item.GameType | gameXs }} - {{item.BetType | bet }}</td><td>{{item.Quantity | currency : \'\' : 0 }}</td><td>\n{{item.Point | currency : \'\' : 0 }}</td><td>{{item.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/outstanding/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">{{ vm.report.name }}</th><th colspan="2">C\xF4ng ty\n</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>\u0110i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Income</th></tr>\n</thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="8">\n{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index" \nng-click="vm.classify({GameType: item.GameType, BetType: bet.BetType})" class="cursor-pointer"><td>\n{{ bet.BetType | bet }}</td><td>{{ bet.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ bet.Player.Point | currency : \'\' : 0}}</td><td>{{ bet.Player.Amount | currency : \'\' : 0}}</td><td class="highlight">\n{{ bet.Agent.Commission | currency : \'\' : 0}}</td><td class="highlight">{{ bet.Agent.Income | currency : \'\' : 0}}</td>\n<td class="sum">{{ (bet.Company.Income + bet.Company.Commission) | currency : \'\' : 0}}</td></tr><tr class="sumany"><td>\nT\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Point | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td>\n<td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Agent.Income | currency : \'\' : 0}}</td><td>\n{{ (item.SumByGame.Company.Income + item.SumByGame.Company.Commission) | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.Point | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Agent.Income | currency : \'\' : 0}}</td><td>\n{{ (vm.SumTotal.Company.Income + vm.SumTotal.Company.Commission) | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/outstanding/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">C\xF4ng ty\n</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>T\u1ED5ng \u0111i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Hoa h\u1ED3ng</th><th>\nIncome</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index" \nng-click="vm.classify({GameType: item.GameType, BetType: bet.BetType})" class="cursor-pointer"><td>\n{{ bet.BetType | bet }}</td><td>{{ bet.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ bet.Player.Point | currency : \'\' : 0}}</td><td>{{ bet.Player.Amount | currency : \'\' : 0}}</td><td class="highlight">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</td><td class="highlight">{{ bet.Agent.Income | currency : \'\' : 0 }}</td>\n<td>{{ bet.Company.Commission | currency : \'\' : 0 }}</td><td class="sum">{{ bet.Company.Income | currency : \'\' : 0 }}\n</td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>\n{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Player.Point | currency : \'\' : 0}}\n</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Income | currency : \'\' : 0}}\n</td><td>{{ item.SumByGame.Company.Commission | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Company.Income | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Point | currency : \'\' : 0}}</td><td>\n{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td>\n<td>{{ vm.SumTotal.Agent.Income | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Company.Commission | currency : \'\' : 0}}\n</td><td>{{ vm.SumTotal.Company.Income | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/outstanding/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">\n{{ vm.report.name }}</th><th colspan="2">C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>\u0110i\u1EC3m</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>\nHoa h\u1ED3ng</th><th>Income</th><th>Hoa h\u1ED3ng</th><th>Income</th><th>Income</th></tr></thead><tbody \nng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index" \nng-click="vm.classify({GameType: item.GameType, BetType: bet.BetType})" class="cursor-pointer"><td>\n{{ bet.BetType | bet }}</td><td class="highlight">{{ bet.Player.Quantity | currency : \'\' : 0}}</td><td \nclass="highlight">{{ bet.Player.Point | currency : \'\' : 0}}</td><td class="highlight">\n{{ bet.Player.Amount | currency : \'\' : 0}}</td><td>{{ bet.Agent.Commission | currency : \'\' : 0}}</td><td>\n{{ bet.Agent.Income | currency : \'\' : 0}}</td><td class="highlight">{{ bet.My.Commission | currency : \'\' : 0}}</td><td \nclass="highlight">{{ bet.My.Income | currency : \'\' : 0}}</td><td>\n{{ (bet.Company.Income + bet.Company.Commission) | currency : \'\' : 0}}</td></tr><tr class="sumany"><td>\nT\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ item.SumByGame.Player.Point | currency : \'\' : 0 }}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}\n</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Agent.Income | currency : \'\' : 0}}</td><td>{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td>\n<td>{{ item.SumByGame.My.Income | currency : \'\' : 0}}</td><td>\n{{ (item.SumByGame.Company.Income + item.SumByGame.Company.Commission) | currency : \'\' : 0}}</td></tr></tbody><tfoot>\n<tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Player.Point | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Income | currency : \'\' : 0 }}</td>\n<td>{{ vm.SumTotal.My.Commission | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.My.Income | currency : \'\' : 0 }}</td><td>\n{{ (vm.SumTotal.Company.Income + vm.SumTotal.Company.Commission) | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/classification/template/agent.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr>\n<tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0 }}</a>\n</td><td class="sum highlight" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.WinLose | currency : \'\' : 0 }}</a></td><td \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Company < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany"><td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>\n{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">\n{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">\n{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td\n ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/classification/template/company.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th>C\xF4ng ty</th></tr><tr>\n<th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>\nTh\u1EAFng/Thua</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td \ncolspan="8">{{ item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0 }}</a></td><td><a \nng-click="vm.classify(item.GameType, bet.BetType)" layout="row" layout-align="space-between center"><span \nclass="company">\n{{ bet.Player.Company.Income | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ bet.Player.Amount | currency : \'\' : 0 }}</span></a></td><td class="sum" \nng-class="{\'warn\' : bet.Player.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)" layout="row" \nlayout-align="space-between center"><span class="company">\n{{ bet.Player.Company.WinLose | currency : \'\' : 0 }} ({{ bet.Player.Company.Percent.WinLose | percentage : 1 }})</span> \n<span>{{ bet.Player.WinLose | currency : \'\' : 0 }}</span></a></td><td class="highlight" \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0 }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Commission | currency : \'\' : 0 }}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{ item.GameType | gameXs }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0 }}</td><td \nlayout="row" layout-align="space-between center"><span class="company">\n{{ item.SumByGame.Player.Company.Income | currency : \'\' : 0 }} ({{ (item.SumByGame.Player.Company.Income/item.SumByGame.Player.Amount) | percentage : 1 }})\n</span> <span>{{ item.SumByGame.Player.Amount | currency : \'\' : 0 }}</span></td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.SumByGame.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (item.SumByGame.Player.Company.WinLose/item.SumByGame.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : item.SumByGame.Agent.Commission < 0}">{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : item.SumByGame.Company < 0}">{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody>\n<tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0 }}</td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.Income | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.Income/vm.SumTotal.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</span></div></td><td><div layout="row" \nlayout-align="space-between center"><span>\n{{ vm.SumTotal.Player.Company.WinLose | currency : \'\' : 0}} ({{ (vm.SumTotal.Player.Company.WinLose/vm.SumTotal.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0 }}\n</span></div></td><td ng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">\n{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0 }}</td><td>{{ vm.SumTotal.Agent.Commission | currency : \'\' : 0 }}</td>\n<td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">{{ vm.SumTotal.Agent.Total | currency : \'\' : 0 }}</td><td \nng-class="{\'warn\' : vm.SumTotal.Company < 0}">{{ vm.SumTotal.Company | currency : \'\' : 0 }}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/classification/template/super.html', '<table class="simple report-table classification" ms-responsive-table ng-if="vm.classifications.length"><thead><tr><th \nrowspan="2">Ki\u1EC3u c\u01B0\u1EE3c</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="3">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="3">\n{{$root.User.Username}}</th><th>C\xF4ng ty</th></tr><tr><th>\u0110\u01A1n h\xE0ng</th><th>Ti\u1EC1n c\u01B0\u1EE3c</th><th>Th\u1EAFng/Thua</th><th>\nTh\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua</th><th>Hoa h\u1ED3ng</th><th>T\u1ED5ng c\u1ED9ng</th><th>Th\u1EAFng/Thua\n</th></tr></thead><tbody ng-repeat="item in vm.classifications track by $index"><tr class="game-name"><td colspan="11">\n{{item.GameType | gameXs }}</td></tr><tr ng-repeat="bet in item.Values track by $index"><td><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.BetType | bet }}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Quantity | currency : \'\' : 0}}</a></td><td \nclass="highlight"><a ng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.Amount | currency : \'\' : 0}}</a>\n</td><td class="highlight sum" ng-class="{\'warn\' : bet.Player.WinLose < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Player.WinLose | currency : \'\' : 0}}</a></td><td \nng-class="{\'warn\' : bet.Agent.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.WinLose | currency : \'\' : 0}}</a></td><td><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.Agent.Commission | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Agent.Total < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Agent.Total | currency : \'\' : 0}}</a></td><td \nclass="highlight" ng-class="{\'warn\' : bet.My.WinLose < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.My.WinLose | currency : \'\' : 0}}</a></td><td class="highlight"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.My.Commission | currency : \'\' : 0}}</a></td><td \nclass="sum highlight" ng-class="{\'warn\' : bet.My.Total < 0}"><a ng-click="vm.classify(item.GameType, bet.BetType)">\n{{ bet.My.Total | currency : \'\' : 0}}</a></td><td class="sum" ng-class="{\'warn\' : bet.Company < 0}"><a \nng-click="vm.classify(item.GameType, bet.BetType)">{{ bet.Company | currency : \'\' : 0}}</a></td></tr><tr class="sumany">\n<td>T\u1ED5ng c\u1ED9ng {{item.GameType | gameXs }}</td><td>{{ item.SumByGame.Player.Quantity | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.Player.Amount | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Player.WinLose < 0}">\n{{ item.SumByGame.Player.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Agent.WinLose < 0}">\n{{ item.SumByGame.Agent.WinLose | currency : \'\' : 0}}</td><td>{{ item.SumByGame.Agent.Commission | currency : \'\' : 0}}\n</td><td ng-class="{\'warn\' : item.SumByGame.Agent.Total < 0}">{{ item.SumByGame.Agent.Total | currency : \'\' : 0}}</td>\n<td ng-class="{\'warn\' : item.SumByGame.WinLose < 0}">{{ item.SumByGame.My.WinLose | currency : \'\' : 0}}</td><td>\n{{ item.SumByGame.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Total < 0}">\n{{ item.SumByGame.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : item.SumByGame.Company < 0}">\n{{ item.SumByGame.Company | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td>T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.SumTotal.Player.Quantity | currency : \'\' : 0}}</td><td>{{ vm.SumTotal.Player.Amount | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Player.WinLose < 0}">{{ vm.SumTotal.Player.WinLose | currency : \'\' : 0}}</td><td \nng-class="{\'warn\' : vm.SumTotal.Agent.WinLose < 0}">{{ vm.SumTotal.Agent.WinLose | currency : \'\' : 0}}</td><td>\n{{vm.SumTotal.Agent.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Agent.Total < 0}">\n{{ vm.SumTotal.Agent.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.WinLose < 0}">\n{{ vm.SumTotal.My.WinLose | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Commission < 0}">\n{{ vm.SumTotal.My.Commission | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.My.Total < 0}">\n{{ vm.SumTotal.My.Total | currency : \'\' : 0}}</td><td ng-class="{\'warn\' : vm.SumTotal.Company < 0}">\n{{ vm.SumTotal.Company | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/outstanding/general/template/agency.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th ng-if="vm.report.level !== 5" colspan="2">T\xE0i kho\u1EA3n c\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">{{ vm.report.name }}</th><th \ncolspan="2">C\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th>\n<div class="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Hoa h\u1ED3ng</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span \nclass="column-title">Income</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span>\n</div></th><th><div class="table-header"><span class="column-title">Income</span></div></th><th><div \nclass="table-header"><span class="column-title">Income</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.outstandingReports" ng-click="vm.viewReport(item)" class="cursor-pointer" \nng-class="{\'over\': item.over}"><td>{{item.Username}}</td><td>{{item.FullName}}</td><td class="highlight">\n{{item.Player.Quantity | currency : \'\' : 0}}</td><td class="highlight">{{item.Player.Point | currency : \'\' : 0}}</td><td\n class="highlight">{{item.Player.Amount | currency : \'\' : 0}}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Commission + item.Commission) | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ (item.Descendant.Income + item.Amount) | currency : \'\' : 0 }}</td><td class="highlight">\n{{ item.Parent.Commission | currency : \'\' : 0 }}</td><td class="highlight">{{ item.Parent.Income | currency : \'\' : 0 }}\n</td><td class="sum">\n{{ ((item.Ancestor.Income - item.Parent.Income) + (item.Ancestor.Commission - item.Parent.Commission)) | currency : \'\' : 0 }}\n</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="{{vm.report.level !== 5 ? 10 : 8}}" class="hasRecord"><a \nng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td colspan="2">\nT\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Point | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5">{{ vm.Total.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5">\n{{ vm.Total.Agent.Income | currency : \'\' : 0 }}</td><td>{{ vm.Total.My.Commission | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.My.Income | currency : \'\' : 0 }}</td><td>{{ vm.Total.Company.Income | currency : \'\' : 0 }}</td></tr></tfoot>\n</table>');
    $templateCache.put('app/main/traditional/statement/outstanding/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.outstandingReports.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2"><div class="table-header"><span class="column-title">T\xE0i kho\u1EA3n\n</span></div></th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th><th colspan="2">C\u1EA5p d\u01B0\u1EDBi</th><th colspan="2">\nC\xF4ng ty</th></tr><tr><th><div class="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div \nclass="table-header"><span class="column-title">\u0110i\u1EC3m</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span>\n</div></th><th><div class="table-header"><span class="column-title">Income</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Income</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.outstandingReports" \nng-click="vm.viewReport(item)" class="cursor-pointer" ng-class="{\'over\': item.over}"><td>{{item.Username}}</td><td>\n{{item.FullName}}</td><td class="highlight">{{item.Player.Quantity | currency : \'\' : 0}}</td><td class="highlight">\n{{item.Player.Point | currency : \'\' : 0}}</td><td class="highlight">{{item.Player.Amount | currency : \'\' : 0}}</td><td>\n{{ item.Descendant.Commission + item.Commission | currency : \'\' : 0}}</td><td>\n{{ (item.Descendant.Income + item.Amount) | currency : \'\' : 0}}</td><td class="highlight">\n{{ item.Ancestor.Commission | currency : \'\' : 0}}</td><td class="highlight sum">\n{{ item.Ancestor.Income | currency : \'\' : 0}}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="9" \nclass="hasRecord"><a ng-click="vm.getAgencyReport(vm.page)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord">\n<tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.Total.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Player.Point | currency : \'\' : 0 }}</td><td>{{ vm.Total.Player.Amount | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Agent.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Agent.Income | currency : \'\' : 0 }}</td><td>\n{{ vm.Total.Company.Commission | currency : \'\' : 0 }}</td><td>{{ vm.Total.Company.Income | currency : \'\' : 0 }}</td>\n</tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/outstanding/general/template/member.html', '<table class="simple report-table dataTable" ms-responsive-table ng-if="vm.outstandingReports.length" datatable="ng" \ndt-options="vm.dtOptions"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>\u0110\xE0i</th><th>Th\u1EC3 lo\u1EA1i c\u01B0\u1EE3c</th><th><div class="table-header">\n<span class="column-title">S\u1ED1 m\xE3 c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">\nT\u1ED5ng \u0111i\u1EC3m</span></div></th><th><div class="table-header"><span class="column-title">S\u1ED1 ti\u1EC1n c\u01B0\u1EE3c</span></div></th></tr>\n</thead><tbody><tr ng-repeat="item in vm.outstandingReports" ng-click="vm.memberReport(item, vm.report.name)" \nclass="cursor-pointer"><td>{{vm.report.name}}</td><td>{{item.GameType | gameXs }}</td><td>{{item.BetType | bet }}</td>\n<td>{{item.Quantity | currency : \'\' : 0}}</td><td>{{item.Point | currency : \'\' : 0}}</td><td>\n{{item.Amount | currency : \'\' : 0}}</td></tr></tbody><tfoot><tr><td colspan="3">T\u1ED5ng c\u1ED9ng</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{ vm.outstandingReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/general/template/agency.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.Records.length"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">\nH\u1ED9i vi\xEAn</th><th colspan="3" ng-if="vm.report.level !== 5">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2" ng-if="vm.report.level !== 5">\nC\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">{{ vm.report.name }}</th><th>C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th ng-show="vm.report.level !== 5"><div class="table-header"><span class="column-title">Hoa h\u1ED3ng\n</span></div></th><th ng-if="vm.report.level !== 5"><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng\n</span></div></th></tr></thead><tbody><tr ng-repeat="item in vm.dataReports.Records"><td><a \nng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>{{ item.FullName }}</td><td>\n{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td>{{ item.Player.Amount | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\' : item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</td><td \nng-show="vm.report.level !== 5" class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">\n{{ item.Agent.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" class="highlight">\n{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" class="sum" ng-class="{ \'warn\' : item.AgentPay < 0 }">\n{{ item.AgentPay | currency : \'\' : 0 }}</td><td class="highlight" ng-class="{ \'warn\' : item.My.WinLose < 0 }">\n{{ item.My.WinLose | currency : \'\' : 0 }}</td><td class="highlight">{{ item.My.Commission | currency : \'\' : 0 }}</td><td\n class="sum highlight" ng-class="{ \'warn\' : item.My.Total < 0 }">{{ item.My.Total | currency : \'\' : 0 }}</td><td \nclass="sum" ng-class="{ \'warn\' : item.Company < 0 }">{{ item.Company | currency : \'\' : 0 }}</td></tr></tbody><tfoot \nng-if="vm.hasRecord"><tr><td colspan="{{ vm.report.level === 5 ? 9 : 13 }}" class="hasRecord"><a \nng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot ng-if="!vm.hasRecord"><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</td><td ng-show="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td ng-show="vm.report.level !== 5">{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-if="vm.report.level !== 5" ng-class="{ \'warn\' : vm.dataReports.Sum.Agent.Total < 0 }">\n{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td><td ng-if="vm.report.level !== 5" \nng-class="{ \'warn\' : vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.WinLose < 0 }">{{ vm.dataReports.Sum.My.WinLose | currency : \'\' : 0 }}</td>\n<td>{{ vm.dataReports.Sum.My.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.My.Total < 0 }">{{ vm.dataReports.Sum.My.Total | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : vm.dataReports.Sum.Company < 0 }">{{ vm.dataReports.Sum.Company | currency : \'\' : 0 }}</td></tr>\n</tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/general/template/company.html', '<table class="simple report-table dataTable" datatable="ng" ms-responsive-table ng-if="vm.dataReports.Records.length" \ndt-options="vm.dtOptions"><thead><tr><th rowspan="2">T\xE0i kho\u1EA3n</th><th rowspan="2">T\xEAn</th><th colspan="3">H\u1ED9i vi\xEAn</th>\n<th colspan="3">C\u1EA5p d\u01B0\u1EDBi</th><th rowspan="2">C\u1EA5p d\u01B0\u1EDBi<br>thanh to\xE1n</th><th colspan="3">C\xF4ng ty</th></tr><tr><th><div \nclass="table-header"><span class="column-title">\u0110\u01A1n h\xE0ng</span></div></th><th><div class="table-header"><span \nclass="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th><th><div \nclass="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div class="table-header"><span \nclass="column-title">T\u1ED5ng c\u1ED9ng</span></div></th><th><div class="table-header"><span class="column-title">Th\u1EAFng thua\n</span></div></th><th><div class="table-header"><span class="column-title">Hoa h\u1ED3ng</span></div></th><th><div \nclass="table-header"><span class="column-title">T\u1ED5ng c\u1ED9ng</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports.Records"><td><a ng-click="vm.viewReport(item)">{{ item.Username }}</a></td><td>\n{{ item.FullName }}</td><td>{{ item.Player.Quantity | currency : \'\' : 0 }}</td><td layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.Income | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.Income | percentage : 1 }})</span> \n<span>{{ item.Player.Amount | currency : \'\' : 0 }}</span></td><td class="sum"><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ item.Player.Company.WinLose | currency : \'\' : 0 }} ({{ item.Player.Company.Percent.WinLose | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': item.Player.WinLose < 0 }">{{ item.Player.WinLose | currency : \'\' : 0 }}</span></div>\n</td><td class="highlight" ng-class="{ \'warn\': item.Agent.WinLose < 0 }">{{ item.Agent.WinLose | currency : \'\' : 0 }}\n</td><td class="highlight">{{ item.Agent.Commission | currency : \'\' : 0 }}</td><td class="sum highlight" \nng-class="{ \'warn\': item.Agent.Total < 0 }">{{ item.Agent.Total | currency : \'\' : 0 }}</td><td class="sum" \nng-class="{ \'warn\': item.AgentPay < 0 }">{{ item.AgentPay | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': item.Company.WinLose < 0 }">{{ item.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ item.Company.Commission | currency : \'\' : 0 }}</td><td class="sum" ng-class="{ \'warn\': item.Company.Total < 0 }">\n{{ item.Company.Total | currency : \'\' : 0 }}</td></tr></tbody><tfoot ng-if="vm.hasRecord"><tr><td colspan="12" \nclass="hasRecord"><a ng-click="vm.getChildrenUserReports(vm.nextPage)">Xem ti\u1EBFp</a></td></tr></tfoot><tfoot \nng-if="!vm.hasRecord"><tr><td colspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{ vm.dataReports.Sum.Player.Quantity | currency : \'\' : 0 }}\n</td><td><div layout="row" layout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.Income | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.Income/vm.dataReports.Sum.Player.Amount) | percentage : 1 }})\n</span> <span>{{ vm.dataReports.Sum.Player.Amount | currency : \'\' : 0 }}</span></div></td><td><div layout="row" \nlayout-align="space-between center"><span class="company">\n{{ vm.dataReports.Sum.Player.Company.WinLose | currency : \'\' : 0 }} ({{ (vm.dataReports.Sum.Player.Company.WinLose/vm.dataReports.Sum.Player.WinLose) | percentage : 1 }})\n</span> <span ng-class="{ \'warn\': vm.dataReports.Sum.Player.WinLose < 0 }">\n{{ vm.dataReports.Sum.Player.WinLose | currency : \'\' : 0 }}</span></div></td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.WinLose < 0 }">{{ vm.dataReports.Sum.Agent.WinLose | currency : \'\' : 0 }}\n</td><td>{{ vm.dataReports.Sum.Agent.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Agent.Total < 0 }">{{ vm.dataReports.Sum.Agent.Total | currency : \'\' : 0 }}</td>\n<td ng-class="{ \'warn\': vm.dataReports.Sum.AgentPay < 0 }">{{ vm.dataReports.Sum.AgentPay | currency : \'\' : 0 }}</td><td\n ng-class="{ \'warn\': vm.dataReports.Sum.Company.WinLose < 0 }">\n{{ vm.dataReports.Sum.Company.WinLose | currency : \'\' : 0 }}</td><td>\n{{ vm.dataReports.Sum.Company.Commission | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\': vm.dataReports.Sum.Company.Total < 0 }">{{ vm.dataReports.Sum.Company.Total | currency : \'\' : 0 }}\n</td></tr></tfoot></table>');
    $templateCache.put('app/main/traditional/statement/winLose/general/template/member.html', '<table class="simple report-table dataTable" datatable="ng" dt-options="vm.dtOptions" ms-responsive-table \nng-if="vm.dataReports.length"><thead><tr><th>H\u1ED9i vi\xEAn</th><th>Game</th><th><div class="table-header"><span \nclass="column-title">S\u1ED1 phi\u1EBFu</span></div></th><th><div class="table-header"><span class="column-title">T\u1ED5ng \u0111i\u1EC3m</span>\n</div></th><th><div class="table-header"><span class="column-title">Ti\u1EC1n c\u01B0\u1EE3c</span></div></th><th><div \nclass="table-header"><span class="column-title">Th\u1EAFng thua</span></div></th></tr></thead><tbody><tr \nng-repeat="item in vm.dataReports"><td><a ng-click="vm.viewMemberReport(item)">{{vm.report.name}}</a></td><td>\n{{item.GameType | gameXs }} - {{item.BetType | bet }}</td><td>{{item.Quantity | currency : \'\' : 0 }}</td><td>\n{{item.Point | currency : \'\' : 0 }}</td><td>{{item.Amount | currency : \'\' : 0 }}</td><td \nng-class="{ \'warn\' : item.WinLose < 0 }">{{item.WinLose | currency : \'\' : 0 }}</td></tr></tbody><tfoot><tr><td \ncolspan="2">T\u1ED5ng c\u1ED9ng</td><td>{{vm.dataReports | sumOfValue : \'Quantity\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Point\' | currency : \'\' : 0}}</td><td>\n{{vm.dataReports | sumOfValue : \'Amount\' | currency : \'\' : 0}}</td><td \nng-class="{ \'warn\' : (vm.dataReports | sumOfValue : \'WinLose\') < 0 }">\n{{vm.dataReports | sumOfValue : \'WinLose\' | currency : \'\' : 0}}</td></tr></tfoot></table>');
}]);